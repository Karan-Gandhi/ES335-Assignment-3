{"1": "<UNK>", "2": "\n", "3": "!", "4": "!=", "5": "\"\n\t\t\t\t\t   \"", "6": "\"\n\t\t\t\t\t  \"", "7": "\"\n\t\t\t\t\t\"", "8": "\"\n\t\t\t\t     \"", "9": "\"\n\t\t\t\t    \"", "10": "\"\n\t\t\t\t   \"", "11": "\"\n\t\t\t\t\"", "12": "\"\n\t\t\t       \"", "13": "\"\n\t\t\t     \"", "14": "\"\n\t\t\t   \"", "15": "\"\n\t\t\t\"", "16": "\"\n\t\t\tgoto cpy_name;\n\t\t}\n\t\t\n\t\tname = d_path(&file->f_path, buf, PATH_MAX - sizeof(u64));\n\t\tif (IS_ERR(name)) {\n\t\t\tname = \"", "17": "\"\n\t\t       \"", "18": "\"\n\t\t    \"", "19": "\"\n\t\t   \"", "20": "\"\n\t\t \"", "21": "\"\n\t\t\"", "22": "\"\n\t\tgoto cpy_name;\n\t}\n\ncpy_name:\n\tstrlcpy(tmp, name, sizeof(tmp));\n\tname = tmp;\ngot_name:\n\t\n\tsize = strlen(name)+1;\n\twhile (!IS_ALIGNED(size, sizeof(u64)))\n\t\tname[size++] = '\\0';\n\n\tmmap_event->file_name = name;\n\tmmap_event->file_size = size;\n\tmmap_event->maj = maj;\n\tmmap_event->min = min;\n\tmmap_event->ino = ino;\n\tmmap_event->ino_generation = gen;\n\tmmap_event->prot = prot;\n\tmmap_event->flags = flags;\n\n\tif (!(vma->vm_flags & VM_EXEC))\n\t\tmmap_event->event_id.header.misc |= PERF_RECORD_MISC_MMAP_DATA;\n\n\tmmap_event->event_id.header.size = sizeof(mmap_event->event_id) + size;\n\n\tperf_event_aux(perf_event_mmap_output,\n\t\t       mmap_event,\n\t\t       NULL);\n\n\tkfree(buf);\n}\n\nvoid perf_event_mmap(struct vm_area_struct *vma)\n{\n\tstruct perf_mmap_event mmap_event;\n\n\tif (!atomic_read(&nr_mmap_events))\n\t\treturn;\n\n\tmmap_event = (struct perf_mmap_event){\n\t\t.vma\t= vma,\n\t\t\n\t\t\n\t\t.event_id  = {\n\t\t\t.header = {\n\t\t\t\t.type = PERF_RECORD_MMAP,\n\t\t\t\t.misc = PERF_RECORD_MISC_USER,\n\t\t\t\t\n\t\t\t},\n\t\t\t\n\t\t\t\n\t\t\t.start  = vma->vm_start,\n\t\t\t.len    = vma->vm_end - vma->vm_start,\n\t\t\t.pgoff  = (u64)vma->vm_pgoff << PAGE_SHIFT,\n\t\t},\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t};\n\n\tperf_event_mmap_event(&mmap_event);\n}\n\nvoid perf_event_aux_event(struct perf_event *event, unsigned long head,\n\t\t\t  unsigned long size, u64 flags)\n{\n\tstruct perf_output_handle handle;\n\tstruct perf_sample_data sample;\n\tstruct perf_aux_event {\n\t\tstruct perf_event_header\theader;\n\t\tu64\t\t\t\toffset;\n\t\tu64\t\t\t\tsize;\n\t\tu64\t\t\t\tflags;\n\t} rec = {\n\t\t.header = {\n\t\t\t.type = PERF_RECORD_AUX,\n\t\t\t.misc = 0,\n\t\t\t.size = sizeof(rec),\n\t\t},\n\t\t.offset\t\t= head,\n\t\t.size\t\t= size,\n\t\t.flags\t\t= flags,\n\t};\n\tint ret;\n\n\tperf_event_header__init_id(&rec.header, &sample, event);\n\tret = perf_output_begin(&handle, event, rec.header.size);\n\n\tif (ret)\n\t\treturn;\n\n\tperf_output_put(&handle, rec);\n\tperf_event__output_id_sample(event, &handle, &sample);\n\n\tperf_output_end(&handle);\n}\n\n\n\nstatic void perf_log_throttle(struct perf_event *event, int enable)\n{\n\tstruct perf_output_handle handle;\n\tstruct perf_sample_data sample;\n\tint ret;\n\n\tstruct {\n\t\tstruct perf_event_header\theader;\n\t\tu64\t\t\t\ttime;\n\t\tu64\t\t\t\tid;\n\t\tu64\t\t\t\tstream_id;\n\t} throttle_event = {\n\t\t.header = {\n\t\t\t.type = PERF_RECORD_THROTTLE,\n\t\t\t.misc = 0,\n\t\t\t.size = sizeof(throttle_event),\n\t\t},\n\t\t.time\t\t= perf_event_clock(event),\n\t\t.id\t\t= primary_event_id(event),\n\t\t.stream_id\t= event->id,\n\t};\n\n\tif (enable)\n\t\tthrottle_event.header.type = PERF_RECORD_UNTHROTTLE;\n\n\tperf_event_header__init_id(&throttle_event.header, &sample, event);\n\n\tret = perf_output_begin(&handle, event,\n\t\t\t\tthrottle_event.header.size);\n\tif (ret)\n\t\treturn;\n\n\tperf_output_put(&handle, throttle_event);\n\tperf_event__output_id_sample(event, &handle, &sample);\n\tperf_output_end(&handle);\n}\n\nstatic void perf_log_itrace_start(struct perf_event *event)\n{\n\tstruct perf_output_handle handle;\n\tstruct perf_sample_data sample;\n\tstruct perf_aux_event {\n\t\tstruct perf_event_header        header;\n\t\tu32\t\t\t\tpid;\n\t\tu32\t\t\t\ttid;\n\t} rec;\n\tint ret;\n\n\tif (event->parent)\n\t\tevent = event->parent;\n\n\tif (!(event->pmu->capabilities & PERF_PMU_CAP_ITRACE) ||\n\t    event->hw.itrace_started)\n\t\treturn;\n\n\tevent->hw.itrace_started = 1;\n\n\trec.header.type\t= PERF_RECORD_ITRACE_START;\n\trec.header.misc\t= 0;\n\trec.header.size\t= sizeof(rec);\n\trec.pid\t= perf_event_pid(event, current);\n\trec.tid\t= perf_event_tid(event, current);\n\n\tperf_event_header__init_id(&rec.header, &sample, event);\n\tret = perf_output_begin(&handle, event, rec.header.size);\n\n\tif (ret)\n\t\treturn;\n\n\tperf_output_put(&handle, rec);\n\tperf_event__output_id_sample(event, &handle, &sample);\n\n\tperf_output_end(&handle);\n}\n\n\n\nstatic int __perf_event_overflow(struct perf_event *event,\n\t\t\t\t   int throttle, struct perf_sample_data *data,\n\t\t\t\t   struct pt_regs *regs)\n{\n\tint events = atomic_read(&event->event_limit);\n\tstruct hw_perf_event *hwc = &event->hw;\n\tu64 seq;\n\tint ret = 0;\n\n\t\n\tif (unlikely(!is_sampling_event(event)))\n\t\treturn 0;\n\n\tseq = __this_cpu_read(perf_throttled_seq);\n\tif (seq != hwc->interrupts_seq) {\n\t\thwc->interrupts_seq = seq;\n\t\thwc->interrupts = 1;\n\t} else {\n\t\thwc->interrupts++;\n\t\tif (unlikely(throttle\n\t\t\t     && hwc->interrupts >= max_samples_per_tick)) {\n\t\t\t__this_cpu_inc(perf_throttled_count);\n\t\t\thwc->interrupts = MAX_INTERRUPTS;\n\t\t\tperf_log_throttle(event, 0);\n\t\t\ttick_nohz_full_kick();\n\t\t\tret = 1;\n\t\t}\n\t}\n\n\tif (event->attr.freq) {\n\t\tu64 now = perf_clock();\n\t\ts64 delta = now - hwc->freq_time_stamp;\n\n\t\thwc->freq_time_stamp = now;\n\n\t\tif (delta > 0 && delta < 2*TICK_NSEC)\n\t\t\tperf_adjust_period(event, delta, hwc->last_period, true);\n\t}\n\n\t\n\n\tevent->pending_kill = POLL_IN;\n\tif (events && atomic_dec_and_test(&event->event_limit)) {\n\t\tret = 1;\n\t\tevent->pending_kill = POLL_HUP;\n\t\tevent->pending_disable = 1;\n\t\tirq_work_queue(&event->pending);\n\t}\n\n\tif (event->overflow_handler)\n\t\tevent->overflow_handler(event, data, regs);\n\telse\n\t\tperf_event_output(event, data, regs);\n\n\tif (event->fasync && event->pending_kill) {\n\t\tevent->pending_wakeup = 1;\n\t\tirq_work_queue(&event->pending);\n\t}\n\n\treturn ret;\n}\n\nint perf_event_overflow(struct perf_event *event,\n\t\t\t  struct perf_sample_data *data,\n\t\t\t  struct pt_regs *regs)\n{\n\treturn __perf_event_overflow(event, 1, data, regs);\n}\n\n\n\nstruct swevent_htable {\n\tstruct swevent_hlist\t\t*swevent_hlist;\n\tstruct mutex\t\t\thlist_mutex;\n\tint\t\t\t\thlist_refcount;\n\n\t\n\tint\t\t\t\trecursion[PERF_NR_CONTEXTS];\n\n\t\n\tbool\t\t\t\tonline;\n};\n\nstatic DEFINE_PER_CPU(struct swevent_htable, swevent_htable);\n\n\n\nu64 perf_swevent_set_period(struct perf_event *event)\n{\n\tstruct hw_perf_event *hwc = &event->hw;\n\tu64 period = hwc->last_period;\n\tu64 nr, offset;\n\ts64 old, val;\n\n\thwc->last_period = hwc->sample_period;\n\nagain:\n\told = val = local64_read(&hwc->period_left);\n\tif (val < 0)\n\t\treturn 0;\n\n\tnr = div64_u64(period + val, period);\n\toffset = nr * period;\n\tval -= offset;\n\tif (local64_cmpxchg(&hwc->period_left, old, val) != old)\n\t\tgoto again;\n\n\treturn nr;\n}\n\nstatic void perf_swevent_overflow(struct perf_event *event, u64 overflow,\n\t\t\t\t    struct perf_sample_data *data,\n\t\t\t\t    struct pt_regs *regs)\n{\n\tstruct hw_perf_event *hwc = &event->hw;\n\tint throttle = 0;\n\n\tif (!overflow)\n\t\toverflow = perf_swevent_set_period(event);\n\n\tif (hwc->interrupts == MAX_INTERRUPTS)\n\t\treturn;\n\n\tfor (; overflow; overflow--) {\n\t\tif (__perf_event_overflow(event, throttle,\n\t\t\t\t\t    data, regs)) {\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\t\tthrottle = 1;\n\t}\n}\n\nstatic void perf_swevent_event(struct perf_event *event, u64 nr,\n\t\t\t       struct perf_sample_data *data,\n\t\t\t       struct pt_regs *regs)\n{\n\tstruct hw_perf_event *hwc = &event->hw;\n\n\tlocal64_add(nr, &event->count);\n\n\tif (!regs)\n\t\treturn;\n\n\tif (!is_sampling_event(event))\n\t\treturn;\n\n\tif ((event->attr.sample_type & PERF_SAMPLE_PERIOD) && !event->attr.freq) {\n\t\tdata->period = nr;\n\t\treturn perf_swevent_overflow(event, 1, data, regs);\n\t} else\n\t\tdata->period = event->hw.last_period;\n\n\tif (nr == 1 && hwc->sample_period == 1 && !event->attr.freq)\n\t\treturn perf_swevent_overflow(event, 1, data, regs);\n\n\tif (local64_add_negative(nr, &hwc->period_left))\n\t\treturn;\n\n\tperf_swevent_overflow(event, 0, data, regs);\n}\n\nstatic int perf_exclude_event(struct perf_event *event,\n\t\t\t      struct pt_regs *regs)\n{\n\tif (event->hw.state & PERF_HES_STOPPED)\n\t\treturn 1;\n\n\tif (regs) {\n\t\tif (event->attr.exclude_user && user_mode(regs))\n\t\t\treturn 1;\n\n\t\tif (event->attr.exclude_kernel && !user_mode(regs))\n\t\t\treturn 1;\n\t}\n\n\treturn 0;\n}\n\nstatic int perf_swevent_match(struct perf_event *event,\n\t\t\t\tenum perf_type_id type,\n\t\t\t\tu32 event_id,\n\t\t\t\tstruct perf_sample_data *data,\n\t\t\t\tstruct pt_regs *regs)\n{\n\tif (event->attr.type != type)\n\t\treturn 0;\n\n\tif (event->attr.config != event_id)\n\t\treturn 0;\n\n\tif (perf_exclude_event(event, regs))\n\t\treturn 0;\n\n\treturn 1;\n}\n\nstatic inline u64 swevent_hash(u64 type, u32 event_id)\n{\n\tu64 val = event_id | (type << 32);\n\n\treturn hash_64(val, SWEVENT_HLIST_BITS);\n}\n\nstatic inline struct hlist_head *\n__find_swevent_head(struct swevent_hlist *hlist, u64 type, u32 event_id)\n{\n\tu64 hash = swevent_hash(type, event_id);\n\n\treturn &hlist->heads[hash];\n}\n\n\nstatic inline struct hlist_head *\nfind_swevent_head_rcu(struct swevent_htable *swhash, u64 type, u32 event_id)\n{\n\tstruct swevent_hlist *hlist;\n\n\thlist = rcu_dereference(swhash->swevent_hlist);\n\tif (!hlist)\n\t\treturn NULL;\n\n\treturn __find_swevent_head(hlist, type, event_id);\n}\n\n\nstatic inline struct hlist_head *\nfind_swevent_head(struct swevent_htable *swhash, struct perf_event *event)\n{\n\tstruct swevent_hlist *hlist;\n\tu32 event_id = event->attr.config;\n\tu64 type = event->attr.type;\n\n\t\n\thlist = rcu_dereference_protected(swhash->swevent_hlist,\n\t\t\t\t\t  lockdep_is_held(&event->ctx->lock));\n\tif (!hlist)\n\t\treturn NULL;\n\n\treturn __find_swevent_head(hlist, type, event_id);\n}\n\nstatic void do_perf_sw_event(enum perf_type_id type, u32 event_id,\n\t\t\t\t    u64 nr,\n\t\t\t\t    struct perf_sample_data *data,\n\t\t\t\t    struct pt_regs *regs)\n{\n\tstruct swevent_htable *swhash = this_cpu_ptr(&swevent_htable);\n\tstruct perf_event *event;\n\tstruct hlist_head *head;\n\n\trcu_read_lock();\n\thead = find_swevent_head_rcu(swhash, type, event_id);\n\tif (!head)\n\t\tgoto end;\n\n\thlist_for_each_entry_rcu(event, head, hlist_entry) {\n\t\tif (perf_swevent_match(event, type, event_id, data, regs))\n\t\t\tperf_swevent_event(event, nr, data, regs);\n\t}\nend:\n\trcu_read_unlock();\n}\n\nDEFINE_PER_CPU(struct pt_regs, __perf_regs[4]);\n\nint perf_swevent_get_recursion_context(void)\n{\n\tstruct swevent_htable *swhash = this_cpu_ptr(&swevent_htable);\n\n\treturn get_recursion_context(swhash->recursion);\n}\nEXPORT_SYMBOL_GPL(perf_swevent_get_recursion_context);\n\ninline void perf_swevent_put_recursion_context(int rctx)\n{\n\tstruct swevent_htable *swhash = this_cpu_ptr(&swevent_htable);\n\n\tput_recursion_context(swhash->recursion, rctx);\n}\n\nvoid ___perf_sw_event(u32 event_id, u64 nr, struct pt_regs *regs, u64 addr)\n{\n\tstruct perf_sample_data data;\n\n\tif (WARN_ON_ONCE(!regs))\n\t\treturn;\n\n\tperf_sample_data_init(&data, addr, 0);\n\tdo_perf_sw_event(PERF_TYPE_SOFTWARE, event_id, nr, &data, regs);\n}\n\nvoid __perf_sw_event(u32 event_id, u64 nr, struct pt_regs *regs, u64 addr)\n{\n\tint rctx;\n\n\tpreempt_disable_notrace();\n\trctx = perf_swevent_get_recursion_context();\n\tif (unlikely(rctx < 0))\n\t\tgoto fail;\n\n\t___perf_sw_event(event_id, nr, regs, addr);\n\n\tperf_swevent_put_recursion_context(rctx);\nfail:\n\tpreempt_enable_notrace();\n}\n\nstatic void perf_swevent_read(struct perf_event *event)\n{\n}\n\nstatic int perf_swevent_add(struct perf_event *event, int flags)\n{\n\tstruct swevent_htable *swhash = this_cpu_ptr(&swevent_htable);\n\tstruct hw_perf_event *hwc = &event->hw;\n\tstruct hlist_head *head;\n\n\tif (is_sampling_event(event)) {\n\t\thwc->last_period = hwc->sample_period;\n\t\tperf_swevent_set_period(event);\n\t}\n\n\thwc->state = !(flags & PERF_EF_START);\n\n\thead = find_swevent_head(swhash, event);\n\tif (!head) {\n\t\t\n\t\tWARN_ON_ONCE(swhash->online);\n\t\treturn -EINVAL;\n\t}\n\n\thlist_add_head_rcu(&event->hlist_entry, head);\n\tperf_event_update_userpage(event);\n\n\treturn 0;\n}\n\nstatic void perf_swevent_del(struct perf_event *event, int flags)\n{\n\thlist_del_rcu(&event->hlist_entry);\n}\n\nstatic void perf_swevent_start(struct perf_event *event, int flags)\n{\n\tevent->hw.state = 0;\n}\n\nstatic void perf_swevent_stop(struct perf_event *event, int flags)\n{\n\tevent->hw.state = PERF_HES_STOPPED;\n}\n\n\nstatic inline struct swevent_hlist *\nswevent_hlist_deref(struct swevent_htable *swhash)\n{\n\treturn rcu_dereference_protected(swhash->swevent_hlist,\n\t\t\t\t\t lockdep_is_held(&swhash->hlist_mutex));\n}\n\nstatic void swevent_hlist_release(struct swevent_htable *swhash)\n{\n\tstruct swevent_hlist *hlist = swevent_hlist_deref(swhash);\n\n\tif (!hlist)\n\t\treturn;\n\n\tRCU_INIT_POINTER(swhash->swevent_hlist, NULL);\n\tkfree_rcu(hlist, rcu_head);\n}\n\nstatic void swevent_hlist_put_cpu(struct perf_event *event, int cpu)\n{\n\tstruct swevent_htable *swhash = &per_cpu(swevent_htable, cpu);\n\n\tmutex_lock(&swhash->hlist_mutex);\n\n\tif (!--swhash->hlist_refcount)\n\t\tswevent_hlist_release(swhash);\n\n\tmutex_unlock(&swhash->hlist_mutex);\n}\n\nstatic void swevent_hlist_put(struct perf_event *event)\n{\n\tint cpu;\n\n\tfor_each_possible_cpu(cpu)\n\t\tswevent_hlist_put_cpu(event, cpu);\n}\n\nstatic int swevent_hlist_get_cpu(struct perf_event *event, int cpu)\n{\n\tstruct swevent_htable *swhash = &per_cpu(swevent_htable, cpu);\n\tint err = 0;\n\n\tmutex_lock(&swhash->hlist_mutex);\n\n\tif (!swevent_hlist_deref(swhash) && cpu_online(cpu)) {\n\t\tstruct swevent_hlist *hlist;\n\n\t\thlist = kzalloc(sizeof(*hlist), GFP_KERNEL);\n\t\tif (!hlist) {\n\t\t\terr = -ENOMEM;\n\t\t\tgoto exit;\n\t\t}\n\t\trcu_assign_pointer(swhash->swevent_hlist, hlist);\n\t}\n\tswhash->hlist_refcount++;\nexit:\n\tmutex_unlock(&swhash->hlist_mutex);\n\n\treturn err;\n}\n\nstatic int swevent_hlist_get(struct perf_event *event)\n{\n\tint err;\n\tint cpu, failed_cpu;\n\n\tget_online_cpus();\n\tfor_each_possible_cpu(cpu) {\n\t\terr = swevent_hlist_get_cpu(event, cpu);\n\t\tif (err) {\n\t\t\tfailed_cpu = cpu;\n\t\t\tgoto fail;\n\t\t}\n\t}\n\tput_online_cpus();\n\n\treturn 0;\nfail:\n\tfor_each_possible_cpu(cpu) {\n\t\tif (cpu == failed_cpu)\n\t\t\tbreak;\n\t\tswevent_hlist_put_cpu(event, cpu);\n\t}\n\n\tput_online_cpus();\n\treturn err;\n}\n\nstruct static_key perf_swevent_enabled[PERF_COUNT_SW_MAX];\n\nstatic void sw_perf_event_destroy(struct perf_event *event)\n{\n\tu64 event_id = event->attr.config;\n\n\tWARN_ON(event->parent);\n\n\tstatic_key_slow_dec(&perf_swevent_enabled[event_id]);\n\tswevent_hlist_put(event);\n}\n\nstatic int perf_swevent_init(struct perf_event *event)\n{\n\tu64 event_id = event->attr.config;\n\n\tif (event->attr.type != PERF_TYPE_SOFTWARE)\n\t\treturn -ENOENT;\n\n\t\n\tif (has_branch_stack(event))\n\t\treturn -EOPNOTSUPP;\n\n\tswitch (event_id) {\n\tcase PERF_COUNT_SW_CPU_CLOCK:\n\tcase PERF_COUNT_SW_TASK_CLOCK:\n\t\treturn -ENOENT;\n\n\tdefault:\n\t\tbreak;\n\t}\n\n\tif (event_id >= PERF_COUNT_SW_MAX)\n\t\treturn -ENOENT;\n\n\tif (!event->parent) {\n\t\tint err;\n\n\t\terr = swevent_hlist_get(event);\n\t\tif (err)\n\t\t\treturn err;\n\n\t\tstatic_key_slow_inc(&perf_swevent_enabled[event_id]);\n\t\tevent->destroy = sw_perf_event_destroy;\n\t}\n\n\treturn 0;\n}\n\nstatic struct pmu perf_swevent = {\n\t.task_ctx_nr\t= perf_sw_context,\n\n\t.capabilities\t= PERF_PMU_CAP_NO_NMI,\n\n\t.event_init\t= perf_swevent_init,\n\t.add\t\t= perf_swevent_add,\n\t.del\t\t= perf_swevent_del,\n\t.start\t\t= perf_swevent_start,\n\t.stop\t\t= perf_swevent_stop,\n\t.read\t\t= perf_swevent_read,\n};\n\n#ifdef CONFIG_EVENT_TRACING\n\nstatic int perf_tp_filter_match(struct perf_event *event,\n\t\t\t\tstruct perf_sample_data *data)\n{\n\tvoid *record = data->raw->data;\n\n\tif (likely(!event->filter) || filter_match_preds(event->filter, record))\n\t\treturn 1;\n\treturn 0;\n}\n\nstatic int perf_tp_event_match(struct perf_event *event,\n\t\t\t\tstruct perf_sample_data *data,\n\t\t\t\tstruct pt_regs *regs)\n{\n\tif (event->hw.state & PERF_HES_STOPPED)\n\t\treturn 0;\n\t\n\tif (event->attr.exclude_kernel)\n\t\treturn 0;\n\n\tif (!perf_tp_filter_match(event, data))\n\t\treturn 0;\n\n\treturn 1;\n}\n\nvoid perf_tp_event(u64 addr, u64 count, void *record, int entry_size,\n\t\t   struct pt_regs *regs, struct hlist_head *head, int rctx,\n\t\t   struct task_struct *task)\n{\n\tstruct perf_sample_data data;\n\tstruct perf_event *event;\n\n\tstruct perf_raw_record raw = {\n\t\t.size = entry_size,\n\t\t.data = record,\n\t};\n\n\tperf_sample_data_init(&data, addr, 0);\n\tdata.raw = &raw;\n\n\thlist_for_each_entry_rcu(event, head, hlist_entry) {\n\t\tif (perf_tp_event_match(event, &data, regs))\n\t\t\tperf_swevent_event(event, count, &data, regs);\n\t}\n\n\t\n\tif (task && task != current) {\n\t\tstruct perf_event_context *ctx;\n\t\tstruct trace_entry *entry = record;\n\n\t\trcu_read_lock();\n\t\tctx = rcu_dereference(task->perf_event_ctxp[perf_sw_context]);\n\t\tif (!ctx)\n\t\t\tgoto unlock;\n\n\t\tlist_for_each_entry_rcu(event, &ctx->event_list, event_entry) {\n\t\t\tif (event->attr.type != PERF_TYPE_TRACEPOINT)\n\t\t\t\tcontinue;\n\t\t\tif (event->attr.config != entry->type)\n\t\t\t\tcontinue;\n\t\t\tif (perf_tp_event_match(event, &data, regs))\n\t\t\t\tperf_swevent_event(event, count, &data, regs);\n\t\t}\nunlock:\n\t\trcu_read_unlock();\n\t}\n\n\tperf_swevent_put_recursion_context(rctx);\n}\nEXPORT_SYMBOL_GPL(perf_tp_event);\n\nstatic void tp_perf_event_destroy(struct perf_event *event)\n{\n\tperf_trace_destroy(event);\n}\n\nstatic int perf_tp_event_init(struct perf_event *event)\n{\n\tint err;\n\n\tif (event->attr.type != PERF_TYPE_TRACEPOINT)\n\t\treturn -ENOENT;\n\n\t\n\tif (has_branch_stack(event))\n\t\treturn -EOPNOTSUPP;\n\n\terr = perf_trace_init(event);\n\tif (err)\n\t\treturn err;\n\n\tevent->destroy = tp_perf_event_destroy;\n\n\treturn 0;\n}\n\nstatic struct pmu perf_tracepoint = {\n\t.task_ctx_nr\t= perf_sw_context,\n\n\t.event_init\t= perf_tp_event_init,\n\t.add\t\t= perf_trace_add,\n\t.del\t\t= perf_trace_del,\n\t.start\t\t= perf_swevent_start,\n\t.stop\t\t= perf_swevent_stop,\n\t.read\t\t= perf_swevent_read,\n};\n\nstatic inline void perf_tp_register(void)\n{\n\tperf_pmu_register(&perf_tracepoint, \"", "23": "\"\n\t\"", "24": "\"\n\n\n\n#ifdef CONFIG_SMP\nstatic int\nselect_task_rq_stop(struct task_struct *p, int cpu, int sd_flag, int flags)\n{\n\treturn task_cpu(p); \n}\n#endif \n\nstatic void\ncheck_preempt_curr_stop(struct rq *rq, struct task_struct *p, int flags)\n{\n\t\n}\n\nstatic struct task_struct *\npick_next_task_stop(struct rq *rq, struct task_struct *prev)\n{\n\tstruct task_struct *stop = rq->stop;\n\n\tif (!stop || !task_on_rq_queued(stop))\n\t\treturn NULL;\n\n\tput_prev_task(rq, prev);\n\n\tstop->se.exec_start = rq_clock_task(rq);\n\n\treturn stop;\n}\n\nstatic void\nenqueue_task_stop(struct rq *rq, struct task_struct *p, int flags)\n{\n\tadd_nr_running(rq, 1);\n}\n\nstatic void\ndequeue_task_stop(struct rq *rq, struct task_struct *p, int flags)\n{\n\tsub_nr_running(rq, 1);\n}\n\nstatic void yield_task_stop(struct rq *rq)\n{\n\tBUG(); \n}\n\nstatic void put_prev_task_stop(struct rq *rq, struct task_struct *prev)\n{\n\tstruct task_struct *curr = rq->curr;\n\tu64 delta_exec;\n\n\tdelta_exec = rq_clock_task(rq) - curr->se.exec_start;\n\tif (unlikely((s64)delta_exec < 0))\n\t\tdelta_exec = 0;\n\n\tschedstat_set(curr->se.statistics.exec_max,\n\t\t\tmax(curr->se.statistics.exec_max, delta_exec));\n\n\tcurr->se.sum_exec_runtime += delta_exec;\n\taccount_group_exec_runtime(curr, delta_exec);\n\n\tcurr->se.exec_start = rq_clock_task(rq);\n\tcpuacct_charge(curr, delta_exec);\n}\n\nstatic void task_tick_stop(struct rq *rq, struct task_struct *curr, int queued)\n{\n}\n\nstatic void set_curr_task_stop(struct rq *rq)\n{\n\tstruct task_struct *stop = rq->stop;\n\n\tstop->se.exec_start = rq_clock_task(rq);\n}\n\nstatic void switched_to_stop(struct rq *rq, struct task_struct *p)\n{\n\tBUG(); \n}\n\nstatic void\nprio_changed_stop(struct rq *rq, struct task_struct *p, int oldprio)\n{\n\tBUG(); \n}\n\nstatic unsigned int\nget_rr_interval_stop(struct rq *rq, struct task_struct *task)\n{\n\treturn 0;\n}\n\nstatic void update_curr_stop(struct rq *rq)\n{\n}\n\n\nconst struct sched_class stop_sched_class = {\n\t.next\t\t\t= &dl_sched_class,\n\n\t.enqueue_task\t\t= enqueue_task_stop,\n\t.dequeue_task\t\t= dequeue_task_stop,\n\t.yield_task\t\t= yield_task_stop,\n\n\t.check_preempt_curr\t= check_preempt_curr_stop,\n\n\t.pick_next_task\t\t= pick_next_task_stop,\n\t.put_prev_task\t\t= put_prev_task_stop,\n\n#ifdef CONFIG_SMP\n\t.select_task_rq\t\t= select_task_rq_stop,\n#endif\n\n\t.set_curr_task          = set_curr_task_stop,\n\t.task_tick\t\t= task_tick_stop,\n\n\t.get_rr_interval\t= get_rr_interval_stop,\n\n\t.prio_changed\t\t= prio_changed_stop,\n\t.switched_to\t\t= switched_to_stop,\n\t.update_curr\t\t= update_curr_stop,\n};\n\n\n#include <linux/module.h>\n#include <linux/ftrace.h>\n\n#include \"", "25": "\"\n\n\n\n#ifndef CONFIG_HAVE_FUTEX_CMPXCHG\nint __read_mostly futex_cmpxchg_enabled;\n#endif\n\n\n#define FLAGS_SHARED\t\t0x01\n#define FLAGS_CLOCKRT\t\t0x02\n#define FLAGS_HAS_TIMEOUT\t0x04\n\n\nstruct futex_pi_state {\n\t\n\tstruct list_head list;\n\n\t\n\tstruct rt_mutex pi_mutex;\n\n\tstruct task_struct *owner;\n\tatomic_t refcount;\n\n\tunion futex_key key;\n};\n\n\nstruct futex_q {\n\tstruct plist_node list;\n\n\tstruct task_struct *task;\n\tspinlock_t *lock_ptr;\n\tunion futex_key key;\n\tstruct futex_pi_state *pi_state;\n\tstruct rt_mutex_waiter *rt_waiter;\n\tunion futex_key *requeue_pi_key;\n\tu32 bitset;\n};\n\nstatic const struct futex_q futex_q_init = {\n\t\n\t.key = FUTEX_KEY_INIT,\n\t.bitset = FUTEX_BITSET_MATCH_ANY\n};\n\n\nstruct futex_hash_bucket {\n\tatomic_t waiters;\n\tspinlock_t lock;\n\tstruct plist_head chain;\n} ____cacheline_aligned_in_smp;\n\nstatic unsigned long __read_mostly futex_hashsize;\n\nstatic struct futex_hash_bucket *futex_queues;\n\nstatic inline void futex_get_mm(union futex_key *key)\n{\n\tatomic_inc(&key->private.mm->mm_count);\n\t\n\tsmp_mb__after_atomic();\n}\n\n\nstatic inline void hb_waiters_inc(struct futex_hash_bucket *hb)\n{\n#ifdef CONFIG_SMP\n\tatomic_inc(&hb->waiters);\n\t\n\tsmp_mb__after_atomic();\n#endif\n}\n\n\nstatic inline void hb_waiters_dec(struct futex_hash_bucket *hb)\n{\n#ifdef CONFIG_SMP\n\tatomic_dec(&hb->waiters);\n#endif\n}\n\nstatic inline int hb_waiters_pending(struct futex_hash_bucket *hb)\n{\n#ifdef CONFIG_SMP\n\treturn atomic_read(&hb->waiters);\n#else\n\treturn 1;\n#endif\n}\n\n\nstatic struct futex_hash_bucket *hash_futex(union futex_key *key)\n{\n\tu32 hash = jhash2((u32*)&key->both.word,\n\t\t\t  (sizeof(key->both.word)+sizeof(key->both.ptr))/4,\n\t\t\t  key->both.offset);\n\treturn &futex_queues[hash & (futex_hashsize - 1)];\n}\n\n\nstatic inline int match_futex(union futex_key *key1, union futex_key *key2)\n{\n\treturn (key1 && key2\n\t\t&& key1->both.word == key2->both.word\n\t\t&& key1->both.ptr == key2->both.ptr\n\t\t&& key1->both.offset == key2->both.offset);\n}\n\n\nstatic void get_futex_key_refs(union futex_key *key)\n{\n\tif (!key->both.ptr)\n\t\treturn;\n\n\tswitch (key->both.offset & (FUT_OFF_INODE|FUT_OFF_MMSHARED)) {\n\tcase FUT_OFF_INODE:\n\t\tihold(key->shared.inode); \n\t\tbreak;\n\tcase FUT_OFF_MMSHARED:\n\t\tfutex_get_mm(key); \n\t\tbreak;\n\tdefault:\n\t\t\n\t\tsmp_mb(); \n\t}\n}\n\n\nstatic void drop_futex_key_refs(union futex_key *key)\n{\n\tif (!key->both.ptr) {\n\t\t\n\t\tWARN_ON_ONCE(1);\n\t\treturn;\n\t}\n\n\tswitch (key->both.offset & (FUT_OFF_INODE|FUT_OFF_MMSHARED)) {\n\tcase FUT_OFF_INODE:\n\t\tiput(key->shared.inode);\n\t\tbreak;\n\tcase FUT_OFF_MMSHARED:\n\t\tmmdrop(key->private.mm);\n\t\tbreak;\n\t}\n}\n\n\nstatic int\nget_futex_key(u32 __user *uaddr, int fshared, union futex_key *key, int rw)\n{\n\tunsigned long address = (unsigned long)uaddr;\n\tstruct mm_struct *mm = current->mm;\n\tstruct page *page, *page_head;\n\tint err, ro = 0;\n\n\t\n\tkey->both.offset = address % PAGE_SIZE;\n\tif (unlikely((address % sizeof(u32)) != 0))\n\t\treturn -EINVAL;\n\taddress -= key->both.offset;\n\n\tif (unlikely(!access_ok(rw, uaddr, sizeof(u32))))\n\t\treturn -EFAULT;\n\n\t\n\tif (!fshared) {\n\t\tkey->private.mm = mm;\n\t\tkey->private.address = address;\n\t\tget_futex_key_refs(key);  \n\t\treturn 0;\n\t}\n\nagain:\n\terr = get_user_pages_fast(address, 1, 1, &page);\n\t\n\tif (err == -EFAULT && rw == VERIFY_READ) {\n\t\terr = get_user_pages_fast(address, 1, 0, &page);\n\t\tro = 1;\n\t}\n\tif (err < 0)\n\t\treturn err;\n\telse\n\t\terr = 0;\n\n#ifdef CONFIG_TRANSPARENT_HUGEPAGE\n\tpage_head = page;\n\tif (unlikely(PageTail(page))) {\n\t\tput_page(page);\n\t\t\n\t\tlocal_irq_disable();\n\t\tif (likely(__get_user_pages_fast(address, 1, !ro, &page) == 1)) {\n\t\t\tpage_head = compound_head(page);\n\t\t\t\n\t\t\tif (page != page_head) {\n\t\t\t\tget_page(page_head);\n\t\t\t\tput_page(page);\n\t\t\t}\n\t\t\tlocal_irq_enable();\n\t\t} else {\n\t\t\tlocal_irq_enable();\n\t\t\tgoto again;\n\t\t}\n\t}\n#else\n\tpage_head = compound_head(page);\n\tif (page != page_head) {\n\t\tget_page(page_head);\n\t\tput_page(page);\n\t}\n#endif\n\n\tlock_page(page_head);\n\n\t\n\tif (!page_head->mapping) {\n\t\tint shmem_swizzled = PageSwapCache(page_head);\n\t\tunlock_page(page_head);\n\t\tput_page(page_head);\n\t\tif (shmem_swizzled)\n\t\t\tgoto again;\n\t\treturn -EFAULT;\n\t}\n\n\t\n\tif (PageAnon(page_head)) {\n\t\t\n\t\tif (ro) {\n\t\t\terr = -EFAULT;\n\t\t\tgoto out;\n\t\t}\n\n\t\tkey->both.offset |= FUT_OFF_MMSHARED; \n\t\tkey->private.mm = mm;\n\t\tkey->private.address = address;\n\t} else {\n\t\tkey->both.offset |= FUT_OFF_INODE; \n\t\tkey->shared.inode = page_head->mapping->host;\n\t\tkey->shared.pgoff = basepage_index(page);\n\t}\n\n\tget_futex_key_refs(key); \n\nout:\n\tunlock_page(page_head);\n\tput_page(page_head);\n\treturn err;\n}\n\nstatic inline void put_futex_key(union futex_key *key)\n{\n\tdrop_futex_key_refs(key);\n}\n\n\nstatic int fault_in_user_writeable(u32 __user *uaddr)\n{\n\tstruct mm_struct *mm = current->mm;\n\tint ret;\n\n\tdown_read(&mm->mmap_sem);\n\tret = fixup_user_fault(current, mm, (unsigned long)uaddr,\n\t\t\t       FAULT_FLAG_WRITE);\n\tup_read(&mm->mmap_sem);\n\n\treturn ret < 0 ? ret : 0;\n}\n\n\nstatic struct futex_q *futex_top_waiter(struct futex_hash_bucket *hb,\n\t\t\t\t\tunion futex_key *key)\n{\n\tstruct futex_q *this;\n\n\tplist_for_each_entry(this, &hb->chain, list) {\n\t\tif (match_futex(&this->key, key))\n\t\t\treturn this;\n\t}\n\treturn NULL;\n}\n\nstatic int cmpxchg_futex_value_locked(u32 *curval, u32 __user *uaddr,\n\t\t\t\t      u32 uval, u32 newval)\n{\n\tint ret;\n\n\tpagefault_disable();\n\tret = futex_atomic_cmpxchg_inatomic(curval, uaddr, uval, newval);\n\tpagefault_enable();\n\n\treturn ret;\n}\n\nstatic int get_futex_value_locked(u32 *dest, u32 __user *from)\n{\n\tint ret;\n\n\tpagefault_disable();\n\tret = __copy_from_user_inatomic(dest, from, sizeof(u32));\n\tpagefault_enable();\n\n\treturn ret ? -EFAULT : 0;\n}\n\n\n\nstatic int refill_pi_state_cache(void)\n{\n\tstruct futex_pi_state *pi_state;\n\n\tif (likely(current->pi_state_cache))\n\t\treturn 0;\n\n\tpi_state = kzalloc(sizeof(*pi_state), GFP_KERNEL);\n\n\tif (!pi_state)\n\t\treturn -ENOMEM;\n\n\tINIT_LIST_HEAD(&pi_state->list);\n\t\n\tpi_state->owner = NULL;\n\tatomic_set(&pi_state->refcount, 1);\n\tpi_state->key = FUTEX_KEY_INIT;\n\n\tcurrent->pi_state_cache = pi_state;\n\n\treturn 0;\n}\n\nstatic struct futex_pi_state * alloc_pi_state(void)\n{\n\tstruct futex_pi_state *pi_state = current->pi_state_cache;\n\n\tWARN_ON(!pi_state);\n\tcurrent->pi_state_cache = NULL;\n\n\treturn pi_state;\n}\n\n\nstatic void free_pi_state(struct futex_pi_state *pi_state)\n{\n\tif (!pi_state)\n\t\treturn;\n\n\tif (!atomic_dec_and_test(&pi_state->refcount))\n\t\treturn;\n\n\t\n\tif (pi_state->owner) {\n\t\traw_spin_lock_irq(&pi_state->owner->pi_lock);\n\t\tlist_del_init(&pi_state->list);\n\t\traw_spin_unlock_irq(&pi_state->owner->pi_lock);\n\n\t\trt_mutex_proxy_unlock(&pi_state->pi_mutex, pi_state->owner);\n\t}\n\n\tif (current->pi_state_cache)\n\t\tkfree(pi_state);\n\telse {\n\t\t\n\t\tpi_state->owner = NULL;\n\t\tatomic_set(&pi_state->refcount, 1);\n\t\tcurrent->pi_state_cache = pi_state;\n\t}\n}\n\n\nstatic struct task_struct * futex_find_get_task(pid_t pid)\n{\n\tstruct task_struct *p;\n\n\trcu_read_lock();\n\tp = find_task_by_vpid(pid);\n\tif (p)\n\t\tget_task_struct(p);\n\n\trcu_read_unlock();\n\n\treturn p;\n}\n\n\nvoid exit_pi_state_list(struct task_struct *curr)\n{\n\tstruct list_head *next, *head = &curr->pi_state_list;\n\tstruct futex_pi_state *pi_state;\n\tstruct futex_hash_bucket *hb;\n\tunion futex_key key = FUTEX_KEY_INIT;\n\n\tif (!futex_cmpxchg_enabled)\n\t\treturn;\n\t\n\traw_spin_lock_irq(&curr->pi_lock);\n\twhile (!list_empty(head)) {\n\n\t\tnext = head->next;\n\t\tpi_state = list_entry(next, struct futex_pi_state, list);\n\t\tkey = pi_state->key;\n\t\thb = hash_futex(&key);\n\t\traw_spin_unlock_irq(&curr->pi_lock);\n\n\t\tspin_lock(&hb->lock);\n\n\t\traw_spin_lock_irq(&curr->pi_lock);\n\t\t\n\t\tif (head->next != next) {\n\t\t\tspin_unlock(&hb->lock);\n\t\t\tcontinue;\n\t\t}\n\n\t\tWARN_ON(pi_state->owner != curr);\n\t\tWARN_ON(list_empty(&pi_state->list));\n\t\tlist_del_init(&pi_state->list);\n\t\tpi_state->owner = NULL;\n\t\traw_spin_unlock_irq(&curr->pi_lock);\n\n\t\trt_mutex_unlock(&pi_state->pi_mutex);\n\n\t\tspin_unlock(&hb->lock);\n\n\t\traw_spin_lock_irq(&curr->pi_lock);\n\t}\n\traw_spin_unlock_irq(&curr->pi_lock);\n}\n\n\n\n\nstatic int attach_to_pi_state(u32 uval, struct futex_pi_state *pi_state,\n\t\t\t      struct futex_pi_state **ps)\n{\n\tpid_t pid = uval & FUTEX_TID_MASK;\n\n\t\n\tif (unlikely(!pi_state))\n\t\treturn -EINVAL;\n\n\tWARN_ON(!atomic_read(&pi_state->refcount));\n\n\t\n\tif (uval & FUTEX_OWNER_DIED) {\n\t\t\n\t\tif (!pi_state->owner) {\n\t\t\t\n\t\t\tif (pid)\n\t\t\t\treturn -EINVAL;\n\t\t\t\n\t\t\tgoto out_state;\n\t\t}\n\n\t\t\n\t\tif (!pid)\n\t\t\tgoto out_state;\n\t} else {\n\t\t\n\t\tif (!pi_state->owner)\n\t\t\treturn -EINVAL;\n\t}\n\n\t\n\tif (pid != task_pid_vnr(pi_state->owner))\n\t\treturn -EINVAL;\nout_state:\n\tatomic_inc(&pi_state->refcount);\n\t*ps = pi_state;\n\treturn 0;\n}\n\n\nstatic int attach_to_pi_owner(u32 uval, union futex_key *key,\n\t\t\t      struct futex_pi_state **ps)\n{\n\tpid_t pid = uval & FUTEX_TID_MASK;\n\tstruct futex_pi_state *pi_state;\n\tstruct task_struct *p;\n\n\t\n\tif (!pid)\n\t\treturn -ESRCH;\n\tp = futex_find_get_task(pid);\n\tif (!p)\n\t\treturn -ESRCH;\n\n\tif (unlikely(p->flags & PF_KTHREAD)) {\n\t\tput_task_struct(p);\n\t\treturn -EPERM;\n\t}\n\n\t\n\traw_spin_lock_irq(&p->pi_lock);\n\tif (unlikely(p->flags & PF_EXITING)) {\n\t\t\n\t\tint ret = (p->flags & PF_EXITPIDONE) ? -ESRCH : -EAGAIN;\n\n\t\traw_spin_unlock_irq(&p->pi_lock);\n\t\tput_task_struct(p);\n\t\treturn ret;\n\t}\n\n\t\n\tpi_state = alloc_pi_state();\n\n\t\n\trt_mutex_init_proxy_locked(&pi_state->pi_mutex, p);\n\n\t\n\tpi_state->key = *key;\n\n\tWARN_ON(!list_empty(&pi_state->list));\n\tlist_add(&pi_state->list, &p->pi_state_list);\n\tpi_state->owner = p;\n\traw_spin_unlock_irq(&p->pi_lock);\n\n\tput_task_struct(p);\n\n\t*ps = pi_state;\n\n\treturn 0;\n}\n\nstatic int lookup_pi_state(u32 uval, struct futex_hash_bucket *hb,\n\t\t\t   union futex_key *key, struct futex_pi_state **ps)\n{\n\tstruct futex_q *match = futex_top_waiter(hb, key);\n\n\t\n\tif (match)\n\t\treturn attach_to_pi_state(uval, match->pi_state, ps);\n\n\t\n\treturn attach_to_pi_owner(uval, key, ps);\n}\n\nstatic int lock_pi_update_atomic(u32 __user *uaddr, u32 uval, u32 newval)\n{\n\tu32 uninitialized_var(curval);\n\n\tif (unlikely(cmpxchg_futex_value_locked(&curval, uaddr, uval, newval)))\n\t\treturn -EFAULT;\n\n\t\n\treturn curval != uval ? -EAGAIN : 0;\n}\n\n\nstatic int futex_lock_pi_atomic(u32 __user *uaddr, struct futex_hash_bucket *hb,\n\t\t\t\tunion futex_key *key,\n\t\t\t\tstruct futex_pi_state **ps,\n\t\t\t\tstruct task_struct *task, int set_waiters)\n{\n\tu32 uval, newval, vpid = task_pid_vnr(task);\n\tstruct futex_q *match;\n\tint ret;\n\n\t\n\tif (get_futex_value_locked(&uval, uaddr))\n\t\treturn -EFAULT;\n\n\t\n\tif ((unlikely((uval & FUTEX_TID_MASK) == vpid)))\n\t\treturn -EDEADLK;\n\n\t\n\tmatch = futex_top_waiter(hb, key);\n\tif (match)\n\t\treturn attach_to_pi_state(uval, match->pi_state, ps);\n\n\t\n\tif (!(uval & FUTEX_TID_MASK)) {\n\t\t\n\t\tnewval = uval & FUTEX_OWNER_DIED;\n\t\tnewval |= vpid;\n\n\t\t\n\t\tif (set_waiters)\n\t\t\tnewval |= FUTEX_WAITERS;\n\n\t\tret = lock_pi_update_atomic(uaddr, uval, newval);\n\t\t\n\t\treturn ret < 0 ? ret : 1;\n\t}\n\n\t\n\tnewval = uval | FUTEX_WAITERS;\n\tret = lock_pi_update_atomic(uaddr, uval, newval);\n\tif (ret)\n\t\treturn ret;\n\t\n\treturn attach_to_pi_owner(uval, key, ps);\n}\n\n\nstatic void __unqueue_futex(struct futex_q *q)\n{\n\tstruct futex_hash_bucket *hb;\n\n\tif (WARN_ON_SMP(!q->lock_ptr || !spin_is_locked(q->lock_ptr))\n\t    || WARN_ON(plist_node_empty(&q->list)))\n\t\treturn;\n\n\thb = container_of(q->lock_ptr, struct futex_hash_bucket, lock);\n\tplist_del(&q->list, &hb->chain);\n\thb_waiters_dec(hb);\n}\n\n\nstatic void wake_futex(struct futex_q *q)\n{\n\tstruct task_struct *p = q->task;\n\n\tif (WARN(q->pi_state || q->rt_waiter, \"", "26": "\"\n\n\n\nstatic void\nrt_mutex_set_owner(struct rt_mutex *lock, struct task_struct *owner)\n{\n\tunsigned long val = (unsigned long)owner;\n\n\tif (rt_mutex_has_waiters(lock))\n\t\tval |= RT_MUTEX_HAS_WAITERS;\n\n\tlock->owner = (struct task_struct *)val;\n}\n\nstatic inline void clear_rt_mutex_waiters(struct rt_mutex *lock)\n{\n\tlock->owner = (struct task_struct *)\n\t\t\t((unsigned long)lock->owner & ~RT_MUTEX_HAS_WAITERS);\n}\n\nstatic void fixup_rt_mutex_waiters(struct rt_mutex *lock)\n{\n\tif (!rt_mutex_has_waiters(lock))\n\t\tclear_rt_mutex_waiters(lock);\n}\n\n\n#if defined(__HAVE_ARCH_CMPXCHG) && !defined(CONFIG_DEBUG_RT_MUTEXES)\n# define rt_mutex_cmpxchg(l,c,n)\t(cmpxchg(&l->owner, c, n) == c)\nstatic inline void mark_rt_mutex_waiters(struct rt_mutex *lock)\n{\n\tunsigned long owner, *p = (unsigned long *) &lock->owner;\n\n\tdo {\n\t\towner = *p;\n\t} while (cmpxchg(p, owner, owner | RT_MUTEX_HAS_WAITERS) != owner);\n}\n\n\nstatic inline bool unlock_rt_mutex_safe(struct rt_mutex *lock)\n\t__releases(lock->wait_lock)\n{\n\tstruct task_struct *owner = rt_mutex_owner(lock);\n\n\tclear_rt_mutex_waiters(lock);\n\traw_spin_unlock(&lock->wait_lock);\n\t\n\treturn rt_mutex_cmpxchg(lock, owner, NULL);\n}\n\n#else\n# define rt_mutex_cmpxchg(l,c,n)\t(0)\nstatic inline void mark_rt_mutex_waiters(struct rt_mutex *lock)\n{\n\tlock->owner = (struct task_struct *)\n\t\t\t((unsigned long)lock->owner | RT_MUTEX_HAS_WAITERS);\n}\n\n\nstatic inline bool unlock_rt_mutex_safe(struct rt_mutex *lock)\n\t__releases(lock->wait_lock)\n{\n\tlock->owner = NULL;\n\traw_spin_unlock(&lock->wait_lock);\n\treturn true;\n}\n#endif\n\nstatic inline int\nrt_mutex_waiter_less(struct rt_mutex_waiter *left,\n\t\t     struct rt_mutex_waiter *right)\n{\n\tif (left->prio < right->prio)\n\t\treturn 1;\n\n\t\n\tif (dl_prio(left->prio))\n\t\treturn (left->task->dl.deadline < right->task->dl.deadline);\n\n\treturn 0;\n}\n\nstatic void\nrt_mutex_enqueue(struct rt_mutex *lock, struct rt_mutex_waiter *waiter)\n{\n\tstruct rb_node **link = &lock->waiters.rb_node;\n\tstruct rb_node *parent = NULL;\n\tstruct rt_mutex_waiter *entry;\n\tint leftmost = 1;\n\n\twhile (*link) {\n\t\tparent = *link;\n\t\tentry = rb_entry(parent, struct rt_mutex_waiter, tree_entry);\n\t\tif (rt_mutex_waiter_less(waiter, entry)) {\n\t\t\tlink = &parent->rb_left;\n\t\t} else {\n\t\t\tlink = &parent->rb_right;\n\t\t\tleftmost = 0;\n\t\t}\n\t}\n\n\tif (leftmost)\n\t\tlock->waiters_leftmost = &waiter->tree_entry;\n\n\trb_link_node(&waiter->tree_entry, parent, link);\n\trb_insert_color(&waiter->tree_entry, &lock->waiters);\n}\n\nstatic void\nrt_mutex_dequeue(struct rt_mutex *lock, struct rt_mutex_waiter *waiter)\n{\n\tif (RB_EMPTY_NODE(&waiter->tree_entry))\n\t\treturn;\n\n\tif (lock->waiters_leftmost == &waiter->tree_entry)\n\t\tlock->waiters_leftmost = rb_next(&waiter->tree_entry);\n\n\trb_erase(&waiter->tree_entry, &lock->waiters);\n\tRB_CLEAR_NODE(&waiter->tree_entry);\n}\n\nstatic void\nrt_mutex_enqueue_pi(struct task_struct *task, struct rt_mutex_waiter *waiter)\n{\n\tstruct rb_node **link = &task->pi_waiters.rb_node;\n\tstruct rb_node *parent = NULL;\n\tstruct rt_mutex_waiter *entry;\n\tint leftmost = 1;\n\n\twhile (*link) {\n\t\tparent = *link;\n\t\tentry = rb_entry(parent, struct rt_mutex_waiter, pi_tree_entry);\n\t\tif (rt_mutex_waiter_less(waiter, entry)) {\n\t\t\tlink = &parent->rb_left;\n\t\t} else {\n\t\t\tlink = &parent->rb_right;\n\t\t\tleftmost = 0;\n\t\t}\n\t}\n\n\tif (leftmost)\n\t\ttask->pi_waiters_leftmost = &waiter->pi_tree_entry;\n\n\trb_link_node(&waiter->pi_tree_entry, parent, link);\n\trb_insert_color(&waiter->pi_tree_entry, &task->pi_waiters);\n}\n\nstatic void\nrt_mutex_dequeue_pi(struct task_struct *task, struct rt_mutex_waiter *waiter)\n{\n\tif (RB_EMPTY_NODE(&waiter->pi_tree_entry))\n\t\treturn;\n\n\tif (task->pi_waiters_leftmost == &waiter->pi_tree_entry)\n\t\ttask->pi_waiters_leftmost = rb_next(&waiter->pi_tree_entry);\n\n\trb_erase(&waiter->pi_tree_entry, &task->pi_waiters);\n\tRB_CLEAR_NODE(&waiter->pi_tree_entry);\n}\n\n\nint rt_mutex_getprio(struct task_struct *task)\n{\n\tif (likely(!task_has_pi_waiters(task)))\n\t\treturn task->normal_prio;\n\n\treturn min(task_top_pi_waiter(task)->prio,\n\t\t   task->normal_prio);\n}\n\nstruct task_struct *rt_mutex_get_top_task(struct task_struct *task)\n{\n\tif (likely(!task_has_pi_waiters(task)))\n\t\treturn NULL;\n\n\treturn task_top_pi_waiter(task)->task;\n}\n\n\nint rt_mutex_check_prio(struct task_struct *task, int newprio)\n{\n\tif (!task_has_pi_waiters(task))\n\t\treturn 0;\n\n\treturn task_top_pi_waiter(task)->task->prio <= newprio;\n}\n\n\nstatic void __rt_mutex_adjust_prio(struct task_struct *task)\n{\n\tint prio = rt_mutex_getprio(task);\n\n\tif (task->prio != prio || dl_prio(prio))\n\t\trt_mutex_setprio(task, prio);\n}\n\n\nstatic void rt_mutex_adjust_prio(struct task_struct *task)\n{\n\tunsigned long flags;\n\n\traw_spin_lock_irqsave(&task->pi_lock, flags);\n\t__rt_mutex_adjust_prio(task);\n\traw_spin_unlock_irqrestore(&task->pi_lock, flags);\n}\n\n\nstatic bool rt_mutex_cond_detect_deadlock(struct rt_mutex_waiter *waiter,\n\t\t\t\t\t  enum rtmutex_chainwalk chwalk)\n{\n\t\n\treturn debug_rt_mutex_detect_deadlock(waiter, chwalk);\n}\n\n\nint max_lock_depth = 1024;\n\nstatic inline struct rt_mutex *task_blocked_on_lock(struct task_struct *p)\n{\n\treturn p->pi_blocked_on ? p->pi_blocked_on->lock : NULL;\n}\n\n\nstatic int rt_mutex_adjust_prio_chain(struct task_struct *task,\n\t\t\t\t      enum rtmutex_chainwalk chwalk,\n\t\t\t\t      struct rt_mutex *orig_lock,\n\t\t\t\t      struct rt_mutex *next_lock,\n\t\t\t\t      struct rt_mutex_waiter *orig_waiter,\n\t\t\t\t      struct task_struct *top_task)\n{\n\tstruct rt_mutex_waiter *waiter, *top_waiter = orig_waiter;\n\tstruct rt_mutex_waiter *prerequeue_top_waiter;\n\tint ret = 0, depth = 0;\n\tstruct rt_mutex *lock;\n\tbool detect_deadlock;\n\tunsigned long flags;\n\tbool requeue = true;\n\n\tdetect_deadlock = rt_mutex_cond_detect_deadlock(orig_waiter, chwalk);\n\n\t\n again:\n\t\n\tif (++depth > max_lock_depth) {\n\t\tstatic int prev_max;\n\n\t\t\n\t\tif (prev_max != max_lock_depth) {\n\t\t\tprev_max = max_lock_depth;\n\t\t\tprintk(KERN_WARNING \"", "27": "\"\n\n\nDEFINE_PER_CPU(struct hrtimer_cpu_base, hrtimer_bases) =\n{\n\n\t.lock = __RAW_SPIN_LOCK_UNLOCKED(hrtimer_bases.lock),\n\t.clock_base =\n\t{\n\t\t{\n\t\t\t.index = HRTIMER_BASE_MONOTONIC,\n\t\t\t.clockid = CLOCK_MONOTONIC,\n\t\t\t.get_time = &ktime_get,\n\t\t\t.resolution = KTIME_LOW_RES,\n\t\t},\n\t\t{\n\t\t\t.index = HRTIMER_BASE_REALTIME,\n\t\t\t.clockid = CLOCK_REALTIME,\n\t\t\t.get_time = &ktime_get_real,\n\t\t\t.resolution = KTIME_LOW_RES,\n\t\t},\n\t\t{\n\t\t\t.index = HRTIMER_BASE_BOOTTIME,\n\t\t\t.clockid = CLOCK_BOOTTIME,\n\t\t\t.get_time = &ktime_get_boottime,\n\t\t\t.resolution = KTIME_LOW_RES,\n\t\t},\n\t\t{\n\t\t\t.index = HRTIMER_BASE_TAI,\n\t\t\t.clockid = CLOCK_TAI,\n\t\t\t.get_time = &ktime_get_clocktai,\n\t\t\t.resolution = KTIME_LOW_RES,\n\t\t},\n\t}\n};\n\nstatic const int hrtimer_clock_to_base_table[MAX_CLOCKS] = {\n\t[CLOCK_REALTIME]\t= HRTIMER_BASE_REALTIME,\n\t[CLOCK_MONOTONIC]\t= HRTIMER_BASE_MONOTONIC,\n\t[CLOCK_BOOTTIME]\t= HRTIMER_BASE_BOOTTIME,\n\t[CLOCK_TAI]\t\t= HRTIMER_BASE_TAI,\n};\n\nstatic inline int hrtimer_clockid_to_base(clockid_t clock_id)\n{\n\treturn hrtimer_clock_to_base_table[clock_id];\n}\n\n\n\nstatic void hrtimer_get_softirq_time(struct hrtimer_cpu_base *base)\n{\n\tktime_t xtim, mono, boot, tai;\n\tktime_t off_real, off_boot, off_tai;\n\n\tmono = ktime_get_update_offsets_tick(&off_real, &off_boot, &off_tai);\n\tboot = ktime_add(mono, off_boot);\n\txtim = ktime_add(mono, off_real);\n\ttai = ktime_add(mono, off_tai);\n\n\tbase->clock_base[HRTIMER_BASE_REALTIME].softirq_time = xtim;\n\tbase->clock_base[HRTIMER_BASE_MONOTONIC].softirq_time = mono;\n\tbase->clock_base[HRTIMER_BASE_BOOTTIME].softirq_time = boot;\n\tbase->clock_base[HRTIMER_BASE_TAI].softirq_time = tai;\n}\n\n\n#ifdef CONFIG_SMP\n\n\nstatic\nstruct hrtimer_clock_base *lock_hrtimer_base(const struct hrtimer *timer,\n\t\t\t\t\t     unsigned long *flags)\n{\n\tstruct hrtimer_clock_base *base;\n\n\tfor (;;) {\n\t\tbase = timer->base;\n\t\tif (likely(base != NULL)) {\n\t\t\traw_spin_lock_irqsave(&base->cpu_base->lock, *flags);\n\t\t\tif (likely(base == timer->base))\n\t\t\t\treturn base;\n\t\t\t\n\t\t\traw_spin_unlock_irqrestore(&base->cpu_base->lock, *flags);\n\t\t}\n\t\tcpu_relax();\n\t}\n}\n\n\nstatic int\nhrtimer_check_target(struct hrtimer *timer, struct hrtimer_clock_base *new_base)\n{\n#ifdef CONFIG_HIGH_RES_TIMERS\n\tktime_t expires;\n\n\tif (!new_base->cpu_base->hres_active)\n\t\treturn 0;\n\n\texpires = ktime_sub(hrtimer_get_expires(timer), new_base->offset);\n\treturn expires.tv64 <= new_base->cpu_base->expires_next.tv64;\n#else\n\treturn 0;\n#endif\n}\n\n\nstatic inline struct hrtimer_clock_base *\nswitch_hrtimer_base(struct hrtimer *timer, struct hrtimer_clock_base *base,\n\t\t    int pinned)\n{\n\tstruct hrtimer_clock_base *new_base;\n\tstruct hrtimer_cpu_base *new_cpu_base;\n\tint this_cpu = smp_processor_id();\n\tint cpu = get_nohz_timer_target(pinned);\n\tint basenum = base->index;\n\nagain:\n\tnew_cpu_base = &per_cpu(hrtimer_bases, cpu);\n\tnew_base = &new_cpu_base->clock_base[basenum];\n\n\tif (base != new_base) {\n\t\t\n\t\tif (unlikely(hrtimer_callback_running(timer)))\n\t\t\treturn base;\n\n\t\t\n\t\ttimer->base = NULL;\n\t\traw_spin_unlock(&base->cpu_base->lock);\n\t\traw_spin_lock(&new_base->cpu_base->lock);\n\n\t\tif (cpu != this_cpu && hrtimer_check_target(timer, new_base)) {\n\t\t\tcpu = this_cpu;\n\t\t\traw_spin_unlock(&new_base->cpu_base->lock);\n\t\t\traw_spin_lock(&base->cpu_base->lock);\n\t\t\ttimer->base = base;\n\t\t\tgoto again;\n\t\t}\n\t\ttimer->base = new_base;\n\t} else {\n\t\tif (cpu != this_cpu && hrtimer_check_target(timer, new_base)) {\n\t\t\tcpu = this_cpu;\n\t\t\tgoto again;\n\t\t}\n\t}\n\treturn new_base;\n}\n\n#else \n\nstatic inline struct hrtimer_clock_base *\nlock_hrtimer_base(const struct hrtimer *timer, unsigned long *flags)\n{\n\tstruct hrtimer_clock_base *base = timer->base;\n\n\traw_spin_lock_irqsave(&base->cpu_base->lock, *flags);\n\n\treturn base;\n}\n\n# define switch_hrtimer_base(t, b, p)\t(b)\n\n#endif\t\n\n\n#if BITS_PER_LONG < 64\n\nu64 __ktime_divns(const ktime_t kt, s64 div)\n{\n\tu64 dclc;\n\tint sft = 0;\n\n\tdclc = ktime_to_ns(kt);\n\t\n\twhile (div >> 32) {\n\t\tsft++;\n\t\tdiv >>= 1;\n\t}\n\tdclc >>= sft;\n\tdo_div(dclc, (unsigned long) div);\n\n\treturn dclc;\n}\nEXPORT_SYMBOL_GPL(__ktime_divns);\n#endif \n\n\nktime_t ktime_add_safe(const ktime_t lhs, const ktime_t rhs)\n{\n\tktime_t res = ktime_add(lhs, rhs);\n\n\t\n\tif (res.tv64 < 0 || res.tv64 < lhs.tv64 || res.tv64 < rhs.tv64)\n\t\tres = ktime_set(KTIME_SEC_MAX, 0);\n\n\treturn res;\n}\n\nEXPORT_SYMBOL_GPL(ktime_add_safe);\n\n#ifdef CONFIG_DEBUG_OBJECTS_TIMERS\n\nstatic struct debug_obj_descr hrtimer_debug_descr;\n\nstatic void *hrtimer_debug_hint(void *addr)\n{\n\treturn ((struct hrtimer *) addr)->function;\n}\n\n\nstatic int hrtimer_fixup_init(void *addr, enum debug_obj_state state)\n{\n\tstruct hrtimer *timer = addr;\n\n\tswitch (state) {\n\tcase ODEBUG_STATE_ACTIVE:\n\t\thrtimer_cancel(timer);\n\t\tdebug_object_init(timer, &hrtimer_debug_descr);\n\t\treturn 1;\n\tdefault:\n\t\treturn 0;\n\t}\n}\n\n\nstatic int hrtimer_fixup_activate(void *addr, enum debug_obj_state state)\n{\n\tswitch (state) {\n\n\tcase ODEBUG_STATE_NOTAVAILABLE:\n\t\tWARN_ON_ONCE(1);\n\t\treturn 0;\n\n\tcase ODEBUG_STATE_ACTIVE:\n\t\tWARN_ON(1);\n\n\tdefault:\n\t\treturn 0;\n\t}\n}\n\n\nstatic int hrtimer_fixup_free(void *addr, enum debug_obj_state state)\n{\n\tstruct hrtimer *timer = addr;\n\n\tswitch (state) {\n\tcase ODEBUG_STATE_ACTIVE:\n\t\thrtimer_cancel(timer);\n\t\tdebug_object_free(timer, &hrtimer_debug_descr);\n\t\treturn 1;\n\tdefault:\n\t\treturn 0;\n\t}\n}\n\nstatic struct debug_obj_descr hrtimer_debug_descr = {\n\t.name\t\t= \"", "28": "\"\n\n\nDEFINE_PER_CPU(struct tick_device, tick_cpu_device);\n\nktime_t tick_next_period;\nktime_t tick_period;\n\n\nint tick_do_timer_cpu __read_mostly = TICK_DO_TIMER_BOOT;\n\n\nstruct tick_device *tick_get_device(int cpu)\n{\n\treturn &per_cpu(tick_cpu_device, cpu);\n}\n\n\nint tick_is_oneshot_available(void)\n{\n\tstruct clock_event_device *dev = __this_cpu_read(tick_cpu_device.evtdev);\n\n\tif (!dev || !(dev->features & CLOCK_EVT_FEAT_ONESHOT))\n\t\treturn 0;\n\tif (!(dev->features & CLOCK_EVT_FEAT_C3STOP))\n\t\treturn 1;\n\treturn tick_broadcast_oneshot_available();\n}\n\n\nstatic void tick_periodic(int cpu)\n{\n\tif (tick_do_timer_cpu == cpu) {\n\t\twrite_seqlock(&jiffies_lock);\n\n\t\t\n\t\ttick_next_period = ktime_add(tick_next_period, tick_period);\n\n\t\tdo_timer(1);\n\t\twrite_sequnlock(&jiffies_lock);\n\t\tupdate_wall_time();\n\t}\n\n\tupdate_process_times(user_mode(get_irq_regs()));\n\tprofile_tick(CPU_PROFILING);\n}\n\n\nvoid tick_handle_periodic(struct clock_event_device *dev)\n{\n\tint cpu = smp_processor_id();\n\tktime_t next = dev->next_event;\n\n\ttick_periodic(cpu);\n\n\tif (dev->state != CLOCK_EVT_STATE_ONESHOT)\n\t\treturn;\n\tfor (;;) {\n\t\t\n\t\tnext = ktime_add(next, tick_period);\n\n\t\tif (!clockevents_program_event(dev, next, false))\n\t\t\treturn;\n\t\t\n\t\tif (timekeeping_valid_for_hres())\n\t\t\ttick_periodic(cpu);\n\t}\n}\n\n\nvoid tick_setup_periodic(struct clock_event_device *dev, int broadcast)\n{\n\ttick_set_periodic_handler(dev, broadcast);\n\n\t\n\tif (!tick_device_is_functional(dev))\n\t\treturn;\n\n\tif ((dev->features & CLOCK_EVT_FEAT_PERIODIC) &&\n\t    !tick_broadcast_oneshot_active()) {\n\t\tclockevents_set_state(dev, CLOCK_EVT_STATE_PERIODIC);\n\t} else {\n\t\tunsigned long seq;\n\t\tktime_t next;\n\n\t\tdo {\n\t\t\tseq = read_seqbegin(&jiffies_lock);\n\t\t\tnext = tick_next_period;\n\t\t} while (read_seqretry(&jiffies_lock, seq));\n\n\t\tclockevents_set_state(dev, CLOCK_EVT_STATE_ONESHOT);\n\n\t\tfor (;;) {\n\t\t\tif (!clockevents_program_event(dev, next, false))\n\t\t\t\treturn;\n\t\t\tnext = ktime_add(next, tick_period);\n\t\t}\n\t}\n}\n\n\nstatic void tick_setup_device(struct tick_device *td,\n\t\t\t      struct clock_event_device *newdev, int cpu,\n\t\t\t      const struct cpumask *cpumask)\n{\n\tktime_t next_event;\n\tvoid (*handler)(struct clock_event_device *) = NULL;\n\n\t\n\tif (!td->evtdev) {\n\t\t\n\t\tif (tick_do_timer_cpu == TICK_DO_TIMER_BOOT) {\n\t\t\tif (!tick_nohz_full_cpu(cpu))\n\t\t\t\ttick_do_timer_cpu = cpu;\n\t\t\telse\n\t\t\t\ttick_do_timer_cpu = TICK_DO_TIMER_NONE;\n\t\t\ttick_next_period = ktime_get();\n\t\t\ttick_period = ktime_set(0, NSEC_PER_SEC / HZ);\n\t\t}\n\n\t\t\n\t\ttd->mode = TICKDEV_MODE_PERIODIC;\n\t} else {\n\t\thandler = td->evtdev->event_handler;\n\t\tnext_event = td->evtdev->next_event;\n\t\ttd->evtdev->event_handler = clockevents_handle_noop;\n\t}\n\n\ttd->evtdev = newdev;\n\n\t\n\tif (!cpumask_equal(newdev->cpumask, cpumask))\n\t\tirq_set_affinity(newdev->irq, cpumask);\n\n\t\n\tif (tick_device_uses_broadcast(newdev, cpu))\n\t\treturn;\n\n\tif (td->mode == TICKDEV_MODE_PERIODIC)\n\t\ttick_setup_periodic(newdev, 0);\n\telse\n\t\ttick_setup_oneshot(newdev, handler, next_event);\n}\n\nvoid tick_install_replacement(struct clock_event_device *newdev)\n{\n\tstruct tick_device *td = this_cpu_ptr(&tick_cpu_device);\n\tint cpu = smp_processor_id();\n\n\tclockevents_exchange_device(td->evtdev, newdev);\n\ttick_setup_device(td, newdev, cpu, cpumask_of(cpu));\n\tif (newdev->features & CLOCK_EVT_FEAT_ONESHOT)\n\t\ttick_oneshot_notify();\n}\n\nstatic bool tick_check_percpu(struct clock_event_device *curdev,\n\t\t\t      struct clock_event_device *newdev, int cpu)\n{\n\tif (!cpumask_test_cpu(cpu, newdev->cpumask))\n\t\treturn false;\n\tif (cpumask_equal(newdev->cpumask, cpumask_of(cpu)))\n\t\treturn true;\n\t\n\tif (newdev->irq >= 0 && !irq_can_set_affinity(newdev->irq))\n\t\treturn false;\n\t\n\tif (curdev && cpumask_equal(curdev->cpumask, cpumask_of(cpu)))\n\t\treturn false;\n\treturn true;\n}\n\nstatic bool tick_check_preferred(struct clock_event_device *curdev,\n\t\t\t\t struct clock_event_device *newdev)\n{\n\t\n\tif (!(newdev->features & CLOCK_EVT_FEAT_ONESHOT)) {\n\t\tif (curdev && (curdev->features & CLOCK_EVT_FEAT_ONESHOT))\n\t\t\treturn false;\n\t\tif (tick_oneshot_mode_active())\n\t\t\treturn false;\n\t}\n\n\t\n\treturn !curdev ||\n\t\tnewdev->rating > curdev->rating ||\n\t       !cpumask_equal(curdev->cpumask, newdev->cpumask);\n}\n\n\nbool tick_check_replacement(struct clock_event_device *curdev,\n\t\t\t    struct clock_event_device *newdev)\n{\n\tif (!tick_check_percpu(curdev, newdev, smp_processor_id()))\n\t\treturn false;\n\n\treturn tick_check_preferred(curdev, newdev);\n}\n\n\nvoid tick_check_new_device(struct clock_event_device *newdev)\n{\n\tstruct clock_event_device *curdev;\n\tstruct tick_device *td;\n\tint cpu;\n\n\tcpu = smp_processor_id();\n\tif (!cpumask_test_cpu(cpu, newdev->cpumask))\n\t\tgoto out_bc;\n\n\ttd = &per_cpu(tick_cpu_device, cpu);\n\tcurdev = td->evtdev;\n\n\t\n\tif (!tick_check_percpu(curdev, newdev, cpu))\n\t\tgoto out_bc;\n\n\t\n\tif (!tick_check_preferred(curdev, newdev))\n\t\tgoto out_bc;\n\n\tif (!try_module_get(newdev->owner))\n\t\treturn;\n\n\t\n\tif (tick_is_broadcast_device(curdev)) {\n\t\tclockevents_shutdown(curdev);\n\t\tcurdev = NULL;\n\t}\n\tclockevents_exchange_device(curdev, newdev);\n\ttick_setup_device(td, newdev, cpu, cpumask_of(cpu));\n\tif (newdev->features & CLOCK_EVT_FEAT_ONESHOT)\n\t\ttick_oneshot_notify();\n\treturn;\n\nout_bc:\n\t\n\ttick_install_broadcast_device(newdev);\n}\n\n#ifdef CONFIG_HOTPLUG_CPU\n\nvoid tick_handover_do_timer(void)\n{\n\tif (tick_do_timer_cpu == smp_processor_id()) {\n\t\tint cpu = cpumask_first(cpu_online_mask);\n\n\t\ttick_do_timer_cpu = (cpu < nr_cpu_ids) ? cpu :\n\t\t\tTICK_DO_TIMER_NONE;\n\t}\n}\n\n\nvoid tick_shutdown(unsigned int cpu)\n{\n\tstruct tick_device *td = &per_cpu(tick_cpu_device, cpu);\n\tstruct clock_event_device *dev = td->evtdev;\n\n\ttd->mode = TICKDEV_MODE_PERIODIC;\n\tif (dev) {\n\t\t\n\t\tdev->state = CLOCK_EVT_STATE_DETACHED;\n\t\tdev->mode = CLOCK_EVT_MODE_UNUSED;\n\t\tclockevents_exchange_device(dev, NULL);\n\t\tdev->event_handler = clockevents_handle_noop;\n\t\ttd->evtdev = NULL;\n\t}\n}\n#endif\n\n\nvoid tick_suspend_local(void)\n{\n\tstruct tick_device *td = this_cpu_ptr(&tick_cpu_device);\n\n\tclockevents_shutdown(td->evtdev);\n}\n\n\nvoid tick_resume_local(void)\n{\n\tstruct tick_device *td = this_cpu_ptr(&tick_cpu_device);\n\tbool broadcast = tick_resume_check_broadcast();\n\n\tclockevents_tick_resume(td->evtdev);\n\tif (!broadcast) {\n\t\tif (td->mode == TICKDEV_MODE_PERIODIC)\n\t\t\ttick_setup_periodic(td->evtdev, 0);\n\t\telse\n\t\t\ttick_resume_oneshot();\n\t}\n}\n\n\nvoid tick_suspend(void)\n{\n\ttick_suspend_local();\n\ttick_suspend_broadcast();\n}\n\n\nvoid tick_resume(void)\n{\n\ttick_resume_broadcast();\n\ttick_resume_local();\n}\n\nstatic DEFINE_RAW_SPINLOCK(tick_freeze_lock);\nstatic unsigned int tick_freeze_depth;\n\n\nvoid tick_freeze(void)\n{\n\traw_spin_lock(&tick_freeze_lock);\n\n\ttick_freeze_depth++;\n\tif (tick_freeze_depth == num_online_cpus())\n\t\ttimekeeping_suspend();\n\telse\n\t\ttick_suspend_local();\n\n\traw_spin_unlock(&tick_freeze_lock);\n}\n\n\nvoid tick_unfreeze(void)\n{\n\traw_spin_lock(&tick_freeze_lock);\n\n\tif (tick_freeze_depth == num_online_cpus())\n\t\ttimekeeping_resume();\n\telse\n\t\ttick_resume_local();\n\n\ttick_freeze_depth--;\n\n\traw_spin_unlock(&tick_freeze_lock);\n}\n\n\nvoid __init tick_init(void)\n{\n\ttick_broadcast_init();\n\ttick_nohz_init();\n}\n\n\n#include <linux/proc_fs.h>\n#include <linux/sched.h>\n#include <linux/seq_file.h>\n#include <linux/kallsyms.h>\n#include <linux/utsname.h>\n#include <linux/mempolicy.h>\n\n#include \"", "29": "\"\n\n\nenum {\n\tTRACE_NOP_OPT_ACCEPT = 0x1,\n\tTRACE_NOP_OPT_REFUSE = 0x2\n};\n\n\nstatic struct tracer_opt nop_opts[] = {\n\t\n\t{ TRACER_OPT(test_nop_accept, TRACE_NOP_OPT_ACCEPT) },\n\t\n\t{ TRACER_OPT(test_nop_refuse, TRACE_NOP_OPT_REFUSE) },\n\t{ } \n};\n\nstatic struct tracer_flags nop_flags = {\n\t\n\t.val = 0, \n\t.opts = nop_opts\n};\n\nstatic struct trace_array\t*ctx_trace;\n\nstatic void start_nop_trace(struct trace_array *tr)\n{\n\t\n}\n\nstatic void stop_nop_trace(struct trace_array *tr)\n{\n\t\n}\n\nstatic int nop_trace_init(struct trace_array *tr)\n{\n\tctx_trace = tr;\n\tstart_nop_trace(tr);\n\treturn 0;\n}\n\nstatic void nop_trace_reset(struct trace_array *tr)\n{\n\tstop_nop_trace(tr);\n}\n\n\nstatic int nop_set_flag(struct trace_array *tr, u32 old_flags, u32 bit, int set)\n{\n\t\n\tif (bit == TRACE_NOP_OPT_ACCEPT) {\n\t\tprintk(KERN_DEBUG \"", "30": "\"\n\n\nstatic int convert_prio(int prio)\n{\n\tint cpupri;\n\n\tif (prio == CPUPRI_INVALID)\n\t\tcpupri = CPUPRI_INVALID;\n\telse if (prio == MAX_PRIO)\n\t\tcpupri = CPUPRI_IDLE;\n\telse if (prio >= MAX_RT_PRIO)\n\t\tcpupri = CPUPRI_NORMAL;\n\telse\n\t\tcpupri = MAX_RT_PRIO - prio + 1;\n\n\treturn cpupri;\n}\n\n\nint cpupri_find(struct cpupri *cp, struct task_struct *p,\n\t\tstruct cpumask *lowest_mask)\n{\n\tint idx = 0;\n\tint task_pri = convert_prio(p->prio);\n\n\tBUG_ON(task_pri >= CPUPRI_NR_PRIORITIES);\n\n\tfor (idx = 0; idx < task_pri; idx++) {\n\t\tstruct cpupri_vec *vec  = &cp->pri_to_cpu[idx];\n\t\tint skip = 0;\n\n\t\tif (!atomic_read(&(vec)->count))\n\t\t\tskip = 1;\n\t\t\n\t\tsmp_rmb();\n\n\t\t\n\t\tif (skip)\n\t\t\tcontinue;\n\n\t\tif (cpumask_any_and(&p->cpus_allowed, vec->mask) >= nr_cpu_ids)\n\t\t\tcontinue;\n\n\t\tif (lowest_mask) {\n\t\t\tcpumask_and(lowest_mask, &p->cpus_allowed, vec->mask);\n\n\t\t\t\n\t\t\tif (cpumask_any(lowest_mask) >= nr_cpu_ids)\n\t\t\t\tcontinue;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\treturn 0;\n}\n\n\nvoid cpupri_set(struct cpupri *cp, int cpu, int newpri)\n{\n\tint *currpri = &cp->cpu_to_pri[cpu];\n\tint oldpri = *currpri;\n\tint do_mb = 0;\n\n\tnewpri = convert_prio(newpri);\n\n\tBUG_ON(newpri >= CPUPRI_NR_PRIORITIES);\n\n\tif (newpri == oldpri)\n\t\treturn;\n\n\t\n\tif (likely(newpri != CPUPRI_INVALID)) {\n\t\tstruct cpupri_vec *vec = &cp->pri_to_cpu[newpri];\n\n\t\tcpumask_set_cpu(cpu, vec->mask);\n\t\t\n\t\tsmp_mb__before_atomic();\n\t\tatomic_inc(&(vec)->count);\n\t\tdo_mb = 1;\n\t}\n\tif (likely(oldpri != CPUPRI_INVALID)) {\n\t\tstruct cpupri_vec *vec  = &cp->pri_to_cpu[oldpri];\n\n\t\t\n\t\tif (do_mb)\n\t\t\tsmp_mb__after_atomic();\n\n\t\t\n\t\tatomic_dec(&(vec)->count);\n\t\tsmp_mb__after_atomic();\n\t\tcpumask_clear_cpu(cpu, vec->mask);\n\t}\n\n\t*currpri = newpri;\n}\n\n\nint cpupri_init(struct cpupri *cp)\n{\n\tint i;\n\n\tmemset(cp, 0, sizeof(*cp));\n\n\tfor (i = 0; i < CPUPRI_NR_PRIORITIES; i++) {\n\t\tstruct cpupri_vec *vec = &cp->pri_to_cpu[i];\n\n\t\tatomic_set(&vec->count, 0);\n\t\tif (!zalloc_cpumask_var(&vec->mask, GFP_KERNEL))\n\t\t\tgoto cleanup;\n\t}\n\n\tcp->cpu_to_pri = kcalloc(nr_cpu_ids, sizeof(int), GFP_KERNEL);\n\tif (!cp->cpu_to_pri)\n\t\tgoto cleanup;\n\n\tfor_each_possible_cpu(i)\n\t\tcp->cpu_to_pri[i] = CPUPRI_INVALID;\n\n\treturn 0;\n\ncleanup:\n\tfor (i--; i >= 0; i--)\n\t\tfree_cpumask_var(cp->pri_to_cpu[i].mask);\n\treturn -ENOMEM;\n}\n\n\nvoid cpupri_cleanup(struct cpupri *cp)\n{\n\tint i;\n\n\tkfree(cp->cpu_to_pri);\n\tfor (i = 0; i < CPUPRI_NR_PRIORITIES; i++)\n\t\tfree_cpumask_var(cp->pri_to_cpu[i].mask);\n}\n\n\n#include <linux/mm.h>\n#include <linux/slab.h>\n#include <linux/interrupt.h>\n#include <linux/module.h>\n#include <linux/capability.h>\n#include <linux/completion.h>\n#include <linux/personality.h>\n#include <linux/tty.h>\n#include <linux/iocontext.h>\n#include <linux/key.h>\n#include <linux/security.h>\n#include <linux/cpu.h>\n#include <linux/acct.h>\n#include <linux/tsacct_kern.h>\n#include <linux/file.h>\n#include <linux/fdtable.h>\n#include <linux/freezer.h>\n#include <linux/binfmts.h>\n#include <linux/nsproxy.h>\n#include <linux/pid_namespace.h>\n#include <linux/ptrace.h>\n#include <linux/profile.h>\n#include <linux/mount.h>\n#include <linux/proc_fs.h>\n#include <linux/kthread.h>\n#include <linux/mempolicy.h>\n#include <linux/taskstats_kern.h>\n#include <linux/delayacct.h>\n#include <linux/cgroup.h>\n#include <linux/syscalls.h>\n#include <linux/signal.h>\n#include <linux/posix-timers.h>\n#include <linux/cn_proc.h>\n#include <linux/mutex.h>\n#include <linux/futex.h>\n#include <linux/pipe_fs_i.h>\n#include <linux/audit.h> \n#include <linux/resource.h>\n#include <linux/blkdev.h>\n#include <linux/task_io_accounting_ops.h>\n#include <linux/tracehook.h>\n#include <linux/fs_struct.h>\n#include <linux/init_task.h>\n#include <linux/perf_event.h>\n#include <trace/events/sched.h>\n#include <linux/hw_breakpoint.h>\n#include <linux/oom.h>\n#include <linux/writeback.h>\n#include <linux/shm.h>\n\n#include <asm/uaccess.h>\n#include <asm/unistd.h>\n#include <asm/pgtable.h>\n#include <asm/mmu_context.h>\n\nstatic void exit_mm(struct task_struct *tsk);\n\nstatic void __unhash_process(struct task_struct *p, bool group_dead)\n{\n\tnr_threads--;\n\tdetach_pid(p, PIDTYPE_PID);\n\tif (group_dead) {\n\t\tdetach_pid(p, PIDTYPE_PGID);\n\t\tdetach_pid(p, PIDTYPE_SID);\n\n\t\tlist_del_rcu(&p->tasks);\n\t\tlist_del_init(&p->sibling);\n\t\t__this_cpu_dec(process_counts);\n\t}\n\tlist_del_rcu(&p->thread_group);\n\tlist_del_rcu(&p->thread_node);\n}\n\n\nstatic void __exit_signal(struct task_struct *tsk)\n{\n\tstruct signal_struct *sig = tsk->signal;\n\tbool group_dead = thread_group_leader(tsk);\n\tstruct sighand_struct *sighand;\n\tstruct tty_struct *uninitialized_var(tty);\n\tcputime_t utime, stime;\n\n\tsighand = rcu_dereference_check(tsk->sighand,\n\t\t\t\t\tlockdep_tasklist_lock_is_held());\n\tspin_lock(&sighand->siglock);\n\n\tposix_cpu_timers_exit(tsk);\n\tif (group_dead) {\n\t\tposix_cpu_timers_exit_group(tsk);\n\t\ttty = sig->tty;\n\t\tsig->tty = NULL;\n\t} else {\n\t\t\n\t\tif (unlikely(has_group_leader_pid(tsk)))\n\t\t\tposix_cpu_timers_exit_group(tsk);\n\n\t\t\n\t\tif (sig->notify_count > 0 && !--sig->notify_count)\n\t\t\twake_up_process(sig->group_exit_task);\n\n\t\tif (tsk == sig->curr_target)\n\t\t\tsig->curr_target = next_thread(tsk);\n\t}\n\n\t\n\ttask_cputime(tsk, &utime, &stime);\n\twrite_seqlock(&sig->stats_lock);\n\tsig->utime += utime;\n\tsig->stime += stime;\n\tsig->gtime += task_gtime(tsk);\n\tsig->min_flt += tsk->min_flt;\n\tsig->maj_flt += tsk->maj_flt;\n\tsig->nvcsw += tsk->nvcsw;\n\tsig->nivcsw += tsk->nivcsw;\n\tsig->inblock += task_io_get_inblock(tsk);\n\tsig->oublock += task_io_get_oublock(tsk);\n\ttask_io_accounting_add(&sig->ioac, &tsk->ioac);\n\tsig->sum_sched_runtime += tsk->se.sum_exec_runtime;\n\tsig->nr_threads--;\n\t__unhash_process(tsk, group_dead);\n\twrite_sequnlock(&sig->stats_lock);\n\n\t\n\tflush_sigqueue(&tsk->pending);\n\ttsk->sighand = NULL;\n\tspin_unlock(&sighand->siglock);\n\n\t__cleanup_sighand(sighand);\n\tclear_tsk_thread_flag(tsk, TIF_SIGPENDING);\n\tif (group_dead) {\n\t\tflush_sigqueue(&sig->shared_pending);\n\t\ttty_kref_put(tty);\n\t}\n}\n\nstatic void delayed_put_task_struct(struct rcu_head *rhp)\n{\n\tstruct task_struct *tsk = container_of(rhp, struct task_struct, rcu);\n\n\tperf_event_delayed_put(tsk);\n\ttrace_sched_process_free(tsk);\n\tput_task_struct(tsk);\n}\n\n\nvoid release_task(struct task_struct *p)\n{\n\tstruct task_struct *leader;\n\tint zap_leader;\nrepeat:\n\t\n\trcu_read_lock();\n\tatomic_dec(&__task_cred(p)->user->processes);\n\trcu_read_unlock();\n\n\tproc_flush_task(p);\n\n\twrite_lock_irq(&tasklist_lock);\n\tptrace_release_task(p);\n\t__exit_signal(p);\n\n\t\n\tzap_leader = 0;\n\tleader = p->group_leader;\n\tif (leader != p && thread_group_empty(leader)\n\t\t\t&& leader->exit_state == EXIT_ZOMBIE) {\n\t\t\n\t\tzap_leader = do_notify_parent(leader, leader->exit_signal);\n\t\tif (zap_leader)\n\t\t\tleader->exit_state = EXIT_DEAD;\n\t}\n\n\twrite_unlock_irq(&tasklist_lock);\n\trelease_thread(p);\n\tcall_rcu(&p->rcu, delayed_put_task_struct);\n\n\tp = leader;\n\tif (unlikely(zap_leader))\n\t\tgoto repeat;\n}\n\n\nstatic int will_become_orphaned_pgrp(struct pid *pgrp,\n\t\t\t\t\tstruct task_struct *ignored_task)\n{\n\tstruct task_struct *p;\n\n\tdo_each_pid_task(pgrp, PIDTYPE_PGID, p) {\n\t\tif ((p == ignored_task) ||\n\t\t    (p->exit_state && thread_group_empty(p)) ||\n\t\t    is_global_init(p->real_parent))\n\t\t\tcontinue;\n\n\t\tif (task_pgrp(p->real_parent) != pgrp &&\n\t\t    task_session(p->real_parent) == task_session(p))\n\t\t\treturn 0;\n\t} while_each_pid_task(pgrp, PIDTYPE_PGID, p);\n\n\treturn 1;\n}\n\nint is_current_pgrp_orphaned(void)\n{\n\tint retval;\n\n\tread_lock(&tasklist_lock);\n\tretval = will_become_orphaned_pgrp(task_pgrp(current), NULL);\n\tread_unlock(&tasklist_lock);\n\n\treturn retval;\n}\n\nstatic bool has_stopped_jobs(struct pid *pgrp)\n{\n\tstruct task_struct *p;\n\n\tdo_each_pid_task(pgrp, PIDTYPE_PGID, p) {\n\t\tif (p->signal->flags & SIGNAL_STOP_STOPPED)\n\t\t\treturn true;\n\t} while_each_pid_task(pgrp, PIDTYPE_PGID, p);\n\n\treturn false;\n}\n\n\nstatic void\nkill_orphaned_pgrp(struct task_struct *tsk, struct task_struct *parent)\n{\n\tstruct pid *pgrp = task_pgrp(tsk);\n\tstruct task_struct *ignored_task = tsk;\n\n\tif (!parent)\n\t\t\n\t\tparent = tsk->real_parent;\n\telse\n\t\t\n\t\tignored_task = NULL;\n\n\tif (task_pgrp(parent) != pgrp &&\n\t    task_session(parent) == task_session(tsk) &&\n\t    will_become_orphaned_pgrp(pgrp, ignored_task) &&\n\t    has_stopped_jobs(pgrp)) {\n\t\t__kill_pgrp_info(SIGHUP, SEND_SIG_PRIV, pgrp);\n\t\t__kill_pgrp_info(SIGCONT, SEND_SIG_PRIV, pgrp);\n\t}\n}\n\n#ifdef CONFIG_MEMCG\n\nvoid mm_update_next_owner(struct mm_struct *mm)\n{\n\tstruct task_struct *c, *g, *p = current;\n\nretry:\n\t\n\tif (mm->owner != p)\n\t\treturn;\n\t\n\tif (atomic_read(&mm->mm_users) <= 1) {\n\t\tmm->owner = NULL;\n\t\treturn;\n\t}\n\n\tread_lock(&tasklist_lock);\n\t\n\tlist_for_each_entry(c, &p->children, sibling) {\n\t\tif (c->mm == mm)\n\t\t\tgoto assign_new_owner;\n\t}\n\n\t\n\tlist_for_each_entry(c, &p->real_parent->children, sibling) {\n\t\tif (c->mm == mm)\n\t\t\tgoto assign_new_owner;\n\t}\n\n\t\n\tfor_each_process(g) {\n\t\tif (g->flags & PF_KTHREAD)\n\t\t\tcontinue;\n\t\tfor_each_thread(g, c) {\n\t\t\tif (c->mm == mm)\n\t\t\t\tgoto assign_new_owner;\n\t\t\tif (c->mm)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tread_unlock(&tasklist_lock);\n\t\n\tmm->owner = NULL;\n\treturn;\n\nassign_new_owner:\n\tBUG_ON(c == p);\n\tget_task_struct(c);\n\t\n\ttask_lock(c);\n\t\n\tread_unlock(&tasklist_lock);\n\tif (c->mm != mm) {\n\t\ttask_unlock(c);\n\t\tput_task_struct(c);\n\t\tgoto retry;\n\t}\n\tmm->owner = c;\n\ttask_unlock(c);\n\tput_task_struct(c);\n}\n#endif \n\n\nstatic void exit_mm(struct task_struct *tsk)\n{\n\tstruct mm_struct *mm = tsk->mm;\n\tstruct core_state *core_state;\n\n\tmm_release(tsk, mm);\n\tif (!mm)\n\t\treturn;\n\tsync_mm_rss(mm);\n\t\n\tdown_read(&mm->mmap_sem);\n\tcore_state = mm->core_state;\n\tif (core_state) {\n\t\tstruct core_thread self;\n\n\t\tup_read(&mm->mmap_sem);\n\n\t\tself.task = tsk;\n\t\tself.next = xchg(&core_state->dumper.next, &self);\n\t\t\n\t\tif (atomic_dec_and_test(&core_state->nr_threads))\n\t\t\tcomplete(&core_state->startup);\n\n\t\tfor (;;) {\n\t\t\tset_task_state(tsk, TASK_UNINTERRUPTIBLE);\n\t\t\tif (!self.task) \n\t\t\t\tbreak;\n\t\t\tfreezable_schedule();\n\t\t}\n\t\t__set_task_state(tsk, TASK_RUNNING);\n\t\tdown_read(&mm->mmap_sem);\n\t}\n\tatomic_inc(&mm->mm_count);\n\tBUG_ON(mm != tsk->active_mm);\n\t\n\ttask_lock(tsk);\n\ttsk->mm = NULL;\n\tup_read(&mm->mmap_sem);\n\tenter_lazy_tlb(mm, current);\n\ttask_unlock(tsk);\n\tmm_update_next_owner(mm);\n\tmmput(mm);\n\tif (test_thread_flag(TIF_MEMDIE))\n\t\tunmark_oom_victim();\n}\n\nstatic struct task_struct *find_alive_thread(struct task_struct *p)\n{\n\tstruct task_struct *t;\n\n\tfor_each_thread(p, t) {\n\t\tif (!(t->flags & PF_EXITING))\n\t\t\treturn t;\n\t}\n\treturn NULL;\n}\n\nstatic struct task_struct *find_child_reaper(struct task_struct *father)\n\t__releases(&tasklist_lock)\n\t__acquires(&tasklist_lock)\n{\n\tstruct pid_namespace *pid_ns = task_active_pid_ns(father);\n\tstruct task_struct *reaper = pid_ns->child_reaper;\n\n\tif (likely(reaper != father))\n\t\treturn reaper;\n\n\treaper = find_alive_thread(father);\n\tif (reaper) {\n\t\tpid_ns->child_reaper = reaper;\n\t\treturn reaper;\n\t}\n\n\twrite_unlock_irq(&tasklist_lock);\n\tif (unlikely(pid_ns == &init_pid_ns)) {\n\t\tpanic(\"", "31": "\"\n\n\nstruct module_signature {\n\tu8\talgo;\t\t\n\tu8\thash;\t\t\n\tu8\tid_type;\t\n\tu8\tsigner_len;\t\n\tu8\tkey_id_len;\t\n\tu8\t__pad[3];\n\t__be32\tsig_len;\t\n};\n\n\nstatic struct public_key_signature *mod_make_digest(enum hash_algo hash,\n\t\t\t\t\t\t    const void *mod,\n\t\t\t\t\t\t    unsigned long modlen)\n{\n\tstruct public_key_signature *pks;\n\tstruct crypto_shash *tfm;\n\tstruct shash_desc *desc;\n\tsize_t digest_size, desc_size;\n\tint ret;\n\n\tpr_devel(\"", "32": "\"\n\n\nvoid\nclocks_calc_mult_shift(u32 *mult, u32 *shift, u32 from, u32 to, u32 maxsec)\n{\n\tu64 tmp;\n\tu32 sft, sftacc= 32;\n\n\t\n\ttmp = ((u64)maxsec * from) >> 32;\n\twhile (tmp) {\n\t\ttmp >>=1;\n\t\tsftacc--;\n\t}\n\n\t\n\tfor (sft = 32; sft > 0; sft--) {\n\t\ttmp = (u64) to << sft;\n\t\ttmp += from / 2;\n\t\tdo_div(tmp, from);\n\t\tif ((tmp >> sftacc) == 0)\n\t\t\tbreak;\n\t}\n\t*mult = tmp;\n\t*shift = sft;\n}\n\n\nstatic struct clocksource *curr_clocksource;\nstatic LIST_HEAD(clocksource_list);\nstatic DEFINE_MUTEX(clocksource_mutex);\nstatic char override_name[CS_NAME_LEN];\nstatic int finished_booting;\n\n#ifdef CONFIG_CLOCKSOURCE_WATCHDOG\nstatic void clocksource_watchdog_work(struct work_struct *work);\nstatic void clocksource_select(void);\n\nstatic LIST_HEAD(watchdog_list);\nstatic struct clocksource *watchdog;\nstatic struct timer_list watchdog_timer;\nstatic DECLARE_WORK(watchdog_work, clocksource_watchdog_work);\nstatic DEFINE_SPINLOCK(watchdog_lock);\nstatic int watchdog_running;\nstatic atomic_t watchdog_reset_pending;\n\nstatic int clocksource_watchdog_kthread(void *data);\nstatic void __clocksource_change_rating(struct clocksource *cs, int rating);\n\n\n#define WATCHDOG_INTERVAL (HZ >> 1)\n#define WATCHDOG_THRESHOLD (NSEC_PER_SEC >> 4)\n\nstatic void clocksource_watchdog_work(struct work_struct *work)\n{\n\t\n\tkthread_run(clocksource_watchdog_kthread, NULL, \"", "33": "\"\n\n#define CMD_BUFLEN 256\nchar kdb_prompt_str[CMD_BUFLEN];\n\nint kdb_trap_printk;\n\nstatic int kgdb_transition_check(char *buffer)\n{\n\tif (buffer[0] != '+' && buffer[0] != '$') {\n\t\tKDB_STATE_SET(KGDB_TRANS);\n\t\tkdb_printf(\"", "34": "\"\n\n#define KPROBE_EVENT_SYSTEM \"", "35": "\"\n\n#define SUSPEND_CONSOLE\t(MAX_NR_CONSOLES-1)\n\nstatic int orig_fgconsole, orig_kmsg;\n\nstatic DEFINE_MUTEX(vt_switch_mutex);\n\nstruct pm_vt_switch {\n\tstruct list_head head;\n\tstruct device *dev;\n\tbool required;\n};\n\nstatic LIST_HEAD(pm_vt_switch_list);\n\n\n\nvoid pm_vt_switch_required(struct device *dev, bool required)\n{\n\tstruct pm_vt_switch *entry, *tmp;\n\n\tmutex_lock(&vt_switch_mutex);\n\tlist_for_each_entry(tmp, &pm_vt_switch_list, head) {\n\t\tif (tmp->dev == dev) {\n\t\t\t\n\t\t\ttmp->required = required;\n\t\t\tgoto out;\n\t\t}\n\t}\n\n\tentry = kmalloc(sizeof(*entry), GFP_KERNEL);\n\tif (!entry)\n\t\tgoto out;\n\n\tentry->required = required;\n\tentry->dev = dev;\n\n\tlist_add(&entry->head, &pm_vt_switch_list);\nout:\n\tmutex_unlock(&vt_switch_mutex);\n}\nEXPORT_SYMBOL(pm_vt_switch_required);\n\n\nvoid pm_vt_switch_unregister(struct device *dev)\n{\n\tstruct pm_vt_switch *tmp;\n\n\tmutex_lock(&vt_switch_mutex);\n\tlist_for_each_entry(tmp, &pm_vt_switch_list, head) {\n\t\tif (tmp->dev == dev) {\n\t\t\tlist_del(&tmp->head);\n\t\t\tkfree(tmp);\n\t\t\tbreak;\n\t\t}\n\t}\n\tmutex_unlock(&vt_switch_mutex);\n}\nEXPORT_SYMBOL(pm_vt_switch_unregister);\n\n\nstatic bool pm_vt_switch(void)\n{\n\tstruct pm_vt_switch *entry;\n\tbool ret = true;\n\n\tmutex_lock(&vt_switch_mutex);\n\tif (list_empty(&pm_vt_switch_list))\n\t\tgoto out;\n\n\tif (!console_suspend_enabled)\n\t\tgoto out;\n\n\tlist_for_each_entry(entry, &pm_vt_switch_list, head) {\n\t\tif (entry->required)\n\t\t\tgoto out;\n\t}\n\n\tret = false;\nout:\n\tmutex_unlock(&vt_switch_mutex);\n\treturn ret;\n}\n\nint pm_prepare_console(void)\n{\n\tif (!pm_vt_switch())\n\t\treturn 0;\n\n\torig_fgconsole = vt_move_to_console(SUSPEND_CONSOLE, 1);\n\tif (orig_fgconsole < 0)\n\t\treturn 1;\n\n\torig_kmsg = vt_kmsg_redirect(SUSPEND_CONSOLE);\n\treturn 0;\n}\n\nvoid pm_restore_console(void)\n{\n\tif (!pm_vt_switch())\n\t\treturn;\n\n\tif (orig_fgconsole >= 0) {\n\t\tvt_move_to_console(orig_fgconsole, 0);\n\t\tvt_kmsg_redirect(orig_kmsg);\n\t}\n}\n\n\n#include <linux/kernel.h>\n#include <linux/err.h>\n#include <crypto/public_key.h>\n#include <crypto/hash.h>\n#include <keys/asymmetric-type.h>\n#include <keys/system_keyring.h>\n#include \"", "36": "\"\n\n#include <linux/slab.h>\n\nstruct dl_bandwidth def_dl_bandwidth;\n\nstatic inline struct task_struct *dl_task_of(struct sched_dl_entity *dl_se)\n{\n\treturn container_of(dl_se, struct task_struct, dl);\n}\n\nstatic inline struct rq *rq_of_dl_rq(struct dl_rq *dl_rq)\n{\n\treturn container_of(dl_rq, struct rq, dl);\n}\n\nstatic inline struct dl_rq *dl_rq_of_se(struct sched_dl_entity *dl_se)\n{\n\tstruct task_struct *p = dl_task_of(dl_se);\n\tstruct rq *rq = task_rq(p);\n\n\treturn &rq->dl;\n}\n\nstatic inline int on_dl_rq(struct sched_dl_entity *dl_se)\n{\n\treturn !RB_EMPTY_NODE(&dl_se->rb_node);\n}\n\nstatic inline int is_leftmost(struct task_struct *p, struct dl_rq *dl_rq)\n{\n\tstruct sched_dl_entity *dl_se = &p->dl;\n\n\treturn dl_rq->rb_leftmost == &dl_se->rb_node;\n}\n\nvoid init_dl_bandwidth(struct dl_bandwidth *dl_b, u64 period, u64 runtime)\n{\n\traw_spin_lock_init(&dl_b->dl_runtime_lock);\n\tdl_b->dl_period = period;\n\tdl_b->dl_runtime = runtime;\n}\n\nvoid init_dl_bw(struct dl_bw *dl_b)\n{\n\traw_spin_lock_init(&dl_b->lock);\n\traw_spin_lock(&def_dl_bandwidth.dl_runtime_lock);\n\tif (global_rt_runtime() == RUNTIME_INF)\n\t\tdl_b->bw = -1;\n\telse\n\t\tdl_b->bw = to_ratio(global_rt_period(), global_rt_runtime());\n\traw_spin_unlock(&def_dl_bandwidth.dl_runtime_lock);\n\tdl_b->total_bw = 0;\n}\n\nvoid init_dl_rq(struct dl_rq *dl_rq)\n{\n\tdl_rq->rb_root = RB_ROOT;\n\n#ifdef CONFIG_SMP\n\t\n\tdl_rq->earliest_dl.curr = dl_rq->earliest_dl.next = 0;\n\n\tdl_rq->dl_nr_migratory = 0;\n\tdl_rq->overloaded = 0;\n\tdl_rq->pushable_dl_tasks_root = RB_ROOT;\n#else\n\tinit_dl_bw(&dl_rq->dl_bw);\n#endif\n}\n\n#ifdef CONFIG_SMP\n\nstatic inline int dl_overloaded(struct rq *rq)\n{\n\treturn atomic_read(&rq->rd->dlo_count);\n}\n\nstatic inline void dl_set_overload(struct rq *rq)\n{\n\tif (!rq->online)\n\t\treturn;\n\n\tcpumask_set_cpu(rq->cpu, rq->rd->dlo_mask);\n\t\n\tsmp_wmb();\n\tatomic_inc(&rq->rd->dlo_count);\n}\n\nstatic inline void dl_clear_overload(struct rq *rq)\n{\n\tif (!rq->online)\n\t\treturn;\n\n\tatomic_dec(&rq->rd->dlo_count);\n\tcpumask_clear_cpu(rq->cpu, rq->rd->dlo_mask);\n}\n\nstatic void update_dl_migration(struct dl_rq *dl_rq)\n{\n\tif (dl_rq->dl_nr_migratory && dl_rq->dl_nr_running > 1) {\n\t\tif (!dl_rq->overloaded) {\n\t\t\tdl_set_overload(rq_of_dl_rq(dl_rq));\n\t\t\tdl_rq->overloaded = 1;\n\t\t}\n\t} else if (dl_rq->overloaded) {\n\t\tdl_clear_overload(rq_of_dl_rq(dl_rq));\n\t\tdl_rq->overloaded = 0;\n\t}\n}\n\nstatic void inc_dl_migration(struct sched_dl_entity *dl_se, struct dl_rq *dl_rq)\n{\n\tstruct task_struct *p = dl_task_of(dl_se);\n\n\tif (p->nr_cpus_allowed > 1)\n\t\tdl_rq->dl_nr_migratory++;\n\n\tupdate_dl_migration(dl_rq);\n}\n\nstatic void dec_dl_migration(struct sched_dl_entity *dl_se, struct dl_rq *dl_rq)\n{\n\tstruct task_struct *p = dl_task_of(dl_se);\n\n\tif (p->nr_cpus_allowed > 1)\n\t\tdl_rq->dl_nr_migratory--;\n\n\tupdate_dl_migration(dl_rq);\n}\n\n\nstatic void enqueue_pushable_dl_task(struct rq *rq, struct task_struct *p)\n{\n\tstruct dl_rq *dl_rq = &rq->dl;\n\tstruct rb_node **link = &dl_rq->pushable_dl_tasks_root.rb_node;\n\tstruct rb_node *parent = NULL;\n\tstruct task_struct *entry;\n\tint leftmost = 1;\n\n\tBUG_ON(!RB_EMPTY_NODE(&p->pushable_dl_tasks));\n\n\twhile (*link) {\n\t\tparent = *link;\n\t\tentry = rb_entry(parent, struct task_struct,\n\t\t\t\t pushable_dl_tasks);\n\t\tif (dl_entity_preempt(&p->dl, &entry->dl))\n\t\t\tlink = &parent->rb_left;\n\t\telse {\n\t\t\tlink = &parent->rb_right;\n\t\t\tleftmost = 0;\n\t\t}\n\t}\n\n\tif (leftmost)\n\t\tdl_rq->pushable_dl_tasks_leftmost = &p->pushable_dl_tasks;\n\n\trb_link_node(&p->pushable_dl_tasks, parent, link);\n\trb_insert_color(&p->pushable_dl_tasks, &dl_rq->pushable_dl_tasks_root);\n}\n\nstatic void dequeue_pushable_dl_task(struct rq *rq, struct task_struct *p)\n{\n\tstruct dl_rq *dl_rq = &rq->dl;\n\n\tif (RB_EMPTY_NODE(&p->pushable_dl_tasks))\n\t\treturn;\n\n\tif (dl_rq->pushable_dl_tasks_leftmost == &p->pushable_dl_tasks) {\n\t\tstruct rb_node *next_node;\n\n\t\tnext_node = rb_next(&p->pushable_dl_tasks);\n\t\tdl_rq->pushable_dl_tasks_leftmost = next_node;\n\t}\n\n\trb_erase(&p->pushable_dl_tasks, &dl_rq->pushable_dl_tasks_root);\n\tRB_CLEAR_NODE(&p->pushable_dl_tasks);\n}\n\nstatic inline int has_pushable_dl_tasks(struct rq *rq)\n{\n\treturn !RB_EMPTY_ROOT(&rq->dl.pushable_dl_tasks_root);\n}\n\nstatic int push_dl_task(struct rq *rq);\n\nstatic inline bool need_pull_dl_task(struct rq *rq, struct task_struct *prev)\n{\n\treturn dl_task(prev);\n}\n\nstatic inline void set_post_schedule(struct rq *rq)\n{\n\trq->post_schedule = has_pushable_dl_tasks(rq);\n}\n\nstatic struct rq *find_lock_later_rq(struct task_struct *task, struct rq *rq);\n\nstatic void dl_task_offline_migration(struct rq *rq, struct task_struct *p)\n{\n\tstruct rq *later_rq = NULL;\n\tbool fallback = false;\n\n\tlater_rq = find_lock_later_rq(p, rq);\n\n\tif (!later_rq) {\n\t\tint cpu;\n\n\t\t\n\t\tfallback = true;\n\t\tcpu = cpumask_any_and(cpu_active_mask, tsk_cpus_allowed(p));\n\t\tif (cpu >= nr_cpu_ids) {\n\t\t\t\n\t\t\tBUG_ON(dl_bandwidth_enabled());\n\n\t\t\t\n\t\t\tcpu = cpumask_any(cpu_active_mask);\n\t\t}\n\t\tlater_rq = cpu_rq(cpu);\n\t\tdouble_lock_balance(rq, later_rq);\n\t}\n\n\tdeactivate_task(rq, p, 0);\n\tset_task_cpu(p, later_rq->cpu);\n\tactivate_task(later_rq, p, ENQUEUE_REPLENISH);\n\n\tif (!fallback)\n\t\tresched_curr(later_rq);\n\n\tdouble_unlock_balance(rq, later_rq);\n}\n\n#else\n\nstatic inline\nvoid enqueue_pushable_dl_task(struct rq *rq, struct task_struct *p)\n{\n}\n\nstatic inline\nvoid dequeue_pushable_dl_task(struct rq *rq, struct task_struct *p)\n{\n}\n\nstatic inline\nvoid inc_dl_migration(struct sched_dl_entity *dl_se, struct dl_rq *dl_rq)\n{\n}\n\nstatic inline\nvoid dec_dl_migration(struct sched_dl_entity *dl_se, struct dl_rq *dl_rq)\n{\n}\n\nstatic inline bool need_pull_dl_task(struct rq *rq, struct task_struct *prev)\n{\n\treturn false;\n}\n\nstatic inline int pull_dl_task(struct rq *rq)\n{\n\treturn 0;\n}\n\nstatic inline void set_post_schedule(struct rq *rq)\n{\n}\n#endif \n\nstatic void enqueue_task_dl(struct rq *rq, struct task_struct *p, int flags);\nstatic void __dequeue_task_dl(struct rq *rq, struct task_struct *p, int flags);\nstatic void check_preempt_curr_dl(struct rq *rq, struct task_struct *p,\n\t\t\t\t  int flags);\n\n\nstatic inline void setup_new_dl_entity(struct sched_dl_entity *dl_se,\n\t\t\t\t       struct sched_dl_entity *pi_se)\n{\n\tstruct dl_rq *dl_rq = dl_rq_of_se(dl_se);\n\tstruct rq *rq = rq_of_dl_rq(dl_rq);\n\n\tWARN_ON(!dl_se->dl_new || dl_se->dl_throttled);\n\n\t\n\tdl_se->deadline = rq_clock(rq) + pi_se->dl_deadline;\n\tdl_se->runtime = pi_se->dl_runtime;\n\tdl_se->dl_new = 0;\n}\n\n\nstatic void replenish_dl_entity(struct sched_dl_entity *dl_se,\n\t\t\t\tstruct sched_dl_entity *pi_se)\n{\n\tstruct dl_rq *dl_rq = dl_rq_of_se(dl_se);\n\tstruct rq *rq = rq_of_dl_rq(dl_rq);\n\n\tBUG_ON(pi_se->dl_runtime <= 0);\n\n\t\n\tif (dl_se->dl_deadline == 0) {\n\t\tdl_se->deadline = rq_clock(rq) + pi_se->dl_deadline;\n\t\tdl_se->runtime = pi_se->dl_runtime;\n\t}\n\n\t\n\twhile (dl_se->runtime <= 0) {\n\t\tdl_se->deadline += pi_se->dl_period;\n\t\tdl_se->runtime += pi_se->dl_runtime;\n\t}\n\n\t\n\tif (dl_time_before(dl_se->deadline, rq_clock(rq))) {\n\t\tprintk_deferred_once(\"", "37": "\"\n\nchar *_braille_console_setup(char **str, char **brl_options)\n{\n\tif (!memcmp(*str, \"", "38": "\"\n\nconst char *pm_labels[] = { \"", "39": "\"\n#endif\n\t\"", "40": "\"\n#endif\n\nstruct trace_option_dentry {\n\tstruct tracer_opt\t\t*opt;\n\tstruct tracer_flags\t\t*flags;\n\tstruct trace_array\t\t*tr;\n\tstruct dentry\t\t\t*entry;\n};\n\nstatic ssize_t\ntrace_options_read(struct file *filp, char __user *ubuf, size_t cnt,\n\t\t\tloff_t *ppos)\n{\n\tstruct trace_option_dentry *topt = filp->private_data;\n\tchar *buf;\n\n\tif (topt->flags->val & topt->opt->bit)\n\t\tbuf = \"", "41": "\"\n#endif\n#endif \n\t\"", "42": "\"\n#endif\n#ifdef CONFIG_FUNCTION_GRAPH_TRACER\n\t\"", "43": "\"\n#endif\n#ifdef CONFIG_STACK_TRACER\n\t\"", "44": "\"\n#endif\n#ifdef CONFIG_TRACER_SNAPSHOT\n\t\"", "45": "\"\n#endif \n#ifdef CONFIG_FUNCTION_TRACER\n\t\"", "46": "\"\n#ifdef CONFIG_DYNAMIC_FTRACE\n\t\"", "47": "\"\n#ifdef CONFIG_STACKTRACE\n\t\"", "48": "\"\n#ifdef CONFIG_X86_64\n\t\"", "49": "\"\n#include \"", "50": "\"\n;\n\nstatic ssize_t\ntracing_readme_read(struct file *filp, char __user *ubuf,\n\t\t       size_t cnt, loff_t *ppos)\n{\n\treturn simple_read_from_buffer(ubuf, cnt, ppos,\n\t\t\t\t\treadme_msg, strlen(readme_msg));\n}\n\nstatic const struct file_operations tracing_readme_fops = {\n\t.open\t\t= tracing_open_generic,\n\t.read\t\t= tracing_readme_read,\n\t.llseek\t\t= generic_file_llseek,\n};\n\nstatic void *saved_cmdlines_next(struct seq_file *m, void *v, loff_t *pos)\n{\n\tunsigned int *ptr = v;\n\n\tif (*pos || m->count)\n\t\tptr++;\n\n\t(*pos)++;\n\n\tfor (; ptr < &savedcmd->map_cmdline_to_pid[savedcmd->cmdline_num];\n\t     ptr++) {\n\t\tif (*ptr == -1 || *ptr == NO_CMDLINE_MAP)\n\t\t\tcontinue;\n\n\t\treturn ptr;\n\t}\n\n\treturn NULL;\n}\n\nstatic void *saved_cmdlines_start(struct seq_file *m, loff_t *pos)\n{\n\tvoid *v;\n\tloff_t l = 0;\n\n\tpreempt_disable();\n\tarch_spin_lock(&trace_cmdline_lock);\n\n\tv = &savedcmd->map_cmdline_to_pid[0];\n\twhile (l <= *pos) {\n\t\tv = saved_cmdlines_next(m, v, &l);\n\t\tif (!v)\n\t\t\treturn NULL;\n\t}\n\n\treturn v;\n}\n\nstatic void saved_cmdlines_stop(struct seq_file *m, void *v)\n{\n\tarch_spin_unlock(&trace_cmdline_lock);\n\tpreempt_enable();\n}\n\nstatic int saved_cmdlines_show(struct seq_file *m, void *v)\n{\n\tchar buf[TASK_COMM_LEN];\n\tunsigned int *pid = v;\n\n\t__trace_find_cmdline(*pid, buf);\n\tseq_printf(m, \"", "51": "\"                 \"", "52": "\"                \"", "53": "\"               FUNCTION CALLS\\n\"", "54": "\"               |   |   |   |\\n\"", "55": "\"              events:    %ld\\n\"", "56": "\"            task   PID         tree-key  switches  prio\"", "57": "\"         Check your CMOS/BIOS settings.\\n\"", "58": "\"         Please report this, consider using a different clocksource, if possible.\\n\"", "59": "\"         Your kernel is probably still fine.\\n\"", "60": "\"         lost events:   %ld\\n\"", "61": "\"         read events:   %ld\\n\"", "62": "\"         timekeeping: Your kernel is sick, but tries to cope by capping time updates\\n\"", "63": "\"        -----    ----   --------\\n\"", "64": "\"        Depth    Size   Location    (%d entries)\\n\"", "65": "\"        Depth    Size   Location\"", "66": "\"        total events:   %ld\\n\"", "67": "\"       --------                \"", "68": "\"       ----\\n\"", "69": "\"       CPU0\\n\"", "70": "\"       Function                \"", "71": "\"       alloced bytes:    %ld\\n\"", "72": "\"       biggest event:    %d\\n\"", "73": "\"       dropped bytes:    %ld\\n\"", "74": "\"       written bytes:    %ld\\n\"", "75": "\"      %s %s %.*s\\n\"", "76": "\"      smallest event:    %d\\n\"", "77": "\"      time (secs)        count\\n\"", "78": "\"      timekeeping: Your kernel is still fine, but is feeling a bit nervous\\n\"", "79": "\"      |         \"", "80": "\"     TIME       \"", "81": "\"     exec-runtime         sum-exec        sum-sleep\\n\"", "82": "\"     last function: %pf\\n\"", "83": "\"     the %s domain not a subset of the %s domain\\n\"", "84": "\"    \"", "85": "\"    (%d entries)\\n\"", "86": "\"    balk: nt=%lu egt=%lu bt=%lu nb=%lu ny=%lu nos=%lu\\n\"", "87": "\"    delayed:\"", "88": "\"    in-flight:\"", "89": "\"    lock(\"", "90": "\"    pending:\"", "91": "\"    |\\n\"", "92": "\"   (ftrace buffer empty)\\n\"", "93": "\"   \\\"pat tern\\\" or \\\"^pat tern\\\" or \\\"pat tern$\\\"\"", "94": "\"   miss      hit    % \"", "95": "\"   pattern or ^pattern or pattern$ or ^pattern$\\n\"", "96": "\"   |    |        \"", "97": "\"   |   |      \"", "98": "\"  \"", "99": "\"  %-11.11s \"", "100": "\"  %-30.30s  %10lu\"", "101": "\"  %pS flags:%lx\\n\"", "102": "\"  %s %-44s %15lu\\n\"", "103": "\"  %s\"", "104": "\"  'grep' is just a key word.\\n\"", "105": "\"  +\"", "106": "\"  ----              ----\\n\"", "107": "\"  --------                               \"", "108": "\"  --------                               ---\\n\"", "109": "\"  .%-15s: %Lu nsecs\\n\"", "110": "\"  .%-15s: %Lu\\n\"", "111": "\"  .%-30s: %Ld.%06ld\\n\"", "112": "\"  .%-30s: %Ld\\n\"", "113": "\"  .%-30s: %d\\n\"", "114": "\"  .%-30s: %ld\\n\"", "115": "\"  .%-30s: %lld.%06ld\\n\"", "116": "\"  .%-30s: %lld\\n\"", "117": "\"  .%-30s: %lu\\n\"", "118": "\"  .%-40s: %Ld.%06ld\\n\"", "119": "\"  .%-40s: %Ld\\n\"", "120": "\"  .%-40s: %d (%s)\\n\"", "121": "\"  ...\\n\"", "122": "\"  <Interrupt>\\n\"", "123": "\"  And if there are spaces in the pattern, you may \"", "124": "\"  Any command's output may be filtered through an \"", "125": "\"  Change the kernel CONFIG_DEBUG_RODATA=n\\n\"", "126": "\"  DURATION   \"", "127": "\"  Error: does not match running \"", "128": "\"  Error: no saved data for this cpu\\n\"", "129": "\"  FUNC:FILE:LINE\\n\"", "130": "\"  File              Line\\n\"", "131": "\"  Function                               \"", "132": "\"  Function                               Hit\\n\"", "133": "\"  OR use hw breaks: help bph\\n\"", "134": "\"  TASK/PID       \"", "135": "\"  The pattern may include a very limited set of \"", "136": "\"  echo global > /sys/kernel/debug/tracing/trace_clock\\n\"", "137": "\"  from func %ps return to %lx\\n\"", "138": "\"  lock(\"", "139": "\"  ok  \"", "140": "\"  pwq %d:\"", "141": "\"  recorded len bytes:   %ld\\n\"", "142": "\"  task                        PC stack   pid father\\n\"", "143": "\"  task                PC stack   pid father\\n\"", "144": "\"  task %d\\n\"", "145": "\" \"", "146": "\" #%d\"", "147": "\" %*d\"", "148": "\" %*pbl\"", "149": "\" %-8s\"", "150": "\" %12llu: \"", "151": "\" %14lu \"", "152": "\" %4lld: \"", "153": "\" %4lldus%c: \"", "154": "\" %5d:%3d:%c %s [%03d] %5d:%3d:%c %s\\n\"", "155": "\" %5lu.%06lu: \"", "156": "\" %8s\"", "157": "\" %d\"", "158": "\" %d(%ld,%ld)\"", "159": "\" %i \"", "160": "\" %llx\"", "161": "\" %lx <-- %lx\"", "162": "\" %ps\"", "163": "\" %s does not support one-shot mode.\\n\"", "164": "\" %s is not functional.\\n\"", "165": "\" %s\"", "166": "\" %s%d\"", "167": "\" %s%s\"", "168": "\" %s+%u\"", "169": "\" %s:0x%p\"", "170": "\" %s=\"", "171": "\" %s=%s\"", "172": "\" %s=(fault)\"", "173": "\" %s=\\\"%s\\\"\"", "174": "\" %s\\n\"", "175": "\" %u %u %u %u %u %u %u %u %u %u %u %u\\n\"", "176": "\" '-'.\\n\"", "177": "\" (\"", "178": "\" (%ld)%s\"", "179": "\" (%s)\"", "180": "\" (Live)\"", "181": "\" (Loading)\"", "182": "\" (Overruns: %lu)\\n\"", "183": "\" (Unloading)\"", "184": "\" (cpu_capacity = %d)\"", "185": "\" (owned by %s)\\n\"", "186": "\" (t=%lu jiffies g=%ld c=%ld q=%lu)\\n\"", "187": "\" */\\n\"", "188": "\" ,\n\t\tconsole->name, console->index);\n\n\tres = _braille_unregister_console(console);\n\tif (res)\n\t\treturn res;\n\n\tres = 1;\n\tconsole_lock();\n\tif (console_drivers == console) {\n\t\tconsole_drivers=console->next;\n\t\tres = 0;\n\t} else if (console_drivers) {\n\t\tfor (a=console_drivers->next, b=console_drivers ;\n\t\t     a; b=a, a=b->next) {\n\t\t\tif (a == console) {\n\t\t\t\tb->next = a->next;\n\t\t\t\tres = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t\n\tif (console_drivers != NULL && console->flags & CON_CONSDEV)\n\t\tconsole_drivers->flags |= CON_CONSDEV;\n\n\tconsole->flags &= ~CON_ENABLED;\n\tconsole_unlock();\n\tconsole_sysfs_notify();\n\treturn res;\n}\nEXPORT_SYMBOL(unregister_console);\n\nstatic int __init printk_late_init(void)\n{\n\tstruct console *con;\n\n\tfor_each_console(con) {\n\t\tif (!keep_bootcon && con->flags & CON_BOOT) {\n\t\t\tunregister_console(con);\n\t\t}\n\t}\n\thotcpu_notifier(console_cpu_notify, 0);\n\treturn 0;\n}\nlate_initcall(printk_late_init);\n\n#if defined CONFIG_PRINTK\n\n#define PRINTK_PENDING_WAKEUP\t0x01\n#define PRINTK_PENDING_OUTPUT\t0x02\n\nstatic DEFINE_PER_CPU(int, printk_pending);\n\nstatic void wake_up_klogd_work_func(struct irq_work *irq_work)\n{\n\tint pending = __this_cpu_xchg(printk_pending, 0);\n\n\tif (pending & PRINTK_PENDING_OUTPUT) {\n\t\t\n\t\tif (console_trylock())\n\t\t\tconsole_unlock();\n\t}\n\n\tif (pending & PRINTK_PENDING_WAKEUP)\n\t\twake_up_interruptible(&log_wait);\n}\n\nstatic DEFINE_PER_CPU(struct irq_work, wake_up_klogd_work) = {\n\t.func = wake_up_klogd_work_func,\n\t.flags = IRQ_WORK_LAZY,\n};\n\nvoid wake_up_klogd(void)\n{\n\tpreempt_disable();\n\tif (waitqueue_active(&log_wait)) {\n\t\tthis_cpu_or(printk_pending, PRINTK_PENDING_WAKEUP);\n\t\tirq_work_queue(this_cpu_ptr(&wake_up_klogd_work));\n\t}\n\tpreempt_enable();\n}\n\nint printk_deferred(const char *fmt, ...)\n{\n\tva_list args;\n\tint r;\n\n\tpreempt_disable();\n\tva_start(args, fmt);\n\tr = vprintk_emit(0, LOGLEVEL_SCHED, NULL, 0, fmt, args);\n\tva_end(args);\n\n\t__this_cpu_or(printk_pending, PRINTK_PENDING_OUTPUT);\n\tirq_work_queue(this_cpu_ptr(&wake_up_klogd_work));\n\tpreempt_enable();\n\n\treturn r;\n}\n\n\nDEFINE_RATELIMIT_STATE(printk_ratelimit_state, 5 * HZ, 10);\n\nint __printk_ratelimit(const char *func)\n{\n\treturn ___ratelimit(&printk_ratelimit_state, func);\n}\nEXPORT_SYMBOL(__printk_ratelimit);\n\n\nbool printk_timed_ratelimit(unsigned long *caller_jiffies,\n\t\t\tunsigned int interval_msecs)\n{\n\tunsigned long elapsed = jiffies - *caller_jiffies;\n\n\tif (*caller_jiffies && elapsed <= msecs_to_jiffies(interval_msecs))\n\t\treturn false;\n\n\t*caller_jiffies = jiffies;\n\treturn true;\n}\nEXPORT_SYMBOL(printk_timed_ratelimit);\n\nstatic DEFINE_SPINLOCK(dump_list_lock);\nstatic LIST_HEAD(dump_list);\n\n\nint kmsg_dump_register(struct kmsg_dumper *dumper)\n{\n\tunsigned long flags;\n\tint err = -EBUSY;\n\n\t\n\tif (!dumper->dump)\n\t\treturn -EINVAL;\n\n\tspin_lock_irqsave(&dump_list_lock, flags);\n\t\n\tif (!dumper->registered) {\n\t\tdumper->registered = 1;\n\t\tlist_add_tail_rcu(&dumper->list, &dump_list);\n\t\terr = 0;\n\t}\n\tspin_unlock_irqrestore(&dump_list_lock, flags);\n\n\treturn err;\n}\nEXPORT_SYMBOL_GPL(kmsg_dump_register);\n\n\nint kmsg_dump_unregister(struct kmsg_dumper *dumper)\n{\n\tunsigned long flags;\n\tint err = -EINVAL;\n\n\tspin_lock_irqsave(&dump_list_lock, flags);\n\tif (dumper->registered) {\n\t\tdumper->registered = 0;\n\t\tlist_del_rcu(&dumper->list);\n\t\terr = 0;\n\t}\n\tspin_unlock_irqrestore(&dump_list_lock, flags);\n\tsynchronize_rcu();\n\n\treturn err;\n}\nEXPORT_SYMBOL_GPL(kmsg_dump_unregister);\n\nstatic bool always_kmsg_dump;\nmodule_param_named(always_kmsg_dump, always_kmsg_dump, bool, S_IRUGO | S_IWUSR);\n\n\nvoid kmsg_dump(enum kmsg_dump_reason reason)\n{\n\tstruct kmsg_dumper *dumper;\n\tunsigned long flags;\n\n\tif ((reason > KMSG_DUMP_OOPS) && !always_kmsg_dump)\n\t\treturn;\n\n\trcu_read_lock();\n\tlist_for_each_entry_rcu(dumper, &dump_list, list) {\n\t\tif (dumper->max_reason && reason > dumper->max_reason)\n\t\t\tcontinue;\n\n\t\t\n\t\tdumper->active = true;\n\n\t\traw_spin_lock_irqsave(&logbuf_lock, flags);\n\t\tdumper->cur_seq = clear_seq;\n\t\tdumper->cur_idx = clear_idx;\n\t\tdumper->next_seq = log_next_seq;\n\t\tdumper->next_idx = log_next_idx;\n\t\traw_spin_unlock_irqrestore(&logbuf_lock, flags);\n\n\t\t\n\t\tdumper->dump(dumper, reason);\n\n\t\t\n\t\tdumper->active = false;\n\t}\n\trcu_read_unlock();\n}\n\n\nbool kmsg_dump_get_line_nolock(struct kmsg_dumper *dumper, bool syslog,\n\t\t\t       char *line, size_t size, size_t *len)\n{\n\tstruct printk_log *msg;\n\tsize_t l = 0;\n\tbool ret = false;\n\n\tif (!dumper->active)\n\t\tgoto out;\n\n\tif (dumper->cur_seq < log_first_seq) {\n\t\t\n\t\tdumper->cur_seq = log_first_seq;\n\t\tdumper->cur_idx = log_first_idx;\n\t}\n\n\t\n\tif (dumper->cur_seq >= log_next_seq)\n\t\tgoto out;\n\n\tmsg = log_from_idx(dumper->cur_idx);\n\tl = msg_print_text(msg, 0, syslog, line, size);\n\n\tdumper->cur_idx = log_next(dumper->cur_idx);\n\tdumper->cur_seq++;\n\tret = true;\nout:\n\tif (len)\n\t\t*len = l;\n\treturn ret;\n}\n\n\nbool kmsg_dump_get_line(struct kmsg_dumper *dumper, bool syslog,\n\t\t\tchar *line, size_t size, size_t *len)\n{\n\tunsigned long flags;\n\tbool ret;\n\n\traw_spin_lock_irqsave(&logbuf_lock, flags);\n\tret = kmsg_dump_get_line_nolock(dumper, syslog, line, size, len);\n\traw_spin_unlock_irqrestore(&logbuf_lock, flags);\n\n\treturn ret;\n}\nEXPORT_SYMBOL_GPL(kmsg_dump_get_line);\n\n\nbool kmsg_dump_get_buffer(struct kmsg_dumper *dumper, bool syslog,\n\t\t\t  char *buf, size_t size, size_t *len)\n{\n\tunsigned long flags;\n\tu64 seq;\n\tu32 idx;\n\tu64 next_seq;\n\tu32 next_idx;\n\tenum log_flags prev;\n\tsize_t l = 0;\n\tbool ret = false;\n\n\tif (!dumper->active)\n\t\tgoto out;\n\n\traw_spin_lock_irqsave(&logbuf_lock, flags);\n\tif (dumper->cur_seq < log_first_seq) {\n\t\t\n\t\tdumper->cur_seq = log_first_seq;\n\t\tdumper->cur_idx = log_first_idx;\n\t}\n\n\t\n\tif (dumper->cur_seq >= dumper->next_seq) {\n\t\traw_spin_unlock_irqrestore(&logbuf_lock, flags);\n\t\tgoto out;\n\t}\n\n\t\n\tseq = dumper->cur_seq;\n\tidx = dumper->cur_idx;\n\tprev = 0;\n\twhile (seq < dumper->next_seq) {\n\t\tstruct printk_log *msg = log_from_idx(idx);\n\n\t\tl += msg_print_text(msg, prev, true, NULL, 0);\n\t\tidx = log_next(idx);\n\t\tseq++;\n\t\tprev = msg->flags;\n\t}\n\n\t\n\tseq = dumper->cur_seq;\n\tidx = dumper->cur_idx;\n\tprev = 0;\n\twhile (l > size && seq < dumper->next_seq) {\n\t\tstruct printk_log *msg = log_from_idx(idx);\n\n\t\tl -= msg_print_text(msg, prev, true, NULL, 0);\n\t\tidx = log_next(idx);\n\t\tseq++;\n\t\tprev = msg->flags;\n\t}\n\n\t\n\tnext_seq = seq;\n\tnext_idx = idx;\n\n\tl = 0;\n\twhile (seq < dumper->next_seq) {\n\t\tstruct printk_log *msg = log_from_idx(idx);\n\n\t\tl += msg_print_text(msg, prev, syslog, buf + l, size - l);\n\t\tidx = log_next(idx);\n\t\tseq++;\n\t\tprev = msg->flags;\n\t}\n\n\tdumper->next_seq = next_seq;\n\tdumper->next_idx = next_idx;\n\tret = true;\n\traw_spin_unlock_irqrestore(&logbuf_lock, flags);\nout:\n\tif (len)\n\t\t*len = l;\n\treturn ret;\n}\nEXPORT_SYMBOL_GPL(kmsg_dump_get_buffer);\n\n\nvoid kmsg_dump_rewind_nolock(struct kmsg_dumper *dumper)\n{\n\tdumper->cur_seq = clear_seq;\n\tdumper->cur_idx = clear_idx;\n\tdumper->next_seq = log_next_seq;\n\tdumper->next_idx = log_next_idx;\n}\n\n\nvoid kmsg_dump_rewind(struct kmsg_dumper *dumper)\n{\n\tunsigned long flags;\n\n\traw_spin_lock_irqsave(&logbuf_lock, flags);\n\tkmsg_dump_rewind_nolock(dumper);\n\traw_spin_unlock_irqrestore(&logbuf_lock, flags);\n}\nEXPORT_SYMBOL_GPL(kmsg_dump_rewind);\n\nstatic char dump_stack_arch_desc_str[128];\n\n\nvoid __init dump_stack_set_arch_desc(const char *fmt, ...)\n{\n\tva_list args;\n\n\tva_start(args, fmt);\n\tvsnprintf(dump_stack_arch_desc_str, sizeof(dump_stack_arch_desc_str),\n\t\t  fmt, args);\n\tva_end(args);\n}\n\n\nvoid dump_stack_print_info(const char *log_lvl)\n{\n\tprintk(\"", "189": "\" ,\n\t\tnewcon->name, newcon->index);\n\tif (bcon &&\n\t    ((newcon->flags & (CON_CONSDEV | CON_BOOT)) == CON_CONSDEV) &&\n\t    !keep_bootcon) {\n\t\t\n\t\tfor_each_console(bcon)\n\t\t\tif (bcon->flags & CON_BOOT)\n\t\t\t\tunregister_console(bcon);\n\t}\n}\nEXPORT_SYMBOL(register_console);\n\nint unregister_console(struct console *console)\n{\n        struct console *a, *b;\n\tint res;\n\n\tpr_info(\"", "190": "\" - unable to \"", "191": "\" ------- ---------  - \"", "192": "\" ------------------------------------------\\n\"", "193": "\" -> [%p] \"", "194": "\" ... kernel command line filter set: force PASS ... \"", "195": "\" 0x%p\"", "196": "\" 0x%pK\"", "197": "\" : \"", "198": "\" <\"", "199": "\" <- \"", "200": "\" <-\"", "201": "\" = \"", "202": "\" => \"", "203": "\" BD:%5ld\"", "204": "\" CPU\"", "205": "\" CPU%d\\n\"", "206": "\" Call or barrier ops missing for %s,\\n\"", "207": "\" FD:%5ld\"", "208": "\" FIELD_STRING_FUNC \"", "209": "\" FIELD_STRING_IP;\n\t} else {\n\t\tfmt = \"", "210": "\" FIELD_STRING_RETIP;\n\t}\n\n\t\n#define LEN_OR_ZERO (len ? len - pos : 0)\n\n\tpos += snprintf(buf + pos, LEN_OR_ZERO, \"", "211": "\" Grace periods expedited from boot/sysfs for %s,\\n\"", "212": "\" MAYDAY\"", "213": "\" MISS \"", "214": "\" May be due to missing lock nesting notation\\n\\n\"", "215": "\" Misfeature support will be removed\\n\"", "216": "\" OPS:%8ld\"", "217": "\" P%d\"", "218": "\" Possible unsafe locking scenario:\\n\\n\"", "219": "\" R\"", "220": "\" R%d=%s\"", "221": "\" RCU barrier testing omitted from run.\\n\"", "222": "\" Testing of dynamic grace-period expediting diabled.\\n\"", "223": "\" With dropped events, record len and size may not match\\n\"", "224": "\" [ \"", "225": "\" [%p] {%s:%d}\\n\"", "226": "\" [%p] {%s}\\n\"", "227": "\" [%s]\"", "228": "\" [debug]\"", "229": "\" [last unloaded: %s]\"", "230": "\" \\n\"", "231": "\" \\t\"", "232": "\" a%d\"", "233": "\" a0=%lx a1=%lx a2=%lx a3=%lx items=%d\"", "234": "\" active=%d/%d%s\\n\"", "235": "\" actual: \"", "236": "\" all direct dependencies:       %11lu\\n\"", "237": "\" alloced and written from above\\n\"", "238": "\" and \"", "239": "\" and 15 (pass and disconnect)\\n\"", "240": "\" auid=%u ses=%u\"", "241": "\" b=%ld\"", "242": "\" cap_fe=%d cap_fver=%x\"", "243": "\" chain lookup hits:             %11llu\\n\"", "244": "\" chain lookup misses:           %11llu\\n\"", "245": "\" ci=%lu nci=%lu co=%lu ca=%lu\\n\"", "246": "\" cleared\\n\"", "247": "\" combined max dependencies:     %11u\\n\"", "248": "\" comm=\"", "249": "\" correct incorrect  % \"", "250": "\" cpus=%*pbl\"", "251": "\" cwd=\"", "252": "\" cyclic checks:                 %11llu\\n\"", "253": "\" debug_locks:                   %11u\\n\"", "254": "\" dependency chain hlocks:       %11d [max: %lu]\\n\"", "255": "\" dependency chains:             %11lu [max: %lu]\\n\"", "256": "\" dev=%02x:%02x mode=%#ho\"", "257": "\" dir=\"", "258": "\" direct dependencies:           %11lu [max: %lu]\\n\"", "259": "\" disabled\\n\"", "260": "\" disables this message.\\n\"", "261": "\" dt=%d/%llx/%d df=%lu\"", "262": "\" egid=%u sgid=%u fsgid=%u tty=%s ses=%u\"", "263": "\" enabled\"", "264": "\" euid=%u suid=%u fsuid=%u\"", "265": "\" exe=\"", "266": "\" exe=(null)\"", "267": "\" expected tramp: %lx\\n\"", "268": "\" fe=%d\"", "269": "\" feature=%s old=%u new=%u old_lock=%u new_lock=%u res=%d\"", "270": "\" find-mask backwards checks:    %11llu\\n\"", "271": "\" find-mask forwards checks:     %11llu\\n\"", "272": "\" flags=0x%x nice=%d\"", "273": "\" fmt\n\n#include <linux/kernel.h>\n#include <linux/console.h>\n#include <linux/string.h>\n\n#include \"", "274": "\" fp%d=%s\"", "275": "\" hardirq off events:            %11llu\\n\"", "276": "\" hardirq on events:             %11llu\\n\"", "277": "\" hardirq-read-safe locks:       %11lu\\n\"", "278": "\" hardirq-read-unsafe locks:     %11lu\\n\"", "279": "\" hardirq-safe locks:            %11lu\\n\"", "280": "\" hardirq-unsafe locks:          %11lu\\n\"", "281": "\" has parent\"", "282": "\" if %s\\n\"", "283": "\" ignoring it.\\n\"", "284": "\" in-hardirq chains:             %11u\\n\"", "285": "\" in-process chains:             %11u\\n\"", "286": "\" in-softirq chains:             %11u\\n\"", "287": "\" indirect dependencies:         %11lu\\n\"", "288": "\" inode=%lu\"", "289": "\" irq-read-safe locks:           %11lu\\n\"", "290": "\" irq-read-unsafe locks:         %11lu\\n\"", "291": "\" irq-safe locks:                %11lu\\n\"", "292": "\" irq-unsafe locks:              %11lu\\n\"", "293": "\" key=\"", "294": "\" kt=%d/%c ktl=%x\"", "295": "\" list=%d res=%d\"", "296": "\" list=%d res=1\"", "297": "\" lock-classes:                  %11lu [max: %lu]\\n\"", "298": "\" lock: %pS, .magic: %08x, .owner: %s/%d, \"", "299": "\" locked it.\\n\"", "300": "\" mag %x, put %p, usage %d, subscr %d\\n\"", "301": "\" manager: %d\"", "302": "\" max bfs queue depth:           %11u\\n\"", "303": "\" max locking depth:             %11u\\n\"", "304": "\" mems_allowed=%*pbl\\n\"", "305": "\" name=\"", "306": "\" name=(null)\"", "307": "\" nametype=\"", "308": "\" nestedness limit pid/tgid=%d/%d\\n\"", "309": "\" no tick device\\n\"", "310": "\" node=%d\"", "311": "\" obj=%s\"", "312": "\" obj=(none)\"", "313": "\" ocomm=\"", "314": "\" of=%lu\"", "315": "\" old-auid=%u auid=%u old-ses=%u ses=%u res=%d\"", "316": "\" old-log_passwd=%d new-log_passwd=%d res=%d\"", "317": "\" op=\"", "318": "\" op=tty_set old-enabled=%d new-enabled=%d\"", "319": "\" or \\\"^pat tern$\\\"\\n\"", "320": "\" osid=%u\"", "321": "\" ouid=%u ogid=%u rdev=%02x:%02x\"", "322": "\" path=\"", "323": "\" per=%lx\"", "324": "\" pid=%d comm=\"", "325": "\" ppid=%d pid=%d auid=%u uid=%u gid=%u\"", "326": "\" probe to kernel_sched_migrate_task\\n\"", "327": "\" probe to kernel_sched_switch\\n\"", "328": "\" probe to kernel_sched_wakeup\\n\"", "329": "\" probe to kernel_sched_wakeup_new\\n\"", "330": "\" protection\"", "331": "\" ql=%ld/%ld qs=%c%c%c%c\"", "332": "\" recorded size bytes:   %ld\\n\"", "333": "\" redundant hardirq offs:        %11llu\\n\"", "334": "\" redundant hardirq ons:         %11llu\\n\"", "335": "\" redundant softirq offs:        %11llu\\n\"", "336": "\" redundant softirq ons:         %11llu\\n\"", "337": "\" res=%d\"", "338": "\" res=0\"", "339": "\" sig=%ld arch=%x syscall=%ld compat=%d ip=0x%lx code=0x%x\"", "340": "\" sig=%ld\"", "341": "\" softirq off events:            %11llu\\n\"", "342": "\" softirq on events:             %11llu\\n\"", "343": "\" softirq-read-safe locks:       %11lu\\n\"", "344": "\" softirq-read-unsafe locks:     %11lu\\n\"", "345": "\" softirq-safe locks:            %11lu\\n\"", "346": "\" softirq-unsafe locks:          %11lu\\n\"", "347": "\" stack-trace entries:           %11lu [max: %lu]\\n\"", "348": "\" subj=%s\"", "349": "\" subsystem\\n\"", "350": "\" success=%s exit=%ld\"", "351": "\" suppressed,\\nuse 'ps A' to see all.\\n\"", "352": "\" threaded [<%p>] %pf\"", "353": "\" uncategorized locks:           %11lu\\n\"", "354": "\" unused locks:                  %11lu\\n\"", "355": "\" workers=%d\"", "356": "\" zero suppressed\\n\"", "357": "\" {\"", "358": "\" |  \"", "359": "\" | \"", "360": "\"!!! \"", "361": "\"!!!\"", "362": "\"!\"", "363": "\"!=\"", "364": "\"!@#$%^&*()?+\\\\?+|:';\\\",.<>/?abcdefghijklmnopqrstuv\"", "365": "\"\"", "366": "\"#              | |       |          |         |   \"", "367": "\"#           TASK-PID    CPU#    TIMESTAMP  CORRECT\"", "368": "\"#  Stack tracer disabled\\n\"", "369": "\"#  |     |     |           |   |   |\\n\"", "370": "\"# Available triggers:\\n\"", "371": "\"# DEV   CPU TIMESTAMP     PID ACT FLG\\n\"", "372": "\"# If no events are modified, an error message will be displayed here\"", "373": "\"# Only events with the given fields will be affected.\\n\"", "374": "\"# To enable the stack tracer, either add 'stacktrace' to the\\n\"", "375": "\"# Use this to set filters for multiple events.\\n\"", "376": "\"# bursts in flood, zero to disable\"", "377": "\"# callbacks per burst in flood\"", "378": "\"# kernel command line\\n\"", "379": "\"# of callbacks/kthreads for barrier testing\"", "380": "\"# of writes between timestamp readings\"", "381": "\"# or 'echo 1 > /proc/sys/kernel/stack_tracer_enabled'\\n\"", "382": "\"### global filter ###\\n\"", "383": "\"#%.*s  _-----=> irqs-off        \\n\"", "384": "\"#%.*s / _----=> need-resched    \\n\"", "385": "\"#%.*s| / _---=> hardirq/softirq \\n\"", "386": "\"#%.*s|| / _--=> preempt-depth   \\n\"", "387": "\"#%.*s||| /                      \\n\"", "388": "\"#%d\"", "389": "\"#\\n\"", "390": "\"#subsys_name\\thierarchy\\tnum_cgroups\\tenabled\\n\"", "391": "\"$retval\"", "392": "\"$stack $stack0 +0($stack)\"", "393": "\"%%0%dlx \"", "394": "\"%%16.16l%c \"", "395": "\"%%2.2l%c \"", "396": "\"%%4.4l%c \"", "397": "\"%%8.8l%c \"", "398": "\"%*c\"", "399": "\"%*c[<%p>] %pS\\n\"", "400": "\"%*d: \"", "401": "\"%*pb\"", "402": "\"%*pb\\n\"", "403": "\"%*pbl\\n\"", "404": "\"%*s domain %d: \"", "405": "\"%*s groups:\"", "406": "\"%*s%0*llx-%0*llx : %s\\n\"", "407": "\"%-*s      Pid   Parent [*] cpu State %-*s Command\\n\"", "408": "\"%-15.15s %-20.20s %s\\n\"", "409": "\"%-15.15s %-20s%s%s\\n\"", "410": "\"%-15.15s %c\"", "411": "\"%-20s%8u  0x%p \"", "412": "\"%-40s: %Ld.%06ld\\n\"", "413": "\"%-40s: %Ld\\n\"", "414": "\"%-45s:%14Ld.%06ld\\n\"", "415": "\"%-45s:%21Ld\\n\"", "416": "\"%016Lx tail class: [%p] %s\\n\"", "417": "\"%016lx\"", "418": "\"%02ld:%02ld\\n\"", "419": "\"%02lx 0x%lx %d\\n\"", "420": "\"%02x \"", "421": "\"%08lx\"", "422": "\"%08x\"", "423": "\"%10u \"", "424": "\"%10u %10u %10u\\n\"", "425": "\"%14lu \"", "426": "\"%14s %14s\\n\"", "427": "\"%14s set\\n\"", "428": "\"%15Ld %15Ld %15Ld.%06ld %15Ld.%06ld %15Ld.%06ld\"", "429": "\"%15s %5d %9Ld.%06ld %9Ld %5d \"", "430": "\"%16s %5d %3d %d %08x %08lx \"", "431": "\"%16s-%-5d [%03d] \"", "432": "\"%16s:%5d [%p, %3d]\"", "433": "\"%38s-R:\"", "434": "\"%38s-W:\"", "435": "\"%3d%cc=%ld g=%ld pq=%d/%d qp=%d\"", "436": "\"%3d%cnp=%ld \"", "437": "\"%3d,%-3d %2d %5d.%09lu %5u %2s %3s \"", "438": "\"%3d,%-3d %2s %3s \"", "439": "\"%3ld) %8d   %5d   \"", "440": "\"%40s %14lu %29s %pS\\n\"", "441": "\"%40s %14s %14s %14s %14s %14s %14s %14s %14s %14s %14s \"", "442": "\"%40s:\"", "443": "\"%4d \"", "444": "\"%5d \"", "445": "\"%5lu %5d %6d 0x%08lx\\n\"", "446": "\"%5lu.%06lu |  \"", "447": "\"%8.8s-%-5d %3d\"", "448": "\"%8lu %8lu \"", "449": "\"%9Ld.%06ld %9Ld.%06ld %9Ld.%06ld\"", "450": "\"%=\"", "451": "\"%Ld\"", "452": "\"%c\"", "453": "\"%c%c%c\"", "454": "\"%c:%s/%s\"", "455": "\"%c_%s_0x%lx\"", "456": "\"%d %d %c %d %d %d %c\\n\"", "457": "\"%d %d\"", "458": "\"%d day%s \"", "459": "\"%d idle process%s (state I)%s\\n\"", "460": "\"%d lock%s held by %s/%d:\\n\"", "461": "\"%d sleeping system daemon (state M) \"", "462": "\"%d\"", "463": "\"%d: %d: %s\\n\"", "464": "\"%d:%d tasks=%c%c%c%c kt=%c ntb=%lu neb=%lu nnb=%lu \"", "465": "\"%d:%d%s\"", "466": "\"%d\\n\"", "467": "\"%hhu\"", "468": "\"%hi\"", "469": "\"%hu\"", "470": "\"%i %lu %lu\"", "471": "\"%i\"", "472": "\"%i\\n\"", "473": "\"%ld\"", "474": "\"%ld\\n\"", "475": "\"%li\"", "476": "\"%lld\\n\"", "477": "\"%llu \"", "478": "\"%llu + %u <- (%d,%d) %llu\\n\"", "479": "\"%llu + %u [%d]\\n\"", "480": "\"%llu + %u [%s]\\n\"", "481": "\"%llu / %llu [%s]\\n\"", "482": "\"%llu [%d]\\n\"", "483": "\"%llu\"", "484": "\"%llu\\n\"", "485": "\"%llx\"", "486": "\"%lu\"", "487": "\"%lx %lx %lx %d %x %x\"", "488": "\"%lx %lx %lx %d %x\"", "489": "\"%lx %lx\\n\"", "490": "\"%lx/%lx->%lx %c%c>%c %d:%d ^%d    \"", "491": "\"%p  %s  %p \"", "492": "\"%p  %s  %s+0x%x  %s \"", "493": "\"%p\"", "494": "\"%p: %c%c nvcsw: %lu/%lu holdout: %d idle_cpu: %d/%d\\n\"", "495": "\"%pK %c %s\\n\"", "496": "\"%pK %c %s\\t[%s]\\n\"", "497": "\"%pS\\n\"", "498": "\"%ps() {\\n\"", "499": "\"%ps();\\n\"", "500": "\"%ps: %s\"", "501": "\"%ps:\"", "502": "\"%ps:%ps\"", "503": "\"%ps:%s\"", "504": "\"%s \"", "505": "\"%s %.*s %s\\n\"", "506": "\"%s %d%s:%pf\"", "507": "\"%s %lld\\n\"", "508": "\"%s %pf\"", "509": "\"%s %u\"", "510": "\"%s (%d) created nested cgroup for controller \\\"%s\\\" which has incomplete hierarchy support. Nested cgroups may change behavior in the future.\\n\"", "511": "\"%s (%d): error creating kset\\n\"", "512": "\"%s (%d, #threads: %d)\\n\"", "513": "\"%s -> 0x%lx\\n\"", "514": "\"%s = \"", "515": "\"%s BAR(%d)\"", "516": "\"%s already dying\\n\"", "517": "\"%s called for unknown object.\"", "518": "\"%s calls setitimer() with new_value NULL pointer.\"", "519": "\"%s cpuset=\"", "520": "\"%s depends on broadcast, but no broadcast function available\\n\"", "521": "\"%s didn't like hwirq-0x%lx to VIRQ%i mapping (rc=%d)\\n\"", "522": "\"%s does not use %s!\\n\"", "523": "\"%s entered refrigerator\\n\"", "524": "\"%s kthread starved for %ld jiffies!\\n\"", "525": "\"%s left refrigerator\\n\"", "526": "\"%s type has no corresponding fetch method.\\n\"", "527": "\"%s unusing %s\\n\"", "528": "\"%s uses %s!\\n\"", "529": "\"%s\"", "530": "\"%s%s \"", "531": "\"%s%s per-CPU(idx=%d):\"", "532": "\"%s%s%s%s\\n\"", "533": "\"%s(\"", "534": "\"%s(%s, irqbase=%i, hwbase=%i, count=%i)\\n\"", "535": "\"%s(, %lx) called with NULL domain\\n\"", "536": "\"%s, func %p help %s\\n\"", "537": "\"%s,\"", "538": "\"%s-%ld\"", "539": "\"%s.%s\"", "540": "\"%s/%d [HC%u[%lu]:SC%u[%lu]:HE%u:SE%u] takes:\\n\"", "541": "\"%s/%d is deadlocking current task %s/%d\\n\\n\"", "542": "\"%s/%d is leaving the kernel with locks still held!\\n\"", "543": "\"%s/%d is trying to acquire lock:\\n\"", "544": "\"%s/%d is trying to contend lock (\"", "545": "\"%s/%d is trying to lock:\\n\"", "546": "\"%s/%d is trying to release lock (\"", "547": "\"%s/%d\"", "548": "\"%s/%d, %p\\n\"", "549": "\"%s/%s.%s\"", "550": "\"%s:  Total: %lld  Max/Min: %ld/%ld %s  Fail: %d %s\\n\"", "551": "\"%s: \"", "552": "\"%s: %016llx\"", "553": "\"%s: %02x\"", "554": "\"%s: %04x\"", "555": "\"%s: %08x\"", "556": "\"%s: %d\\n\"", "557": "\"%s: %lx%s\"", "558": "\"%s: %s: kernel tainted.\\n\"", "559": "\"%s: '%s'->init suspiciously returned %d, it should \"", "560": "\"%s: (\"", "561": "\"%s: (0x%lx <- 0x%lx)\"", "562": "\"%s: (0x%lx)\"", "563": "\"%s: 0x%%0%zulx%s\"", "564": "\"%s: ??\"", "565": "\"%s: Bad constraints on qos?\\n\"", "566": "\"%s: Could not allocate %lu bytes percpu data\\n\"", "567": "\"%s: Ignoring obsolete parameters\\n\"", "568": "\"%s: Unknown parameter `%s'\\n\"", "569": "\"%s: Unknown symbol %s (err %li)\\n\"", "570": "\"%s: `%s' invalid for parameter `%s'\\n\"", "571": "\"%s: `%s' too large for parameter `%s'\\n\"", "572": "\"%s: attempt to bring up CPU %u failed\\n\"", "573": "\"%s: attempt to take down CPU %u failed\\n\"", "574": "\"%s: bad qos param!\\n\"", "575": "\"%s: bp %d bp_enabled %d\\n\"", "576": "\"%s: bp_installed %d\\n\"", "577": "\"%s: can only take %i arguments\\n\"", "578": "\"%s: debug_kmalloc memory leak dah_first %d\\n\"", "579": "\"%s: delayed bp\\n\"", "580": "\"%s: disagrees about version of symbol %s\\n\"", "581": "\"%s: exports duplicate symbol %s\"", "582": "\"%s: failed to add %s, err=%d\\n\"", "583": "\"%s: failed to set breakpoint at 0x%lx\\n\"", "584": "\"%s: h_used %p size %d caller %p\\n\"", "585": "\"%s: h_used %p size %d\\n\"", "586": "\"%s: has both .ctors and .init_array.\\n\"", "587": "\"%s: loading module anyway...\\n\"", "588": "\"%s: module has bad taint, not creating trace events\\n\"", "589": "\"%s: module has no symbols (stripped?)\\n\"", "590": "\"%s: module is already loaded\\n\"", "591": "\"%s: module is from the staging directory, the quality \"", "592": "\"%s: module license '%s' taints kernel.\\n\"", "593": "\"%s: module sysfs not initialized\\n\"", "594": "\"%s: module verification failed: signature \"", "595": "\"%s: option '%s' enabled irq's!\\n\"", "596": "\"%s: out of memory loading\\n\"", "597": "\"%s: parameters '%s' after `--' ignored\\n\"", "598": "\"%s: per-cpu alignment %li > %li\\n\"", "599": "\"%s: please compile with -fno-common\\n\"", "600": "\"%s: string doesn't fit in %u chars.\\n\"", "601": "\"%s: string parameter too long\\n\"", "602": "\"%s: unknown parameter '%s' ignored\\n\"", "603": "\"%s: version magic '%s' should be '%s'\\n\"", "604": "\"%s: wait state: %d ->state: %#lx\\n\"", "605": "\"%s:\"", "606": "\"%s:%d %s!\\n\"", "607": "\"%s:%s:%s\"", "608": "\"%s=%u old=%u\"", "609": "\"%sWorkqueue: %s %pf\"", "610": "\"%s\\\" \\\"%s\\\"\\n\"", "611": "\"%s\\n\"", "612": "\"%s\\t%d\\t%d\\t%d\\n\"", "613": "\"%sname=%s\"", "614": "\"%u \"", "615": "\"%u\"", "616": "\"%u:%s:%s (%u)\"", "617": "\"%u:%u:%u  ==+ %u:%u:%u [%03u]\"", "618": "\"%u:%u:%u  ==> %u:%u:%u [%03u]\"", "619": "\"%u\\n\"", "620": "\"%x\"", "621": "\"%zu\\n\"", "622": "\"&\"", "623": "\"&&\"", "624": "\"&=\"", "625": "\"&struct->lockfield\"", "626": "\"'function_profile_enabled' entry\\n\"", "627": "\"'kprobe_events' entry\\n\"", "628": "\"'kprobe_profile' entry\\n\"", "629": "\"'trace_stat' entry\\n\"", "630": "\"(\"", "631": "\"(%02x) %s\\n\"", "632": "\"(%02x) %sr%d %s %s%d\\n\"", "633": "\"(%02x) %sr%d %s %sr%d\\n\"", "634": "\"(%02x) *(%s *)(r%d %+d) = %d\\n\"", "635": "\"(%02x) *(%s *)(r%d %+d) = r%d\\n\"", "636": "\"(%02x) call %d\\n\"", "637": "\"(%02x) exit\\n\"", "638": "\"(%02x) goto pc%+d\\n\"", "639": "\"(%02x) if r%d %s 0x%x goto pc%+d\\n\"", "640": "\"(%02x) if r%d %s r%d goto pc%+d\\n\"", "641": "\"(%02x) lock *(%s *)(r%d %+d) += r%d\\n\"", "642": "\"(%02x) r%d = *(%s *)(r%d %+d)\\n\"", "643": "\"(%02x) r%d = 0x%x\\n\"", "644": "\"(%02x) r0 = *(%s *)skb[%d]\\n\"", "645": "\"(%02x) r0 = *(%s *)skb[r%d + %d]\\n\"", "646": "\"(%d %d %d %d %d) \"", "647": "\"((((((((a == 1) && (b == 1)) || (c == 1)) && (d == 1)) || \"", "648": "\"((((((((a == 1) || (b == 1)) && (c == 1)) || (d == 1)) && \"", "649": "\"((a == 1 || b == 1) || (c == 1 || d == 1) || \"", "650": "\"(RESCUER)\"", "651": "\"(a == 1 && b == 1) && (c == 1 && d == 1) && \"", "652": "\"(a == 1 && b == 1) || (c == 1 && d == 1) || \"", "653": "\"(a == 1 || b == 1) && (c == 1 || d == 1) && \"", "654": "\"(detected by %d, t=%ld jiffies, g=%ld, c=%ld, q=%lu)\\n\"", "655": "\"(e == 1 && f == 1) || (g == 1 && h == 1)\"", "656": "\"(e == 1 || f == 1) && (g == 1 || h == 1)\"", "657": "\"(e == 1 || f == 1)) && (g == 1 || h == 1)\"", "658": "\"(e == 1)) && (f == 1)) || (g == 1)) && (h == 1))\"", "659": "\"(e == 1)) || (f == 1)) && (g == 1)) || (h == 1))\"", "660": "\"(incompatible version)\\n\"", "661": "\"(ks=%d,vs=%d)\"", "662": "\"(no arch support)\"", "663": "\"(none)\"", "664": "\"(null)\"", "665": "\"(out of memory)\\n\"", "666": "\"(test in progress)\"", "667": "\"(u32) \"", "668": "\")\n};\n\n#ifdef CONFIG_DEBUG_LOCK_ALLOC\n#include <linux/kernel_stat.h>\n\nint rcu_scheduler_active __read_mostly;\nEXPORT_SYMBOL_GPL(rcu_scheduler_active);\n\n\nvoid __init rcu_scheduler_starting(void)\n{\n\tWARN_ON(nr_context_switches() > 0);\n\trcu_scheduler_active = 1;\n}\n\n#endif \n\n#ifdef CONFIG_RCU_TRACE\n\nstatic void rcu_trace_sub_qlen(struct rcu_ctrlblk *rcp, int n)\n{\n\tunsigned long flags;\n\n\tlocal_irq_save(flags);\n\trcp->qlen -= n;\n\tlocal_irq_restore(flags);\n}\n\n\nstatic int show_tiny_stats(struct seq_file *m, void *unused)\n{\n\tseq_printf(m, \"", "669": "\")\n};\n\nstatic struct rcu_ctrlblk rcu_bh_ctrlblk = {\n\t.donetail\t= &rcu_bh_ctrlblk.rcucblist,\n\t.curtail\t= &rcu_bh_ctrlblk.rcucblist,\n\tRCU_TRACE(.name = \"", "670": "\") == 0 || !strlen(glob)))\n\t\tglob = NULL;\n\telse if (glob) {\n\t\tint not;\n\n\t\ttype = filter_parse_regex(glob, strlen(glob), &search, &not);\n\t\tlen = strlen(search);\n\n\t\t\n\t\tif (WARN_ON(not))\n\t\t\treturn;\n\t}\n\n\tmutex_lock(&trace_probe_ops.func_hash->regex_lock);\n\n\thash = alloc_and_copy_ftrace_hash(FTRACE_HASH_DEFAULT_BITS, *orig_hash);\n\tif (!hash)\n\t\t\n\t\tgoto out_unlock;\n\n\tINIT_LIST_HEAD(&free_list);\n\n\tfor (i = 0; i < FTRACE_FUNC_HASHSIZE; i++) {\n\t\tstruct hlist_head *hhd = &ftrace_func_hash[i];\n\n\t\thlist_for_each_entry_safe(entry, tmp, hhd, node) {\n\n\t\t\t\n\t\t\tif ((flags & PROBE_TEST_FUNC) && entry->ops != ops)\n\t\t\t\tcontinue;\n\n\t\t\tif ((flags & PROBE_TEST_DATA) && entry->data != data)\n\t\t\t\tcontinue;\n\n\t\t\t\n\t\t\tif (glob) {\n\t\t\t\tkallsyms_lookup(entry->ip, NULL, NULL,\n\t\t\t\t\t\tNULL, str);\n\t\t\t\tif (!ftrace_match(str, glob, len, type))\n\t\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\trec_entry = ftrace_lookup_ip(hash, entry->ip);\n\t\t\t\n\t\t\tif (rec_entry)\n\t\t\t\tfree_hash_entry(hash, rec_entry);\n\n\t\t\thlist_del_rcu(&entry->node);\n\t\t\tlist_add(&entry->free_list, &free_list);\n\t\t}\n\t}\n\tmutex_lock(&ftrace_lock);\n\t__disable_ftrace_function_probe();\n\t\n\tret = ftrace_hash_move(&trace_probe_ops, 1, orig_hash, hash);\n\tsynchronize_sched();\n\tif (!ret)\n\t\tfree_ftrace_hash_rcu(old_hash);\n\n\tlist_for_each_entry_safe(entry, p, &free_list, free_list) {\n\t\tlist_del(&entry->free_list);\n\t\tftrace_free_entry(entry);\n\t}\n\tmutex_unlock(&ftrace_lock);\n\t\t\n out_unlock:\n\tmutex_unlock(&trace_probe_ops.func_hash->regex_lock);\n\tfree_ftrace_hash(hash);\n}\n\nvoid\nunregister_ftrace_function_probe(char *glob, struct ftrace_probe_ops *ops,\n\t\t\t\tvoid *data)\n{\n\t__unregister_ftrace_function_probe(glob, ops, data,\n\t\t\t\t\t  PROBE_TEST_FUNC | PROBE_TEST_DATA);\n}\n\nvoid\nunregister_ftrace_function_probe_func(char *glob, struct ftrace_probe_ops *ops)\n{\n\t__unregister_ftrace_function_probe(glob, ops, NULL, PROBE_TEST_FUNC);\n}\n\nvoid unregister_ftrace_function_probe_all(char *glob)\n{\n\t__unregister_ftrace_function_probe(glob, NULL, NULL, 0);\n}\n\nstatic LIST_HEAD(ftrace_commands);\nstatic DEFINE_MUTEX(ftrace_cmd_mutex);\n\n\n__init int register_ftrace_command(struct ftrace_func_command *cmd)\n{\n\tstruct ftrace_func_command *p;\n\tint ret = 0;\n\n\tmutex_lock(&ftrace_cmd_mutex);\n\tlist_for_each_entry(p, &ftrace_commands, list) {\n\t\tif (strcmp(cmd->name, p->name) == 0) {\n\t\t\tret = -EBUSY;\n\t\t\tgoto out_unlock;\n\t\t}\n\t}\n\tlist_add(&cmd->list, &ftrace_commands);\n out_unlock:\n\tmutex_unlock(&ftrace_cmd_mutex);\n\n\treturn ret;\n}\n\n\n__init int unregister_ftrace_command(struct ftrace_func_command *cmd)\n{\n\tstruct ftrace_func_command *p, *n;\n\tint ret = -ENODEV;\n\n\tmutex_lock(&ftrace_cmd_mutex);\n\tlist_for_each_entry_safe(p, n, &ftrace_commands, list) {\n\t\tif (strcmp(cmd->name, p->name) == 0) {\n\t\t\tret = 0;\n\t\t\tlist_del_init(&p->list);\n\t\t\tgoto out_unlock;\n\t\t}\n\t}\n out_unlock:\n\tmutex_unlock(&ftrace_cmd_mutex);\n\n\treturn ret;\n}\n\nstatic int ftrace_process_regex(struct ftrace_hash *hash,\n\t\t\t\tchar *buff, int len, int enable)\n{\n\tchar *func, *command, *next = buff;\n\tstruct ftrace_func_command *p;\n\tint ret = -EINVAL;\n\n\tfunc = strsep(&next, \"", "671": "\") == 0 || strcmp(buff, \"", "672": "\") == 0)\n\t\tbuff[0] = 0;\n\n\t\n\tif (strcmp(buff, \"", "673": "\") == 0) {\n\t\t\t\tkdb_gdb_state_pass(lastchar - 11);\n\t\t\t\tstrcpy(buffer, \"", "674": "\") == 0) {\n\t\t\t\tkdb_gdb_state_pass(lastchar - 5);\n\t\t\t\tstrcpy(buffer, \"", "675": "\") == 0) {\n\t\tbuff[0] = 0;\n\t\tnot = 1;\n\t}\n\n\treturn match_records(hash, buff, strlen(buff), mod, not);\n}\n\n\n\nstatic int\nftrace_mod_callback(struct ftrace_hash *hash,\n\t\t    char *func, char *cmd, char *param, int enable)\n{\n\tchar *mod;\n\tint ret = -EINVAL;\n\n\t\n\n\t\n\tif (!param)\n\t\treturn ret;\n\n\tmod = strsep(&param, \"", "676": "\") == 0) {\n\t\tdefcmd_in_progress = 0;\n\t\tif (!s->count)\n\t\t\ts->usable = 0;\n\t\tif (s->usable)\n\t\t\t\n\t\t\tkdb_register_flags(s->name, kdb_exec_defcmd, s->usage,\n\t\t\t\t\t   s->help, 0,\n\t\t\t\t\t   KDB_ENABLE_ALWAYS_SAFE);\n\t\treturn 0;\n\t}\n\tif (!s->usable)\n\t\treturn KDB_NOTIMP;\n\ts->command = kzalloc((s->count + 1) * sizeof(*(s->command)), GFP_KDB);\n\tif (!s->command) {\n\t\tkdb_printf(\"", "677": "\") == 0) {\n\t\tunsigned int debugflags;\n\t\tchar *cp;\n\n\t\tdebugflags = simple_strtoul(argv[2], &cp, 0);\n\t\tif (cp == argv[2] || debugflags & ~KDB_DEBUG_FLAG_MASK) {\n\t\t\tkdb_printf(\"", "678": "\") ?: \"", "679": "\") at:\\n\"", "680": "\")\"", "681": "\"))\n\t\t\treturn -EINVAL;\n\t}\n\n\tif (!domain->ops->alloc) {\n\t\tpr_debug(\"", "682": "\"))\n\t\thrtimer_hres_enabled = 0;\n\telse if (!strcmp(str, \"", "683": "\"))\n\t\thrtimer_hres_enabled = 1;\n\telse\n\t\treturn 0;\n\treturn 1;\n}\n\n__setup(\"", "684": "\"))\n\t\treturn;\n\n\t\n\tget_task_struct(p);\n\n\t__unqueue_futex(q);\n\t\n\tsmp_wmb();\n\tq->lock_ptr = NULL;\n\n\twake_up_state(p, TASK_NORMAL);\n\tput_task_struct(p);\n}\n\nstatic int wake_futex_pi(u32 __user *uaddr, u32 uval, struct futex_q *this)\n{\n\tstruct task_struct *new_owner;\n\tstruct futex_pi_state *pi_state = this->pi_state;\n\tu32 uninitialized_var(curval), newval;\n\tint ret = 0;\n\n\tif (!pi_state)\n\t\treturn -EINVAL;\n\n\t\n\tif (pi_state->owner != current)\n\t\treturn -EINVAL;\n\n\traw_spin_lock(&pi_state->pi_mutex.wait_lock);\n\tnew_owner = rt_mutex_next_owner(&pi_state->pi_mutex);\n\n\t\n\tif (!new_owner)\n\t\tnew_owner = this->task;\n\n\t\n\tnewval = FUTEX_WAITERS | task_pid_vnr(new_owner);\n\n\tif (cmpxchg_futex_value_locked(&curval, uaddr, uval, newval))\n\t\tret = -EFAULT;\n\telse if (curval != uval)\n\t\tret = -EINVAL;\n\tif (ret) {\n\t\traw_spin_unlock(&pi_state->pi_mutex.wait_lock);\n\t\treturn ret;\n\t}\n\n\traw_spin_lock_irq(&pi_state->owner->pi_lock);\n\tWARN_ON(list_empty(&pi_state->list));\n\tlist_del_init(&pi_state->list);\n\traw_spin_unlock_irq(&pi_state->owner->pi_lock);\n\n\traw_spin_lock_irq(&new_owner->pi_lock);\n\tWARN_ON(!list_empty(&pi_state->list));\n\tlist_add(&pi_state->list, &new_owner->pi_state_list);\n\tpi_state->owner = new_owner;\n\traw_spin_unlock_irq(&new_owner->pi_lock);\n\n\traw_spin_unlock(&pi_state->pi_mutex.wait_lock);\n\trt_mutex_unlock(&pi_state->pi_mutex);\n\n\treturn 0;\n}\n\n\nstatic inline void\ndouble_lock_hb(struct futex_hash_bucket *hb1, struct futex_hash_bucket *hb2)\n{\n\tif (hb1 <= hb2) {\n\t\tspin_lock(&hb1->lock);\n\t\tif (hb1 < hb2)\n\t\t\tspin_lock_nested(&hb2->lock, SINGLE_DEPTH_NESTING);\n\t} else { \n\t\tspin_lock(&hb2->lock);\n\t\tspin_lock_nested(&hb1->lock, SINGLE_DEPTH_NESTING);\n\t}\n}\n\nstatic inline void\ndouble_unlock_hb(struct futex_hash_bucket *hb1, struct futex_hash_bucket *hb2)\n{\n\tspin_unlock(&hb1->lock);\n\tif (hb1 != hb2)\n\t\tspin_unlock(&hb2->lock);\n}\n\n\nstatic int\nfutex_wake(u32 __user *uaddr, unsigned int flags, int nr_wake, u32 bitset)\n{\n\tstruct futex_hash_bucket *hb;\n\tstruct futex_q *this, *next;\n\tunion futex_key key = FUTEX_KEY_INIT;\n\tint ret;\n\n\tif (!bitset)\n\t\treturn -EINVAL;\n\n\tret = get_futex_key(uaddr, flags & FLAGS_SHARED, &key, VERIFY_READ);\n\tif (unlikely(ret != 0))\n\t\tgoto out;\n\n\thb = hash_futex(&key);\n\n\t\n\tif (!hb_waiters_pending(hb))\n\t\tgoto out_put_key;\n\n\tspin_lock(&hb->lock);\n\n\tplist_for_each_entry_safe(this, next, &hb->chain, list) {\n\t\tif (match_futex (&this->key, &key)) {\n\t\t\tif (this->pi_state || this->rt_waiter) {\n\t\t\t\tret = -EINVAL;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t\n\t\t\tif (!(this->bitset & bitset))\n\t\t\t\tcontinue;\n\n\t\t\twake_futex(this);\n\t\t\tif (++ret >= nr_wake)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tspin_unlock(&hb->lock);\nout_put_key:\n\tput_futex_key(&key);\nout:\n\treturn ret;\n}\n\n\nstatic int\nfutex_wake_op(u32 __user *uaddr1, unsigned int flags, u32 __user *uaddr2,\n\t      int nr_wake, int nr_wake2, int op)\n{\n\tunion futex_key key1 = FUTEX_KEY_INIT, key2 = FUTEX_KEY_INIT;\n\tstruct futex_hash_bucket *hb1, *hb2;\n\tstruct futex_q *this, *next;\n\tint ret, op_ret;\n\nretry:\n\tret = get_futex_key(uaddr1, flags & FLAGS_SHARED, &key1, VERIFY_READ);\n\tif (unlikely(ret != 0))\n\t\tgoto out;\n\tret = get_futex_key(uaddr2, flags & FLAGS_SHARED, &key2, VERIFY_WRITE);\n\tif (unlikely(ret != 0))\n\t\tgoto out_put_key1;\n\n\thb1 = hash_futex(&key1);\n\thb2 = hash_futex(&key2);\n\nretry_private:\n\tdouble_lock_hb(hb1, hb2);\n\top_ret = futex_atomic_op_inuser(op, uaddr2);\n\tif (unlikely(op_ret < 0)) {\n\n\t\tdouble_unlock_hb(hb1, hb2);\n\n#ifndef CONFIG_MMU\n\t\t\n\t\tret = op_ret;\n\t\tgoto out_put_keys;\n#endif\n\n\t\tif (unlikely(op_ret != -EFAULT)) {\n\t\t\tret = op_ret;\n\t\t\tgoto out_put_keys;\n\t\t}\n\n\t\tret = fault_in_user_writeable(uaddr2);\n\t\tif (ret)\n\t\t\tgoto out_put_keys;\n\n\t\tif (!(flags & FLAGS_SHARED))\n\t\t\tgoto retry_private;\n\n\t\tput_futex_key(&key2);\n\t\tput_futex_key(&key1);\n\t\tgoto retry;\n\t}\n\n\tplist_for_each_entry_safe(this, next, &hb1->chain, list) {\n\t\tif (match_futex (&this->key, &key1)) {\n\t\t\tif (this->pi_state || this->rt_waiter) {\n\t\t\t\tret = -EINVAL;\n\t\t\t\tgoto out_unlock;\n\t\t\t}\n\t\t\twake_futex(this);\n\t\t\tif (++ret >= nr_wake)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (op_ret > 0) {\n\t\top_ret = 0;\n\t\tplist_for_each_entry_safe(this, next, &hb2->chain, list) {\n\t\t\tif (match_futex (&this->key, &key2)) {\n\t\t\t\tif (this->pi_state || this->rt_waiter) {\n\t\t\t\t\tret = -EINVAL;\n\t\t\t\t\tgoto out_unlock;\n\t\t\t\t}\n\t\t\t\twake_futex(this);\n\t\t\t\tif (++op_ret >= nr_wake2)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tret += op_ret;\n\t}\n\nout_unlock:\n\tdouble_unlock_hb(hb1, hb2);\nout_put_keys:\n\tput_futex_key(&key2);\nout_put_key1:\n\tput_futex_key(&key1);\nout:\n\treturn ret;\n}\n\n\nstatic inline\nvoid requeue_futex(struct futex_q *q, struct futex_hash_bucket *hb1,\n\t\t   struct futex_hash_bucket *hb2, union futex_key *key2)\n{\n\n\t\n\tif (likely(&hb1->chain != &hb2->chain)) {\n\t\tplist_del(&q->list, &hb1->chain);\n\t\thb_waiters_dec(hb1);\n\t\tplist_add(&q->list, &hb2->chain);\n\t\thb_waiters_inc(hb2);\n\t\tq->lock_ptr = &hb2->lock;\n\t}\n\tget_futex_key_refs(key2);\n\tq->key = *key2;\n}\n\n\nstatic inline\nvoid requeue_pi_wake_futex(struct futex_q *q, union futex_key *key,\n\t\t\t   struct futex_hash_bucket *hb)\n{\n\tget_futex_key_refs(key);\n\tq->key = *key;\n\n\t__unqueue_futex(q);\n\n\tWARN_ON(!q->rt_waiter);\n\tq->rt_waiter = NULL;\n\n\tq->lock_ptr = &hb->lock;\n\n\twake_up_state(q->task, TASK_NORMAL);\n}\n\n\nstatic int futex_proxy_trylock_atomic(u32 __user *pifutex,\n\t\t\t\t struct futex_hash_bucket *hb1,\n\t\t\t\t struct futex_hash_bucket *hb2,\n\t\t\t\t union futex_key *key1, union futex_key *key2,\n\t\t\t\t struct futex_pi_state **ps, int set_waiters)\n{\n\tstruct futex_q *top_waiter = NULL;\n\tu32 curval;\n\tint ret, vpid;\n\n\tif (get_futex_value_locked(&curval, pifutex))\n\t\treturn -EFAULT;\n\n\t\n\ttop_waiter = futex_top_waiter(hb1, key1);\n\n\t\n\tif (!top_waiter)\n\t\treturn 0;\n\n\t\n\tif (!match_futex(top_waiter->requeue_pi_key, key2))\n\t\treturn -EINVAL;\n\n\t\n\tvpid = task_pid_vnr(top_waiter->task);\n\tret = futex_lock_pi_atomic(pifutex, hb2, key2, ps, top_waiter->task,\n\t\t\t\t   set_waiters);\n\tif (ret == 1) {\n\t\trequeue_pi_wake_futex(top_waiter, key2, hb2);\n\t\treturn vpid;\n\t}\n\treturn ret;\n}\n\n\nstatic int futex_requeue(u32 __user *uaddr1, unsigned int flags,\n\t\t\t u32 __user *uaddr2, int nr_wake, int nr_requeue,\n\t\t\t u32 *cmpval, int requeue_pi)\n{\n\tunion futex_key key1 = FUTEX_KEY_INIT, key2 = FUTEX_KEY_INIT;\n\tint drop_count = 0, task_count = 0, ret;\n\tstruct futex_pi_state *pi_state = NULL;\n\tstruct futex_hash_bucket *hb1, *hb2;\n\tstruct futex_q *this, *next;\n\n\tif (requeue_pi) {\n\t\t\n\t\tif (uaddr1 == uaddr2)\n\t\t\treturn -EINVAL;\n\n\t\t\n\t\tif (refill_pi_state_cache())\n\t\t\treturn -ENOMEM;\n\t\t\n\t\tif (nr_wake != 1)\n\t\t\treturn -EINVAL;\n\t}\n\nretry:\n\tret = get_futex_key(uaddr1, flags & FLAGS_SHARED, &key1, VERIFY_READ);\n\tif (unlikely(ret != 0))\n\t\tgoto out;\n\tret = get_futex_key(uaddr2, flags & FLAGS_SHARED, &key2,\n\t\t\t    requeue_pi ? VERIFY_WRITE : VERIFY_READ);\n\tif (unlikely(ret != 0))\n\t\tgoto out_put_key1;\n\n\t\n\tif (requeue_pi && match_futex(&key1, &key2)) {\n\t\tret = -EINVAL;\n\t\tgoto out_put_keys;\n\t}\n\n\thb1 = hash_futex(&key1);\n\thb2 = hash_futex(&key2);\n\nretry_private:\n\thb_waiters_inc(hb2);\n\tdouble_lock_hb(hb1, hb2);\n\n\tif (likely(cmpval != NULL)) {\n\t\tu32 curval;\n\n\t\tret = get_futex_value_locked(&curval, uaddr1);\n\n\t\tif (unlikely(ret)) {\n\t\t\tdouble_unlock_hb(hb1, hb2);\n\t\t\thb_waiters_dec(hb2);\n\n\t\t\tret = get_user(curval, uaddr1);\n\t\t\tif (ret)\n\t\t\t\tgoto out_put_keys;\n\n\t\t\tif (!(flags & FLAGS_SHARED))\n\t\t\t\tgoto retry_private;\n\n\t\t\tput_futex_key(&key2);\n\t\t\tput_futex_key(&key1);\n\t\t\tgoto retry;\n\t\t}\n\t\tif (curval != *cmpval) {\n\t\t\tret = -EAGAIN;\n\t\t\tgoto out_unlock;\n\t\t}\n\t}\n\n\tif (requeue_pi && (task_count - nr_wake < nr_requeue)) {\n\t\t\n\t\tret = futex_proxy_trylock_atomic(uaddr2, hb1, hb2, &key1,\n\t\t\t\t\t\t &key2, &pi_state, nr_requeue);\n\n\t\t\n\t\tif (ret > 0) {\n\t\t\tWARN_ON(pi_state);\n\t\t\tdrop_count++;\n\t\t\ttask_count++;\n\t\t\t\n\t\t\tret = lookup_pi_state(ret, hb2, &key2, &pi_state);\n\t\t}\n\n\t\tswitch (ret) {\n\t\tcase 0:\n\t\t\tbreak;\n\t\tcase -EFAULT:\n\t\t\tfree_pi_state(pi_state);\n\t\t\tpi_state = NULL;\n\t\t\tdouble_unlock_hb(hb1, hb2);\n\t\t\thb_waiters_dec(hb2);\n\t\t\tput_futex_key(&key2);\n\t\t\tput_futex_key(&key1);\n\t\t\tret = fault_in_user_writeable(uaddr2);\n\t\t\tif (!ret)\n\t\t\t\tgoto retry;\n\t\t\tgoto out;\n\t\tcase -EAGAIN:\n\t\t\t\n\t\t\tfree_pi_state(pi_state);\n\t\t\tpi_state = NULL;\n\t\t\tdouble_unlock_hb(hb1, hb2);\n\t\t\thb_waiters_dec(hb2);\n\t\t\tput_futex_key(&key2);\n\t\t\tput_futex_key(&key1);\n\t\t\tcond_resched();\n\t\t\tgoto retry;\n\t\tdefault:\n\t\t\tgoto out_unlock;\n\t\t}\n\t}\n\n\tplist_for_each_entry_safe(this, next, &hb1->chain, list) {\n\t\tif (task_count - nr_wake >= nr_requeue)\n\t\t\tbreak;\n\n\t\tif (!match_futex(&this->key, &key1))\n\t\t\tcontinue;\n\n\t\t\n\t\tif ((requeue_pi && !this->rt_waiter) ||\n\t\t    (!requeue_pi && this->rt_waiter) ||\n\t\t    this->pi_state) {\n\t\t\tret = -EINVAL;\n\t\t\tbreak;\n\t\t}\n\n\t\t\n\t\tif (++task_count <= nr_wake && !requeue_pi) {\n\t\t\twake_futex(this);\n\t\t\tcontinue;\n\t\t}\n\n\t\t\n\t\tif (requeue_pi && !match_futex(this->requeue_pi_key, &key2)) {\n\t\t\tret = -EINVAL;\n\t\t\tbreak;\n\t\t}\n\n\t\t\n\t\tif (requeue_pi) {\n\t\t\t\n\t\t\tatomic_inc(&pi_state->refcount);\n\t\t\tthis->pi_state = pi_state;\n\t\t\tret = rt_mutex_start_proxy_lock(&pi_state->pi_mutex,\n\t\t\t\t\t\t\tthis->rt_waiter,\n\t\t\t\t\t\t\tthis->task);\n\t\t\tif (ret == 1) {\n\t\t\t\t\n\t\t\t\trequeue_pi_wake_futex(this, &key2, hb2);\n\t\t\t\tdrop_count++;\n\t\t\t\tcontinue;\n\t\t\t} else if (ret) {\n\t\t\t\t\n\t\t\t\tthis->pi_state = NULL;\n\t\t\t\tfree_pi_state(pi_state);\n\t\t\t\tgoto out_unlock;\n\t\t\t}\n\t\t}\n\t\trequeue_futex(this, hb1, hb2, &key2);\n\t\tdrop_count++;\n\t}\n\nout_unlock:\n\tfree_pi_state(pi_state);\n\tdouble_unlock_hb(hb1, hb2);\n\thb_waiters_dec(hb2);\n\n\t\n\twhile (--drop_count >= 0)\n\t\tdrop_futex_key_refs(&key1);\n\nout_put_keys:\n\tput_futex_key(&key2);\nout_put_key1:\n\tput_futex_key(&key1);\nout:\n\treturn ret ? ret : task_count;\n}\n\n\nstatic inline struct futex_hash_bucket *queue_lock(struct futex_q *q)\n\t__acquires(&hb->lock)\n{\n\tstruct futex_hash_bucket *hb;\n\n\thb = hash_futex(&q->key);\n\n\t\n\thb_waiters_inc(hb);\n\n\tq->lock_ptr = &hb->lock;\n\n\tspin_lock(&hb->lock); \n\treturn hb;\n}\n\nstatic inline void\nqueue_unlock(struct futex_hash_bucket *hb)\n\t__releases(&hb->lock)\n{\n\tspin_unlock(&hb->lock);\n\thb_waiters_dec(hb);\n}\n\n\nstatic inline void queue_me(struct futex_q *q, struct futex_hash_bucket *hb)\n\t__releases(&hb->lock)\n{\n\tint prio;\n\n\t\n\tprio = min(current->normal_prio, MAX_RT_PRIO);\n\n\tplist_node_init(&q->list, prio);\n\tplist_add(&q->list, &hb->chain);\n\tq->task = current;\n\tspin_unlock(&hb->lock);\n}\n\n\nstatic int unqueue_me(struct futex_q *q)\n{\n\tspinlock_t *lock_ptr;\n\tint ret = 0;\n\n\t\nretry:\n\tlock_ptr = q->lock_ptr;\n\tbarrier();\n\tif (lock_ptr != NULL) {\n\t\tspin_lock(lock_ptr);\n\t\t\n\t\tif (unlikely(lock_ptr != q->lock_ptr)) {\n\t\t\tspin_unlock(lock_ptr);\n\t\t\tgoto retry;\n\t\t}\n\t\t__unqueue_futex(q);\n\n\t\tBUG_ON(q->pi_state);\n\n\t\tspin_unlock(lock_ptr);\n\t\tret = 1;\n\t}\n\n\tdrop_futex_key_refs(&q->key);\n\treturn ret;\n}\n\n\nstatic void unqueue_me_pi(struct futex_q *q)\n\t__releases(q->lock_ptr)\n{\n\t__unqueue_futex(q);\n\n\tBUG_ON(!q->pi_state);\n\tfree_pi_state(q->pi_state);\n\tq->pi_state = NULL;\n\n\tspin_unlock(q->lock_ptr);\n}\n\n\nstatic int fixup_pi_state_owner(u32 __user *uaddr, struct futex_q *q,\n\t\t\t\tstruct task_struct *newowner)\n{\n\tu32 newtid = task_pid_vnr(newowner) | FUTEX_WAITERS;\n\tstruct futex_pi_state *pi_state = q->pi_state;\n\tstruct task_struct *oldowner = pi_state->owner;\n\tu32 uval, uninitialized_var(curval), newval;\n\tint ret;\n\n\t\n\tif (!pi_state->owner)\n\t\tnewtid |= FUTEX_OWNER_DIED;\n\n\t\nretry:\n\tif (get_futex_value_locked(&uval, uaddr))\n\t\tgoto handle_fault;\n\n\twhile (1) {\n\t\tnewval = (uval & FUTEX_OWNER_DIED) | newtid;\n\n\t\tif (cmpxchg_futex_value_locked(&curval, uaddr, uval, newval))\n\t\t\tgoto handle_fault;\n\t\tif (curval == uval)\n\t\t\tbreak;\n\t\tuval = curval;\n\t}\n\n\t\n\tif (pi_state->owner != NULL) {\n\t\traw_spin_lock_irq(&pi_state->owner->pi_lock);\n\t\tWARN_ON(list_empty(&pi_state->list));\n\t\tlist_del_init(&pi_state->list);\n\t\traw_spin_unlock_irq(&pi_state->owner->pi_lock);\n\t}\n\n\tpi_state->owner = newowner;\n\n\traw_spin_lock_irq(&newowner->pi_lock);\n\tWARN_ON(!list_empty(&pi_state->list));\n\tlist_add(&pi_state->list, &newowner->pi_state_list);\n\traw_spin_unlock_irq(&newowner->pi_lock);\n\treturn 0;\n\n\t\nhandle_fault:\n\tspin_unlock(q->lock_ptr);\n\n\tret = fault_in_user_writeable(uaddr);\n\n\tspin_lock(q->lock_ptr);\n\n\t\n\tif (pi_state->owner != oldowner)\n\t\treturn 0;\n\n\tif (ret)\n\t\treturn ret;\n\n\tgoto retry;\n}\n\nstatic long futex_wait_restart(struct restart_block *restart);\n\n\nstatic int fixup_owner(u32 __user *uaddr, struct futex_q *q, int locked)\n{\n\tstruct task_struct *owner;\n\tint ret = 0;\n\n\tif (locked) {\n\t\t\n\t\tif (q->pi_state->owner != current)\n\t\t\tret = fixup_pi_state_owner(uaddr, q, current);\n\t\tgoto out;\n\t}\n\n\t\n\tif (q->pi_state->owner == current) {\n\t\t\n\t\tif (rt_mutex_trylock(&q->pi_state->pi_mutex)) {\n\t\t\tlocked = 1;\n\t\t\tgoto out;\n\t\t}\n\n\t\t\n\t\traw_spin_lock(&q->pi_state->pi_mutex.wait_lock);\n\t\towner = rt_mutex_owner(&q->pi_state->pi_mutex);\n\t\tif (!owner)\n\t\t\towner = rt_mutex_next_owner(&q->pi_state->pi_mutex);\n\t\traw_spin_unlock(&q->pi_state->pi_mutex.wait_lock);\n\t\tret = fixup_pi_state_owner(uaddr, q, owner);\n\t\tgoto out;\n\t}\n\n\t\n\tif (rt_mutex_owner(&q->pi_state->pi_mutex) == current)\n\t\tprintk(KERN_ERR \"", "685": "\"))\n\t\treturn;\n\n\tmutex_lock(&irq_domain_mutex);\n\tfor (i = 0; i < nr_irqs; i++)\n\t\tirq_domain_remove_irq(virq + i);\n\tirq_domain_free_irqs_recursive(data->domain, virq, nr_irqs);\n\tmutex_unlock(&irq_domain_mutex);\n\n\tirq_domain_free_irq_data(virq, nr_irqs);\n\tirq_free_descs(virq, nr_irqs);\n}\n\n\nint irq_domain_alloc_irqs_parent(struct irq_domain *domain,\n\t\t\t\t unsigned int irq_base, unsigned int nr_irqs,\n\t\t\t\t void *arg)\n{\n\t\n\tif (irq_domain_is_auto_recursive(domain))\n\t\treturn 0;\n\n\tdomain = domain->parent;\n\tif (domain)\n\t\treturn irq_domain_alloc_irqs_recursive(domain, irq_base,\n\t\t\t\t\t\t       nr_irqs, arg);\n\treturn -ENOSYS;\n}\n\n\nvoid irq_domain_free_irqs_parent(struct irq_domain *domain,\n\t\t\t\t unsigned int irq_base, unsigned int nr_irqs)\n{\n\t\n\tif (!irq_domain_is_auto_recursive(domain) && domain->parent)\n\t\tirq_domain_free_irqs_recursive(domain->parent, irq_base,\n\t\t\t\t\t       nr_irqs);\n}\n\n\nvoid irq_domain_activate_irq(struct irq_data *irq_data)\n{\n\tif (irq_data && irq_data->domain) {\n\t\tstruct irq_domain *domain = irq_data->domain;\n\n\t\tif (irq_data->parent_data)\n\t\t\tirq_domain_activate_irq(irq_data->parent_data);\n\t\tif (domain->ops->activate)\n\t\t\tdomain->ops->activate(domain, irq_data);\n\t}\n}\n\n\nvoid irq_domain_deactivate_irq(struct irq_data *irq_data)\n{\n\tif (irq_data && irq_data->domain) {\n\t\tstruct irq_domain *domain = irq_data->domain;\n\n\t\tif (domain->ops->deactivate)\n\t\t\tdomain->ops->deactivate(domain, irq_data);\n\t\tif (irq_data->parent_data)\n\t\t\tirq_domain_deactivate_irq(irq_data->parent_data);\n\t}\n}\n\nstatic void irq_domain_check_hierarchy(struct irq_domain *domain)\n{\n\t\n\tif (domain->ops->alloc)\n\t\tdomain->flags |= IRQ_DOMAIN_FLAG_HIERARCHY;\n}\n#else\t\n\nstruct irq_data *irq_domain_get_irq_data(struct irq_domain *domain,\n\t\t\t\t\t unsigned int virq)\n{\n\tstruct irq_data *irq_data = irq_get_irq_data(virq);\n\n\treturn (irq_data && irq_data->domain == domain) ? irq_data : NULL;\n}\n\nstatic void irq_domain_check_hierarchy(struct irq_domain *domain)\n{\n}\n#endif\t\n#include <linux/percpu.h>\n#include <linux/sched.h>\n#include <linux/osq_lock.h>\n\n\nstatic DEFINE_PER_CPU_SHARED_ALIGNED(struct optimistic_spin_node, osq_node);\n\n\nstatic inline int encode_cpu(int cpu_nr)\n{\n\treturn cpu_nr + 1;\n}\n\nstatic inline struct optimistic_spin_node *decode_cpu(int encoded_cpu_val)\n{\n\tint cpu_nr = encoded_cpu_val - 1;\n\n\treturn per_cpu_ptr(&osq_node, cpu_nr);\n}\n\n\nstatic inline struct optimistic_spin_node *\nosq_wait_next(struct optimistic_spin_queue *lock,\n\t      struct optimistic_spin_node *node,\n\t      struct optimistic_spin_node *prev)\n{\n\tstruct optimistic_spin_node *next = NULL;\n\tint curr = encode_cpu(smp_processor_id());\n\tint old;\n\n\t\n\told = prev ? prev->cpu : OSQ_UNLOCKED_VAL;\n\n\tfor (;;) {\n\t\tif (atomic_read(&lock->tail) == curr &&\n\t\t    atomic_cmpxchg(&lock->tail, curr, old) == curr) {\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\n\t\t\n\t\tif (node->next) {\n\t\t\tnext = xchg(&node->next, NULL);\n\t\t\tif (next)\n\t\t\t\tbreak;\n\t\t}\n\n\t\tcpu_relax_lowlatency();\n\t}\n\n\treturn next;\n}\n\nbool osq_lock(struct optimistic_spin_queue *lock)\n{\n\tstruct optimistic_spin_node *node = this_cpu_ptr(&osq_node);\n\tstruct optimistic_spin_node *prev, *next;\n\tint curr = encode_cpu(smp_processor_id());\n\tint old;\n\n\tnode->locked = 0;\n\tnode->next = NULL;\n\tnode->cpu = curr;\n\n\told = atomic_xchg(&lock->tail, curr);\n\tif (old == OSQ_UNLOCKED_VAL)\n\t\treturn true;\n\n\tprev = decode_cpu(old);\n\tnode->prev = prev;\n\tWRITE_ONCE(prev->next, node);\n\n\t\n\n\twhile (!READ_ONCE(node->locked)) {\n\t\t\n\t\tif (need_resched())\n\t\t\tgoto unqueue;\n\n\t\tcpu_relax_lowlatency();\n\t}\n\treturn true;\n\nunqueue:\n\t\n\n\tfor (;;) {\n\t\tif (prev->next == node &&\n\t\t    cmpxchg(&prev->next, node, NULL) == node)\n\t\t\tbreak;\n\n\t\t\n\t\tif (smp_load_acquire(&node->locked))\n\t\t\treturn true;\n\n\t\tcpu_relax_lowlatency();\n\n\t\t\n\t\tprev = READ_ONCE(node->prev);\n\t}\n\n\t\n\n\tnext = osq_wait_next(lock, node, prev);\n\tif (!next)\n\t\treturn false;\n\n\t\n\n\tWRITE_ONCE(next->prev, prev);\n\tWRITE_ONCE(prev->next, next);\n\n\treturn false;\n}\n\nvoid osq_unlock(struct optimistic_spin_queue *lock)\n{\n\tstruct optimistic_spin_node *node, *next;\n\tint curr = encode_cpu(smp_processor_id());\n\n\t\n\tif (likely(atomic_cmpxchg(&lock->tail, curr, OSQ_UNLOCKED_VAL) == curr))\n\t\treturn;\n\n\t\n\tnode = this_cpu_ptr(&osq_node);\n\tnext = xchg(&node->next, NULL);\n\tif (next) {\n\t\tWRITE_ONCE(next->locked, 1);\n\t\treturn;\n\t}\n\n\tnext = osq_wait_next(lock, node, NULL);\n\tif (next)\n\t\tWRITE_ONCE(next->locked, 1);\n}\n\n#include <linux/module.h>\n#include <linux/mutex.h>\n#include <linux/types.h>\n#include <linux/jhash.h>\n#include <linux/list.h>\n#include <linux/rcupdate.h>\n#include <linux/tracepoint.h>\n#include <linux/err.h>\n#include <linux/slab.h>\n#include <linux/sched.h>\n#include <linux/static_key.h>\n\nextern struct tracepoint * const __start___tracepoints_ptrs[];\nextern struct tracepoint * const __stop___tracepoints_ptrs[];\n\n\nstatic const int tracepoint_debug;\n\n#ifdef CONFIG_MODULES\n\nstatic DEFINE_MUTEX(tracepoint_module_list_mutex);\n\n\nstatic LIST_HEAD(tracepoint_module_list);\n#endif \n\n\nstatic DEFINE_MUTEX(tracepoints_mutex);\n\n\nstruct tp_probes {\n\tstruct rcu_head rcu;\n\tstruct tracepoint_func probes[0];\n};\n\nstatic inline void *allocate_probes(int count)\n{\n\tstruct tp_probes *p  = kmalloc(count * sizeof(struct tracepoint_func)\n\t\t\t+ sizeof(struct tp_probes), GFP_KERNEL);\n\treturn p == NULL ? NULL : p->probes;\n}\n\nstatic void rcu_free_old_probes(struct rcu_head *head)\n{\n\tkfree(container_of(head, struct tp_probes, rcu));\n}\n\nstatic inline void release_probes(struct tracepoint_func *old)\n{\n\tif (old) {\n\t\tstruct tp_probes *tp_probes = container_of(old,\n\t\t\tstruct tp_probes, probes[0]);\n\t\tcall_rcu_sched(&tp_probes->rcu, rcu_free_old_probes);\n\t}\n}\n\nstatic void debug_print_probes(struct tracepoint_func *funcs)\n{\n\tint i;\n\n\tif (!tracepoint_debug || !funcs)\n\t\treturn;\n\n\tfor (i = 0; funcs[i].func; i++)\n\t\tprintk(KERN_DEBUG \"", "686": "\"))\n\t\tstrcpy(buf, \"", "687": "\")) {\n\t\tprintk(\"", "688": "\"),\n\t\t\t\tstate, false);\n\t\t\tevents_check_enabled = false;\n\t\t}\n\t\tsyscore_resume();\n\t}\n\n\tarch_suspend_enable_irqs();\n\tBUG_ON(irqs_disabled());\n\n Enable_cpus:\n\tenable_nonboot_cpus();\n\n Platform_wake:\n\tplatform_resume_noirq(state);\n\tdpm_resume_noirq(PMSG_RESUME);\n\n Platform_early_resume:\n\tplatform_resume_early(state);\n\n Devices_early_resume:\n\tdpm_resume_early(PMSG_RESUME);\n\n Platform_finish:\n\tplatform_resume_finish(state);\n\treturn error;\n}\n\n\nint suspend_devices_and_enter(suspend_state_t state)\n{\n\tint error;\n\tbool wakeup = false;\n\n\tif (!sleep_state_supported(state))\n\t\treturn -ENOSYS;\n\n\terror = platform_suspend_begin(state);\n\tif (error)\n\t\tgoto Close;\n\n\tsuspend_console();\n\tsuspend_test_start();\n\terror = dpm_suspend_start(PMSG_SUSPEND);\n\tif (error) {\n\t\tpr_err(\"", "689": "\"),\n\t\t\t\tstate, true);\n\t\t\terror = suspend_ops->enter(state);\n\t\t\ttrace_suspend_resume(TPS(\"", "690": "\"),\n\t       init_utsname()->version);\n\n\tif (dump_stack_arch_desc_str[0] != '\\0')\n\t\tprintk(\"", "691": "\"), 0, false);\n\tif (!error)\n\t\treturn 0;\n\n\tsuspend_stats.failed_freeze++;\n\tdpm_save_failed_step(SUSPEND_FREEZE);\n Finish:\n\tpm_notifier_call_chain(PM_POST_SUSPEND);\n\tpm_restore_console();\n\treturn error;\n}\n\n\nvoid __weak arch_suspend_disable_irqs(void)\n{\n\tlocal_irq_disable();\n}\n\n\nvoid __weak arch_suspend_enable_irqs(void)\n{\n\tlocal_irq_enable();\n}\n\n\nstatic int suspend_enter(suspend_state_t state, bool *wakeup)\n{\n\tint error;\n\n\terror = platform_suspend_prepare(state);\n\tif (error)\n\t\tgoto Platform_finish;\n\n\terror = dpm_suspend_late(PMSG_SUSPEND);\n\tif (error) {\n\t\tprintk(KERN_ERR \"", "692": "\"), 0, false);\n\n\tpr_debug(\"", "693": "\"), 0, true);\n\terror = suspend_freeze_processes();\n\ttrace_suspend_resume(TPS(\"", "694": "\"), 0, true);\n\tprintk(KERN_INFO \"", "695": "\"), state, false);\n\t\tgoto Platform_wake;\n\t}\n\n\terror = disable_nonboot_cpus();\n\tif (error || suspend_test(TEST_CPUS))\n\t\tgoto Enable_cpus;\n\n\tarch_suspend_disable_irqs();\n\tBUG_ON(!irqs_disabled());\n\n\terror = syscore_suspend();\n\tif (!error) {\n\t\t*wakeup = pm_wakeup_pending();\n\t\tif (!(suspend_test(TEST_CORE) || *wakeup)) {\n\t\t\ttrace_suspend_resume(TPS(\"", "696": "\"), state, false);\n\tpr_debug(\"", "697": "\"), state, false);\n\n Close:\n\tplatform_resume_end(state);\n\treturn error;\n\n Recover_platform:\n\tplatform_recover(state);\n\tgoto Resume_devices;\n}\n\n\nstatic void suspend_finish(void)\n{\n\tsuspend_thaw_processes();\n\tpm_notifier_call_chain(PM_POST_SUSPEND);\n\tpm_restore_console();\n}\n\n\nstatic int enter_state(suspend_state_t state)\n{\n\tint error;\n\n\ttrace_suspend_resume(TPS(\"", "698": "\"), state, true);\n\t\tfreeze_enter();\n\t\ttrace_suspend_resume(TPS(\"", "699": "\"), state, true);\n\tif (state == PM_SUSPEND_FREEZE) {\n#ifdef CONFIG_PM_DEBUG\n\t\tif (pm_test_level != TEST_NONE && pm_test_level <= TEST_CPUS) {\n\t\t\tpr_warning(\"", "700": "\"), state, true);\n\tresume_console();\n\ttrace_suspend_resume(TPS(\"", "701": "\");\n\t\t\t\tKDB_STATE_SET(DOING_KGDB);\n\t\t\t\treturn buffer;\n\t\t\t}\n\t\t\tif (lastchar - buffer >= 11 &&\n\t\t\t    strcmp(lastchar - 11, \"", "702": "\");\n\t\t\t\tKDB_STATE_SET(DOING_KGDB);\n\t\t\t\treturn buffer;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\t}\n\tgoto poll_again;\n}\n\n\n\nchar *kdb_getstr(char *buffer, size_t bufsize, const char *prompt)\n{\n\tif (prompt && kdb_prompt_str != prompt)\n\t\tstrncpy(kdb_prompt_str, prompt, CMD_BUFLEN);\n\tkdb_printf(kdb_prompt_str);\n\tkdb_nextline = 1;\t\n\treturn kdb_read(buffer, bufsize);\n}\n\n\n\nstatic void kdb_input_flush(void)\n{\n\tget_char_func *f;\n\tint res;\n\tint flush_delay = 1;\n\twhile (flush_delay) {\n\t\tflush_delay--;\nempty:\n\t\ttouch_nmi_watchdog();\n\t\tfor (f = &kdb_poll_funcs[0]; *f; ++f) {\n\t\t\tres = (*f)();\n\t\t\tif (res != -1) {\n\t\t\t\tflush_delay = 1;\n\t\t\t\tgoto empty;\n\t\t\t}\n\t\t}\n\t\tif (flush_delay)\n\t\t\tmdelay(1);\n\t}\n}\n\n\n\nstatic char kdb_buffer[256];\t\nstatic char *next_avail = kdb_buffer;\nstatic int  size_avail;\nstatic int  suspend_grep;\n\n\nstatic int kdb_search_string(char *searched, char *searchfor)\n{\n\tchar firstchar, *cp;\n\tint len1, len2;\n\n\t\n\tlen1 = strlen(searched)-1;\n\tlen2 = strlen(searchfor);\n\tif (len1 < len2)\n\t\treturn 0;\n\tif (kdb_grep_leading && kdb_grep_trailing && len1 != len2)\n\t\treturn 0;\n\tif (kdb_grep_leading) {\n\t\tif (!strncmp(searched, searchfor, len2))\n\t\t\treturn 1;\n\t} else if (kdb_grep_trailing) {\n\t\tif (!strncmp(searched+len1-len2, searchfor, len2))\n\t\t\treturn 1;\n\t} else {\n\t\tfirstchar = *searchfor;\n\t\tcp = searched;\n\t\twhile ((cp = strchr(cp, firstchar))) {\n\t\t\tif (!strncmp(cp, searchfor, len2))\n\t\t\t\treturn 1;\n\t\t\tcp++;\n\t\t}\n\t}\n\treturn 0;\n}\n\nint vkdb_printf(enum kdb_msgsrc src, const char *fmt, va_list ap)\n{\n\tint diag;\n\tint linecount;\n\tint colcount;\n\tint logging, saved_loglevel = 0;\n\tint saved_trap_printk;\n\tint got_printf_lock = 0;\n\tint retlen = 0;\n\tint fnd, len;\n\tchar *cp, *cp2, *cphold = NULL, replaced_byte = ' ';\n\tchar *moreprompt = \"", "703": "\");\n\t\t\t*strchrnul(kdb_grep_string, '\\n') = '\\0';\n\t\t\tkdb_grepping_flag += KDB_GREPPING_FLAG_SEARCH;\n\t\t\tsuspend_grep = 1; \n\t\t} else if (buf1[0] && buf1[0] != '\\n') {\n\t\t\t\n\t\t\tsuspend_grep = 1; \n\t\t\tif (buf1[0] != '/')\n\t\t\t\tkdb_printf(\n\t\t\t\t    \"", "704": "\");\n\t\t\t--cp;\n\t\t}\n\t\tbreak;\n\tcase 14: \n\t\tmemset(tmpbuffer, ' ',\n\t\t       strlen(kdb_prompt_str) + (lastchar-buffer));\n\t\t*(tmpbuffer+strlen(kdb_prompt_str) +\n\t\t  (lastchar-buffer)) = '\\0';\n\t\tkdb_printf(\"", "705": "\");\n\t\t\tKDB_STATE_SET(DOING_KGDB);\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n}\n\nstatic int kdb_read_get_key(char *buffer, size_t bufsize)\n{\n#define ESCAPE_UDELAY 1000\n#define ESCAPE_DELAY (2*1000000/ESCAPE_UDELAY) \n\tchar escape_data[5];\t\n\tchar *ped = escape_data;\n\tint escape_delay = 0;\n\tget_char_func *f, *f_escape = NULL;\n\tint key;\n\n\tfor (f = &kdb_poll_funcs[0]; ; ++f) {\n\t\tif (*f == NULL) {\n\t\t\t\n\t\t\ttouch_nmi_watchdog();\n\t\t\tf = &kdb_poll_funcs[0];\n\t\t}\n\t\tif (escape_delay == 2) {\n\t\t\t*ped = '\\0';\n\t\t\tped = escape_data;\n\t\t\t--escape_delay;\n\t\t}\n\t\tif (escape_delay == 1) {\n\t\t\tkey = *ped++;\n\t\t\tif (!*ped)\n\t\t\t\t--escape_delay;\n\t\t\tbreak;\n\t\t}\n\t\tkey = (*f)();\n\t\tif (key == -1) {\n\t\t\tif (escape_delay) {\n\t\t\t\tudelay(ESCAPE_UDELAY);\n\t\t\t\t--escape_delay;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tif (bufsize <= 2) {\n\t\t\tif (key == '\\r')\n\t\t\t\tkey = '\\n';\n\t\t\t*buffer++ = key;\n\t\t\t*buffer = '\\0';\n\t\t\treturn -1;\n\t\t}\n\t\tif (escape_delay == 0 && key == '\\e') {\n\t\t\tescape_delay = ESCAPE_DELAY;\n\t\t\tped = escape_data;\n\t\t\tf_escape = f;\n\t\t}\n\t\tif (escape_delay) {\n\t\t\t*ped++ = key;\n\t\t\tif (f_escape != f) {\n\t\t\t\tescape_delay = 2;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (ped - escape_data == 1) {\n\t\t\t\t\n\t\t\t\tcontinue;\n\t\t\t} else if (ped - escape_data == 2) {\n\t\t\t\t\n\t\t\t\tif (key != '[')\n\t\t\t\t\tescape_delay = 2;\n\t\t\t\tcontinue;\n\t\t\t} else if (ped - escape_data == 3) {\n\t\t\t\t\n\t\t\t\tint mapkey = 0;\n\t\t\t\tswitch (key) {\n\t\t\t\tcase 'A': \n\t\t\t\t\tmapkey = 16;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'B': \n\t\t\t\t\tmapkey = 14;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'C': \n\t\t\t\t\tmapkey = 6;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'D': \n\t\t\t\t\tmapkey = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '1': \n\t\t\t\tcase '3': \n\t\t\t\t\n\t\t\t\tcase '4':\n\t\t\t\t\tmapkey = -1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (mapkey != -1) {\n\t\t\t\t\tif (mapkey > 0) {\n\t\t\t\t\t\tescape_data[0] = mapkey;\n\t\t\t\t\t\tescape_data[1] = '\\0';\n\t\t\t\t\t}\n\t\t\t\t\tescape_delay = 2;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t} else if (ped - escape_data == 4) {\n\t\t\t\t\n\t\t\t\tint mapkey = 0;\n\t\t\t\tif (key == '~') {\n\t\t\t\t\tswitch (escape_data[2]) {\n\t\t\t\t\tcase '1': \n\t\t\t\t\t\tmapkey = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '3': \n\t\t\t\t\t\tmapkey = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '4': \n\t\t\t\t\t\tmapkey = 5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (mapkey > 0) {\n\t\t\t\t\tescape_data[0] = mapkey;\n\t\t\t\t\tescape_data[1] = '\\0';\n\t\t\t\t}\n\t\t\t\tescape_delay = 2;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tbreak;\t\n\t}\n\treturn key;\n}\n\n\n\nstatic char *kdb_read(char *buffer, size_t bufsize)\n{\n\tchar *cp = buffer;\n\tchar *bufend = buffer+bufsize-2;\t\n\tchar *lastchar;\n\tchar *p_tmp;\n\tchar tmp;\n\tstatic char tmpbuffer[CMD_BUFLEN];\n\tint len = strlen(buffer);\n\tint len_tmp;\n\tint tab = 0;\n\tint count;\n\tint i;\n\tint diag, dtab_count;\n\tint key;\n\n\n\tdiag = kdbgetintenv(\"", "706": "\");\n\t\t\telse\n\t\t\t\tkdb_printf(\"", "707": "\");\n\t\t\terr = -EINVAL;\n\t\t\tbreak;\n\t\t}\n\n\t\tdentry = relay_create_buf_file(chan, chan->buf[i], i);\n\t\tif (unlikely(!dentry)) {\n\t\t\terr = -EINVAL;\n\t\t\tbreak;\n\t\t}\n\n\t\tif (curr_cpu == i) {\n\t\t\tlocal_irq_save(flags);\n\t\t\trelay_set_buf_dentry(chan->buf[i], dentry);\n\t\t\tlocal_irq_restore(flags);\n\t\t} else {\n\t\t\tdisp.buf = chan->buf[i];\n\t\t\tdisp.dentry = dentry;\n\t\t\tsmp_mb();\n\t\t\t\n\t\t\terr = smp_call_function_single(i,\n\t\t\t\t\t\t       __relay_set_buf_dentry,\n\t\t\t\t\t\t       &disp, 1);\n\t\t}\n\t\tif (unlikely(err))\n\t\t\tbreak;\n\t}\n\tput_cpu();\n\tmutex_unlock(&relay_channels_mutex);\n\n\treturn err;\n}\n\n\nsize_t relay_switch_subbuf(struct rchan_buf *buf, size_t length)\n{\n\tvoid *old, *new;\n\tsize_t old_subbuf, new_subbuf;\n\n\tif (unlikely(length > buf->chan->subbuf_size))\n\t\tgoto toobig;\n\n\tif (buf->offset != buf->chan->subbuf_size + 1) {\n\t\tbuf->prev_padding = buf->chan->subbuf_size - buf->offset;\n\t\told_subbuf = buf->subbufs_produced % buf->chan->n_subbufs;\n\t\tbuf->padding[old_subbuf] = buf->prev_padding;\n\t\tbuf->subbufs_produced++;\n\t\tif (buf->dentry)\n\t\t\td_inode(buf->dentry)->i_size +=\n\t\t\t\tbuf->chan->subbuf_size -\n\t\t\t\tbuf->padding[old_subbuf];\n\t\telse\n\t\t\tbuf->early_bytes += buf->chan->subbuf_size -\n\t\t\t\t\t    buf->padding[old_subbuf];\n\t\tsmp_mb();\n\t\tif (waitqueue_active(&buf->read_wait))\n\t\t\t\n\t\t\tmod_timer(&buf->timer, jiffies + 1);\n\t}\n\n\told = buf->data;\n\tnew_subbuf = buf->subbufs_produced % buf->chan->n_subbufs;\n\tnew = buf->start + new_subbuf * buf->chan->subbuf_size;\n\tbuf->offset = 0;\n\tif (!buf->chan->cb->subbuf_start(buf, new, old, buf->prev_padding)) {\n\t\tbuf->offset = buf->chan->subbuf_size + 1;\n\t\treturn 0;\n\t}\n\tbuf->data = new;\n\tbuf->padding[new_subbuf] = 0;\n\n\tif (unlikely(length + buf->offset > buf->chan->subbuf_size))\n\t\tgoto toobig;\n\n\treturn length;\n\ntoobig:\n\tbuf->chan->last_toobig = length;\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(relay_switch_subbuf);\n\n\nvoid relay_subbufs_consumed(struct rchan *chan,\n\t\t\t    unsigned int cpu,\n\t\t\t    size_t subbufs_consumed)\n{\n\tstruct rchan_buf *buf;\n\n\tif (!chan)\n\t\treturn;\n\n\tif (cpu >= NR_CPUS || !chan->buf[cpu] ||\n\t\t\t\t\tsubbufs_consumed > chan->n_subbufs)\n\t\treturn;\n\n\tbuf = chan->buf[cpu];\n\tif (subbufs_consumed > buf->subbufs_produced - buf->subbufs_consumed)\n\t\tbuf->subbufs_consumed = buf->subbufs_produced;\n\telse\n\t\tbuf->subbufs_consumed += subbufs_consumed;\n}\nEXPORT_SYMBOL_GPL(relay_subbufs_consumed);\n\n\nvoid relay_close(struct rchan *chan)\n{\n\tunsigned int i;\n\n\tif (!chan)\n\t\treturn;\n\n\tmutex_lock(&relay_channels_mutex);\n\tif (chan->is_global && chan->buf[0])\n\t\trelay_close_buf(chan->buf[0]);\n\telse\n\t\tfor_each_possible_cpu(i)\n\t\t\tif (chan->buf[i])\n\t\t\t\trelay_close_buf(chan->buf[i]);\n\n\tif (chan->last_toobig)\n\t\tprintk(KERN_WARNING \"", "708": "\");\n\t\t\tfor (i = 0; i < count; i++) {\n\t\t\t\tif (kallsyms_symbol_next(p_tmp, i) < 0)\n\t\t\t\t\tbreak;\n\t\t\t\tkdb_printf(\"", "709": "\");\n\t\t\tkdb_getstr(kdb_grep_string, KDB_GREP_STRLEN,\n\t\t\t\t   kdbgetenv(\"", "710": "\");\n\t\t\tkdb_printf(\"", "711": "\");\n\t\t\tkdb_printf(kdb_prompt_str);\n\t\t\tcp = buffer;\n\t\t}\n\t\tbreak;\n\tcase 5: \n\t\tif (cp < lastchar) {\n\t\t\tkdb_printf(\"", "712": "\");\n\t\t\tkdb_printf(kdb_prompt_str);\n\t\t\tkdb_printf(\"", "713": "\");\n\t\t\tprint_name_offset(m, dev->set_state_oneshot);\n\t\t\tSEQ_printf(m, \"", "714": "\");\n\t\t\tprint_name_offset(m, dev->set_state_periodic);\n\t\t\tSEQ_printf(m, \"", "715": "\");\n\t\t\tprint_name_offset(m, dev->set_state_shutdown);\n\t\t\tSEQ_printf(m, \"", "716": "\");\n\t\t\tprint_name_offset(m, dev->tick_resume);\n\t\t\tSEQ_printf(m, \"", "717": "\");\n\t\t\tprint_stack_trace(class->usage_traces + bit, len);\n\t\t}\n\t}\n\tprintk(\"", "718": "\");\n\t\t\treturn -EAGAIN;\n\t\t}\n#endif\n\t} else if (!valid_state(state)) {\n\t\treturn -EINVAL;\n\t}\n\tif (!mutex_trylock(&pm_mutex))\n\t\treturn -EBUSY;\n\n\tif (state == PM_SUSPEND_FREEZE)\n\t\tfreeze_begin();\n\n\ttrace_suspend_resume(TPS(\"", "719": "\");\n\t\t\tseq_printf(m, \"", "720": "\");\n\t\t\tsuspend_grep = 1; \n\t\t} else if (buf1[0] == '/' && !kdb_grepping_flag) {\n\t\t\tkdb_printf(\"", "721": "\");\n\t\t\tsuspend_grep = 1; \n\t\t} else if (buf1[0] == '\\n') {\n\t\t\tkdb_nextline = linecount - 1;\n\t\t\tkdb_printf(\"", "722": "\");\n\t\t\ttest_ftrace_alive(m);\n\t\t}\n\t\tif (iter->snapshot && trace_empty(iter))\n\t\t\tprint_snapshot_help(m, iter);\n\t\telse if (iter->trace && iter->trace->print_header)\n\t\t\titer->trace->print_header(m);\n\t\telse\n\t\t\ttrace_default_header(m);\n\n\t} else if (iter->leftover) {\n\t\t\n\t\tret = trace_print_seq(m, &iter->seq);\n\n\t\t\n\t\titer->leftover = ret;\n\n\t} else {\n\t\tprint_trace_line(iter);\n\t\tret = trace_print_seq(m, &iter->seq);\n\t\t\n\t\titer->leftover = ret;\n\t}\n\n\treturn 0;\n}\n\n\nstatic inline int tracing_get_cpu(struct inode *inode)\n{\n\tif (inode->i_cdev) \n\t\treturn (long)inode->i_cdev - 1;\n\treturn RING_BUFFER_ALL_CPUS;\n}\n\nstatic const struct seq_operations tracer_seq_ops = {\n\t.start\t\t= s_start,\n\t.next\t\t= s_next,\n\t.stop\t\t= s_stop,\n\t.show\t\t= s_show,\n};\n\nstatic struct trace_iterator *\n__tracing_open(struct inode *inode, struct file *file, bool snapshot)\n{\n\tstruct trace_array *tr = inode->i_private;\n\tstruct trace_iterator *iter;\n\tint cpu;\n\n\tif (tracing_disabled)\n\t\treturn ERR_PTR(-ENODEV);\n\n\titer = __seq_open_private(file, &tracer_seq_ops, sizeof(*iter));\n\tif (!iter)\n\t\treturn ERR_PTR(-ENOMEM);\n\n\titer->buffer_iter = kzalloc(sizeof(*iter->buffer_iter) * num_possible_cpus(),\n\t\t\t\t    GFP_KERNEL);\n\tif (!iter->buffer_iter)\n\t\tgoto release;\n\n\t\n\tmutex_lock(&trace_types_lock);\n\titer->trace = kzalloc(sizeof(*iter->trace), GFP_KERNEL);\n\tif (!iter->trace)\n\t\tgoto fail;\n\n\t*iter->trace = *tr->current_trace;\n\n\tif (!zalloc_cpumask_var(&iter->started, GFP_KERNEL))\n\t\tgoto fail;\n\n\titer->tr = tr;\n\n#ifdef CONFIG_TRACER_MAX_TRACE\n\t\n\tif (tr->current_trace->print_max || snapshot)\n\t\titer->trace_buffer = &tr->max_buffer;\n\telse\n#endif\n\t\titer->trace_buffer = &tr->trace_buffer;\n\titer->snapshot = snapshot;\n\titer->pos = -1;\n\titer->cpu_file = tracing_get_cpu(inode);\n\tmutex_init(&iter->mutex);\n\n\t\n\tif (iter->trace && iter->trace->open)\n\t\titer->trace->open(iter);\n\n\t\n\tif (ring_buffer_overruns(iter->trace_buffer->buffer))\n\t\titer->iter_flags |= TRACE_FILE_ANNOTATE;\n\n\t\n\tif (trace_clocks[tr->clock_id].in_ns)\n\t\titer->iter_flags |= TRACE_FILE_TIME_IN_NS;\n\n\t\n\tif (!iter->snapshot)\n\t\ttracing_stop_tr(tr);\n\n\tif (iter->cpu_file == RING_BUFFER_ALL_CPUS) {\n\t\tfor_each_tracing_cpu(cpu) {\n\t\t\titer->buffer_iter[cpu] =\n\t\t\t\tring_buffer_read_prepare(iter->trace_buffer->buffer, cpu);\n\t\t}\n\t\tring_buffer_read_prepare_sync();\n\t\tfor_each_tracing_cpu(cpu) {\n\t\t\tring_buffer_read_start(iter->buffer_iter[cpu]);\n\t\t\ttracing_iter_reset(iter, cpu);\n\t\t}\n\t} else {\n\t\tcpu = iter->cpu_file;\n\t\titer->buffer_iter[cpu] =\n\t\t\tring_buffer_read_prepare(iter->trace_buffer->buffer, cpu);\n\t\tring_buffer_read_prepare_sync();\n\t\tring_buffer_read_start(iter->buffer_iter[cpu]);\n\t\ttracing_iter_reset(iter, cpu);\n\t}\n\n\tmutex_unlock(&trace_types_lock);\n\n\treturn iter;\n\n fail:\n\tmutex_unlock(&trace_types_lock);\n\tkfree(iter->trace);\n\tkfree(iter->buffer_iter);\nrelease:\n\tseq_release_private(inode, file);\n\treturn ERR_PTR(-ENOMEM);\n}\n\nint tracing_open_generic(struct inode *inode, struct file *filp)\n{\n\tif (tracing_disabled)\n\t\treturn -ENODEV;\n\n\tfilp->private_data = inode->i_private;\n\treturn 0;\n}\n\nbool tracing_is_disabled(void)\n{\n\treturn (tracing_disabled) ? true: false;\n}\n\n\nstatic int tracing_open_generic_tr(struct inode *inode, struct file *filp)\n{\n\tstruct trace_array *tr = inode->i_private;\n\n\tif (tracing_disabled)\n\t\treturn -ENODEV;\n\n\tif (trace_array_get(tr) < 0)\n\t\treturn -ENODEV;\n\n\tfilp->private_data = inode->i_private;\n\n\treturn 0;\n}\n\nstatic int tracing_release(struct inode *inode, struct file *file)\n{\n\tstruct trace_array *tr = inode->i_private;\n\tstruct seq_file *m = file->private_data;\n\tstruct trace_iterator *iter;\n\tint cpu;\n\n\tif (!(file->f_mode & FMODE_READ)) {\n\t\ttrace_array_put(tr);\n\t\treturn 0;\n\t}\n\n\t\n\titer = m->private;\n\tmutex_lock(&trace_types_lock);\n\n\tfor_each_tracing_cpu(cpu) {\n\t\tif (iter->buffer_iter[cpu])\n\t\t\tring_buffer_read_finish(iter->buffer_iter[cpu]);\n\t}\n\n\tif (iter->trace && iter->trace->close)\n\t\titer->trace->close(iter);\n\n\tif (!iter->snapshot)\n\t\t\n\t\ttracing_start_tr(tr);\n\n\t__trace_array_put(tr);\n\n\tmutex_unlock(&trace_types_lock);\n\n\tmutex_destroy(&iter->mutex);\n\tfree_cpumask_var(iter->started);\n\tkfree(iter->trace);\n\tkfree(iter->buffer_iter);\n\tseq_release_private(inode, file);\n\n\treturn 0;\n}\n\nstatic int tracing_release_generic_tr(struct inode *inode, struct file *file)\n{\n\tstruct trace_array *tr = inode->i_private;\n\n\ttrace_array_put(tr);\n\treturn 0;\n}\n\nstatic int tracing_single_release_tr(struct inode *inode, struct file *file)\n{\n\tstruct trace_array *tr = inode->i_private;\n\n\ttrace_array_put(tr);\n\n\treturn single_release(inode, file);\n}\n\nstatic int tracing_open(struct inode *inode, struct file *file)\n{\n\tstruct trace_array *tr = inode->i_private;\n\tstruct trace_iterator *iter;\n\tint ret = 0;\n\n\tif (trace_array_get(tr) < 0)\n\t\treturn -ENODEV;\n\n\t\n\tif ((file->f_mode & FMODE_WRITE) && (file->f_flags & O_TRUNC)) {\n\t\tint cpu = tracing_get_cpu(inode);\n\n\t\tif (cpu == RING_BUFFER_ALL_CPUS)\n\t\t\ttracing_reset_online_cpus(&tr->trace_buffer);\n\t\telse\n\t\t\ttracing_reset(&tr->trace_buffer, cpu);\n\t}\n\n\tif (file->f_mode & FMODE_READ) {\n\t\titer = __tracing_open(inode, file, false);\n\t\tif (IS_ERR(iter))\n\t\t\tret = PTR_ERR(iter);\n\t\telse if (trace_flags & TRACE_ITER_LATENCY_FMT)\n\t\t\titer->iter_flags |= TRACE_FILE_LAT_FMT;\n\t}\n\n\tif (ret < 0)\n\t\ttrace_array_put(tr);\n\n\treturn ret;\n}\n\n\nstatic bool\ntrace_ok_for_array(struct tracer *t, struct trace_array *tr)\n{\n\treturn (tr->flags & TRACE_ARRAY_FL_GLOBAL) || t->allow_instances;\n}\n\n\nstatic struct tracer *\nget_tracer_for_array(struct trace_array *tr, struct tracer *t)\n{\n\twhile (t && !trace_ok_for_array(t, tr))\n\t\tt = t->next;\n\n\treturn t;\n}\n\nstatic void *\nt_next(struct seq_file *m, void *v, loff_t *pos)\n{\n\tstruct trace_array *tr = m->private;\n\tstruct tracer *t = v;\n\n\t(*pos)++;\n\n\tif (t)\n\t\tt = get_tracer_for_array(tr, t->next);\n\n\treturn t;\n}\n\nstatic void *t_start(struct seq_file *m, loff_t *pos)\n{\n\tstruct trace_array *tr = m->private;\n\tstruct tracer *t;\n\tloff_t l = 0;\n\n\tmutex_lock(&trace_types_lock);\n\n\tt = get_tracer_for_array(tr, trace_types);\n\tfor (; t && l < *pos; t = t_next(m, t, &l))\n\t\t\t;\n\n\treturn t;\n}\n\nstatic void t_stop(struct seq_file *m, void *p)\n{\n\tmutex_unlock(&trace_types_lock);\n}\n\nstatic int t_show(struct seq_file *m, void *v)\n{\n\tstruct tracer *t = v;\n\n\tif (!t)\n\t\treturn 0;\n\n\tseq_puts(m, t->name);\n\tif (t->next)\n\t\tseq_putc(m, ' ');\n\telse\n\t\tseq_putc(m, '\\n');\n\n\treturn 0;\n}\n\nstatic const struct seq_operations show_traces_seq_ops = {\n\t.start\t\t= t_start,\n\t.next\t\t= t_next,\n\t.stop\t\t= t_stop,\n\t.show\t\t= t_show,\n};\n\nstatic int show_traces_open(struct inode *inode, struct file *file)\n{\n\tstruct trace_array *tr = inode->i_private;\n\tstruct seq_file *m;\n\tint ret;\n\n\tif (tracing_disabled)\n\t\treturn -ENODEV;\n\n\tret = seq_open(file, &show_traces_seq_ops);\n\tif (ret)\n\t\treturn ret;\n\n\tm = file->private_data;\n\tm->private = tr;\n\n\treturn 0;\n}\n\nstatic ssize_t\ntracing_write_stub(struct file *filp, const char __user *ubuf,\n\t\t   size_t count, loff_t *ppos)\n{\n\treturn count;\n}\n\nloff_t tracing_lseek(struct file *file, loff_t offset, int whence)\n{\n\tint ret;\n\n\tif (file->f_mode & FMODE_READ)\n\t\tret = seq_lseek(file, offset, whence);\n\telse\n\t\tfile->f_pos = ret = 0;\n\n\treturn ret;\n}\n\nstatic const struct file_operations tracing_fops = {\n\t.open\t\t= tracing_open,\n\t.read\t\t= seq_read,\n\t.write\t\t= tracing_write_stub,\n\t.llseek\t\t= tracing_lseek,\n\t.release\t= tracing_release,\n};\n\nstatic const struct file_operations show_traces_fops = {\n\t.open\t\t= show_traces_open,\n\t.read\t\t= seq_read,\n\t.release\t= seq_release,\n\t.llseek\t\t= seq_lseek,\n};\n\n\nstatic DEFINE_MUTEX(tracing_cpumask_update_lock);\n\n\nstatic char mask_str[NR_CPUS + 1];\n\nstatic ssize_t\ntracing_cpumask_read(struct file *filp, char __user *ubuf,\n\t\t     size_t count, loff_t *ppos)\n{\n\tstruct trace_array *tr = file_inode(filp)->i_private;\n\tint len;\n\n\tmutex_lock(&tracing_cpumask_update_lock);\n\n\tlen = snprintf(mask_str, count, \"", "723": "\");\n\t\t\n\t\tret = ftrace_set_func(table, count, FTRACE_GRAPH_MAX_FUNCS, func);\n\t\tif (ret)\n\t\t\tprintk(KERN_DEBUG \"", "724": "\");\n\t\t\n\t\ttsk->flags |= PF_EXITPIDONE;\n\t\tset_current_state(TASK_UNINTERRUPTIBLE);\n\t\tschedule();\n\t}\n\n\texit_signals(tsk);  \n\t\n\tsmp_mb();\n\traw_spin_unlock_wait(&tsk->pi_lock);\n\n\tif (unlikely(in_atomic()))\n\t\tpr_info(\"", "725": "\");\n\t\tWARN_ON(1);\n\t\tgoto out_free_savedcmd;\n\t}\n\n\tif (global_trace.buffer_disabled)\n\t\ttracing_off();\n\n\tif (trace_boot_clock) {\n\t\tret = tracing_set_clock(&global_trace, trace_boot_clock);\n\t\tif (ret < 0)\n\t\t\tpr_warning(\"", "726": "\");\n\t\t__print_lock_name(middle_class);\n\t\tprintk(\"", "727": "\");\n\t\t__print_lock_name(parent);\n\t\tprintk(\"", "728": "\");\n\t\t__print_lock_name(safe_class);\n\t\tprintk(\"", "729": "\");\n\t\t__print_lock_name(source);\n\t\tprintk(\"", "730": "\");\n\t\t__print_lock_name(target);\n\t\tprintk(\"", "731": "\");\n\t\t__print_lock_name(unsafe_class);\n\t\tprintk(\"", "732": "\");\n\t\tdl_se->deadline = rq_clock(rq) + pi_se->dl_deadline;\n\t\tdl_se->runtime = pi_se->dl_runtime;\n\t}\n\n\tif (dl_se->dl_yielded)\n\t\tdl_se->dl_yielded = 0;\n\tif (dl_se->dl_throttled)\n\t\tdl_se->dl_throttled = 0;\n}\n\n\nstatic bool dl_entity_overflow(struct sched_dl_entity *dl_se,\n\t\t\t       struct sched_dl_entity *pi_se, u64 t)\n{\n\tu64 left, right;\n\n\t\n\tleft = (pi_se->dl_period >> DL_SCALE) * (dl_se->runtime >> DL_SCALE);\n\tright = ((dl_se->deadline - t) >> DL_SCALE) *\n\t\t(pi_se->dl_runtime >> DL_SCALE);\n\n\treturn dl_time_before(right, left);\n}\n\n\nstatic void update_dl_entity(struct sched_dl_entity *dl_se,\n\t\t\t     struct sched_dl_entity *pi_se)\n{\n\tstruct dl_rq *dl_rq = dl_rq_of_se(dl_se);\n\tstruct rq *rq = rq_of_dl_rq(dl_rq);\n\n\t\n\tif (dl_se->dl_new) {\n\t\tsetup_new_dl_entity(dl_se, pi_se);\n\t\treturn;\n\t}\n\n\tif (dl_time_before(dl_se->deadline, rq_clock(rq)) ||\n\t    dl_entity_overflow(dl_se, pi_se, rq_clock(rq))) {\n\t\tdl_se->deadline = rq_clock(rq) + pi_se->dl_deadline;\n\t\tdl_se->runtime = pi_se->dl_runtime;\n\t}\n}\n\n\nstatic int start_dl_timer(struct sched_dl_entity *dl_se, bool boosted)\n{\n\tstruct dl_rq *dl_rq = dl_rq_of_se(dl_se);\n\tstruct rq *rq = rq_of_dl_rq(dl_rq);\n\tktime_t now, act;\n\tktime_t soft, hard;\n\tunsigned long range;\n\ts64 delta;\n\n\tif (boosted)\n\t\treturn 0;\n\t\n\tact = ns_to_ktime(dl_se->deadline);\n\tnow = hrtimer_cb_get_time(&dl_se->dl_timer);\n\tdelta = ktime_to_ns(now) - rq_clock(rq);\n\tact = ktime_add_ns(act, delta);\n\n\t\n\tif (ktime_us_delta(act, now) < 0)\n\t\treturn 0;\n\n\thrtimer_set_expires(&dl_se->dl_timer, act);\n\n\tsoft = hrtimer_get_softexpires(&dl_se->dl_timer);\n\thard = hrtimer_get_expires(&dl_se->dl_timer);\n\trange = ktime_to_ns(ktime_sub(hard, soft));\n\t__hrtimer_start_range_ns(&dl_se->dl_timer, soft,\n\t\t\t\t range, HRTIMER_MODE_ABS, 0);\n\n\treturn hrtimer_active(&dl_se->dl_timer);\n}\n\n\nstatic enum hrtimer_restart dl_task_timer(struct hrtimer *timer)\n{\n\tstruct sched_dl_entity *dl_se = container_of(timer,\n\t\t\t\t\t\t     struct sched_dl_entity,\n\t\t\t\t\t\t     dl_timer);\n\tstruct task_struct *p = dl_task_of(dl_se);\n\tunsigned long flags;\n\tstruct rq *rq;\n\n\trq = task_rq_lock(p, &flags);\n\n\t\n\tif (!dl_task(p) || dl_se->dl_new ||\n\t    dl_se->dl_boosted || !dl_se->dl_throttled)\n\t\tgoto unlock;\n\n\tsched_clock_tick();\n\tupdate_rq_clock(rq);\n\n#ifdef CONFIG_SMP\n\t\n\tif (unlikely(!rq->online)) {\n\t\tdl_task_offline_migration(rq, p);\n\t\tgoto unlock;\n\t}\n#endif\n\n\t\n\tif (!task_on_rq_queued(p)) {\n\t\treplenish_dl_entity(dl_se, dl_se);\n\t\tgoto unlock;\n\t}\n\n\tenqueue_task_dl(rq, p, ENQUEUE_REPLENISH);\n\tif (dl_task(rq->curr))\n\t\tcheck_preempt_curr_dl(rq, p, 0);\n\telse\n\t\tresched_curr(rq);\n#ifdef CONFIG_SMP\n\t\n\tif (has_pushable_dl_tasks(rq))\n\t\tpush_dl_task(rq);\n#endif\nunlock:\n\ttask_rq_unlock(rq, p, &flags);\n\n\treturn HRTIMER_NORESTART;\n}\n\nvoid init_dl_task_timer(struct sched_dl_entity *dl_se)\n{\n\tstruct hrtimer *timer = &dl_se->dl_timer;\n\n\thrtimer_init(timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);\n\ttimer->function = dl_task_timer;\n}\n\nstatic\nint dl_runtime_exceeded(struct rq *rq, struct sched_dl_entity *dl_se)\n{\n\treturn (dl_se->runtime <= 0);\n}\n\nextern bool sched_rt_bandwidth_account(struct rt_rq *rt_rq);\n\n\nstatic void update_curr_dl(struct rq *rq)\n{\n\tstruct task_struct *curr = rq->curr;\n\tstruct sched_dl_entity *dl_se = &curr->dl;\n\tu64 delta_exec;\n\n\tif (!dl_task(curr) || !on_dl_rq(dl_se))\n\t\treturn;\n\n\t\n\tdelta_exec = rq_clock_task(rq) - curr->se.exec_start;\n\tif (unlikely((s64)delta_exec <= 0))\n\t\treturn;\n\n\tschedstat_set(curr->se.statistics.exec_max,\n\t\t      max(curr->se.statistics.exec_max, delta_exec));\n\n\tcurr->se.sum_exec_runtime += delta_exec;\n\taccount_group_exec_runtime(curr, delta_exec);\n\n\tcurr->se.exec_start = rq_clock_task(rq);\n\tcpuacct_charge(curr, delta_exec);\n\n\tsched_rt_avg_update(rq, delta_exec);\n\n\tdl_se->runtime -= dl_se->dl_yielded ? 0 : delta_exec;\n\tif (dl_runtime_exceeded(rq, dl_se)) {\n\t\tdl_se->dl_throttled = 1;\n\t\t__dequeue_task_dl(rq, curr, 0);\n\t\tif (unlikely(!start_dl_timer(dl_se, curr->dl.dl_boosted)))\n\t\t\tenqueue_task_dl(rq, curr, ENQUEUE_REPLENISH);\n\n\t\tif (!is_leftmost(curr, &rq->dl))\n\t\t\tresched_curr(rq);\n\t}\n\n\t\n\tif (rt_bandwidth_enabled()) {\n\t\tstruct rt_rq *rt_rq = &rq->rt;\n\n\t\traw_spin_lock(&rt_rq->rt_runtime_lock);\n\t\t\n\t\tif (sched_rt_bandwidth_account(rt_rq))\n\t\t\trt_rq->rt_time += delta_exec;\n\t\traw_spin_unlock(&rt_rq->rt_runtime_lock);\n\t}\n}\n\n#ifdef CONFIG_SMP\n\nstatic struct task_struct *pick_next_earliest_dl_task(struct rq *rq, int cpu);\n\nstatic inline u64 next_deadline(struct rq *rq)\n{\n\tstruct task_struct *next = pick_next_earliest_dl_task(rq, rq->cpu);\n\n\tif (next && dl_prio(next->prio))\n\t\treturn next->dl.deadline;\n\telse\n\t\treturn 0;\n}\n\nstatic void inc_dl_deadline(struct dl_rq *dl_rq, u64 deadline)\n{\n\tstruct rq *rq = rq_of_dl_rq(dl_rq);\n\n\tif (dl_rq->earliest_dl.curr == 0 ||\n\t    dl_time_before(deadline, dl_rq->earliest_dl.curr)) {\n\t\t\n\t\tdl_rq->earliest_dl.next = dl_rq->earliest_dl.curr;\n\t\tdl_rq->earliest_dl.curr = deadline;\n\t\tcpudl_set(&rq->rd->cpudl, rq->cpu, deadline, 1);\n\t} else if (dl_rq->earliest_dl.next == 0 ||\n\t\t   dl_time_before(deadline, dl_rq->earliest_dl.next)) {\n\t\t\n\t\tdl_rq->earliest_dl.next = next_deadline(rq);\n\t}\n}\n\nstatic void dec_dl_deadline(struct dl_rq *dl_rq, u64 deadline)\n{\n\tstruct rq *rq = rq_of_dl_rq(dl_rq);\n\n\t\n\tif (!dl_rq->dl_nr_running) {\n\t\tdl_rq->earliest_dl.curr = 0;\n\t\tdl_rq->earliest_dl.next = 0;\n\t\tcpudl_set(&rq->rd->cpudl, rq->cpu, 0, 0);\n\t} else {\n\t\tstruct rb_node *leftmost = dl_rq->rb_leftmost;\n\t\tstruct sched_dl_entity *entry;\n\n\t\tentry = rb_entry(leftmost, struct sched_dl_entity, rb_node);\n\t\tdl_rq->earliest_dl.curr = entry->deadline;\n\t\tdl_rq->earliest_dl.next = next_deadline(rq);\n\t\tcpudl_set(&rq->rd->cpudl, rq->cpu, entry->deadline, 1);\n\t}\n}\n\n#else\n\nstatic inline void inc_dl_deadline(struct dl_rq *dl_rq, u64 deadline) {}\nstatic inline void dec_dl_deadline(struct dl_rq *dl_rq, u64 deadline) {}\n\n#endif \n\nstatic inline\nvoid inc_dl_tasks(struct sched_dl_entity *dl_se, struct dl_rq *dl_rq)\n{\n\tint prio = dl_task_of(dl_se)->prio;\n\tu64 deadline = dl_se->deadline;\n\n\tWARN_ON(!dl_prio(prio));\n\tdl_rq->dl_nr_running++;\n\tadd_nr_running(rq_of_dl_rq(dl_rq), 1);\n\n\tinc_dl_deadline(dl_rq, deadline);\n\tinc_dl_migration(dl_se, dl_rq);\n}\n\nstatic inline\nvoid dec_dl_tasks(struct sched_dl_entity *dl_se, struct dl_rq *dl_rq)\n{\n\tint prio = dl_task_of(dl_se)->prio;\n\n\tWARN_ON(!dl_prio(prio));\n\tWARN_ON(!dl_rq->dl_nr_running);\n\tdl_rq->dl_nr_running--;\n\tsub_nr_running(rq_of_dl_rq(dl_rq), 1);\n\n\tdec_dl_deadline(dl_rq, dl_se->deadline);\n\tdec_dl_migration(dl_se, dl_rq);\n}\n\nstatic void __enqueue_dl_entity(struct sched_dl_entity *dl_se)\n{\n\tstruct dl_rq *dl_rq = dl_rq_of_se(dl_se);\n\tstruct rb_node **link = &dl_rq->rb_root.rb_node;\n\tstruct rb_node *parent = NULL;\n\tstruct sched_dl_entity *entry;\n\tint leftmost = 1;\n\n\tBUG_ON(!RB_EMPTY_NODE(&dl_se->rb_node));\n\n\twhile (*link) {\n\t\tparent = *link;\n\t\tentry = rb_entry(parent, struct sched_dl_entity, rb_node);\n\t\tif (dl_time_before(dl_se->deadline, entry->deadline))\n\t\t\tlink = &parent->rb_left;\n\t\telse {\n\t\t\tlink = &parent->rb_right;\n\t\t\tleftmost = 0;\n\t\t}\n\t}\n\n\tif (leftmost)\n\t\tdl_rq->rb_leftmost = &dl_se->rb_node;\n\n\trb_link_node(&dl_se->rb_node, parent, link);\n\trb_insert_color(&dl_se->rb_node, &dl_rq->rb_root);\n\n\tinc_dl_tasks(dl_se, dl_rq);\n}\n\nstatic void __dequeue_dl_entity(struct sched_dl_entity *dl_se)\n{\n\tstruct dl_rq *dl_rq = dl_rq_of_se(dl_se);\n\n\tif (RB_EMPTY_NODE(&dl_se->rb_node))\n\t\treturn;\n\n\tif (dl_rq->rb_leftmost == &dl_se->rb_node) {\n\t\tstruct rb_node *next_node;\n\n\t\tnext_node = rb_next(&dl_se->rb_node);\n\t\tdl_rq->rb_leftmost = next_node;\n\t}\n\n\trb_erase(&dl_se->rb_node, &dl_rq->rb_root);\n\tRB_CLEAR_NODE(&dl_se->rb_node);\n\n\tdec_dl_tasks(dl_se, dl_rq);\n}\n\nstatic void\nenqueue_dl_entity(struct sched_dl_entity *dl_se,\n\t\t  struct sched_dl_entity *pi_se, int flags)\n{\n\tBUG_ON(on_dl_rq(dl_se));\n\n\t\n\tif (dl_se->dl_new || flags & ENQUEUE_WAKEUP)\n\t\tupdate_dl_entity(dl_se, pi_se);\n\telse if (flags & ENQUEUE_REPLENISH)\n\t\treplenish_dl_entity(dl_se, pi_se);\n\n\t__enqueue_dl_entity(dl_se);\n}\n\nstatic void dequeue_dl_entity(struct sched_dl_entity *dl_se)\n{\n\t__dequeue_dl_entity(dl_se);\n}\n\nstatic void enqueue_task_dl(struct rq *rq, struct task_struct *p, int flags)\n{\n\tstruct task_struct *pi_task = rt_mutex_get_top_task(p);\n\tstruct sched_dl_entity *pi_se = &p->dl;\n\n\t\n\tif (pi_task && p->dl.dl_boosted && dl_prio(pi_task->normal_prio)) {\n\t\tpi_se = &pi_task->dl;\n\t} else if (!dl_prio(p->normal_prio)) {\n\t\t\n\t\tBUG_ON(!p->dl.dl_boosted || flags != ENQUEUE_REPLENISH);\n\t\treturn;\n\t}\n\n\t\n\tif (p->dl.dl_throttled && !(flags & ENQUEUE_REPLENISH))\n\t\treturn;\n\n\tenqueue_dl_entity(&p->dl, pi_se, flags);\n\n\tif (!task_current(rq, p) && p->nr_cpus_allowed > 1)\n\t\tenqueue_pushable_dl_task(rq, p);\n}\n\nstatic void __dequeue_task_dl(struct rq *rq, struct task_struct *p, int flags)\n{\n\tdequeue_dl_entity(&p->dl);\n\tdequeue_pushable_dl_task(rq, p);\n}\n\nstatic void dequeue_task_dl(struct rq *rq, struct task_struct *p, int flags)\n{\n\tupdate_curr_dl(rq);\n\t__dequeue_task_dl(rq, p, flags);\n}\n\n\nstatic void yield_task_dl(struct rq *rq)\n{\n\tstruct task_struct *p = rq->curr;\n\n\t\n\tif (p->dl.runtime > 0) {\n\t\trq->curr->dl.dl_yielded = 1;\n\t\tp->dl.runtime = 0;\n\t}\n\tupdate_rq_clock(rq);\n\tupdate_curr_dl(rq);\n\t\n\trq_clock_skip_update(rq, true);\n}\n\n#ifdef CONFIG_SMP\n\nstatic int find_later_rq(struct task_struct *task);\n\nstatic int\nselect_task_rq_dl(struct task_struct *p, int cpu, int sd_flag, int flags)\n{\n\tstruct task_struct *curr;\n\tstruct rq *rq;\n\n\tif (sd_flag != SD_BALANCE_WAKE)\n\t\tgoto out;\n\n\trq = cpu_rq(cpu);\n\n\trcu_read_lock();\n\tcurr = ACCESS_ONCE(rq->curr); \n\n\t\n\tif (unlikely(dl_task(curr)) &&\n\t    (curr->nr_cpus_allowed < 2 ||\n\t     !dl_entity_preempt(&p->dl, &curr->dl)) &&\n\t    (p->nr_cpus_allowed > 1)) {\n\t\tint target = find_later_rq(p);\n\n\t\tif (target != -1)\n\t\t\tcpu = target;\n\t}\n\trcu_read_unlock();\n\nout:\n\treturn cpu;\n}\n\nstatic void check_preempt_equal_dl(struct rq *rq, struct task_struct *p)\n{\n\t\n\tif (rq->curr->nr_cpus_allowed == 1 ||\n\t    cpudl_find(&rq->rd->cpudl, rq->curr, NULL) == -1)\n\t\treturn;\n\n\t\n\tif (p->nr_cpus_allowed != 1 &&\n\t    cpudl_find(&rq->rd->cpudl, p, NULL) != -1)\n\t\treturn;\n\n\tresched_curr(rq);\n}\n\nstatic int pull_dl_task(struct rq *this_rq);\n\n#endif \n\n\nstatic void check_preempt_curr_dl(struct rq *rq, struct task_struct *p,\n\t\t\t\t  int flags)\n{\n\tif (dl_entity_preempt(&p->dl, &rq->curr->dl)) {\n\t\tresched_curr(rq);\n\t\treturn;\n\t}\n\n#ifdef CONFIG_SMP\n\t\n\tif ((p->dl.deadline == rq->curr->dl.deadline) &&\n\t    !test_tsk_need_resched(rq->curr))\n\t\tcheck_preempt_equal_dl(rq, p);\n#endif \n}\n\n#ifdef CONFIG_SCHED_HRTICK\nstatic void start_hrtick_dl(struct rq *rq, struct task_struct *p)\n{\n\thrtick_start(rq, p->dl.runtime);\n}\n#else \nstatic void start_hrtick_dl(struct rq *rq, struct task_struct *p)\n{\n}\n#endif\n\nstatic struct sched_dl_entity *pick_next_dl_entity(struct rq *rq,\n\t\t\t\t\t\t   struct dl_rq *dl_rq)\n{\n\tstruct rb_node *left = dl_rq->rb_leftmost;\n\n\tif (!left)\n\t\treturn NULL;\n\n\treturn rb_entry(left, struct sched_dl_entity, rb_node);\n}\n\nstruct task_struct *pick_next_task_dl(struct rq *rq, struct task_struct *prev)\n{\n\tstruct sched_dl_entity *dl_se;\n\tstruct task_struct *p;\n\tstruct dl_rq *dl_rq;\n\n\tdl_rq = &rq->dl;\n\n\tif (need_pull_dl_task(rq, prev)) {\n\t\tpull_dl_task(rq);\n\t\t\n\t\tif (rq->stop && task_on_rq_queued(rq->stop))\n\t\t\treturn RETRY_TASK;\n\t}\n\n\t\n\tif (prev->sched_class == &dl_sched_class)\n\t\tupdate_curr_dl(rq);\n\n\tif (unlikely(!dl_rq->dl_nr_running))\n\t\treturn NULL;\n\n\tput_prev_task(rq, prev);\n\n\tdl_se = pick_next_dl_entity(rq, dl_rq);\n\tBUG_ON(!dl_se);\n\n\tp = dl_task_of(dl_se);\n\tp->se.exec_start = rq_clock_task(rq);\n\n\t\n       dequeue_pushable_dl_task(rq, p);\n\n\tif (hrtick_enabled(rq))\n\t\tstart_hrtick_dl(rq, p);\n\n\tset_post_schedule(rq);\n\n\treturn p;\n}\n\nstatic void put_prev_task_dl(struct rq *rq, struct task_struct *p)\n{\n\tupdate_curr_dl(rq);\n\n\tif (on_dl_rq(&p->dl) && p->nr_cpus_allowed > 1)\n\t\tenqueue_pushable_dl_task(rq, p);\n}\n\nstatic void task_tick_dl(struct rq *rq, struct task_struct *p, int queued)\n{\n\tupdate_curr_dl(rq);\n\n\t\n\tif (hrtick_enabled(rq) && queued && p->dl.runtime > 0 &&\n\t    is_leftmost(p, &rq->dl))\n\t\tstart_hrtick_dl(rq, p);\n}\n\nstatic void task_fork_dl(struct task_struct *p)\n{\n\t\n}\n\nstatic void task_dead_dl(struct task_struct *p)\n{\n\tstruct hrtimer *timer = &p->dl.dl_timer;\n\tstruct dl_bw *dl_b = dl_bw_of(task_cpu(p));\n\n\t\n\traw_spin_lock_irq(&dl_b->lock);\n\t\n\tdl_b->total_bw -= p->dl.dl_bw;\n\traw_spin_unlock_irq(&dl_b->lock);\n\n\thrtimer_cancel(timer);\n}\n\nstatic void set_curr_task_dl(struct rq *rq)\n{\n\tstruct task_struct *p = rq->curr;\n\n\tp->se.exec_start = rq_clock_task(rq);\n\n\t\n\tdequeue_pushable_dl_task(rq, p);\n}\n\n#ifdef CONFIG_SMP\n\n\n#define DL_MAX_TRIES 3\n\nstatic int pick_dl_task(struct rq *rq, struct task_struct *p, int cpu)\n{\n\tif (!task_running(rq, p) &&\n\t    cpumask_test_cpu(cpu, tsk_cpus_allowed(p)))\n\t\treturn 1;\n\treturn 0;\n}\n\n\nstatic struct task_struct *pick_next_earliest_dl_task(struct rq *rq, int cpu)\n{\n\tstruct rb_node *next_node = rq->dl.rb_leftmost;\n\tstruct sched_dl_entity *dl_se;\n\tstruct task_struct *p = NULL;\n\nnext_node:\n\tnext_node = rb_next(next_node);\n\tif (next_node) {\n\t\tdl_se = rb_entry(next_node, struct sched_dl_entity, rb_node);\n\t\tp = dl_task_of(dl_se);\n\n\t\tif (pick_dl_task(rq, p, cpu))\n\t\t\treturn p;\n\n\t\tgoto next_node;\n\t}\n\n\treturn NULL;\n}\n\nstatic DEFINE_PER_CPU(cpumask_var_t, local_cpu_mask_dl);\n\nstatic int find_later_rq(struct task_struct *task)\n{\n\tstruct sched_domain *sd;\n\tstruct cpumask *later_mask = this_cpu_cpumask_var_ptr(local_cpu_mask_dl);\n\tint this_cpu = smp_processor_id();\n\tint best_cpu, cpu = task_cpu(task);\n\n\t\n\tif (unlikely(!later_mask))\n\t\treturn -1;\n\n\tif (task->nr_cpus_allowed == 1)\n\t\treturn -1;\n\n\t\n\tbest_cpu = cpudl_find(&task_rq(task)->rd->cpudl,\n\t\t\ttask, later_mask);\n\tif (best_cpu == -1)\n\t\treturn -1;\n\n\t\n\tif (cpumask_test_cpu(cpu, later_mask))\n\t\treturn cpu;\n\t\n\tif (!cpumask_test_cpu(this_cpu, later_mask))\n\t\tthis_cpu = -1;\n\n\trcu_read_lock();\n\tfor_each_domain(cpu, sd) {\n\t\tif (sd->flags & SD_WAKE_AFFINE) {\n\n\t\t\t\n\t\t\tif (this_cpu != -1 &&\n\t\t\t    cpumask_test_cpu(this_cpu, sched_domain_span(sd))) {\n\t\t\t\trcu_read_unlock();\n\t\t\t\treturn this_cpu;\n\t\t\t}\n\n\t\t\t\n\t\t\tif (best_cpu < nr_cpu_ids &&\n\t\t\t    cpumask_test_cpu(best_cpu, sched_domain_span(sd))) {\n\t\t\t\trcu_read_unlock();\n\t\t\t\treturn best_cpu;\n\t\t\t}\n\t\t}\n\t}\n\trcu_read_unlock();\n\n\t\n\tif (this_cpu != -1)\n\t\treturn this_cpu;\n\n\tcpu = cpumask_any(later_mask);\n\tif (cpu < nr_cpu_ids)\n\t\treturn cpu;\n\n\treturn -1;\n}\n\n\nstatic struct rq *find_lock_later_rq(struct task_struct *task, struct rq *rq)\n{\n\tstruct rq *later_rq = NULL;\n\tint tries;\n\tint cpu;\n\n\tfor (tries = 0; tries < DL_MAX_TRIES; tries++) {\n\t\tcpu = find_later_rq(task);\n\n\t\tif ((cpu == -1) || (cpu == rq->cpu))\n\t\t\tbreak;\n\n\t\tlater_rq = cpu_rq(cpu);\n\n\t\t\n\t\tif (double_lock_balance(rq, later_rq)) {\n\t\t\tif (unlikely(task_rq(task) != rq ||\n\t\t\t\t     !cpumask_test_cpu(later_rq->cpu,\n\t\t\t\t                       &task->cpus_allowed) ||\n\t\t\t\t     task_running(rq, task) ||\n\t\t\t\t     !task_on_rq_queued(task))) {\n\t\t\t\tdouble_unlock_balance(rq, later_rq);\n\t\t\t\tlater_rq = NULL;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t\n\t\tif (!later_rq->dl.dl_nr_running ||\n\t\t    dl_time_before(task->dl.deadline,\n\t\t\t\t   later_rq->dl.earliest_dl.curr))\n\t\t\tbreak;\n\n\t\t\n\t\tdouble_unlock_balance(rq, later_rq);\n\t\tlater_rq = NULL;\n\t}\n\n\treturn later_rq;\n}\n\nstatic struct task_struct *pick_next_pushable_dl_task(struct rq *rq)\n{\n\tstruct task_struct *p;\n\n\tif (!has_pushable_dl_tasks(rq))\n\t\treturn NULL;\n\n\tp = rb_entry(rq->dl.pushable_dl_tasks_leftmost,\n\t\t     struct task_struct, pushable_dl_tasks);\n\n\tBUG_ON(rq->cpu != task_cpu(p));\n\tBUG_ON(task_current(rq, p));\n\tBUG_ON(p->nr_cpus_allowed <= 1);\n\n\tBUG_ON(!task_on_rq_queued(p));\n\tBUG_ON(!dl_task(p));\n\n\treturn p;\n}\n\n\nstatic int push_dl_task(struct rq *rq)\n{\n\tstruct task_struct *next_task;\n\tstruct rq *later_rq;\n\tint ret = 0;\n\n\tif (!rq->dl.overloaded)\n\t\treturn 0;\n\n\tnext_task = pick_next_pushable_dl_task(rq);\n\tif (!next_task)\n\t\treturn 0;\n\nretry:\n\tif (unlikely(next_task == rq->curr)) {\n\t\tWARN_ON(1);\n\t\treturn 0;\n\t}\n\n\t\n\tif (dl_task(rq->curr) &&\n\t    dl_time_before(next_task->dl.deadline, rq->curr->dl.deadline) &&\n\t    rq->curr->nr_cpus_allowed > 1) {\n\t\tresched_curr(rq);\n\t\treturn 0;\n\t}\n\n\t\n\tget_task_struct(next_task);\n\n\t\n\tlater_rq = find_lock_later_rq(next_task, rq);\n\tif (!later_rq) {\n\t\tstruct task_struct *task;\n\n\t\t\n\t\ttask = pick_next_pushable_dl_task(rq);\n\t\tif (task_cpu(next_task) == rq->cpu && task == next_task) {\n\t\t\t\n\t\t\tgoto out;\n\t\t}\n\n\t\tif (!task)\n\t\t\t\n\t\t\tgoto out;\n\n\t\tput_task_struct(next_task);\n\t\tnext_task = task;\n\t\tgoto retry;\n\t}\n\n\tdeactivate_task(rq, next_task, 0);\n\tset_task_cpu(next_task, later_rq->cpu);\n\tactivate_task(later_rq, next_task, 0);\n\tret = 1;\n\n\tresched_curr(later_rq);\n\n\tdouble_unlock_balance(rq, later_rq);\n\nout:\n\tput_task_struct(next_task);\n\n\treturn ret;\n}\n\nstatic void push_dl_tasks(struct rq *rq)\n{\n\t\n\twhile (push_dl_task(rq))\n\t\t;\n}\n\nstatic int pull_dl_task(struct rq *this_rq)\n{\n\tint this_cpu = this_rq->cpu, ret = 0, cpu;\n\tstruct task_struct *p;\n\tstruct rq *src_rq;\n\tu64 dmin = LONG_MAX;\n\n\tif (likely(!dl_overloaded(this_rq)))\n\t\treturn 0;\n\n\t\n\tsmp_rmb();\n\n\tfor_each_cpu(cpu, this_rq->rd->dlo_mask) {\n\t\tif (this_cpu == cpu)\n\t\t\tcontinue;\n\n\t\tsrc_rq = cpu_rq(cpu);\n\n\t\t\n\t\tif (this_rq->dl.dl_nr_running &&\n\t\t    dl_time_before(this_rq->dl.earliest_dl.curr,\n\t\t\t\t   src_rq->dl.earliest_dl.next))\n\t\t\tcontinue;\n\n\t\t\n\t\tdouble_lock_balance(this_rq, src_rq);\n\n\t\t\n\t\tif (src_rq->dl.dl_nr_running <= 1)\n\t\t\tgoto skip;\n\n\t\tp = pick_next_earliest_dl_task(src_rq, this_cpu);\n\n\t\t\n\t\tif (p && dl_time_before(p->dl.deadline, dmin) &&\n\t\t    (!this_rq->dl.dl_nr_running ||\n\t\t     dl_time_before(p->dl.deadline,\n\t\t\t\t    this_rq->dl.earliest_dl.curr))) {\n\t\t\tWARN_ON(p == src_rq->curr);\n\t\t\tWARN_ON(!task_on_rq_queued(p));\n\n\t\t\t\n\t\t\tif (dl_time_before(p->dl.deadline,\n\t\t\t\t\t   src_rq->curr->dl.deadline))\n\t\t\t\tgoto skip;\n\n\t\t\tret = 1;\n\n\t\t\tdeactivate_task(src_rq, p, 0);\n\t\t\tset_task_cpu(p, this_cpu);\n\t\t\tactivate_task(this_rq, p, 0);\n\t\t\tdmin = p->dl.deadline;\n\n\t\t\t\n\t\t}\nskip:\n\t\tdouble_unlock_balance(this_rq, src_rq);\n\t}\n\n\treturn ret;\n}\n\nstatic void post_schedule_dl(struct rq *rq)\n{\n\tpush_dl_tasks(rq);\n}\n\n\nstatic void task_woken_dl(struct rq *rq, struct task_struct *p)\n{\n\tif (!task_running(rq, p) &&\n\t    !test_tsk_need_resched(rq->curr) &&\n\t    has_pushable_dl_tasks(rq) &&\n\t    p->nr_cpus_allowed > 1 &&\n\t    dl_task(rq->curr) &&\n\t    (rq->curr->nr_cpus_allowed < 2 ||\n\t     !dl_entity_preempt(&p->dl, &rq->curr->dl))) {\n\t\tpush_dl_tasks(rq);\n\t}\n}\n\nstatic void set_cpus_allowed_dl(struct task_struct *p,\n\t\t\t\tconst struct cpumask *new_mask)\n{\n\tstruct rq *rq;\n\tstruct root_domain *src_rd;\n\tint weight;\n\n\tBUG_ON(!dl_task(p));\n\n\trq = task_rq(p);\n\tsrc_rd = rq->rd;\n\t\n\tif (!cpumask_intersects(src_rd->span, new_mask)) {\n\t\tstruct dl_bw *src_dl_b;\n\n\t\tsrc_dl_b = dl_bw_of(cpu_of(rq));\n\t\t\n\t\traw_spin_lock(&src_dl_b->lock);\n\t\t__dl_clear(src_dl_b, p->dl.dl_bw);\n\t\traw_spin_unlock(&src_dl_b->lock);\n\t}\n\n\t\n\tif (!on_dl_rq(&p->dl))\n\t\treturn;\n\n\tweight = cpumask_weight(new_mask);\n\n\t\n\tif ((p->nr_cpus_allowed > 1) == (weight > 1))\n\t\treturn;\n\n\t\n\tif (weight <= 1) {\n\t\tif (!task_current(rq, p))\n\t\t\tdequeue_pushable_dl_task(rq, p);\n\t\tBUG_ON(!rq->dl.dl_nr_migratory);\n\t\trq->dl.dl_nr_migratory--;\n\t} else {\n\t\tif (!task_current(rq, p))\n\t\t\tenqueue_pushable_dl_task(rq, p);\n\t\trq->dl.dl_nr_migratory++;\n\t}\n\n\tupdate_dl_migration(&rq->dl);\n}\n\n\nstatic void rq_online_dl(struct rq *rq)\n{\n\tif (rq->dl.overloaded)\n\t\tdl_set_overload(rq);\n\n\tcpudl_set_freecpu(&rq->rd->cpudl, rq->cpu);\n\tif (rq->dl.dl_nr_running > 0)\n\t\tcpudl_set(&rq->rd->cpudl, rq->cpu, rq->dl.earliest_dl.curr, 1);\n}\n\n\nstatic void rq_offline_dl(struct rq *rq)\n{\n\tif (rq->dl.overloaded)\n\t\tdl_clear_overload(rq);\n\n\tcpudl_set(&rq->rd->cpudl, rq->cpu, 0, 0);\n\tcpudl_clear_freecpu(&rq->rd->cpudl, rq->cpu);\n}\n\nvoid init_sched_dl_class(void)\n{\n\tunsigned int i;\n\n\tfor_each_possible_cpu(i)\n\t\tzalloc_cpumask_var_node(&per_cpu(local_cpu_mask_dl, i),\n\t\t\t\t\tGFP_KERNEL, cpu_to_node(i));\n}\n\n#endif \n\n\nstatic void cancel_dl_timer(struct rq *rq, struct task_struct *p)\n{\n\tstruct hrtimer *dl_timer = &p->dl.dl_timer;\n\n\t\n\tlockdep_assert_held(&p->pi_lock);\n\n\tif (hrtimer_active(dl_timer)) {\n\t\tint ret = hrtimer_try_to_cancel(dl_timer);\n\n\t\tif (unlikely(ret == -1)) {\n\t\t\t\n\t\t\traw_spin_unlock(&rq->lock);\n\t\t\thrtimer_cancel(dl_timer);\n\t\t\traw_spin_lock(&rq->lock);\n\t\t}\n\t}\n}\n\nstatic void switched_from_dl(struct rq *rq, struct task_struct *p)\n{\n\t\n\tcancel_dl_timer(rq, p);\n\t__dl_clear_params(p);\n\n\t\n\tif (!task_on_rq_queued(p) || rq->dl.dl_nr_running)\n\t\treturn;\n\n\tif (pull_dl_task(rq))\n\t\tresched_curr(rq);\n}\n\n\nstatic void switched_to_dl(struct rq *rq, struct task_struct *p)\n{\n\tint check_resched = 1;\n\n\tif (task_on_rq_queued(p) && rq->curr != p) {\n#ifdef CONFIG_SMP\n\t\tif (p->nr_cpus_allowed > 1 && rq->dl.overloaded &&\n\t\t\tpush_dl_task(rq) && rq != task_rq(p))\n\t\t\t\n\t\t\tcheck_resched = 0;\n#endif \n\t\tif (check_resched) {\n\t\t\tif (dl_task(rq->curr))\n\t\t\t\tcheck_preempt_curr_dl(rq, p, 0);\n\t\t\telse\n\t\t\t\tresched_curr(rq);\n\t\t}\n\t}\n}\n\n\nstatic void prio_changed_dl(struct rq *rq, struct task_struct *p,\n\t\t\t    int oldprio)\n{\n\tif (task_on_rq_queued(p) || rq->curr == p) {\n#ifdef CONFIG_SMP\n\t\t\n\t\tif (!rq->dl.overloaded)\n\t\t\tpull_dl_task(rq);\n\n\t\t\n\t\tif (dl_time_before(rq->dl.earliest_dl.curr, p->dl.deadline) &&\n\t\t    rq->curr == p)\n\t\t\tresched_curr(rq);\n#else\n\t\t\n\t\tresched_curr(rq);\n#endif \n\t} else\n\t\tswitched_to_dl(rq, p);\n}\n\nconst struct sched_class dl_sched_class = {\n\t.next\t\t\t= &rt_sched_class,\n\t.enqueue_task\t\t= enqueue_task_dl,\n\t.dequeue_task\t\t= dequeue_task_dl,\n\t.yield_task\t\t= yield_task_dl,\n\n\t.check_preempt_curr\t= check_preempt_curr_dl,\n\n\t.pick_next_task\t\t= pick_next_task_dl,\n\t.put_prev_task\t\t= put_prev_task_dl,\n\n#ifdef CONFIG_SMP\n\t.select_task_rq\t\t= select_task_rq_dl,\n\t.set_cpus_allowed       = set_cpus_allowed_dl,\n\t.rq_online              = rq_online_dl,\n\t.rq_offline             = rq_offline_dl,\n\t.post_schedule\t\t= post_schedule_dl,\n\t.task_woken\t\t= task_woken_dl,\n#endif\n\n\t.set_curr_task\t\t= set_curr_task_dl,\n\t.task_tick\t\t= task_tick_dl,\n\t.task_fork              = task_fork_dl,\n\t.task_dead\t\t= task_dead_dl,\n\n\t.prio_changed           = prio_changed_dl,\n\t.switched_from\t\t= switched_from_dl,\n\t.switched_to\t\t= switched_to_dl,\n\n\t.update_curr\t\t= update_curr_dl,\n};\n\n#ifdef CONFIG_SCHED_DEBUG\nextern void print_dl_rq(struct seq_file *m, int cpu, struct dl_rq *dl_rq);\n\nvoid print_dl_stats(struct seq_file *m, int cpu)\n{\n\tprint_dl_rq(m, cpu, &cpu_rq(cpu)->dl);\n}\n#endif \n\n\n#include <linux/latencytop.h>\n#include <linux/sched.h>\n#include <linux/cpumask.h>\n#include <linux/cpuidle.h>\n#include <linux/slab.h>\n#include <linux/profile.h>\n#include <linux/interrupt.h>\n#include <linux/mempolicy.h>\n#include <linux/migrate.h>\n#include <linux/task_work.h>\n\n#include <trace/events/sched.h>\n\n#include \"", "733": "\");\n\t\telse\n\t\t\tseq_puts(m, \"", "734": "\");\n\t\tftrace_set_regex(ops, func, strlen(func), 0, enable);\n\t}\n}\n\nstatic void __init set_ftrace_early_filters(void)\n{\n\tif (ftrace_filter_buf[0])\n\t\tftrace_set_early_filter(&global_ops, ftrace_filter_buf, 1);\n\tif (ftrace_notrace_buf[0])\n\t\tftrace_set_early_filter(&global_ops, ftrace_notrace_buf, 0);\n#ifdef CONFIG_FUNCTION_GRAPH_TRACER\n\tif (ftrace_graph_buf[0])\n\t\tset_ftrace_early_graph(ftrace_graph_buf, 1);\n\tif (ftrace_graph_notrace_buf[0])\n\t\tset_ftrace_early_graph(ftrace_graph_notrace_buf, 0);\n#endif \n}\n\nint ftrace_regex_release(struct inode *inode, struct file *file)\n{\n\tstruct seq_file *m = (struct seq_file *)file->private_data;\n\tstruct ftrace_ops_hash old_hash_ops;\n\tstruct ftrace_iterator *iter;\n\tstruct ftrace_hash **orig_hash;\n\tstruct ftrace_hash *old_hash;\n\tstruct trace_parser *parser;\n\tint filter_hash;\n\tint ret;\n\n\tif (file->f_mode & FMODE_READ) {\n\t\titer = m->private;\n\t\tseq_release(inode, file);\n\t} else\n\t\titer = file->private_data;\n\n\tparser = &iter->parser;\n\tif (trace_parser_loaded(parser)) {\n\t\tparser->buffer[parser->idx] = 0;\n\t\tftrace_match_records(iter->hash, parser->buffer, parser->idx);\n\t}\n\n\ttrace_parser_put(parser);\n\n\tmutex_lock(&iter->ops->func_hash->regex_lock);\n\n\tif (file->f_mode & FMODE_WRITE) {\n\t\tfilter_hash = !!(iter->flags & FTRACE_ITER_FILTER);\n\n\t\tif (filter_hash)\n\t\t\torig_hash = &iter->ops->func_hash->filter_hash;\n\t\telse\n\t\t\torig_hash = &iter->ops->func_hash->notrace_hash;\n\n\t\tmutex_lock(&ftrace_lock);\n\t\told_hash = *orig_hash;\n\t\told_hash_ops.filter_hash = iter->ops->func_hash->filter_hash;\n\t\told_hash_ops.notrace_hash = iter->ops->func_hash->notrace_hash;\n\t\tret = ftrace_hash_move(iter->ops, filter_hash,\n\t\t\t\t       orig_hash, iter->hash);\n\t\tif (!ret) {\n\t\t\tftrace_ops_update_code(iter->ops, &old_hash_ops);\n\t\t\tfree_ftrace_hash_rcu(old_hash);\n\t\t}\n\t\tmutex_unlock(&ftrace_lock);\n\t}\n\n\tmutex_unlock(&iter->ops->func_hash->regex_lock);\n\tfree_ftrace_hash(iter->hash);\n\tkfree(iter);\n\n\treturn 0;\n}\n\nstatic const struct file_operations ftrace_avail_fops = {\n\t.open = ftrace_avail_open,\n\t.read = seq_read,\n\t.llseek = seq_lseek,\n\t.release = seq_release_private,\n};\n\nstatic const struct file_operations ftrace_enabled_fops = {\n\t.open = ftrace_enabled_open,\n\t.read = seq_read,\n\t.llseek = seq_lseek,\n\t.release = seq_release_private,\n};\n\nstatic const struct file_operations ftrace_filter_fops = {\n\t.open = ftrace_filter_open,\n\t.read = seq_read,\n\t.write = ftrace_filter_write,\n\t.llseek = tracing_lseek,\n\t.release = ftrace_regex_release,\n};\n\nstatic const struct file_operations ftrace_notrace_fops = {\n\t.open = ftrace_notrace_open,\n\t.read = seq_read,\n\t.write = ftrace_notrace_write,\n\t.llseek = tracing_lseek,\n\t.release = ftrace_regex_release,\n};\n\n#ifdef CONFIG_FUNCTION_GRAPH_TRACER\n\nstatic DEFINE_MUTEX(graph_lock);\n\nint ftrace_graph_count;\nint ftrace_graph_notrace_count;\nunsigned long ftrace_graph_funcs[FTRACE_GRAPH_MAX_FUNCS] __read_mostly;\nunsigned long ftrace_graph_notrace_funcs[FTRACE_GRAPH_MAX_FUNCS] __read_mostly;\n\nstruct ftrace_graph_data {\n\tunsigned long *table;\n\tsize_t size;\n\tint *count;\n\tconst struct seq_operations *seq_ops;\n};\n\nstatic void *\n__g_next(struct seq_file *m, loff_t *pos)\n{\n\tstruct ftrace_graph_data *fgd = m->private;\n\n\tif (*pos >= *fgd->count)\n\t\treturn NULL;\n\treturn &fgd->table[*pos];\n}\n\nstatic void *\ng_next(struct seq_file *m, void *v, loff_t *pos)\n{\n\t(*pos)++;\n\treturn __g_next(m, pos);\n}\n\nstatic void *g_start(struct seq_file *m, loff_t *pos)\n{\n\tstruct ftrace_graph_data *fgd = m->private;\n\n\tmutex_lock(&graph_lock);\n\n\t\n\tif (!*fgd->count && !*pos)\n\t\treturn (void *)1;\n\n\treturn __g_next(m, pos);\n}\n\nstatic void g_stop(struct seq_file *m, void *p)\n{\n\tmutex_unlock(&graph_lock);\n}\n\nstatic int g_show(struct seq_file *m, void *v)\n{\n\tunsigned long *ptr = v;\n\n\tif (!ptr)\n\t\treturn 0;\n\n\tif (ptr == (unsigned long *)1) {\n\t\tstruct ftrace_graph_data *fgd = m->private;\n\n\t\tif (fgd->table == ftrace_graph_funcs)\n\t\t\tseq_puts(m, \"", "735": "\");\n\t\tgoto Platform_early_resume;\n\t}\n\terror = platform_suspend_prepare_noirq(state);\n\tif (error)\n\t\tgoto Platform_wake;\n\n\tif (suspend_test(TEST_PLATFORM))\n\t\tgoto Platform_wake;\n\n\t\n\tif (state == PM_SUSPEND_FREEZE) {\n\t\ttrace_suspend_resume(TPS(\"", "736": "\");\n\t\tgoto Platform_finish;\n\t}\n\terror = platform_suspend_prepare_late(state);\n\tif (error)\n\t\tgoto Devices_early_resume;\n\n\terror = dpm_suspend_noirq(PMSG_SUSPEND);\n\tif (error) {\n\t\tprintk(KERN_ERR \"", "737": "\");\n\t\tgoto Recover_platform;\n\t}\n\tsuspend_test_finish(\"", "738": "\");\n\t\tgoto failed;\n\t}\n\n\tpr_info(\"", "739": "\");\n\t\tif (moreprompt == NULL)\n\t\t\tmoreprompt = \"", "740": "\");\n\t\tif (rec->flags & FTRACE_FL_TRAMP_EN) {\n\t\t\tops = ftrace_find_tramp_ops_any(rec);\n\t\t\tif (ops)\n\t\t\t\tseq_printf(m, \"", "741": "\");\n\t\titer.cpu_file = RING_BUFFER_ALL_CPUS;\n\t}\n\n\tprintk(KERN_TRACE \"", "742": "\");\n\t\tkdb_defcmd2(\"", "743": "\");\n\t\tprint_name_offset(m, (unsigned long)entry->expire_func);\n\t\tseq_puts(m, \"", "744": "\");\n\t\tprint_name_offset(m, dev->set_mode);\n\t\tSEQ_printf(m, \"", "745": "\");\n\t\tprint_stack_trace(&entry->trace, 2);\n\t\tprintk(\"", "746": "\");\n\t\tprintk(\"", "747": "\");\n\t\treturn -ENOSYS;\n\t}\n\n\tif (realloc && irq_base >= 0) {\n\t\tvirq = irq_base;\n\t} else {\n\t\tvirq = irq_domain_alloc_descs(irq_base, nr_irqs, 0, node);\n\t\tif (virq < 0) {\n\t\t\tpr_debug(\"", "748": "\");\n\t\treturn 0;\n\t}\n\n\tif (irq_domain_associate(domain, virq, hwirq)) {\n\t\tirq_free_desc(virq);\n\t\treturn 0;\n\t}\n\n\tpr_debug(\"", "749": "\");\n\t\treturn 0;\n\t}\n\n\trec = iter->func;\n\n\tif (!rec)\n\t\treturn 0;\n\n\tseq_printf(m, \"", "750": "\");\n\t\treturn 0;\n\t}\n\n\tseq_printf(m, \"", "751": "\");\n\t\treturn ERR_PTR(-ENOMEM);\n\t}\n\n\treturn NULL;\n}\n\nextern struct trace_enum_map *__start_ftrace_enum_maps[];\nextern struct trace_enum_map *__stop_ftrace_enum_maps[];\n\nstatic void __init trace_enum_init(void)\n{\n\tint len;\n\n\tlen = __stop_ftrace_enum_maps - __start_ftrace_enum_maps;\n\ttrace_insert_enum_map(NULL, __start_ftrace_enum_maps, len);\n}\n\n#ifdef CONFIG_MODULES\nstatic void trace_module_add_enums(struct module *mod)\n{\n\tif (!mod->num_trace_enums)\n\t\treturn;\n\n\t\n\tif (trace_module_has_bad_taint(mod))\n\t\treturn;\n\n\ttrace_insert_enum_map(mod, mod->trace_enums, mod->num_trace_enums);\n}\n\n#ifdef CONFIG_TRACE_ENUM_MAP_FILE\nstatic void trace_module_remove_enums(struct module *mod)\n{\n\tunion trace_enum_map_item *map;\n\tunion trace_enum_map_item **last = &trace_enum_maps;\n\n\tif (!mod->num_trace_enums)\n\t\treturn;\n\n\tmutex_lock(&trace_enum_mutex);\n\n\tmap = trace_enum_maps;\n\n\twhile (map) {\n\t\tif (map->head.mod == mod)\n\t\t\tbreak;\n\t\tmap = trace_enum_jmp_to_tail(map);\n\t\tlast = &map->tail.next;\n\t\tmap = map->tail.next;\n\t}\n\tif (!map)\n\t\tgoto out;\n\n\t*last = trace_enum_jmp_to_tail(map)->tail.next;\n\tkfree(map);\n out:\n\tmutex_unlock(&trace_enum_mutex);\n}\n#else\nstatic inline void trace_module_remove_enums(struct module *mod) { }\n#endif \n\nstatic int trace_module_notify(struct notifier_block *self,\n\t\t\t       unsigned long val, void *data)\n{\n\tstruct module *mod = data;\n\n\tswitch (val) {\n\tcase MODULE_STATE_COMING:\n\t\ttrace_module_add_enums(mod);\n\t\tbreak;\n\tcase MODULE_STATE_GOING:\n\t\ttrace_module_remove_enums(mod);\n\t\tbreak;\n\t}\n\n\treturn 0;\n}\n\nstatic struct notifier_block trace_module_nb = {\n\t.notifier_call = trace_module_notify,\n\t.priority = 0,\n};\n#endif \n\nstatic __init int tracer_init_tracefs(void)\n{\n\tstruct dentry *d_tracer;\n\n\ttrace_access_lock_init();\n\n\td_tracer = tracing_init_dentry();\n\tif (IS_ERR(d_tracer))\n\t\treturn 0;\n\n\tinit_tracer_tracefs(&global_trace, d_tracer);\n\n\ttrace_create_file(\"", "752": "\");\n\t\treturn KDB_BADREG;\n\t}\n\treturn 0;\n}\n\n\nint kdbgetaddrarg(int argc, const char **argv, int *nextarg,\n\t\t  unsigned long *value,  long *offset,\n\t\t  char **name)\n{\n\tunsigned long addr;\n\tunsigned long off = 0;\n\tint positive;\n\tint diag;\n\tint found = 0;\n\tchar *symname;\n\tchar symbol = '\\0';\n\tchar *cp;\n\tkdb_symtab_t symtab;\n\n\t\n\tif (!kdb_check_flags(KDB_ENABLE_MEM_READ | KDB_ENABLE_FLOW_CTRL,\n\t\t\t     kdb_cmd_enabled, false))\n\t\treturn KDB_NOPERM;\n\n\t\n\n\tif (*nextarg > argc)\n\t\treturn KDB_ARGCOUNT;\n\n\tsymname = (char *)argv[*nextarg];\n\n\t\n\tcp = strpbrk(symname, \"", "753": "\");\n\t\treturn NULL;\n\t}\n\n\treturn tr->options;\n}\n\nstatic void\ncreate_trace_option_file(struct trace_array *tr,\n\t\t\t struct trace_option_dentry *topt,\n\t\t\t struct tracer_flags *flags,\n\t\t\t struct tracer_opt *opt)\n{\n\tstruct dentry *t_options;\n\n\tt_options = trace_options_init_dentry(tr);\n\tif (!t_options)\n\t\treturn;\n\n\ttopt->flags = flags;\n\ttopt->opt = opt;\n\ttopt->tr = tr;\n\n\ttopt->entry = trace_create_file(opt->name, 0644, t_options, topt,\n\t\t\t\t    &trace_options_fops);\n\n}\n\nstatic struct trace_option_dentry *\ncreate_trace_option_files(struct trace_array *tr, struct tracer *tracer)\n{\n\tstruct trace_option_dentry *topts;\n\tstruct tracer_flags *flags;\n\tstruct tracer_opt *opts;\n\tint cnt;\n\n\tif (!tracer)\n\t\treturn NULL;\n\n\tflags = tracer->flags;\n\n\tif (!flags || !flags->opts)\n\t\treturn NULL;\n\n\topts = flags->opts;\n\n\tfor (cnt = 0; opts[cnt].name; cnt++)\n\t\t;\n\n\ttopts = kcalloc(cnt + 1, sizeof(*topts), GFP_KERNEL);\n\tif (!topts)\n\t\treturn NULL;\n\n\tfor (cnt = 0; opts[cnt].name; cnt++)\n\t\tcreate_trace_option_file(tr, &topts[cnt], flags,\n\t\t\t\t\t &opts[cnt]);\n\n\treturn topts;\n}\n\nstatic void\ndestroy_trace_option_files(struct trace_option_dentry *topts)\n{\n\tint cnt;\n\n\tif (!topts)\n\t\treturn;\n\n\tfor (cnt = 0; topts[cnt].opt; cnt++)\n\t\ttracefs_remove(topts[cnt].entry);\n\n\tkfree(topts);\n}\n\nstatic struct dentry *\ncreate_trace_option_core_file(struct trace_array *tr,\n\t\t\t      const char *option, long index)\n{\n\tstruct dentry *t_options;\n\n\tt_options = trace_options_init_dentry(tr);\n\tif (!t_options)\n\t\treturn NULL;\n\n\treturn trace_create_file(option, 0644, t_options, (void *)index,\n\t\t\t\t    &trace_options_core_fops);\n}\n\nstatic __init void create_trace_options_dir(struct trace_array *tr)\n{\n\tstruct dentry *t_options;\n\tint i;\n\n\tt_options = trace_options_init_dentry(tr);\n\tif (!t_options)\n\t\treturn;\n\n\tfor (i = 0; trace_options[i]; i++)\n\t\tcreate_trace_option_core_file(tr, trace_options[i], i);\n}\n\nstatic ssize_t\nrb_simple_read(struct file *filp, char __user *ubuf,\n\t       size_t cnt, loff_t *ppos)\n{\n\tstruct trace_array *tr = filp->private_data;\n\tchar buf[64];\n\tint r;\n\n\tr = tracer_tracing_is_on(tr);\n\tr = sprintf(buf, \"", "754": "\");\n\t\treturn boot_override_clocksource(\"", "755": "\");\n\t\treturn buffer;\n\tcase 4: \n\t\tif (cp < lastchar) {\n\t\t\tmemcpy(tmpbuffer, cp+1, lastchar - cp - 1);\n\t\t\tmemcpy(cp, tmpbuffer, lastchar - cp - 1);\n\t\t\t*(--lastchar) = '\\0';\n\t\t\tkdb_printf(\"", "756": "\");\n\t\treturn;\n\t}\n\tSEQ_printf(m, \"", "757": "\");\n\t\treturn;\n\t}\n\n\tif (pid > PID_MAX_DEFAULT) {\n\t\tstrcpy(comm, \"", "758": "\");\n\t\treturn;\n\t}\n\n\tmap = savedcmd->map_pid_to_cmdline[pid];\n\tif (map != NO_CMDLINE_MAP)\n\t\tstrcpy(comm, get_saved_cmdlines(map));\n\telse\n\t\tstrcpy(comm, \"", "759": "\");\n\t\treturn;\n\t}\n\n\tmutex_lock(&trace_enum_mutex);\n\n\tif (!trace_enum_maps)\n\t\ttrace_enum_maps = map_array;\n\telse {\n\t\tptr = trace_enum_maps;\n\t\tfor (;;) {\n\t\t\tptr = trace_enum_jmp_to_tail(ptr);\n\t\t\tif (!ptr->tail.next)\n\t\t\t\tbreak;\n\t\t\tptr = ptr->tail.next;\n\n\t\t}\n\t\tptr->tail.next = map_array;\n\t}\n\tmap_array->head.mod = mod;\n\tmap_array->head.length = len;\n\tmap_array++;\n\n\tfor (map = start; (unsigned long)map < (unsigned long)stop; map++) {\n\t\tmap_array->map = **map;\n\t\tmap_array++;\n\t}\n\tmemset(map_array, 0, sizeof(*map_array));\n\n\tmutex_unlock(&trace_enum_mutex);\n}\n\nstatic void trace_create_enum_file(struct dentry *d_tracer)\n{\n\ttrace_create_file(\"", "760": "\");\n\t\tseq_print_ip_sym(&iter->seq, data->critical_end, sym_flags);\n\t\ttrace_print_seq(m, &iter->seq);\n\t\tseq_puts(m, \"", "761": "\");\n\t\tseq_print_ip_sym(&iter->seq, data->critical_start, sym_flags);\n\t\ttrace_print_seq(m, &iter->seq);\n\t\tseq_puts(m, \"", "762": "\");\n\t\tseq_print_ip_sym(s, *p, flags);\n\t\ttrace_seq_putc(s, '\\n');\n\t}\n\n\treturn trace_handle_return(s);\n}\n\nstatic struct trace_event_functions trace_stack_funcs = {\n\t.trace\t\t= trace_stack_print,\n};\n\nstatic struct trace_event trace_stack_event = {\n\t.type\t\t= TRACE_STACK,\n\t.funcs\t\t= &trace_stack_funcs,\n};\n\n\nstatic enum print_line_t trace_user_stack_print(struct trace_iterator *iter,\n\t\t\t\t\t\tint flags, struct trace_event *event)\n{\n\tstruct userstack_entry *field;\n\tstruct trace_seq *s = &iter->seq;\n\n\ttrace_assign_type(field, iter->ent);\n\n\ttrace_seq_puts(s, \"", "763": "\");\n\t\tstrncpy(buf + 4, str, sizeof(buf) - 5);\n\t} else {\n\t\tstrncpy(buf, str, sizeof(buf) - 1);\n\t}\n\tbuf[sizeof(buf) - 1] = 0;\n\toptions = strchr(str, ',');\n\tif (options)\n\t\t*(options++) = 0;\n#ifdef __sparc__\n\tif (!strcmp(str, \"", "764": "\");\n\t\ttrace_set_options(&global_trace, option);\n\t}\n\n\tregister_snapshot_cmd();\n\n\treturn 0;\n\nout_free_savedcmd:\n\tfree_saved_cmdlines_buffer(savedcmd);\nout_free_temp_buffer:\n\tring_buffer_free(temp_buffer);\nout_free_cpumask:\n\tfree_cpumask_var(global_trace.tracing_cpumask);\nout_free_buffer_mask:\n\tfree_cpumask_var(tracing_buffer_mask);\nout:\n\treturn ret;\n}\n\nvoid __init trace_init(void)\n{\n\tif (tracepoint_printk) {\n\t\ttracepoint_print_iter =\n\t\t\tkmalloc(sizeof(*tracepoint_print_iter), GFP_KERNEL);\n\t\tif (WARN_ON(!tracepoint_print_iter))\n\t\t\ttracepoint_printk = 0;\n\t}\n\ttracer_alloc_buffers();\n\ttrace_event_init();\n}\n\n__init static int clear_boot_tracer(void)\n{\n\t\n\tif (!default_bootup_tracer)\n\t\treturn 0;\n\n\tprintk(KERN_INFO \"", "765": "\");\n\t\t}\n\t\tkdb_input_flush();\n\t}\n\n\t\n\tif (kdb_grepping_flag && !suspend_grep) {\n\t\t*cphold = replaced_byte;\n\t\tstrcpy(kdb_buffer, cphold);\n\t\tlen = strlen(kdb_buffer);\n\t\tnext_avail = kdb_buffer + len;\n\t\tsize_avail = sizeof(kdb_buffer) - len;\n\t}\n\nkdb_print_out:\n\tsuspend_grep = 0; \n\tif (logging)\n\t\tconsole_loglevel = saved_loglevel;\n\tif (KDB_STATE(PRINTF_LOCK) && got_printf_lock) {\n\t\tgot_printf_lock = 0;\n\t\tspin_unlock_irqrestore(&kdb_printf_lock, flags);\n\t\tKDB_STATE_CLEAR(PRINTF_LOCK);\n\t\tatomic_dec(&kdb_event);\n\t} else {\n\t\t__release(kdb_printf_lock);\n\t}\n\tkdb_trap_printk = saved_trap_printk;\n\tpreempt_enable();\n\treturn retlen;\n}\n\nint kdb_printf(const char *fmt, ...)\n{\n\tva_list ap;\n\tint r;\n\n\tva_start(ap, fmt);\n\tr = vkdb_printf(KDB_MSGSRC_INTERNAL, fmt, ap);\n\tva_end(ap);\n\n\treturn r;\n}\nEXPORT_SYMBOL_GPL(kdb_printf);\n\n#include <linux/ftrace_event.h>\n#include <linux/ring_buffer.h>\n#include <linux/trace_clock.h>\n#include <linux/trace_seq.h>\n#include <linux/spinlock.h>\n#include <linux/irq_work.h>\n#include <linux/uaccess.h>\n#include <linux/hardirq.h>\n#include <linux/kthread.h>\t\n#include <linux/kmemcheck.h>\n#include <linux/module.h>\n#include <linux/percpu.h>\n#include <linux/mutex.h>\n#include <linux/delay.h>\n#include <linux/slab.h>\n#include <linux/init.h>\n#include <linux/hash.h>\n#include <linux/list.h>\n#include <linux/cpu.h>\n\n#include <asm/local.h>\n\nstatic void update_pages_handler(struct work_struct *work);\n\n\nint ring_buffer_print_entry_header(struct trace_seq *s)\n{\n\ttrace_seq_puts(s, \"", "766": "\");\n\t\t}\n\t}\n\n\tSEQ_printf(m, \"", "767": "\");\n\t\t}\n\n\t\tif (dev->set_state_oneshot) {\n\t\t\tSEQ_printf(m, \"", "768": "\");\n\t\t}\n\n\t\tif (dev->set_state_periodic) {\n\t\t\tSEQ_printf(m, \"", "769": "\");\n\t\t}\n\n\t\tif (dev->tick_resume) {\n\t\t\tSEQ_printf(m, \"", "770": "\");\n\t\t} else if (buf1[0] == ' ') {\n\t\t\tkdb_printf(\"", "771": "\");\n\t\t} else if (kdb_grepping_flag) {\n\t\t\t\n\t\t\tsuspend_grep = 1; \n\t\t\tkdb_printf(\"", "772": "\");\n\t\n\twait_event(suspend_freeze_wait_head,\n\t\t   suspend_freeze_state == FREEZE_STATE_WAKE);\n\tpr_debug(\"", "773": "\");\n\tBUG();\n}\nEXPORT_SYMBOL(__validate_process_creds);\n\n\nvoid validate_creds_for_do_exit(struct task_struct *tsk)\n{\n\tkdebug(\"", "774": "\");\n\tSEQ_printf(m, \"", "775": "\");\n\tWARN(!perf_wq, \"", "776": "\");\n\t__print_lock_name(middle_class);\n\tprintk(\"", "777": "\");\n\t__print_lock_name(parent);\n\tprintk(\"", "778": "\");\n\t__print_lock_name(safe_class);\n\tprintk(\"", "779": "\");\n\t__print_lock_name(source);\n\tprintk(\"", "780": "\");\n\t__print_lock_name(target);\n\tprintk(\"", "781": "\");\n\t__print_lock_name(unsafe_class);\n\tprintk(\"", "782": "\");\n\tconsole_lock();\n\tconsole_suspended = 1;\n\tup_console_sem();\n}\n\nvoid resume_console(void)\n{\n\tif (!console_suspend_enabled)\n\t\treturn;\n\tdown_console_sem();\n\tconsole_suspended = 0;\n\tconsole_unlock();\n}\n\n\nstatic int console_cpu_notify(struct notifier_block *self,\n\tunsigned long action, void *hcpu)\n{\n\tswitch (action) {\n\tcase CPU_ONLINE:\n\tcase CPU_DEAD:\n\tcase CPU_DOWN_FAILED:\n\tcase CPU_UP_CANCELED:\n\t\tconsole_lock();\n\t\tconsole_unlock();\n\t}\n\treturn NOTIFY_OK;\n}\n\n\nvoid console_lock(void)\n{\n\tmight_sleep();\n\n\tdown_console_sem();\n\tif (console_suspended)\n\t\treturn;\n\tconsole_locked = 1;\n\tconsole_may_schedule = 1;\n}\nEXPORT_SYMBOL(console_lock);\n\n\nint console_trylock(void)\n{\n\tif (down_trylock_console_sem())\n\t\treturn 0;\n\tif (console_suspended) {\n\t\tup_console_sem();\n\t\treturn 0;\n\t}\n\tconsole_locked = 1;\n\tconsole_may_schedule = 0;\n\treturn 1;\n}\nEXPORT_SYMBOL(console_trylock);\n\nint is_console_locked(void)\n{\n\treturn console_locked;\n}\n\nstatic void console_cont_flush(char *text, size_t size)\n{\n\tunsigned long flags;\n\tsize_t len;\n\n\traw_spin_lock_irqsave(&logbuf_lock, flags);\n\n\tif (!cont.len)\n\t\tgoto out;\n\n\t\n\tif (console_seq < log_next_seq && !cont.cons)\n\t\tgoto out;\n\n\tlen = cont_print_text(text, size);\n\traw_spin_unlock(&logbuf_lock);\n\tstop_critical_timings();\n\tcall_console_drivers(cont.level, text, len);\n\tstart_critical_timings();\n\tlocal_irq_restore(flags);\n\treturn;\nout:\n\traw_spin_unlock_irqrestore(&logbuf_lock, flags);\n}\n\n\nvoid console_unlock(void)\n{\n\tstatic char text[LOG_LINE_MAX + PREFIX_MAX];\n\tstatic u64 seen_seq;\n\tunsigned long flags;\n\tbool wake_klogd = false;\n\tbool retry;\n\n\tif (console_suspended) {\n\t\tup_console_sem();\n\t\treturn;\n\t}\n\n\tconsole_may_schedule = 0;\n\n\t\n\tconsole_cont_flush(text, sizeof(text));\nagain:\n\tfor (;;) {\n\t\tstruct printk_log *msg;\n\t\tsize_t len;\n\t\tint level;\n\n\t\traw_spin_lock_irqsave(&logbuf_lock, flags);\n\t\tif (seen_seq != log_next_seq) {\n\t\t\twake_klogd = true;\n\t\t\tseen_seq = log_next_seq;\n\t\t}\n\n\t\tif (console_seq < log_first_seq) {\n\t\t\tlen = sprintf(text, \"", "783": "\");\n\tdump_stack();\n\n\treturn 0;\n}\n\nstatic noinline int print_bfs_bug(int ret)\n{\n\tif (!debug_locks_off_graph_unlock())\n\t\treturn 0;\n\n\t\n\tWARN(1, \"", "784": "\");\n\telse\n\t\tprintk(KERN_TRACE \"", "785": "\");\n\telse\n\t\tseq_printf(m, \"", "786": "\");\n\telse\n\t\tseq_puts(m, \"", "787": "\");\n\tif (!save_trace(&prev_root->trace))\n\t\treturn 0;\n\tprint_shortest_lock_dependencies(backwards_entry, prev_root);\n\n\tprintk(\"", "788": "\");\n\tif (!strcmp(str, \"", "789": "\");\n\tif (!strlen(mod))\n\t\treturn ret;\n\n\tret = ftrace_match_module_records(hash, func, mod);\n\tif (!ret)\n\t\tret = -EINVAL;\n\tif (ret < 0)\n\t\treturn ret;\n\n\treturn 0;\n}\n\nstatic struct ftrace_func_command ftrace_mod_cmd = {\n\t.name\t\t\t= \"", "790": "\");\n\tif (!type)\n\t\treturn NULL;\n\tmnt = vfs_kern_mount(type, 0, \"", "791": "\");\n\tif (cp != NULL) {\n\t\tsymbol = *cp;\n\t\t*cp++ = '\\0';\n\t}\n\n\tif (symname[0] == '$') {\n\t\tdiag = kdbgetulenv(&symname[1], &addr);\n\t\tif (diag)\n\t\t\treturn diag;\n\t} else if (symname[0] == '%') {\n\t\tdiag = kdb_check_regs();\n\t\tif (diag)\n\t\t\treturn diag;\n\t\t\n\t\treturn KDB_NOTIMP;\n\t} else {\n\t\tfound = kdbgetsymval(symname, &symtab);\n\t\tif (found) {\n\t\t\taddr = symtab.sym_start;\n\t\t} else {\n\t\t\tdiag = kdbgetularg(argv[*nextarg], &addr);\n\t\t\tif (diag)\n\t\t\t\treturn diag;\n\t\t}\n\t}\n\n\tif (!found)\n\t\tfound = kdbnearsym(addr, &symtab);\n\n\t(*nextarg)++;\n\n\tif (name)\n\t\t*name = symname;\n\tif (value)\n\t\t*value = addr;\n\tif (offset && name && *name)\n\t\t*offset = addr - symtab.sym_start;\n\n\tif ((*nextarg > argc)\n\t && (symbol == '\\0'))\n\t\treturn 0;\n\n\t\n\n\tif (symbol == '\\0') {\n\t\tif ((argv[*nextarg][0] != '+')\n\t\t && (argv[*nextarg][0] != '-')) {\n\t\t\t\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tpositive = (argv[*nextarg][0] == '+');\n\t\t\t(*nextarg)++;\n\t\t}\n\t} else\n\t\tpositive = (symbol == '+');\n\n\t\n\tif ((*nextarg > argc)\n\t && (symbol == '\\0')) {\n\t\treturn KDB_INVADDRFMT;\n\t}\n\n\tif (!symbol) {\n\t\tcp = (char *)argv[*nextarg];\n\t\t(*nextarg)++;\n\t}\n\n\tdiag = kdbgetularg(cp, &off);\n\tif (diag)\n\t\treturn diag;\n\n\tif (!positive)\n\t\toff = -off;\n\n\tif (offset)\n\t\t*offset += off;\n\n\tif (value)\n\t\t*value += off;\n\n\treturn 0;\n}\n\nstatic void kdb_cmderror(int diag)\n{\n\tint i;\n\n\tif (diag >= 0) {\n\t\tkdb_printf(\"", "792": "\");\n\tif (iter->cpu_file == RING_BUFFER_ALL_CPUS)\n\t\tshow_snapshot_main_help(m);\n\telse\n\t\tshow_snapshot_percpu_help(m);\n}\n#else\n\nstatic inline void print_snapshot_help(struct seq_file *m, struct trace_iterator *iter) { }\n#endif\n\nstatic int s_show(struct seq_file *m, void *v)\n{\n\tstruct trace_iterator *iter = v;\n\tint ret;\n\n\tif (iter->ent == NULL) {\n\t\tif (iter->tr) {\n\t\t\tseq_printf(m, \"", "793": "\");\n\tif (suspend_test(TEST_DEVICES))\n\t\tgoto Recover_platform;\n\n\tdo {\n\t\terror = suspend_enter(state, &wakeup);\n\t} while (!error && !wakeup && platform_suspend_again(state));\n\n Resume_devices:\n\tsuspend_test_start();\n\tdpm_resume_end(PMSG_RESUME);\n\tsuspend_test_finish(\"", "794": "\");\n\tif (unlikely(!tsk->pid))\n\t\tpanic(\"", "795": "\");\n\tmutex_lock(&irq_domain_mutex);\n\tlist_for_each_entry(domain, &irq_domain_list, link) {\n\t\tint count = 0;\n\t\tradix_tree_for_each_slot(slot, &domain->revmap_tree, &iter, 0)\n\t\t\tcount++;\n\t\tseq_printf(m, \"", "796": "\");\n\tpr_warning(\"", "797": "\");\n\tprint_active_timers(m, base, now);\n}\n\nstatic void print_cpu(struct seq_file *m, int cpu, u64 now)\n{\n\tstruct hrtimer_cpu_base *cpu_base = &per_cpu(hrtimer_bases, cpu);\n\tint i;\n\n\tSEQ_printf(m, \"", "798": "\");\n\tprint_circular_lock_scenario(check_src, check_tgt,\n\t\t\t\t     first_parent);\n\n\tlockdep_print_held_locks(curr);\n\n\tprintk(\"", "799": "\");\n\tprint_ip_sym((unsigned long)class->key);\n}\n\n\nstatic void __used\nprint_shortest_lock_dependencies(struct lock_list *leaf,\n\t\t\t\tstruct lock_list *root)\n{\n\tstruct lock_list *entry = leaf;\n\tint depth;\n\n\t\n\tdepth = get_lock_depth(leaf);\n\n\tdo {\n\t\tprint_lock_class_header(entry->class, depth);\n\t\tprintk(\"", "800": "\");\n\tprint_irq_lock_scenario(backwards_entry, forwards_entry,\n\t\t\t\thlock_class(prev), hlock_class(next));\n\n\tlockdep_print_held_locks(curr);\n\n\tprintk(\"", "801": "\");\n\tprint_kernel_ident();\n\tprintk(\"", "802": "\");\n\tprint_lock(check_tgt);\n\tprintk(\"", "803": "\");\n\tprint_lock(prev);\n\tprintk(\"", "804": "\");\n\tprint_lock_name(class);\n\tprintk(\"", "805": "\");\n\tprint_lock_name(hlock_class(next));\n\tprintk(\"", "806": "\");\n\tprint_lock_name(hlock_class(prev));\n\tprintk(\"", "807": "\");\n\tprint_name_offset(m, base->get_time);\n\tSEQ_printf(m,   \"", "808": "\");\n\tprint_name_offset(m, dev->event_handler);\n\tSEQ_printf(m, \"", "809": "\");\n\tprint_name_offset(m, dev->set_next_event);\n\tSEQ_printf(m, \"", "810": "\");\n\tprint_name_offset(m, timer->function);\n\tSEQ_printf(m, \"", "811": "\");\n\tprint_name_offset(m, timer->start_site);\n\tmemcpy(tmp, timer->start_comm, TASK_COMM_LEN);\n\ttmp[TASK_COMM_LEN] = 0;\n\tSEQ_printf(m, \"", "812": "\");\n\tprint_stack_trace(&target->trace, 6);\n\n\treturn 0;\n}\n\nstatic void\nprint_circular_lock_scenario(struct held_lock *src,\n\t\t\t     struct held_lock *tgt,\n\t\t\t     struct lock_list *prt)\n{\n\tstruct lock_class *source = hlock_class(src);\n\tstruct lock_class *target = hlock_class(tgt);\n\tstruct lock_class *parent = prt->class;\n\n\t\n\tif (parent != source) {\n\t\tprintk(\"", "813": "\");\n\tprintk(\"", "814": "\");\n\tprintk(KERN_ERR \"", "815": "\");\n\treturn -ENOMEM;\n}\n\nstatic int buffers_allocated;\n\nvoid trace_printk_init_buffers(void)\n{\n\tif (buffers_allocated)\n\t\treturn;\n\n\tif (alloc_percpu_trace_buffer())\n\t\treturn;\n\n\t\n\n\tpr_warning(\"", "816": "\");\n\treturn boot_override_clocksource(str);\n}\n\n__setup(\"", "817": "\");\n\tseq_print_userip_objs(field, s, flags);\n\n\treturn trace_handle_return(s);\n}\n\nstatic struct trace_event_functions trace_user_stack_funcs = {\n\t.trace\t\t= trace_user_stack_print,\n};\n\nstatic struct trace_event trace_user_stack_event = {\n\t.type\t\t= TRACE_USER_STACK,\n\t.funcs\t\t= &trace_user_stack_funcs,\n};\n\n\nstatic enum print_line_t\ntrace_bputs_print(struct trace_iterator *iter, int flags,\n\t\t   struct trace_event *event)\n{\n\tstruct trace_entry *entry = iter->ent;\n\tstruct trace_seq *s = &iter->seq;\n\tstruct bputs_entry *field;\n\n\ttrace_assign_type(field, entry);\n\n\tseq_print_ip_sym(s, field->ip, flags);\n\ttrace_seq_puts(s, \"", "818": "\");\n\tseq_printf(m, \"", "819": "\");\n\tseq_putc(m, '\\n');\n\n\treturn 0;\n}\n\nstatic int tracing_set_clock(struct trace_array *tr, const char *clockstr)\n{\n\tint i;\n\n\tfor (i = 0; i < ARRAY_SIZE(trace_clocks); i++) {\n\t\tif (strcmp(trace_clocks[i].name, clockstr) == 0)\n\t\t\tbreak;\n\t}\n\tif (i == ARRAY_SIZE(trace_clocks))\n\t\treturn -EINVAL;\n\n\tmutex_lock(&trace_types_lock);\n\n\ttr->clock_id = i;\n\n\tring_buffer_set_clock(tr->trace_buffer.buffer, trace_clocks[i].func);\n\n\t\n\ttracing_reset_online_cpus(&tr->trace_buffer);\n\n#ifdef CONFIG_TRACER_MAX_TRACE\n\tif (tr->flags & TRACE_ARRAY_FL_GLOBAL && tr->max_buffer.buffer)\n\t\tring_buffer_set_clock(tr->max_buffer.buffer, trace_clocks[i].func);\n\ttracing_reset_online_cpus(&tr->max_buffer);\n#endif\n\n\tmutex_unlock(&trace_types_lock);\n\n\treturn 0;\n}\n\nstatic ssize_t tracing_clock_write(struct file *filp, const char __user *ubuf,\n\t\t\t\t   size_t cnt, loff_t *fpos)\n{\n\tstruct seq_file *m = filp->private_data;\n\tstruct trace_array *tr = m->private;\n\tchar buf[64];\n\tconst char *clockstr;\n\tint ret;\n\n\tif (cnt >= sizeof(buf))\n\t\treturn -EINVAL;\n\n\tif (copy_from_user(&buf, ubuf, cnt))\n\t\treturn -EFAULT;\n\n\tbuf[cnt] = 0;\n\n\tclockstr = strstrip(buf);\n\n\tret = tracing_set_clock(tr, clockstr);\n\tif (ret)\n\t\treturn ret;\n\n\t*fpos += cnt;\n\n\treturn cnt;\n}\n\nstatic int tracing_clock_open(struct inode *inode, struct file *file)\n{\n\tstruct trace_array *tr = inode->i_private;\n\tint ret;\n\n\tif (tracing_disabled)\n\t\treturn -ENODEV;\n\n\tif (trace_array_get(tr))\n\t\treturn -ENODEV;\n\n\tret = single_open(file, tracing_clock_show, inode->i_private);\n\tif (ret < 0)\n\t\ttrace_array_put(tr);\n\n\treturn ret;\n}\n\nstruct ftrace_buffer_info {\n\tstruct trace_iterator\titer;\n\tvoid\t\t\t*spare;\n\tunsigned int\t\tread;\n};\n\n#ifdef CONFIG_TRACER_SNAPSHOT\nstatic int tracing_snapshot_open(struct inode *inode, struct file *file)\n{\n\tstruct trace_array *tr = inode->i_private;\n\tstruct trace_iterator *iter;\n\tstruct seq_file *m;\n\tint ret = 0;\n\n\tif (trace_array_get(tr) < 0)\n\t\treturn -ENODEV;\n\n\tif (file->f_mode & FMODE_READ) {\n\t\titer = __tracing_open(inode, file, true);\n\t\tif (IS_ERR(iter))\n\t\t\tret = PTR_ERR(iter);\n\t} else {\n\t\t\n\t\tret = -ENOMEM;\n\t\tm = kzalloc(sizeof(*m), GFP_KERNEL);\n\t\tif (!m)\n\t\t\tgoto out;\n\t\titer = kzalloc(sizeof(*iter), GFP_KERNEL);\n\t\tif (!iter) {\n\t\t\tkfree(m);\n\t\t\tgoto out;\n\t\t}\n\t\tret = 0;\n\n\t\titer->tr = tr;\n\t\titer->trace_buffer = &tr->max_buffer;\n\t\titer->cpu_file = tracing_get_cpu(inode);\n\t\tm->private = iter;\n\t\tfile->private_data = m;\n\t}\nout:\n\tif (ret < 0)\n\t\ttrace_array_put(tr);\n\n\treturn ret;\n}\n\nstatic ssize_t\ntracing_snapshot_write(struct file *filp, const char __user *ubuf, size_t cnt,\n\t\t       loff_t *ppos)\n{\n\tstruct seq_file *m = filp->private_data;\n\tstruct trace_iterator *iter = m->private;\n\tstruct trace_array *tr = iter->tr;\n\tunsigned long val;\n\tint ret;\n\n\tret = tracing_update_buffers();\n\tif (ret < 0)\n\t\treturn ret;\n\n\tret = kstrtoul_from_user(ubuf, cnt, 10, &val);\n\tif (ret)\n\t\treturn ret;\n\n\tmutex_lock(&trace_types_lock);\n\n\tif (tr->current_trace->use_max_tr) {\n\t\tret = -EBUSY;\n\t\tgoto out;\n\t}\n\n\tswitch (val) {\n\tcase 0:\n\t\tif (iter->cpu_file != RING_BUFFER_ALL_CPUS) {\n\t\t\tret = -EINVAL;\n\t\t\tbreak;\n\t\t}\n\t\tif (tr->allocated_snapshot)\n\t\t\tfree_snapshot(tr);\n\t\tbreak;\n\tcase 1:\n\n#ifndef CONFIG_RING_BUFFER_ALLOW_SWAP\n\t\tif (iter->cpu_file != RING_BUFFER_ALL_CPUS) {\n\t\t\tret = -EINVAL;\n\t\t\tbreak;\n\t\t}\n#endif\n\t\tif (!tr->allocated_snapshot) {\n\t\t\tret = alloc_snapshot(tr);\n\t\t\tif (ret < 0)\n\t\t\t\tbreak;\n\t\t}\n\t\tlocal_irq_disable();\n\t\t\n\t\tif (iter->cpu_file == RING_BUFFER_ALL_CPUS)\n\t\t\tupdate_max_tr(tr, current, smp_processor_id());\n\t\telse\n\t\t\tupdate_max_tr_single(tr, current, iter->cpu_file);\n\t\tlocal_irq_enable();\n\t\tbreak;\n\tdefault:\n\t\tif (tr->allocated_snapshot) {\n\t\t\tif (iter->cpu_file == RING_BUFFER_ALL_CPUS)\n\t\t\t\ttracing_reset_online_cpus(&tr->max_buffer);\n\t\t\telse\n\t\t\t\ttracing_reset(&tr->max_buffer, iter->cpu_file);\n\t\t}\n\t\tbreak;\n\t}\n\n\tif (ret >= 0) {\n\t\t*ppos += cnt;\n\t\tret = cnt;\n\t}\nout:\n\tmutex_unlock(&trace_types_lock);\n\treturn ret;\n}\n\nstatic int tracing_snapshot_release(struct inode *inode, struct file *file)\n{\n\tstruct seq_file *m = file->private_data;\n\tint ret;\n\n\tret = tracing_release(inode, file);\n\n\tif (file->f_mode & FMODE_READ)\n\t\treturn ret;\n\n\t\n\tif (m)\n\t\tkfree(m->private);\n\tkfree(m);\n\n\treturn 0;\n}\n\nstatic int tracing_buffers_open(struct inode *inode, struct file *filp);\nstatic ssize_t tracing_buffers_read(struct file *filp, char __user *ubuf,\n\t\t\t\t    size_t count, loff_t *ppos);\nstatic int tracing_buffers_release(struct inode *inode, struct file *file);\nstatic ssize_t tracing_buffers_splice_read(struct file *file, loff_t *ppos,\n\t\t   struct pipe_inode_info *pipe, size_t len, unsigned int flags);\n\nstatic int snapshot_raw_open(struct inode *inode, struct file *filp)\n{\n\tstruct ftrace_buffer_info *info;\n\tint ret;\n\n\tret = tracing_buffers_open(inode, filp);\n\tif (ret < 0)\n\t\treturn ret;\n\n\tinfo = filp->private_data;\n\n\tif (info->iter.trace->use_max_tr) {\n\t\ttracing_buffers_release(inode, filp);\n\t\treturn -EBUSY;\n\t}\n\n\tinfo->iter.snapshot = true;\n\tinfo->iter.trace_buffer = &info->iter.tr->max_buffer;\n\n\treturn ret;\n}\n\n#endif \n\n\nstatic const struct file_operations tracing_thresh_fops = {\n\t.open\t\t= tracing_open_generic,\n\t.read\t\t= tracing_thresh_read,\n\t.write\t\t= tracing_thresh_write,\n\t.llseek\t\t= generic_file_llseek,\n};\n\nstatic const struct file_operations tracing_max_lat_fops = {\n\t.open\t\t= tracing_open_generic,\n\t.read\t\t= tracing_max_lat_read,\n\t.write\t\t= tracing_max_lat_write,\n\t.llseek\t\t= generic_file_llseek,\n};\n\nstatic const struct file_operations set_tracer_fops = {\n\t.open\t\t= tracing_open_generic,\n\t.read\t\t= tracing_set_trace_read,\n\t.write\t\t= tracing_set_trace_write,\n\t.llseek\t\t= generic_file_llseek,\n};\n\nstatic const struct file_operations tracing_pipe_fops = {\n\t.open\t\t= tracing_open_pipe,\n\t.poll\t\t= tracing_poll_pipe,\n\t.read\t\t= tracing_read_pipe,\n\t.splice_read\t= tracing_splice_read_pipe,\n\t.release\t= tracing_release_pipe,\n\t.llseek\t\t= no_llseek,\n};\n\nstatic const struct file_operations tracing_entries_fops = {\n\t.open\t\t= tracing_open_generic_tr,\n\t.read\t\t= tracing_entries_read,\n\t.write\t\t= tracing_entries_write,\n\t.llseek\t\t= generic_file_llseek,\n\t.release\t= tracing_release_generic_tr,\n};\n\nstatic const struct file_operations tracing_total_entries_fops = {\n\t.open\t\t= tracing_open_generic_tr,\n\t.read\t\t= tracing_total_entries_read,\n\t.llseek\t\t= generic_file_llseek,\n\t.release\t= tracing_release_generic_tr,\n};\n\nstatic const struct file_operations tracing_free_buffer_fops = {\n\t.open\t\t= tracing_open_generic_tr,\n\t.write\t\t= tracing_free_buffer_write,\n\t.release\t= tracing_free_buffer_release,\n};\n\nstatic const struct file_operations tracing_mark_fops = {\n\t.open\t\t= tracing_open_generic_tr,\n\t.write\t\t= tracing_mark_write,\n\t.llseek\t\t= generic_file_llseek,\n\t.release\t= tracing_release_generic_tr,\n};\n\nstatic const struct file_operations trace_clock_fops = {\n\t.open\t\t= tracing_clock_open,\n\t.read\t\t= seq_read,\n\t.llseek\t\t= seq_lseek,\n\t.release\t= tracing_single_release_tr,\n\t.write\t\t= tracing_clock_write,\n};\n\n#ifdef CONFIG_TRACER_SNAPSHOT\nstatic const struct file_operations snapshot_fops = {\n\t.open\t\t= tracing_snapshot_open,\n\t.read\t\t= seq_read,\n\t.write\t\t= tracing_snapshot_write,\n\t.llseek\t\t= tracing_lseek,\n\t.release\t= tracing_snapshot_release,\n};\n\nstatic const struct file_operations snapshot_raw_fops = {\n\t.open\t\t= snapshot_raw_open,\n\t.read\t\t= tracing_buffers_read,\n\t.release\t= tracing_buffers_release,\n\t.splice_read\t= tracing_buffers_splice_read,\n\t.llseek\t\t= no_llseek,\n};\n\n#endif \n\nstatic int tracing_buffers_open(struct inode *inode, struct file *filp)\n{\n\tstruct trace_array *tr = inode->i_private;\n\tstruct ftrace_buffer_info *info;\n\tint ret;\n\n\tif (tracing_disabled)\n\t\treturn -ENODEV;\n\n\tif (trace_array_get(tr) < 0)\n\t\treturn -ENODEV;\n\n\tinfo = kzalloc(sizeof(*info), GFP_KERNEL);\n\tif (!info) {\n\t\ttrace_array_put(tr);\n\t\treturn -ENOMEM;\n\t}\n\n\tmutex_lock(&trace_types_lock);\n\n\tinfo->iter.tr\t\t= tr;\n\tinfo->iter.cpu_file\t= tracing_get_cpu(inode);\n\tinfo->iter.trace\t= tr->current_trace;\n\tinfo->iter.trace_buffer = &tr->trace_buffer;\n\tinfo->spare\t\t= NULL;\n\t\n\tinfo->read\t\t= (unsigned int)-1;\n\n\tfilp->private_data = info;\n\n\ttr->current_trace->ref++;\n\n\tmutex_unlock(&trace_types_lock);\n\n\tret = nonseekable_open(inode, filp);\n\tif (ret < 0)\n\t\ttrace_array_put(tr);\n\n\treturn ret;\n}\n\nstatic unsigned int\ntracing_buffers_poll(struct file *filp, poll_table *poll_table)\n{\n\tstruct ftrace_buffer_info *info = filp->private_data;\n\tstruct trace_iterator *iter = &info->iter;\n\n\treturn trace_poll(iter, filp, poll_table);\n}\n\nstatic ssize_t\ntracing_buffers_read(struct file *filp, char __user *ubuf,\n\t\t     size_t count, loff_t *ppos)\n{\n\tstruct ftrace_buffer_info *info = filp->private_data;\n\tstruct trace_iterator *iter = &info->iter;\n\tssize_t ret;\n\tssize_t size;\n\n\tif (!count)\n\t\treturn 0;\n\n#ifdef CONFIG_TRACER_MAX_TRACE\n\tif (iter->snapshot && iter->tr->current_trace->use_max_tr)\n\t\treturn -EBUSY;\n#endif\n\n\tif (!info->spare)\n\t\tinfo->spare = ring_buffer_alloc_read_page(iter->trace_buffer->buffer,\n\t\t\t\t\t\t\t  iter->cpu_file);\n\tif (!info->spare)\n\t\treturn -ENOMEM;\n\n\t\n\tif (info->read < PAGE_SIZE)\n\t\tgoto read;\n\n again:\n\ttrace_access_lock(iter->cpu_file);\n\tret = ring_buffer_read_page(iter->trace_buffer->buffer,\n\t\t\t\t    &info->spare,\n\t\t\t\t    count,\n\t\t\t\t    iter->cpu_file, 0);\n\ttrace_access_unlock(iter->cpu_file);\n\n\tif (ret < 0) {\n\t\tif (trace_empty(iter)) {\n\t\t\tif ((filp->f_flags & O_NONBLOCK))\n\t\t\t\treturn -EAGAIN;\n\n\t\t\tret = wait_on_pipe(iter, false);\n\t\t\tif (ret)\n\t\t\t\treturn ret;\n\n\t\t\tgoto again;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tinfo->read = 0;\n read:\n\tsize = PAGE_SIZE - info->read;\n\tif (size > count)\n\t\tsize = count;\n\n\tret = copy_to_user(ubuf, info->spare + info->read, size);\n\tif (ret == size)\n\t\treturn -EFAULT;\n\n\tsize -= ret;\n\n\t*ppos += size;\n\tinfo->read += size;\n\n\treturn size;\n}\n\nstatic int tracing_buffers_release(struct inode *inode, struct file *file)\n{\n\tstruct ftrace_buffer_info *info = file->private_data;\n\tstruct trace_iterator *iter = &info->iter;\n\n\tmutex_lock(&trace_types_lock);\n\n\titer->tr->current_trace->ref--;\n\n\t__trace_array_put(iter->tr);\n\n\tif (info->spare)\n\t\tring_buffer_free_read_page(iter->trace_buffer->buffer, info->spare);\n\tkfree(info);\n\n\tmutex_unlock(&trace_types_lock);\n\n\treturn 0;\n}\n\nstruct buffer_ref {\n\tstruct ring_buffer\t*buffer;\n\tvoid\t\t\t*page;\n\tint\t\t\tref;\n};\n\nstatic void buffer_pipe_buf_release(struct pipe_inode_info *pipe,\n\t\t\t\t    struct pipe_buffer *buf)\n{\n\tstruct buffer_ref *ref = (struct buffer_ref *)buf->private;\n\n\tif (--ref->ref)\n\t\treturn;\n\n\tring_buffer_free_read_page(ref->buffer, ref->page);\n\tkfree(ref);\n\tbuf->private = 0;\n}\n\nstatic void buffer_pipe_buf_get(struct pipe_inode_info *pipe,\n\t\t\t\tstruct pipe_buffer *buf)\n{\n\tstruct buffer_ref *ref = (struct buffer_ref *)buf->private;\n\n\tref->ref++;\n}\n\n\nstatic const struct pipe_buf_operations buffer_pipe_buf_ops = {\n\t.can_merge\t\t= 0,\n\t.confirm\t\t= generic_pipe_buf_confirm,\n\t.release\t\t= buffer_pipe_buf_release,\n\t.steal\t\t\t= generic_pipe_buf_steal,\n\t.get\t\t\t= buffer_pipe_buf_get,\n};\n\n\nstatic void buffer_spd_release(struct splice_pipe_desc *spd, unsigned int i)\n{\n\tstruct buffer_ref *ref =\n\t\t(struct buffer_ref *)spd->partial[i].private;\n\n\tif (--ref->ref)\n\t\treturn;\n\n\tring_buffer_free_read_page(ref->buffer, ref->page);\n\tkfree(ref);\n\tspd->partial[i].private = 0;\n}\n\nstatic ssize_t\ntracing_buffers_splice_read(struct file *file, loff_t *ppos,\n\t\t\t    struct pipe_inode_info *pipe, size_t len,\n\t\t\t    unsigned int flags)\n{\n\tstruct ftrace_buffer_info *info = file->private_data;\n\tstruct trace_iterator *iter = &info->iter;\n\tstruct partial_page partial_def[PIPE_DEF_BUFFERS];\n\tstruct page *pages_def[PIPE_DEF_BUFFERS];\n\tstruct splice_pipe_desc spd = {\n\t\t.pages\t\t= pages_def,\n\t\t.partial\t= partial_def,\n\t\t.nr_pages_max\t= PIPE_DEF_BUFFERS,\n\t\t.flags\t\t= flags,\n\t\t.ops\t\t= &buffer_pipe_buf_ops,\n\t\t.spd_release\t= buffer_spd_release,\n\t};\n\tstruct buffer_ref *ref;\n\tint entries, size, i;\n\tssize_t ret = 0;\n\n#ifdef CONFIG_TRACER_MAX_TRACE\n\tif (iter->snapshot && iter->tr->current_trace->use_max_tr)\n\t\treturn -EBUSY;\n#endif\n\n\tif (splice_grow_spd(pipe, &spd))\n\t\treturn -ENOMEM;\n\n\tif (*ppos & (PAGE_SIZE - 1))\n\t\treturn -EINVAL;\n\n\tif (len & (PAGE_SIZE - 1)) {\n\t\tif (len < PAGE_SIZE)\n\t\t\treturn -EINVAL;\n\t\tlen &= PAGE_MASK;\n\t}\n\n again:\n\ttrace_access_lock(iter->cpu_file);\n\tentries = ring_buffer_entries_cpu(iter->trace_buffer->buffer, iter->cpu_file);\n\n\tfor (i = 0; i < spd.nr_pages_max && len && entries; i++, len -= PAGE_SIZE) {\n\t\tstruct page *page;\n\t\tint r;\n\n\t\tref = kzalloc(sizeof(*ref), GFP_KERNEL);\n\t\tif (!ref) {\n\t\t\tret = -ENOMEM;\n\t\t\tbreak;\n\t\t}\n\n\t\tref->ref = 1;\n\t\tref->buffer = iter->trace_buffer->buffer;\n\t\tref->page = ring_buffer_alloc_read_page(ref->buffer, iter->cpu_file);\n\t\tif (!ref->page) {\n\t\t\tret = -ENOMEM;\n\t\t\tkfree(ref);\n\t\t\tbreak;\n\t\t}\n\n\t\tr = ring_buffer_read_page(ref->buffer, &ref->page,\n\t\t\t\t\t  len, iter->cpu_file, 1);\n\t\tif (r < 0) {\n\t\t\tring_buffer_free_read_page(ref->buffer, ref->page);\n\t\t\tkfree(ref);\n\t\t\tbreak;\n\t\t}\n\n\t\t\n\t\tsize = ring_buffer_page_len(ref->page);\n\t\tif (size < PAGE_SIZE)\n\t\t\tmemset(ref->page + size, 0, PAGE_SIZE - size);\n\n\t\tpage = virt_to_page(ref->page);\n\n\t\tspd.pages[i] = page;\n\t\tspd.partial[i].len = PAGE_SIZE;\n\t\tspd.partial[i].offset = 0;\n\t\tspd.partial[i].private = (unsigned long)ref;\n\t\tspd.nr_pages++;\n\t\t*ppos += PAGE_SIZE;\n\n\t\tentries = ring_buffer_entries_cpu(iter->trace_buffer->buffer, iter->cpu_file);\n\t}\n\n\ttrace_access_unlock(iter->cpu_file);\n\tspd.nr_pages = i;\n\n\t\n\tif (!spd.nr_pages) {\n\t\tif (ret)\n\t\t\treturn ret;\n\n\t\tif ((file->f_flags & O_NONBLOCK) || (flags & SPLICE_F_NONBLOCK))\n\t\t\treturn -EAGAIN;\n\n\t\tret = wait_on_pipe(iter, true);\n\t\tif (ret)\n\t\t\treturn ret;\n\n\t\tgoto again;\n\t}\n\n\tret = splice_to_pipe(pipe, &spd);\n\tsplice_shrink_spd(&spd);\n\n\treturn ret;\n}\n\nstatic const struct file_operations tracing_buffers_fops = {\n\t.open\t\t= tracing_buffers_open,\n\t.read\t\t= tracing_buffers_read,\n\t.poll\t\t= tracing_buffers_poll,\n\t.release\t= tracing_buffers_release,\n\t.splice_read\t= tracing_buffers_splice_read,\n\t.llseek\t\t= no_llseek,\n};\n\nstatic ssize_t\ntracing_stats_read(struct file *filp, char __user *ubuf,\n\t\t   size_t count, loff_t *ppos)\n{\n\tstruct inode *inode = file_inode(filp);\n\tstruct trace_array *tr = inode->i_private;\n\tstruct trace_buffer *trace_buf = &tr->trace_buffer;\n\tint cpu = tracing_get_cpu(inode);\n\tstruct trace_seq *s;\n\tunsigned long cnt;\n\tunsigned long long t;\n\tunsigned long usec_rem;\n\n\ts = kmalloc(sizeof(*s), GFP_KERNEL);\n\tif (!s)\n\t\treturn -ENOMEM;\n\n\ttrace_seq_init(s);\n\n\tcnt = ring_buffer_entries_cpu(trace_buf->buffer, cpu);\n\ttrace_seq_printf(s, \"", "820": "\");\n\tsuspend_finish();\n Unlock:\n\tmutex_unlock(&pm_mutex);\n\treturn error;\n}\n\n\nint pm_suspend(suspend_state_t state)\n{\n\tint error;\n\n\tif (state <= PM_SUSPEND_ON || state >= PM_SUSPEND_MAX)\n\t\treturn -EINVAL;\n\n\terror = enter_state(state);\n\tif (error) {\n\t\tsuspend_stats.fail++;\n\t\tdpm_save_failed_errno(error);\n\t} else {\n\t\tsuspend_stats.success++;\n\t}\n\treturn error;\n}\nEXPORT_SYMBOL(pm_suspend);\n\n\n\n\n#include <linux/time.h>\n#include <linux/module.h>\n\n\nstatic int __isleap(long year)\n{\n\treturn (year) % 4 == 0 && ((year) % 100 != 0 || (year) % 400 == 0);\n}\n\n\nstatic long math_div(long a, long b)\n{\n\treturn a / b - (a % b < 0);\n}\n\n\nstatic long leaps_between(long y1, long y2)\n{\n\tlong leaps1 = math_div(y1 - 1, 4) - math_div(y1 - 1, 100)\n\t\t+ math_div(y1 - 1, 400);\n\tlong leaps2 = math_div(y2 - 1, 4) - math_div(y2 - 1, 100)\n\t\t+ math_div(y2 - 1, 400);\n\treturn leaps2 - leaps1;\n}\n\n\nstatic const unsigned short __mon_yday[2][13] = {\n\t\n\t{0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365},\n\t\n\t{0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366}\n};\n\n#define SECS_PER_HOUR\t(60 * 60)\n#define SECS_PER_DAY\t(SECS_PER_HOUR * 24)\n\n\nvoid time_to_tm(time_t totalsecs, int offset, struct tm *result)\n{\n\tlong days, rem, y;\n\tconst unsigned short *ip;\n\n\tdays = totalsecs / SECS_PER_DAY;\n\trem = totalsecs % SECS_PER_DAY;\n\trem += offset;\n\twhile (rem < 0) {\n\t\trem += SECS_PER_DAY;\n\t\t--days;\n\t}\n\twhile (rem >= SECS_PER_DAY) {\n\t\trem -= SECS_PER_DAY;\n\t\t++days;\n\t}\n\n\tresult->tm_hour = rem / SECS_PER_HOUR;\n\trem %= SECS_PER_HOUR;\n\tresult->tm_min = rem / 60;\n\tresult->tm_sec = rem % 60;\n\n\t\n\tresult->tm_wday = (4 + days) % 7;\n\tif (result->tm_wday < 0)\n\t\tresult->tm_wday += 7;\n\n\ty = 1970;\n\n\twhile (days < 0 || days >= (__isleap(y) ? 366 : 365)) {\n\t\t\n\t\tlong yg = y + math_div(days, 365);\n\n\t\t\n\t\tdays -= (yg - y) * 365 + leaps_between(y, yg);\n\t\ty = yg;\n\t}\n\n\tresult->tm_year = y - 1900;\n\n\tresult->tm_yday = days;\n\n\tip = __mon_yday[__isleap(y)];\n\tfor (y = 11; days < ip[y]; y--)\n\t\tcontinue;\n\tdays -= ip[y];\n\n\tresult->tm_mon = y;\n\tresult->tm_mday = days + 1;\n}\nEXPORT_SYMBOL(time_to_tm);\n#ifndef _LINUX_CPUPRI_H\n#define _LINUX_CPUPRI_H\n\n#include <linux/sched.h>\n\n#define CPUPRI_NR_PRIORITIES\t(MAX_RT_PRIO + 2)\n\n#define CPUPRI_INVALID -1\n#define CPUPRI_IDLE     0\n#define CPUPRI_NORMAL   1\n\n\nstruct cpupri_vec {\n\tatomic_t\tcount;\n\tcpumask_var_t\tmask;\n};\n\nstruct cpupri {\n\tstruct cpupri_vec pri_to_cpu[CPUPRI_NR_PRIORITIES];\n\tint *cpu_to_pri;\n};\n\n#ifdef CONFIG_SMP\nint  cpupri_find(struct cpupri *cp,\n\t\t struct task_struct *p, struct cpumask *lowest_mask);\nvoid cpupri_set(struct cpupri *cp, int cpu, int pri);\nint cpupri_init(struct cpupri *cp);\nvoid cpupri_cleanup(struct cpupri *cp);\n#endif\n\n#endif \n#include \"", "821": "\");\n\tsys_sync();\n\tprintk(\"", "822": "\");\n\ttrace_seq_bprintf(s, field->fmt, field->buf);\n\n\treturn trace_handle_return(s);\n}\n\n\nstatic enum print_line_t\ntrace_bprint_raw(struct trace_iterator *iter, int flags,\n\t\t struct trace_event *event)\n{\n\tstruct bprint_entry *field;\n\tstruct trace_seq *s = &iter->seq;\n\n\ttrace_assign_type(field, iter->ent);\n\n\ttrace_seq_printf(s, \"", "823": "\");\n\ttrace_seq_putc(s, '\\n');\n\ttrace_seq_printf(s, \"", "824": "\");\n\ttrace_seq_puts(s, \"", "825": "\");\n\ttrace_seq_puts(s, field->str);\n\n\treturn trace_handle_return(s);\n}\n\n\nstatic enum print_line_t\ntrace_bputs_raw(struct trace_iterator *iter, int flags,\n\t\tstruct trace_event *event)\n{\n\tstruct bputs_entry *field;\n\tstruct trace_seq *s = &iter->seq;\n\n\ttrace_assign_type(field, iter->ent);\n\n\ttrace_seq_printf(s, \"", "826": "\");\n\ttrace_suspend_resume(TPS(\"", "827": "\");\n\t}\n\tif (argc == 0) {\n\t\tint i;\n\t\tfor (s = defcmd_set; s < defcmd_set + defcmd_set_count; ++s) {\n\t\t\tkdb_printf(\"", "828": "\");\n\t}\n\tmutex_unlock(&irq_domain_mutex);\n\n\tseq_printf(m, \"", "829": "\");\n\t}\n\tprintk(\"", "830": "\");\n\t}\n\n\t\n\n\twhile (!trace_empty(&iter)) {\n\n\t\tif (!cnt)\n\t\t\tprintk(KERN_TRACE \"", "831": "\");\n\t}\n\n\tprintk(\"", "832": "\");\n\t}\n\n\tseq_puts(m, \"", "833": "\");\n\t} else\n\t\tr = sprintf(buf, \"", "834": "\");\n\t} else {\n\t\tif (dev->set_state_shutdown) {\n\t\t\tSEQ_printf(m, \"", "835": "\");\n\n\t\t\tdata = irq_desc_get_chip_data(desc);\n\t\t\tseq_printf(m, data ? \"", "836": "\");\n\n\t\tcnt++;\n\n\t\t\n\t\tmemset(&iter.seq, 0,\n\t\t       sizeof(struct trace_iterator) -\n\t\t       offsetof(struct trace_iterator, seq));\n\t\titer.iter_flags |= TRACE_FILE_LAT_FMT;\n\t\titer.pos = -1;\n\n\t\tif (trace_find_next_entry_inc(&iter) != NULL) {\n\t\t\tint ret;\n\n\t\t\tret = print_trace_line(&iter);\n\t\t\tif (ret != TRACE_TYPE_NO_CONSUME)\n\t\t\t\ttrace_consume(&iter);\n\t\t}\n\t\ttouch_nmi_watchdog();\n\n\t\ttrace_printk_seq(&iter.seq);\n\t}\n\n\tif (!cnt)\n\t\tprintk(KERN_TRACE \"", "837": "\");\n\n\t\tevents += entry->count;\n\t}\n\n\tms += period.tv_sec * 1000;\n\tif (!ms)\n\t\tms = 1;\n\n\tif (events && period.tv_sec)\n\t\tseq_printf(m, \"", "838": "\");\n\n\t\tif (depth == 0 && (entry != root)) {\n\t\t\tprintk(\"", "839": "\");\n\n\t\t}\n\t\tadd_trampoline_func(m, ops, rec);\n\t}\t\n\n\tseq_putc(m, '\\n');\n\n\treturn 0;\n}\n\nstatic const struct seq_operations show_ftrace_seq_ops = {\n\t.start = t_start,\n\t.next = t_next,\n\t.stop = t_stop,\n\t.show = t_show,\n};\n\nstatic int\nftrace_avail_open(struct inode *inode, struct file *file)\n{\n\tstruct ftrace_iterator *iter;\n\n\tif (unlikely(ftrace_disabled))\n\t\treturn -ENODEV;\n\n\titer = __seq_open_private(file, &show_ftrace_seq_ops, sizeof(*iter));\n\tif (iter) {\n\t\titer->pg = ftrace_pages_start;\n\t\titer->ops = &global_ops;\n\t}\n\n\treturn iter ? 0 : -ENOMEM;\n}\n\nstatic int\nftrace_enabled_open(struct inode *inode, struct file *file)\n{\n\tstruct ftrace_iterator *iter;\n\n\titer = __seq_open_private(file, &show_ftrace_seq_ops, sizeof(*iter));\n\tif (iter) {\n\t\titer->pg = ftrace_pages_start;\n\t\titer->flags = FTRACE_ITER_ENABLED;\n\t\titer->ops = &global_ops;\n\t}\n\n\treturn iter ? 0 : -ENOMEM;\n}\n\n\nint\nftrace_regex_open(struct ftrace_ops *ops, int flag,\n\t\t  struct inode *inode, struct file *file)\n{\n\tstruct ftrace_iterator *iter;\n\tstruct ftrace_hash *hash;\n\tint ret = 0;\n\n\tftrace_ops_init(ops);\n\n\tif (unlikely(ftrace_disabled))\n\t\treturn -ENODEV;\n\n\titer = kzalloc(sizeof(*iter), GFP_KERNEL);\n\tif (!iter)\n\t\treturn -ENOMEM;\n\n\tif (trace_parser_get_init(&iter->parser, FTRACE_BUFF_MAX)) {\n\t\tkfree(iter);\n\t\treturn -ENOMEM;\n\t}\n\n\titer->ops = ops;\n\titer->flags = flag;\n\n\tmutex_lock(&ops->func_hash->regex_lock);\n\n\tif (flag & FTRACE_ITER_NOTRACE)\n\t\thash = ops->func_hash->notrace_hash;\n\telse\n\t\thash = ops->func_hash->filter_hash;\n\n\tif (file->f_mode & FMODE_WRITE) {\n\t\tconst int size_bits = FTRACE_HASH_DEFAULT_BITS;\n\n\t\tif (file->f_flags & O_TRUNC)\n\t\t\titer->hash = alloc_ftrace_hash(size_bits);\n\t\telse\n\t\t\titer->hash = alloc_and_copy_ftrace_hash(size_bits, hash);\n\n\t\tif (!iter->hash) {\n\t\t\ttrace_parser_put(&iter->parser);\n\t\t\tkfree(iter);\n\t\t\tret = -ENOMEM;\n\t\t\tgoto out_unlock;\n\t\t}\n\t}\n\n\tif (file->f_mode & FMODE_READ) {\n\t\titer->pg = ftrace_pages_start;\n\n\t\tret = seq_open(file, &show_ftrace_seq_ops);\n\t\tif (!ret) {\n\t\t\tstruct seq_file *m = file->private_data;\n\t\t\tm->private = iter;\n\t\t} else {\n\t\t\t\n\t\t\tfree_ftrace_hash(iter->hash);\n\t\t\ttrace_parser_put(&iter->parser);\n\t\t\tkfree(iter);\n\t\t}\n\t} else\n\t\tfile->private_data = iter;\n\n out_unlock:\n\tmutex_unlock(&ops->func_hash->regex_lock);\n\n\treturn ret;\n}\n\nstatic int\nftrace_filter_open(struct inode *inode, struct file *file)\n{\n\tstruct ftrace_ops *ops = inode->i_private;\n\n\treturn ftrace_regex_open(ops,\n\t\t\tFTRACE_ITER_FILTER | FTRACE_ITER_DO_HASH,\n\t\t\tinode, file);\n}\n\nstatic int\nftrace_notrace_open(struct inode *inode, struct file *file)\n{\n\tstruct ftrace_ops *ops = inode->i_private;\n\n\treturn ftrace_regex_open(ops, FTRACE_ITER_NOTRACE,\n\t\t\t\t inode, file);\n}\n\nstatic int ftrace_match(char *str, char *regex, int len, int type)\n{\n\tint matched = 0;\n\tint slen;\n\n\tswitch (type) {\n\tcase MATCH_FULL:\n\t\tif (strcmp(str, regex) == 0)\n\t\t\tmatched = 1;\n\t\tbreak;\n\tcase MATCH_FRONT_ONLY:\n\t\tif (strncmp(str, regex, len) == 0)\n\t\t\tmatched = 1;\n\t\tbreak;\n\tcase MATCH_MIDDLE_ONLY:\n\t\tif (strstr(str, regex))\n\t\t\tmatched = 1;\n\t\tbreak;\n\tcase MATCH_END_ONLY:\n\t\tslen = strlen(str);\n\t\tif (slen >= len && memcmp(str + slen - len, regex, len) == 0)\n\t\t\tmatched = 1;\n\t\tbreak;\n\t}\n\n\treturn matched;\n}\n\nstatic int\nenter_record(struct ftrace_hash *hash, struct dyn_ftrace *rec, int not)\n{\n\tstruct ftrace_func_entry *entry;\n\tint ret = 0;\n\n\tentry = ftrace_lookup_ip(hash, rec->ip);\n\tif (not) {\n\t\t\n\t\tif (!entry)\n\t\t\treturn 0;\n\n\t\tfree_hash_entry(hash, entry);\n\t} else {\n\t\t\n\t\tif (entry)\n\t\t\treturn 0;\n\n\t\tret = add_hash_entry(hash, rec->ip);\n\t}\n\treturn ret;\n}\n\nstatic int\nftrace_match_record(struct dyn_ftrace *rec, char *mod,\n\t\t    char *regex, int len, int type)\n{\n\tchar str[KSYM_SYMBOL_LEN];\n\tchar *modname;\n\n\tkallsyms_lookup(rec->ip, NULL, NULL, &modname, str);\n\n\tif (mod) {\n\t\t\n\t\tif (!modname || strcmp(modname, mod))\n\t\t\treturn 0;\n\n\t\t\n\t\tif (!len)\n\t\t\treturn 1;\n\t}\n\n\treturn ftrace_match(str, regex, len, type);\n}\n\nstatic int\nmatch_records(struct ftrace_hash *hash, char *buff,\n\t      int len, char *mod, int not)\n{\n\tunsigned search_len = 0;\n\tstruct ftrace_page *pg;\n\tstruct dyn_ftrace *rec;\n\tint type = MATCH_FULL;\n\tchar *search = buff;\n\tint found = 0;\n\tint ret;\n\n\tif (len) {\n\t\ttype = filter_parse_regex(buff, len, &search, &not);\n\t\tsearch_len = strlen(search);\n\t}\n\n\tmutex_lock(&ftrace_lock);\n\n\tif (unlikely(ftrace_disabled))\n\t\tgoto out_unlock;\n\n\tdo_for_each_ftrace_rec(pg, rec) {\n\t\tif (ftrace_match_record(rec, mod, search, search_len, type)) {\n\t\t\tret = enter_record(hash, rec, not);\n\t\t\tif (ret < 0) {\n\t\t\t\tfound = ret;\n\t\t\t\tgoto out_unlock;\n\t\t\t}\n\t\t\tfound = 1;\n\t\t}\n\t} while_for_each_ftrace_rec();\n out_unlock:\n\tmutex_unlock(&ftrace_lock);\n\n\treturn found;\n}\n\nstatic int\nftrace_match_records(struct ftrace_hash *hash, char *buff, int len)\n{\n\treturn match_records(hash, buff, len, NULL, 0);\n}\n\nstatic int\nftrace_match_module_records(struct ftrace_hash *hash, char *buff, char *mod)\n{\n\tint not = 0;\n\n\t\n\tif (strcmp(buff, \"", "840": "\");\n\n\t\n\tif (ftrace_is_dead()) {\n\t\tprintk(\"", "841": "\");\n\n\t\n\tretrigger_next_event(NULL);\n\t\n\tclock_was_set_delayed();\n}\n\nstatic inline void timer_stats_hrtimer_set_start_info(struct hrtimer *timer)\n{\n#ifdef CONFIG_TIMER_STATS\n\tif (timer->start_site)\n\t\treturn;\n\ttimer->start_site = __builtin_return_address(0);\n\tmemcpy(timer->start_comm, current->comm, TASK_COMM_LEN);\n\ttimer->start_pid = current->pid;\n#endif\n}\n\nstatic inline void timer_stats_hrtimer_clear_start_info(struct hrtimer *timer)\n{\n#ifdef CONFIG_TIMER_STATS\n\ttimer->start_site = NULL;\n#endif\n}\n\nstatic inline void timer_stats_account_hrtimer(struct hrtimer *timer)\n{\n#ifdef CONFIG_TIMER_STATS\n\tif (likely(!timer_stats_active))\n\t\treturn;\n\ttimer_stats_update_stats(timer, timer->start_pid, timer->start_site,\n\t\t\t\t timer->function, timer->start_comm, 0);\n#endif\n}\n\n\nstatic inline\nvoid unlock_hrtimer_base(const struct hrtimer *timer, unsigned long *flags)\n{\n\traw_spin_unlock_irqrestore(&timer->base->cpu_base->lock, *flags);\n}\n\n\nu64 hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval)\n{\n\tu64 orun = 1;\n\tktime_t delta;\n\n\tdelta = ktime_sub(now, hrtimer_get_expires(timer));\n\n\tif (delta.tv64 < 0)\n\t\treturn 0;\n\n\tif (interval.tv64 < timer->base->resolution.tv64)\n\t\tinterval.tv64 = timer->base->resolution.tv64;\n\n\tif (unlikely(delta.tv64 >= interval.tv64)) {\n\t\ts64 incr = ktime_to_ns(interval);\n\n\t\torun = ktime_divns(delta, incr);\n\t\thrtimer_add_expires_ns(timer, incr * orun);\n\t\tif (hrtimer_get_expires_tv64(timer) > now.tv64)\n\t\t\treturn orun;\n\t\t\n\t\torun++;\n\t}\n\thrtimer_add_expires(timer, interval);\n\n\treturn orun;\n}\nEXPORT_SYMBOL_GPL(hrtimer_forward);\n\n\nstatic int enqueue_hrtimer(struct hrtimer *timer,\n\t\t\t   struct hrtimer_clock_base *base)\n{\n\tdebug_activate(timer);\n\n\ttimerqueue_add(&base->active, &timer->node);\n\tbase->cpu_base->active_bases |= 1 << base->index;\n\n\t\n\ttimer->state |= HRTIMER_STATE_ENQUEUED;\n\n\treturn (&timer->node == base->active.next);\n}\n\n\nstatic void __remove_hrtimer(struct hrtimer *timer,\n\t\t\t     struct hrtimer_clock_base *base,\n\t\t\t     unsigned long newstate, int reprogram)\n{\n\tstruct timerqueue_node *next_timer;\n\tif (!(timer->state & HRTIMER_STATE_ENQUEUED))\n\t\tgoto out;\n\n\tnext_timer = timerqueue_getnext(&base->active);\n\ttimerqueue_del(&base->active, &timer->node);\n\tif (&timer->node == next_timer) {\n#ifdef CONFIG_HIGH_RES_TIMERS\n\t\t\n\t\tif (reprogram && hrtimer_hres_active()) {\n\t\t\tktime_t expires;\n\n\t\t\texpires = ktime_sub(hrtimer_get_expires(timer),\n\t\t\t\t\t    base->offset);\n\t\t\tif (base->cpu_base->expires_next.tv64 == expires.tv64)\n\t\t\t\thrtimer_force_reprogram(base->cpu_base, 1);\n\t\t}\n#endif\n\t}\n\tif (!timerqueue_getnext(&base->active))\n\t\tbase->cpu_base->active_bases &= ~(1 << base->index);\nout:\n\ttimer->state = newstate;\n}\n\n\nstatic inline int\nremove_hrtimer(struct hrtimer *timer, struct hrtimer_clock_base *base)\n{\n\tif (hrtimer_is_queued(timer)) {\n\t\tunsigned long state;\n\t\tint reprogram;\n\n\t\t\n\t\tdebug_deactivate(timer);\n\t\ttimer_stats_hrtimer_clear_start_info(timer);\n\t\treprogram = base->cpu_base == this_cpu_ptr(&hrtimer_bases);\n\t\t\n\t\tstate = timer->state & HRTIMER_STATE_CALLBACK;\n\t\t__remove_hrtimer(timer, base, state, reprogram);\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nint __hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,\n\t\tunsigned long delta_ns, const enum hrtimer_mode mode,\n\t\tint wakeup)\n{\n\tstruct hrtimer_clock_base *base, *new_base;\n\tunsigned long flags;\n\tint ret, leftmost;\n\n\tbase = lock_hrtimer_base(timer, &flags);\n\n\t\n\tret = remove_hrtimer(timer, base);\n\n\tif (mode & HRTIMER_MODE_REL) {\n\t\ttim = ktime_add_safe(tim, base->get_time());\n\t\t\n#ifdef CONFIG_TIME_LOW_RES\n\t\ttim = ktime_add_safe(tim, base->resolution);\n#endif\n\t}\n\n\thrtimer_set_expires_range_ns(timer, tim, delta_ns);\n\n\t\n\tnew_base = switch_hrtimer_base(timer, base, mode & HRTIMER_MODE_PINNED);\n\n\ttimer_stats_hrtimer_set_start_info(timer);\n\n\tleftmost = enqueue_hrtimer(timer, new_base);\n\n\tif (!leftmost) {\n\t\tunlock_hrtimer_base(timer, &flags);\n\t\treturn ret;\n\t}\n\n\tif (!hrtimer_is_hres_active(timer)) {\n\t\t\n\t\twake_up_nohz_cpu(new_base->cpu_base->cpu);\n\t} else if (new_base->cpu_base == this_cpu_ptr(&hrtimer_bases) &&\n\t\t\thrtimer_reprogram(timer, new_base)) {\n\t\t\n\t\tif (wakeup) {\n\t\t\t\n\t\t\traw_spin_unlock(&new_base->cpu_base->lock);\n\t\t\traise_softirq_irqoff(HRTIMER_SOFTIRQ);\n\t\t\tlocal_irq_restore(flags);\n\t\t\treturn ret;\n\t\t} else {\n\t\t\t__raise_softirq_irqoff(HRTIMER_SOFTIRQ);\n\t\t}\n\t}\n\n\tunlock_hrtimer_base(timer, &flags);\n\n\treturn ret;\n}\nEXPORT_SYMBOL_GPL(__hrtimer_start_range_ns);\n\n\nint hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,\n\t\tunsigned long delta_ns, const enum hrtimer_mode mode)\n{\n\treturn __hrtimer_start_range_ns(timer, tim, delta_ns, mode, 1);\n}\nEXPORT_SYMBOL_GPL(hrtimer_start_range_ns);\n\n\nint\nhrtimer_start(struct hrtimer *timer, ktime_t tim, const enum hrtimer_mode mode)\n{\n\treturn __hrtimer_start_range_ns(timer, tim, 0, mode, 1);\n}\nEXPORT_SYMBOL_GPL(hrtimer_start);\n\n\n\nint hrtimer_try_to_cancel(struct hrtimer *timer)\n{\n\tstruct hrtimer_clock_base *base;\n\tunsigned long flags;\n\tint ret = -1;\n\n\tbase = lock_hrtimer_base(timer, &flags);\n\n\tif (!hrtimer_callback_running(timer))\n\t\tret = remove_hrtimer(timer, base);\n\n\tunlock_hrtimer_base(timer, &flags);\n\n\treturn ret;\n\n}\nEXPORT_SYMBOL_GPL(hrtimer_try_to_cancel);\n\n\nint hrtimer_cancel(struct hrtimer *timer)\n{\n\tfor (;;) {\n\t\tint ret = hrtimer_try_to_cancel(timer);\n\n\t\tif (ret >= 0)\n\t\t\treturn ret;\n\t\tcpu_relax();\n\t}\n}\nEXPORT_SYMBOL_GPL(hrtimer_cancel);\n\n\nktime_t hrtimer_get_remaining(const struct hrtimer *timer)\n{\n\tunsigned long flags;\n\tktime_t rem;\n\n\tlock_hrtimer_base(timer, &flags);\n\trem = hrtimer_expires_remaining(timer);\n\tunlock_hrtimer_base(timer, &flags);\n\n\treturn rem;\n}\nEXPORT_SYMBOL_GPL(hrtimer_get_remaining);\n\n#ifdef CONFIG_NO_HZ_COMMON\n\nktime_t hrtimer_get_next_event(void)\n{\n\tstruct hrtimer_cpu_base *cpu_base = this_cpu_ptr(&hrtimer_bases);\n\tktime_t mindelta = { .tv64 = KTIME_MAX };\n\tunsigned long flags;\n\n\traw_spin_lock_irqsave(&cpu_base->lock, flags);\n\n\tif (!hrtimer_hres_active())\n\t\tmindelta = ktime_sub(__hrtimer_get_next_event(cpu_base),\n\t\t\t\t     ktime_get());\n\n\traw_spin_unlock_irqrestore(&cpu_base->lock, flags);\n\n\tif (mindelta.tv64 < 0)\n\t\tmindelta.tv64 = 0;\n\treturn mindelta;\n}\n#endif\n\nstatic void __hrtimer_init(struct hrtimer *timer, clockid_t clock_id,\n\t\t\t   enum hrtimer_mode mode)\n{\n\tstruct hrtimer_cpu_base *cpu_base;\n\tint base;\n\n\tmemset(timer, 0, sizeof(struct hrtimer));\n\n\tcpu_base = raw_cpu_ptr(&hrtimer_bases);\n\n\tif (clock_id == CLOCK_REALTIME && mode != HRTIMER_MODE_ABS)\n\t\tclock_id = CLOCK_MONOTONIC;\n\n\tbase = hrtimer_clockid_to_base(clock_id);\n\ttimer->base = &cpu_base->clock_base[base];\n\ttimerqueue_init(&timer->node);\n\n#ifdef CONFIG_TIMER_STATS\n\ttimer->start_site = NULL;\n\ttimer->start_pid = -1;\n\tmemset(timer->start_comm, 0, TASK_COMM_LEN);\n#endif\n}\n\n\nvoid hrtimer_init(struct hrtimer *timer, clockid_t clock_id,\n\t\t  enum hrtimer_mode mode)\n{\n\tdebug_init(timer, clock_id, mode);\n\t__hrtimer_init(timer, clock_id, mode);\n}\nEXPORT_SYMBOL_GPL(hrtimer_init);\n\n\nint hrtimer_get_res(const clockid_t which_clock, struct timespec *tp)\n{\n\tstruct hrtimer_cpu_base *cpu_base;\n\tint base = hrtimer_clockid_to_base(which_clock);\n\n\tcpu_base = raw_cpu_ptr(&hrtimer_bases);\n\t*tp = ktime_to_timespec(cpu_base->clock_base[base].resolution);\n\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(hrtimer_get_res);\n\nstatic void __run_hrtimer(struct hrtimer *timer, ktime_t *now)\n{\n\tstruct hrtimer_clock_base *base = timer->base;\n\tstruct hrtimer_cpu_base *cpu_base = base->cpu_base;\n\tenum hrtimer_restart (*fn)(struct hrtimer *);\n\tint restart;\n\n\tWARN_ON(!irqs_disabled());\n\n\tdebug_deactivate(timer);\n\t__remove_hrtimer(timer, base, HRTIMER_STATE_CALLBACK, 0);\n\ttimer_stats_account_hrtimer(timer);\n\tfn = timer->function;\n\n\t\n\traw_spin_unlock(&cpu_base->lock);\n\ttrace_hrtimer_expire_entry(timer, now);\n\trestart = fn(timer);\n\ttrace_hrtimer_expire_exit(timer);\n\traw_spin_lock(&cpu_base->lock);\n\n\t\n\tif (restart != HRTIMER_NORESTART) {\n\t\tBUG_ON(timer->state != HRTIMER_STATE_CALLBACK);\n\t\tenqueue_hrtimer(timer, base);\n\t}\n\n\tWARN_ON_ONCE(!(timer->state & HRTIMER_STATE_CALLBACK));\n\n\ttimer->state &= ~HRTIMER_STATE_CALLBACK;\n}\n\n#ifdef CONFIG_HIGH_RES_TIMERS\n\n\nvoid hrtimer_interrupt(struct clock_event_device *dev)\n{\n\tstruct hrtimer_cpu_base *cpu_base = this_cpu_ptr(&hrtimer_bases);\n\tktime_t expires_next, now, entry_time, delta;\n\tint i, retries = 0;\n\n\tBUG_ON(!cpu_base->hres_active);\n\tcpu_base->nr_events++;\n\tdev->next_event.tv64 = KTIME_MAX;\n\n\traw_spin_lock(&cpu_base->lock);\n\tentry_time = now = hrtimer_update_base(cpu_base);\nretry:\n\tcpu_base->in_hrtirq = 1;\n\t\n\tcpu_base->expires_next.tv64 = KTIME_MAX;\n\n\tfor (i = 0; i < HRTIMER_MAX_CLOCK_BASES; i++) {\n\t\tstruct hrtimer_clock_base *base;\n\t\tstruct timerqueue_node *node;\n\t\tktime_t basenow;\n\n\t\tif (!(cpu_base->active_bases & (1 << i)))\n\t\t\tcontinue;\n\n\t\tbase = cpu_base->clock_base + i;\n\t\tbasenow = ktime_add(now, base->offset);\n\n\t\twhile ((node = timerqueue_getnext(&base->active))) {\n\t\t\tstruct hrtimer *timer;\n\n\t\t\ttimer = container_of(node, struct hrtimer, node);\n\n\t\t\t\n\t\t\tif (basenow.tv64 < hrtimer_get_softexpires_tv64(timer))\n\t\t\t\tbreak;\n\n\t\t\t__run_hrtimer(timer, &basenow);\n\t\t}\n\t}\n\t\n\texpires_next = __hrtimer_get_next_event(cpu_base);\n\t\n\tcpu_base->expires_next = expires_next;\n\tcpu_base->in_hrtirq = 0;\n\traw_spin_unlock(&cpu_base->lock);\n\n\t\n\tif (expires_next.tv64 == KTIME_MAX ||\n\t    !tick_program_event(expires_next, 0)) {\n\t\tcpu_base->hang_detected = 0;\n\t\treturn;\n\t}\n\n\t\n\traw_spin_lock(&cpu_base->lock);\n\tnow = hrtimer_update_base(cpu_base);\n\tcpu_base->nr_retries++;\n\tif (++retries < 3)\n\t\tgoto retry;\n\t\n\tcpu_base->nr_hangs++;\n\tcpu_base->hang_detected = 1;\n\traw_spin_unlock(&cpu_base->lock);\n\tdelta = ktime_sub(now, entry_time);\n\tif (delta.tv64 > cpu_base->max_hang_time.tv64)\n\t\tcpu_base->max_hang_time = delta;\n\t\n\tif (delta.tv64 > 100 * NSEC_PER_MSEC)\n\t\texpires_next = ktime_add_ns(now, 100 * NSEC_PER_MSEC);\n\telse\n\t\texpires_next = ktime_add(now, delta);\n\ttick_program_event(expires_next, 1);\n\tprintk_once(KERN_WARNING \"", "842": "\");\n\n\t\n\tset_fs(USER_DS);\n\n\tptrace_event(PTRACE_EVENT_EXIT, code);\n\n\tvalidate_creds_for_do_exit(tsk);\n\n\t\n\tif (unlikely(tsk->flags & PF_EXITING)) {\n\t\tpr_alert(\"", "843": "\");\n\n\t\n\ttracing_update_buffers();\n\n\tbuffers_allocated = 1;\n\n\t\n\tif (global_trace.trace_buffer.buffer)\n\t\ttracing_start_cmdline_record();\n}\n\nvoid trace_printk_start_comm(void)\n{\n\t\n\tif (!buffers_allocated)\n\t\treturn;\n\ttracing_start_cmdline_record();\n}\n\nstatic void trace_printk_start_stop_comm(int enabled)\n{\n\tif (!buffers_allocated)\n\t\treturn;\n\n\tif (enabled)\n\t\ttracing_start_cmdline_record();\n\telse\n\t\ttracing_stop_cmdline_record();\n}\n\n\nint trace_vbprintk(unsigned long ip, const char *fmt, va_list args)\n{\n\tstruct ftrace_event_call *call = &event_bprint;\n\tstruct ring_buffer_event *event;\n\tstruct ring_buffer *buffer;\n\tstruct trace_array *tr = &global_trace;\n\tstruct bprint_entry *entry;\n\tunsigned long flags;\n\tchar *tbuffer;\n\tint len = 0, size, pc;\n\n\tif (unlikely(tracing_selftest_running || tracing_disabled))\n\t\treturn 0;\n\n\t\n\tpause_graph_tracing();\n\n\tpc = preempt_count();\n\tpreempt_disable_notrace();\n\n\ttbuffer = get_trace_buf();\n\tif (!tbuffer) {\n\t\tlen = 0;\n\t\tgoto out;\n\t}\n\n\tlen = vbin_printf((u32 *)tbuffer, TRACE_BUF_SIZE/sizeof(int), fmt, args);\n\n\tif (len > TRACE_BUF_SIZE/sizeof(int) || len < 0)\n\t\tgoto out;\n\n\tlocal_save_flags(flags);\n\tsize = sizeof(*entry) + sizeof(u32) * len;\n\tbuffer = tr->trace_buffer.buffer;\n\tevent = trace_buffer_lock_reserve(buffer, TRACE_BPRINT, size,\n\t\t\t\t\t  flags, pc);\n\tif (!event)\n\t\tgoto out;\n\tentry = ring_buffer_event_data(event);\n\tentry->ip\t\t\t= ip;\n\tentry->fmt\t\t\t= fmt;\n\n\tmemcpy(entry->buf, tbuffer, sizeof(u32) * len);\n\tif (!call_filter_check_discard(call, entry, buffer, event)) {\n\t\t__buffer_unlock_commit(buffer, event);\n\t\tftrace_trace_stack(buffer, flags, 6, pc);\n\t}\n\nout:\n\tpreempt_enable_notrace();\n\tunpause_graph_tracing();\n\n\treturn len;\n}\nEXPORT_SYMBOL_GPL(trace_vbprintk);\n\nstatic int\n__trace_array_vprintk(struct ring_buffer *buffer,\n\t\t      unsigned long ip, const char *fmt, va_list args)\n{\n\tstruct ftrace_event_call *call = &event_print;\n\tstruct ring_buffer_event *event;\n\tint len = 0, size, pc;\n\tstruct print_entry *entry;\n\tunsigned long flags;\n\tchar *tbuffer;\n\n\tif (tracing_disabled || tracing_selftest_running)\n\t\treturn 0;\n\n\t\n\tpause_graph_tracing();\n\n\tpc = preempt_count();\n\tpreempt_disable_notrace();\n\n\n\ttbuffer = get_trace_buf();\n\tif (!tbuffer) {\n\t\tlen = 0;\n\t\tgoto out;\n\t}\n\n\tlen = vscnprintf(tbuffer, TRACE_BUF_SIZE, fmt, args);\n\n\tlocal_save_flags(flags);\n\tsize = sizeof(*entry) + len + 1;\n\tevent = trace_buffer_lock_reserve(buffer, TRACE_PRINT, size,\n\t\t\t\t\t  flags, pc);\n\tif (!event)\n\t\tgoto out;\n\tentry = ring_buffer_event_data(event);\n\tentry->ip = ip;\n\n\tmemcpy(&entry->buf, tbuffer, len + 1);\n\tif (!call_filter_check_discard(call, entry, buffer, event)) {\n\t\t__buffer_unlock_commit(buffer, event);\n\t\tftrace_trace_stack(buffer, flags, 6, pc);\n\t}\n out:\n\tpreempt_enable_notrace();\n\tunpause_graph_tracing();\n\n\treturn len;\n}\n\nint trace_array_vprintk(struct trace_array *tr,\n\t\t\tunsigned long ip, const char *fmt, va_list args)\n{\n\treturn __trace_array_vprintk(tr->trace_buffer.buffer, ip, fmt, args);\n}\n\nint trace_array_printk(struct trace_array *tr,\n\t\t       unsigned long ip, const char *fmt, ...)\n{\n\tint ret;\n\tva_list ap;\n\n\tif (!(trace_flags & TRACE_ITER_PRINTK))\n\t\treturn 0;\n\n\tva_start(ap, fmt);\n\tret = trace_array_vprintk(tr, ip, fmt, ap);\n\tva_end(ap);\n\treturn ret;\n}\n\nint trace_array_printk_buf(struct ring_buffer *buffer,\n\t\t\t   unsigned long ip, const char *fmt, ...)\n{\n\tint ret;\n\tva_list ap;\n\n\tif (!(trace_flags & TRACE_ITER_PRINTK))\n\t\treturn 0;\n\n\tva_start(ap, fmt);\n\tret = __trace_array_vprintk(buffer, ip, fmt, ap);\n\tva_end(ap);\n\treturn ret;\n}\n\nint trace_vprintk(unsigned long ip, const char *fmt, va_list args)\n{\n\treturn trace_array_vprintk(&global_trace, ip, fmt, args);\n}\nEXPORT_SYMBOL_GPL(trace_vprintk);\n\nstatic void trace_iterator_increment(struct trace_iterator *iter)\n{\n\tstruct ring_buffer_iter *buf_iter = trace_buffer_iter(iter, iter->cpu);\n\n\titer->idx++;\n\tif (buf_iter)\n\t\tring_buffer_read(buf_iter, NULL);\n}\n\nstatic struct trace_entry *\npeek_next_entry(struct trace_iterator *iter, int cpu, u64 *ts,\n\t\tunsigned long *lost_events)\n{\n\tstruct ring_buffer_event *event;\n\tstruct ring_buffer_iter *buf_iter = trace_buffer_iter(iter, cpu);\n\n\tif (buf_iter)\n\t\tevent = ring_buffer_iter_peek(buf_iter, ts);\n\telse\n\t\tevent = ring_buffer_peek(iter->trace_buffer->buffer, cpu, ts,\n\t\t\t\t\t lost_events);\n\n\tif (event) {\n\t\titer->ent_size = ring_buffer_event_length(event);\n\t\treturn ring_buffer_event_data(event);\n\t}\n\titer->ent_size = 0;\n\treturn NULL;\n}\n\nstatic struct trace_entry *\n__find_next_entry(struct trace_iterator *iter, int *ent_cpu,\n\t\t  unsigned long *missing_events, u64 *ent_ts)\n{\n\tstruct ring_buffer *buffer = iter->trace_buffer->buffer;\n\tstruct trace_entry *ent, *next = NULL;\n\tunsigned long lost_events = 0, next_lost = 0;\n\tint cpu_file = iter->cpu_file;\n\tu64 next_ts = 0, ts;\n\tint next_cpu = -1;\n\tint next_size = 0;\n\tint cpu;\n\n\t\n\tif (cpu_file > RING_BUFFER_ALL_CPUS) {\n\t\tif (ring_buffer_empty_cpu(buffer, cpu_file))\n\t\t\treturn NULL;\n\t\tent = peek_next_entry(iter, cpu_file, ent_ts, missing_events);\n\t\tif (ent_cpu)\n\t\t\t*ent_cpu = cpu_file;\n\n\t\treturn ent;\n\t}\n\n\tfor_each_tracing_cpu(cpu) {\n\n\t\tif (ring_buffer_empty_cpu(buffer, cpu))\n\t\t\tcontinue;\n\n\t\tent = peek_next_entry(iter, cpu, &ts, &lost_events);\n\n\t\t\n\t\tif (ent && (!next || ts < next_ts)) {\n\t\t\tnext = ent;\n\t\t\tnext_cpu = cpu;\n\t\t\tnext_ts = ts;\n\t\t\tnext_lost = lost_events;\n\t\t\tnext_size = iter->ent_size;\n\t\t}\n\t}\n\n\titer->ent_size = next_size;\n\n\tif (ent_cpu)\n\t\t*ent_cpu = next_cpu;\n\n\tif (ent_ts)\n\t\t*ent_ts = next_ts;\n\n\tif (missing_events)\n\t\t*missing_events = next_lost;\n\n\treturn next;\n}\n\n\nstruct trace_entry *trace_find_next_entry(struct trace_iterator *iter,\n\t\t\t\t\t  int *ent_cpu, u64 *ent_ts)\n{\n\treturn __find_next_entry(iter, ent_cpu, NULL, ent_ts);\n}\n\n\nvoid *trace_find_next_entry_inc(struct trace_iterator *iter)\n{\n\titer->ent = __find_next_entry(iter, &iter->cpu,\n\t\t\t\t      &iter->lost_events, &iter->ts);\n\n\tif (iter->ent)\n\t\ttrace_iterator_increment(iter);\n\n\treturn iter->ent ? iter : NULL;\n}\n\nstatic void trace_consume(struct trace_iterator *iter)\n{\n\tring_buffer_consume(iter->trace_buffer->buffer, iter->cpu, &iter->ts,\n\t\t\t    &iter->lost_events);\n}\n\nstatic void *s_next(struct seq_file *m, void *v, loff_t *pos)\n{\n\tstruct trace_iterator *iter = m->private;\n\tint i = (int)*pos;\n\tvoid *ent;\n\n\tWARN_ON_ONCE(iter->leftover);\n\n\t(*pos)++;\n\n\t\n\tif (iter->idx > i)\n\t\treturn NULL;\n\n\tif (iter->idx < 0)\n\t\tent = trace_find_next_entry_inc(iter);\n\telse\n\t\tent = iter;\n\n\twhile (ent && iter->idx < i)\n\t\tent = trace_find_next_entry_inc(iter);\n\n\titer->pos = *pos;\n\n\treturn ent;\n}\n\nvoid tracing_iter_reset(struct trace_iterator *iter, int cpu)\n{\n\tstruct ring_buffer_event *event;\n\tstruct ring_buffer_iter *buf_iter;\n\tunsigned long entries = 0;\n\tu64 ts;\n\n\tper_cpu_ptr(iter->trace_buffer->data, cpu)->skipped_entries = 0;\n\n\tbuf_iter = trace_buffer_iter(iter, cpu);\n\tif (!buf_iter)\n\t\treturn;\n\n\tring_buffer_iter_reset(buf_iter);\n\n\t\n\twhile ((event = ring_buffer_iter_peek(buf_iter, &ts))) {\n\t\tif (ts >= iter->trace_buffer->time_start)\n\t\t\tbreak;\n\t\tentries++;\n\t\tring_buffer_read(buf_iter, NULL);\n\t}\n\n\tper_cpu_ptr(iter->trace_buffer->data, cpu)->skipped_entries = entries;\n}\n\n\nstatic void *s_start(struct seq_file *m, loff_t *pos)\n{\n\tstruct trace_iterator *iter = m->private;\n\tstruct trace_array *tr = iter->tr;\n\tint cpu_file = iter->cpu_file;\n\tvoid *p = NULL;\n\tloff_t l = 0;\n\tint cpu;\n\n\t\n\tmutex_lock(&trace_types_lock);\n\tif (unlikely(tr->current_trace && iter->trace->name != tr->current_trace->name))\n\t\t*iter->trace = *tr->current_trace;\n\tmutex_unlock(&trace_types_lock);\n\n#ifdef CONFIG_TRACER_MAX_TRACE\n\tif (iter->snapshot && iter->trace->use_max_tr)\n\t\treturn ERR_PTR(-EBUSY);\n#endif\n\n\tif (!iter->snapshot)\n\t\tatomic_inc(&trace_record_cmdline_disabled);\n\n\tif (*pos != iter->pos) {\n\t\titer->ent = NULL;\n\t\titer->cpu = 0;\n\t\titer->idx = -1;\n\n\t\tif (cpu_file == RING_BUFFER_ALL_CPUS) {\n\t\t\tfor_each_tracing_cpu(cpu)\n\t\t\t\ttracing_iter_reset(iter, cpu);\n\t\t} else\n\t\t\ttracing_iter_reset(iter, cpu_file);\n\n\t\titer->leftover = 0;\n\t\tfor (p = iter; p && l < *pos; p = s_next(m, p, &l))\n\t\t\t;\n\n\t} else {\n\t\t\n\t\tif (iter->leftover)\n\t\t\tp = iter;\n\t\telse {\n\t\t\tl = *pos - 1;\n\t\t\tp = s_next(m, p, &l);\n\t\t}\n\t}\n\n\ttrace_event_read_lock();\n\ttrace_access_lock(cpu_file);\n\treturn p;\n}\n\nstatic void s_stop(struct seq_file *m, void *p)\n{\n\tstruct trace_iterator *iter = m->private;\n\n#ifdef CONFIG_TRACER_MAX_TRACE\n\tif (iter->snapshot && iter->trace->use_max_tr)\n\t\treturn;\n#endif\n\n\tif (!iter->snapshot)\n\t\tatomic_dec(&trace_record_cmdline_disabled);\n\n\ttrace_access_unlock(iter->cpu_file);\n\ttrace_event_read_unlock();\n}\n\nstatic void\nget_total_entries(struct trace_buffer *buf,\n\t\t  unsigned long *total, unsigned long *entries)\n{\n\tunsigned long count;\n\tint cpu;\n\n\t*total = 0;\n\t*entries = 0;\n\n\tfor_each_tracing_cpu(cpu) {\n\t\tcount = ring_buffer_entries_cpu(buf->buffer, cpu);\n\t\t\n\t\tif (per_cpu_ptr(buf->data, cpu)->skipped_entries) {\n\t\t\tcount -= per_cpu_ptr(buf->data, cpu)->skipped_entries;\n\t\t\t\n\t\t\t*total += count;\n\t\t} else\n\t\t\t*total += count +\n\t\t\t\tring_buffer_overrun_cpu(buf->buffer, cpu);\n\t\t*entries += count;\n\t}\n}\n\nstatic void print_lat_help_header(struct seq_file *m)\n{\n\tseq_puts(m, \"", "844": "\");\n\n\tcpuidle_pause();\n\tput_online_cpus();\n\n\tspin_lock_irq(&suspend_freeze_lock);\n\n out:\n\tsuspend_freeze_state = FREEZE_STATE_NONE;\n\tspin_unlock_irq(&suspend_freeze_lock);\n}\n\nvoid freeze_wake(void)\n{\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&suspend_freeze_lock, flags);\n\tif (suspend_freeze_state > FREEZE_STATE_NONE) {\n\t\tsuspend_freeze_state = FREEZE_STATE_WAKE;\n\t\twake_up(&suspend_freeze_wait_head);\n\t}\n\tspin_unlock_irqrestore(&suspend_freeze_lock, flags);\n}\nEXPORT_SYMBOL_GPL(freeze_wake);\n\nstatic bool valid_state(suspend_state_t state)\n{\n\t\n\treturn suspend_ops && suspend_ops->valid && suspend_ops->valid(state);\n}\n\n\nstatic bool relative_states;\n\nstatic int __init sleep_states_setup(char *str)\n{\n\trelative_states = !strncmp(str, \"", "845": "\");\n\n\tfor (bit = 0; bit < LOCK_USAGE_STATES; bit++) {\n\t\tif (class->usage_mask & (1 << bit)) {\n\t\t\tint len = depth;\n\n\t\t\tlen += printk(\"", "846": "\");\n\n\tfor (i = 0; i < nr_entries; i++) {\n\t\tentry = entries + i;\n\t\tif (entry->timer_flag & TIMER_STATS_FLAG_DEFERRABLE) {\n\t\t\tseq_printf(m, \"", "847": "\");\n\n\tfor (i = 1; i < nr_irqs; i++) {\n\t\tdesc = irq_to_desc(i);\n\t\tif (!desc)\n\t\t\tcontinue;\n\n\t\traw_spin_lock_irqsave(&desc->lock, flags);\n\t\tdomain = desc->irq_data.domain;\n\n\t\tif (domain) {\n\t\t\tstruct irq_chip *chip;\n\t\t\tint hwirq = desc->irq_data.hwirq;\n\t\t\tbool direct;\n\n\t\t\tseq_printf(m, \"", "848": "\");\n\n\tif (!next) {\n\t\tret = ftrace_match_records(hash, func, len);\n\t\tif (!ret)\n\t\t\tret = -EINVAL;\n\t\tif (ret < 0)\n\t\t\treturn ret;\n\t\treturn 0;\n\t}\n\n\t\n\n\tcommand = strsep(&next, \"", "849": "\");\n\n\tif (!strlen(number))\n\t\tgoto out_reg;\n\n\t\n\tret = kstrtoul(number, 0, (unsigned long *)&count);\n\tif (ret)\n\t\treturn ret;\n\n out_reg:\n\tret = register_ftrace_function_probe(glob, ops, count);\n\n\tif (ret >= 0)\n\t\talloc_snapshot(&global_trace);\n\n\treturn ret < 0 ? ret : 0;\n}\n\nstatic struct ftrace_func_command ftrace_snapshot_cmd = {\n\t.name\t\t\t= \"", "850": "\");\n\n\tif (count == -1)\n\t\tseq_puts(m, \"", "851": "\");\n\n\tif (data->critical_start) {\n\t\tseq_puts(m, \"", "852": "\");\n\n\tif (dev->set_mode) {\n\t\tSEQ_printf(m, \"", "853": "\");\n\n\tmutex_lock(&ftrace_cmd_mutex);\n\tlist_for_each_entry(p, &ftrace_commands, list) {\n\t\tif (strcmp(p->name, command) == 0) {\n\t\t\tret = p->func(hash, func, command, next, enable);\n\t\t\tgoto out_unlock;\n\t\t}\n\t}\n out_unlock:\n\tmutex_unlock(&ftrace_cmd_mutex);\n\n\treturn ret;\n}\n\nstatic ssize_t\nftrace_regex_write(struct file *file, const char __user *ubuf,\n\t\t   size_t cnt, loff_t *ppos, int enable)\n{\n\tstruct ftrace_iterator *iter;\n\tstruct trace_parser *parser;\n\tssize_t ret, read;\n\n\tif (!cnt)\n\t\treturn 0;\n\n\tif (file->f_mode & FMODE_READ) {\n\t\tstruct seq_file *m = file->private_data;\n\t\titer = m->private;\n\t} else\n\t\titer = file->private_data;\n\n\tif (unlikely(ftrace_disabled))\n\t\treturn -ENODEV;\n\n\t\n\n\tparser = &iter->parser;\n\tread = trace_get_user(parser, ubuf, cnt, ppos);\n\n\tif (read >= 0 && trace_parser_loaded(parser) &&\n\t    !trace_parser_cont(parser)) {\n\t\tret = ftrace_process_regex(iter->hash, parser->buffer,\n\t\t\t\t\t   parser->idx, enable);\n\t\ttrace_parser_clear(parser);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n\n\tret = read;\n out:\n\treturn ret;\n}\n\nssize_t\nftrace_filter_write(struct file *file, const char __user *ubuf,\n\t\t    size_t cnt, loff_t *ppos)\n{\n\treturn ftrace_regex_write(file, ubuf, cnt, ppos, 1);\n}\n\nssize_t\nftrace_notrace_write(struct file *file, const char __user *ubuf,\n\t\t     size_t cnt, loff_t *ppos)\n{\n\treturn ftrace_regex_write(file, ubuf, cnt, ppos, 0);\n}\n\nstatic int\nftrace_match_addr(struct ftrace_hash *hash, unsigned long ip, int remove)\n{\n\tstruct ftrace_func_entry *entry;\n\n\tif (!ftrace_location(ip))\n\t\treturn -EINVAL;\n\n\tif (remove) {\n\t\tentry = ftrace_lookup_ip(hash, ip);\n\t\tif (!entry)\n\t\t\treturn -ENOENT;\n\t\tfree_hash_entry(hash, entry);\n\t\treturn 0;\n\t}\n\n\treturn add_hash_entry(hash, ip);\n}\n\nstatic void ftrace_ops_update_code(struct ftrace_ops *ops,\n\t\t\t\t   struct ftrace_ops_hash *old_hash)\n{\n\tstruct ftrace_ops *op;\n\n\tif (!ftrace_enabled)\n\t\treturn;\n\n\tif (ops->flags & FTRACE_OPS_FL_ENABLED) {\n\t\tftrace_run_modify_code(ops, FTRACE_UPDATE_CALLS, old_hash);\n\t\treturn;\n\t}\n\n\t\n\tif (ops->func_hash != &global_ops.local_hash)\n\t\treturn;\n\n\tdo_for_each_ftrace_op(op, ftrace_ops_list) {\n\t\tif (op->func_hash == &global_ops.local_hash &&\n\t\t    op->flags & FTRACE_OPS_FL_ENABLED) {\n\t\t\tftrace_run_modify_code(op, FTRACE_UPDATE_CALLS, old_hash);\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t} while_for_each_ftrace_op(op);\n}\n\nstatic int\nftrace_set_hash(struct ftrace_ops *ops, unsigned char *buf, int len,\n\t\tunsigned long ip, int remove, int reset, int enable)\n{\n\tstruct ftrace_hash **orig_hash;\n\tstruct ftrace_ops_hash old_hash_ops;\n\tstruct ftrace_hash *old_hash;\n\tstruct ftrace_hash *hash;\n\tint ret;\n\n\tif (unlikely(ftrace_disabled))\n\t\treturn -ENODEV;\n\n\tmutex_lock(&ops->func_hash->regex_lock);\n\n\tif (enable)\n\t\torig_hash = &ops->func_hash->filter_hash;\n\telse\n\t\torig_hash = &ops->func_hash->notrace_hash;\n\n\tif (reset)\n\t\thash = alloc_ftrace_hash(FTRACE_HASH_DEFAULT_BITS);\n\telse\n\t\thash = alloc_and_copy_ftrace_hash(FTRACE_HASH_DEFAULT_BITS, *orig_hash);\n\n\tif (!hash) {\n\t\tret = -ENOMEM;\n\t\tgoto out_regex_unlock;\n\t}\n\n\tif (buf && !ftrace_match_records(hash, buf, len)) {\n\t\tret = -EINVAL;\n\t\tgoto out_regex_unlock;\n\t}\n\tif (ip) {\n\t\tret = ftrace_match_addr(hash, ip, remove);\n\t\tif (ret < 0)\n\t\t\tgoto out_regex_unlock;\n\t}\n\n\tmutex_lock(&ftrace_lock);\n\told_hash = *orig_hash;\n\told_hash_ops.filter_hash = ops->func_hash->filter_hash;\n\told_hash_ops.notrace_hash = ops->func_hash->notrace_hash;\n\tret = ftrace_hash_move(ops, enable, orig_hash, hash);\n\tif (!ret) {\n\t\tftrace_ops_update_code(ops, &old_hash_ops);\n\t\tfree_ftrace_hash_rcu(old_hash);\n\t}\n\tmutex_unlock(&ftrace_lock);\n\n out_regex_unlock:\n\tmutex_unlock(&ops->func_hash->regex_lock);\n\n\tfree_ftrace_hash(hash);\n\treturn ret;\n}\n\nstatic int\nftrace_set_addr(struct ftrace_ops *ops, unsigned long ip, int remove,\n\t\tint reset, int enable)\n{\n\treturn ftrace_set_hash(ops, 0, 0, ip, remove, reset, enable);\n}\n\n\nint ftrace_set_filter_ip(struct ftrace_ops *ops, unsigned long ip,\n\t\t\t int remove, int reset)\n{\n\tftrace_ops_init(ops);\n\treturn ftrace_set_addr(ops, ip, remove, reset, 1);\n}\nEXPORT_SYMBOL_GPL(ftrace_set_filter_ip);\n\nstatic int\nftrace_set_regex(struct ftrace_ops *ops, unsigned char *buf, int len,\n\t\t int reset, int enable)\n{\n\treturn ftrace_set_hash(ops, buf, len, 0, 0, reset, enable);\n}\n\n\nint ftrace_set_filter(struct ftrace_ops *ops, unsigned char *buf,\n\t\t       int len, int reset)\n{\n\tftrace_ops_init(ops);\n\treturn ftrace_set_regex(ops, buf, len, reset, 1);\n}\nEXPORT_SYMBOL_GPL(ftrace_set_filter);\n\n\nint ftrace_set_notrace(struct ftrace_ops *ops, unsigned char *buf,\n\t\t\tint len, int reset)\n{\n\tftrace_ops_init(ops);\n\treturn ftrace_set_regex(ops, buf, len, reset, 0);\n}\nEXPORT_SYMBOL_GPL(ftrace_set_notrace);\n\nvoid ftrace_set_global_filter(unsigned char *buf, int len, int reset)\n{\n\tftrace_set_regex(&global_ops, buf, len, reset, 1);\n}\nEXPORT_SYMBOL_GPL(ftrace_set_global_filter);\n\n\nvoid ftrace_set_global_notrace(unsigned char *buf, int len, int reset)\n{\n\tftrace_set_regex(&global_ops, buf, len, reset, 0);\n}\nEXPORT_SYMBOL_GPL(ftrace_set_global_notrace);\n\n\n#define FTRACE_FILTER_SIZE\t\tCOMMAND_LINE_SIZE\nstatic char ftrace_notrace_buf[FTRACE_FILTER_SIZE] __initdata;\nstatic char ftrace_filter_buf[FTRACE_FILTER_SIZE] __initdata;\n\n\nbool ftrace_filter_param __initdata;\n\nstatic int __init set_ftrace_notrace(char *str)\n{\n\tftrace_filter_param = true;\n\tstrlcpy(ftrace_notrace_buf, str, FTRACE_FILTER_SIZE);\n\treturn 1;\n}\n__setup(\"", "854": "\");\n\n\tprint_circular_bug_entry(entry, depth);\n\n\treturn 0;\n}\n\nstatic inline int class_equal(struct lock_list *entry, void *data)\n{\n\treturn entry->class == data;\n}\n\nstatic noinline int print_circular_bug(struct lock_list *this,\n\t\t\t\tstruct lock_list *target,\n\t\t\t\tstruct held_lock *check_src,\n\t\t\t\tstruct held_lock *check_tgt)\n{\n\tstruct task_struct *curr = current;\n\tstruct lock_list *parent;\n\tstruct lock_list *first_parent;\n\tint depth;\n\n\tif (!debug_locks_off_graph_unlock() || debug_locks_silent)\n\t\treturn 0;\n\n\tif (!save_trace(&this->trace))\n\t\treturn 0;\n\n\tdepth = get_lock_depth(target);\n\n\tprint_circular_bug_header(target, depth, check_src, check_tgt);\n\n\tparent = get_lock_parent(target);\n\tfirst_parent = parent;\n\n\twhile (parent) {\n\t\tprint_circular_bug_entry(parent, --depth);\n\t\tparent = get_lock_parent(parent);\n\t}\n\n\tprintk(\"", "855": "\");\n\n\tprint_stack_trace(forwards_entry->class->usage_traces + bit2, 1);\n\n\tprintk(\"", "856": "\");\n\n\tprintk(\"", "857": "\");\n\n\treturn 0;\n}\n\nearly_param(\"", "858": "\");\n\n\treturn count;\n}\n\n\nstatic DEVICE_ATTR(current_clocksource, 0644, sysfs_show_current_clocksources,\n\t\t   sysfs_override_clocksource);\n\nstatic DEVICE_ATTR(unbind_clocksource, 0200, NULL, sysfs_unbind_clocksource);\n\nstatic DEVICE_ATTR(available_clocksource, 0444,\n\t\t   sysfs_show_available_clocksources, NULL);\n\nstatic struct bus_type clocksource_subsys = {\n\t.name = \"", "859": "\");\n\n\treturn ret;\n}\n__initcall(init_tracepoints);\n#endif \n\nstatic void for_each_tracepoint_range(struct tracepoint * const *begin,\n\t\tstruct tracepoint * const *end,\n\t\tvoid (*fct)(struct tracepoint *tp, void *priv),\n\t\tvoid *priv)\n{\n\tstruct tracepoint * const *iter;\n\n\tif (!begin)\n\t\treturn;\n\tfor (iter = begin; iter < end; iter++)\n\t\tfct(*iter, priv);\n}\n\n\nvoid for_each_kernel_tracepoint(void (*fct)(struct tracepoint *tp, void *priv),\n\t\tvoid *priv)\n{\n\tfor_each_tracepoint_range(__start___tracepoints_ptrs,\n\t\t__stop___tracepoints_ptrs, fct, priv);\n}\nEXPORT_SYMBOL_GPL(for_each_kernel_tracepoint);\n\n#ifdef CONFIG_HAVE_SYSCALL_TRACEPOINTS\n\n\nstatic int sys_tracepoint_refcount;\n\nvoid syscall_regfunc(void)\n{\n\tstruct task_struct *p, *t;\n\n\tif (!sys_tracepoint_refcount) {\n\t\tread_lock(&tasklist_lock);\n\t\tfor_each_process_thread(p, t) {\n\t\t\tset_tsk_thread_flag(t, TIF_SYSCALL_TRACEPOINT);\n\t\t}\n\t\tread_unlock(&tasklist_lock);\n\t}\n\tsys_tracepoint_refcount++;\n}\n\nvoid syscall_unregfunc(void)\n{\n\tstruct task_struct *p, *t;\n\n\tsys_tracepoint_refcount--;\n\tif (!sys_tracepoint_refcount) {\n\t\tread_lock(&tasklist_lock);\n\t\tfor_each_process_thread(p, t) {\n\t\t\tclear_tsk_thread_flag(t, TIF_SYSCALL_TRACEPOINT);\n\t\t}\n\t\tread_unlock(&tasklist_lock);\n\t}\n}\n#endif\n\n#include <linux/cred.h>\n#include <linux/export.h>\n#include <linux/slab.h>\n#include <linux/security.h>\n#include <linux/syscalls.h>\n#include <linux/user_namespace.h>\n#include <asm/uaccess.h>\n\nstruct group_info *groups_alloc(int gidsetsize)\n{\n\tstruct group_info *group_info;\n\tint nblocks;\n\tint i;\n\n\tnblocks = (gidsetsize + NGROUPS_PER_BLOCK - 1) / NGROUPS_PER_BLOCK;\n\t\n\tnblocks = nblocks ? : 1;\n\tgroup_info = kmalloc(sizeof(*group_info) + nblocks*sizeof(gid_t *), GFP_USER);\n\tif (!group_info)\n\t\treturn NULL;\n\tgroup_info->ngroups = gidsetsize;\n\tgroup_info->nblocks = nblocks;\n\tatomic_set(&group_info->usage, 1);\n\n\tif (gidsetsize <= NGROUPS_SMALL)\n\t\tgroup_info->blocks[0] = group_info->small_block;\n\telse {\n\t\tfor (i = 0; i < nblocks; i++) {\n\t\t\tkgid_t *b;\n\t\t\tb = (void *)__get_free_page(GFP_USER);\n\t\t\tif (!b)\n\t\t\t\tgoto out_undo_partial_alloc;\n\t\t\tgroup_info->blocks[i] = b;\n\t\t}\n\t}\n\treturn group_info;\n\nout_undo_partial_alloc:\n\twhile (--i >= 0) {\n\t\tfree_page((unsigned long)group_info->blocks[i]);\n\t}\n\tkfree(group_info);\n\treturn NULL;\n}\n\nEXPORT_SYMBOL(groups_alloc);\n\nvoid groups_free(struct group_info *group_info)\n{\n\tif (group_info->blocks[0] != group_info->small_block) {\n\t\tint i;\n\t\tfor (i = 0; i < group_info->nblocks; i++)\n\t\t\tfree_page((unsigned long)group_info->blocks[i]);\n\t}\n\tkfree(group_info);\n}\n\nEXPORT_SYMBOL(groups_free);\n\n\nstatic int groups_to_user(gid_t __user *grouplist,\n\t\t\t  const struct group_info *group_info)\n{\n\tstruct user_namespace *user_ns = current_user_ns();\n\tint i;\n\tunsigned int count = group_info->ngroups;\n\n\tfor (i = 0; i < count; i++) {\n\t\tgid_t gid;\n\t\tgid = from_kgid_munged(user_ns, GROUP_AT(group_info, i));\n\t\tif (put_user(gid, grouplist+i))\n\t\t\treturn -EFAULT;\n\t}\n\treturn 0;\n}\n\n\nstatic int groups_from_user(struct group_info *group_info,\n    gid_t __user *grouplist)\n{\n\tstruct user_namespace *user_ns = current_user_ns();\n\tint i;\n\tunsigned int count = group_info->ngroups;\n\n\tfor (i = 0; i < count; i++) {\n\t\tgid_t gid;\n\t\tkgid_t kgid;\n\t\tif (get_user(gid, grouplist+i))\n\t\t\treturn -EFAULT;\n\n\t\tkgid = make_kgid(user_ns, gid);\n\t\tif (!gid_valid(kgid))\n\t\t\treturn -EINVAL;\n\n\t\tGROUP_AT(group_info, i) = kgid;\n\t}\n\treturn 0;\n}\n\n\nstatic void groups_sort(struct group_info *group_info)\n{\n\tint base, max, stride;\n\tint gidsetsize = group_info->ngroups;\n\n\tfor (stride = 1; stride < gidsetsize; stride = 3 * stride + 1)\n\t\t; \n\tstride /= 3;\n\n\twhile (stride) {\n\t\tmax = gidsetsize - stride;\n\t\tfor (base = 0; base < max; base++) {\n\t\t\tint left = base;\n\t\t\tint right = left + stride;\n\t\t\tkgid_t tmp = GROUP_AT(group_info, right);\n\n\t\t\twhile (left >= 0 && gid_gt(GROUP_AT(group_info, left), tmp)) {\n\t\t\t\tGROUP_AT(group_info, right) =\n\t\t\t\t    GROUP_AT(group_info, left);\n\t\t\t\tright = left;\n\t\t\t\tleft -= stride;\n\t\t\t}\n\t\t\tGROUP_AT(group_info, right) = tmp;\n\t\t}\n\t\tstride /= 3;\n\t}\n}\n\n\nint groups_search(const struct group_info *group_info, kgid_t grp)\n{\n\tunsigned int left, right;\n\n\tif (!group_info)\n\t\treturn 0;\n\n\tleft = 0;\n\tright = group_info->ngroups;\n\twhile (left < right) {\n\t\tunsigned int mid = (left+right)/2;\n\t\tif (gid_gt(grp, GROUP_AT(group_info, mid)))\n\t\t\tleft = mid + 1;\n\t\telse if (gid_lt(grp, GROUP_AT(group_info, mid)))\n\t\t\tright = mid;\n\t\telse\n\t\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n\nvoid set_groups(struct cred *new, struct group_info *group_info)\n{\n\tput_group_info(new->group_info);\n\tgroups_sort(group_info);\n\tget_group_info(group_info);\n\tnew->group_info = group_info;\n}\n\nEXPORT_SYMBOL(set_groups);\n\n\nint set_current_groups(struct group_info *group_info)\n{\n\tstruct cred *new;\n\n\tnew = prepare_creds();\n\tif (!new)\n\t\treturn -ENOMEM;\n\n\tset_groups(new, group_info);\n\treturn commit_creds(new);\n}\n\nEXPORT_SYMBOL(set_current_groups);\n\nSYSCALL_DEFINE2(getgroups, int, gidsetsize, gid_t __user *, grouplist)\n{\n\tconst struct cred *cred = current_cred();\n\tint i;\n\n\tif (gidsetsize < 0)\n\t\treturn -EINVAL;\n\n\t\n\ti = cred->group_info->ngroups;\n\tif (gidsetsize) {\n\t\tif (i > gidsetsize) {\n\t\t\ti = -EINVAL;\n\t\t\tgoto out;\n\t\t}\n\t\tif (groups_to_user(grouplist, cred->group_info)) {\n\t\t\ti = -EFAULT;\n\t\t\tgoto out;\n\t\t}\n\t}\nout:\n\treturn i;\n}\n\nbool may_setgroups(void)\n{\n\tstruct user_namespace *user_ns = current_user_ns();\n\n\treturn ns_capable(user_ns, CAP_SETGID) &&\n\t\tuserns_may_setgroups(user_ns);\n}\n\n\n\nSYSCALL_DEFINE2(setgroups, int, gidsetsize, gid_t __user *, grouplist)\n{\n\tstruct group_info *group_info;\n\tint retval;\n\n\tif (!may_setgroups())\n\t\treturn -EPERM;\n\tif ((unsigned)gidsetsize > NGROUPS_MAX)\n\t\treturn -EINVAL;\n\n\tgroup_info = groups_alloc(gidsetsize);\n\tif (!group_info)\n\t\treturn -ENOMEM;\n\tretval = groups_from_user(group_info, grouplist);\n\tif (retval) {\n\t\tput_group_info(group_info);\n\t\treturn retval;\n\t}\n\n\tretval = set_current_groups(group_info);\n\tput_group_info(group_info);\n\n\treturn retval;\n}\n\n\nint in_group_p(kgid_t grp)\n{\n\tconst struct cred *cred = current_cred();\n\tint retval = 1;\n\n\tif (!gid_eq(grp, cred->fsgid))\n\t\tretval = groups_search(cred->group_info, grp);\n\treturn retval;\n}\n\nEXPORT_SYMBOL(in_group_p);\n\nint in_egroup_p(kgid_t grp)\n{\n\tconst struct cred *cred = current_cred();\n\tint retval = 1;\n\n\tif (!gid_eq(grp, cred->egid))\n\t\tretval = groups_search(cred->group_info, grp);\n\treturn retval;\n}\n\nEXPORT_SYMBOL(in_egroup_p);\n\n\n#include <linux/module.h>\n#include <linux/uaccess.h>\n\n#include \"", "860": "\");\n\n\tseq_puts(m, \"", "861": "\");\n\n\n\n\n#include <linux/irqflags.h>\n#include <linux/kallsyms.h>\n#include <linux/notifier.h>\n#include <linux/kprobes.h>\n#include <linux/kdebug.h>\n#include <linux/kernel.h>\n#include <linux/module.h>\n#include <linux/percpu.h>\n#include <linux/sched.h>\n#include <linux/init.h>\n#include <linux/slab.h>\n#include <linux/list.h>\n#include <linux/cpu.h>\n#include <linux/smp.h>\n\n#include <linux/hw_breakpoint.h>\n\nstruct bp_cpuinfo {\n\t\n\tunsigned int\tcpu_pinned;\n\t\n\tunsigned int\t*tsk_pinned;\n\t\n\tunsigned int\tflexible; \n};\n\nstatic DEFINE_PER_CPU(struct bp_cpuinfo, bp_cpuinfo[TYPE_MAX]);\nstatic int nr_slots[TYPE_MAX];\n\nstatic struct bp_cpuinfo *get_bp_info(int cpu, enum bp_type_idx type)\n{\n\treturn per_cpu_ptr(bp_cpuinfo + type, cpu);\n}\n\n\nstatic LIST_HEAD(bp_task_head);\n\nstatic int constraints_initialized;\n\n\nstruct bp_busy_slots {\n\tunsigned int pinned;\n\tunsigned int flexible;\n};\n\n\nstatic DEFINE_MUTEX(nr_bp_mutex);\n\n__weak int hw_breakpoint_weight(struct perf_event *bp)\n{\n\treturn 1;\n}\n\nstatic inline enum bp_type_idx find_slot_idx(struct perf_event *bp)\n{\n\tif (bp->attr.bp_type & HW_BREAKPOINT_RW)\n\t\treturn TYPE_DATA;\n\n\treturn TYPE_INST;\n}\n\n\nstatic unsigned int max_task_bp_pinned(int cpu, enum bp_type_idx type)\n{\n\tunsigned int *tsk_pinned = get_bp_info(cpu, type)->tsk_pinned;\n\tint i;\n\n\tfor (i = nr_slots[type] - 1; i >= 0; i--) {\n\t\tif (tsk_pinned[i] > 0)\n\t\t\treturn i + 1;\n\t}\n\n\treturn 0;\n}\n\n\nstatic int task_bp_pinned(int cpu, struct perf_event *bp, enum bp_type_idx type)\n{\n\tstruct task_struct *tsk = bp->hw.target;\n\tstruct perf_event *iter;\n\tint count = 0;\n\n\tlist_for_each_entry(iter, &bp_task_head, hw.bp_list) {\n\t\tif (iter->hw.target == tsk &&\n\t\t    find_slot_idx(iter) == type &&\n\t\t    (iter->cpu < 0 || cpu == iter->cpu))\n\t\t\tcount += hw_breakpoint_weight(iter);\n\t}\n\n\treturn count;\n}\n\nstatic const struct cpumask *cpumask_of_bp(struct perf_event *bp)\n{\n\tif (bp->cpu >= 0)\n\t\treturn cpumask_of(bp->cpu);\n\treturn cpu_possible_mask;\n}\n\n\nstatic void\nfetch_bp_busy_slots(struct bp_busy_slots *slots, struct perf_event *bp,\n\t\t    enum bp_type_idx type)\n{\n\tconst struct cpumask *cpumask = cpumask_of_bp(bp);\n\tint cpu;\n\n\tfor_each_cpu(cpu, cpumask) {\n\t\tstruct bp_cpuinfo *info = get_bp_info(cpu, type);\n\t\tint nr;\n\n\t\tnr = info->cpu_pinned;\n\t\tif (!bp->hw.target)\n\t\t\tnr += max_task_bp_pinned(cpu, type);\n\t\telse\n\t\t\tnr += task_bp_pinned(cpu, bp, type);\n\n\t\tif (nr > slots->pinned)\n\t\t\tslots->pinned = nr;\n\n\t\tnr = info->flexible;\n\t\tif (nr > slots->flexible)\n\t\t\tslots->flexible = nr;\n\t}\n}\n\n\nstatic void\nfetch_this_slot(struct bp_busy_slots *slots, int weight)\n{\n\tslots->pinned += weight;\n}\n\n\nstatic void toggle_bp_task_slot(struct perf_event *bp, int cpu,\n\t\t\t\tenum bp_type_idx type, int weight)\n{\n\tunsigned int *tsk_pinned = get_bp_info(cpu, type)->tsk_pinned;\n\tint old_idx, new_idx;\n\n\told_idx = task_bp_pinned(cpu, bp, type) - 1;\n\tnew_idx = old_idx + weight;\n\n\tif (old_idx >= 0)\n\t\ttsk_pinned[old_idx]--;\n\tif (new_idx >= 0)\n\t\ttsk_pinned[new_idx]++;\n}\n\n\nstatic void\ntoggle_bp_slot(struct perf_event *bp, bool enable, enum bp_type_idx type,\n\t       int weight)\n{\n\tconst struct cpumask *cpumask = cpumask_of_bp(bp);\n\tint cpu;\n\n\tif (!enable)\n\t\tweight = -weight;\n\n\t\n\tif (!bp->hw.target) {\n\t\tget_bp_info(bp->cpu, type)->cpu_pinned += weight;\n\t\treturn;\n\t}\n\n\t\n\tfor_each_cpu(cpu, cpumask)\n\t\ttoggle_bp_task_slot(bp, cpu, type, weight);\n\n\tif (enable)\n\t\tlist_add_tail(&bp->hw.bp_list, &bp_task_head);\n\telse\n\t\tlist_del(&bp->hw.bp_list);\n}\n\n\n__weak void arch_unregister_hw_breakpoint(struct perf_event *bp)\n{\n\t\n}\n\n\nstatic int __reserve_bp_slot(struct perf_event *bp)\n{\n\tstruct bp_busy_slots slots = {0};\n\tenum bp_type_idx type;\n\tint weight;\n\n\t\n\tif (!constraints_initialized)\n\t\treturn -ENOMEM;\n\n\t\n\tif (bp->attr.bp_type == HW_BREAKPOINT_EMPTY ||\n\t    bp->attr.bp_type == HW_BREAKPOINT_INVALID)\n\t\treturn -EINVAL;\n\n\ttype = find_slot_idx(bp);\n\tweight = hw_breakpoint_weight(bp);\n\n\tfetch_bp_busy_slots(&slots, bp, type);\n\t\n\tfetch_this_slot(&slots, weight);\n\n\t\n\tif (slots.pinned + (!!slots.flexible) > nr_slots[type])\n\t\treturn -ENOSPC;\n\n\ttoggle_bp_slot(bp, true, type, weight);\n\n\treturn 0;\n}\n\nint reserve_bp_slot(struct perf_event *bp)\n{\n\tint ret;\n\n\tmutex_lock(&nr_bp_mutex);\n\n\tret = __reserve_bp_slot(bp);\n\n\tmutex_unlock(&nr_bp_mutex);\n\n\treturn ret;\n}\n\nstatic void __release_bp_slot(struct perf_event *bp)\n{\n\tenum bp_type_idx type;\n\tint weight;\n\n\ttype = find_slot_idx(bp);\n\tweight = hw_breakpoint_weight(bp);\n\ttoggle_bp_slot(bp, false, type, weight);\n}\n\nvoid release_bp_slot(struct perf_event *bp)\n{\n\tmutex_lock(&nr_bp_mutex);\n\n\tarch_unregister_hw_breakpoint(bp);\n\t__release_bp_slot(bp);\n\n\tmutex_unlock(&nr_bp_mutex);\n}\n\n\nint dbg_reserve_bp_slot(struct perf_event *bp)\n{\n\tif (mutex_is_locked(&nr_bp_mutex))\n\t\treturn -1;\n\n\treturn __reserve_bp_slot(bp);\n}\n\nint dbg_release_bp_slot(struct perf_event *bp)\n{\n\tif (mutex_is_locked(&nr_bp_mutex))\n\t\treturn -1;\n\n\t__release_bp_slot(bp);\n\n\treturn 0;\n}\n\nstatic int validate_hw_breakpoint(struct perf_event *bp)\n{\n\tint ret;\n\n\tret = arch_validate_hwbkpt_settings(bp);\n\tif (ret)\n\t\treturn ret;\n\n\tif (arch_check_bp_in_kernelspace(bp)) {\n\t\tif (bp->attr.exclude_kernel)\n\t\t\treturn -EINVAL;\n\t\t\n\t\tif (!capable(CAP_SYS_ADMIN))\n\t\t\treturn -EPERM;\n\t}\n\n\treturn 0;\n}\n\nint register_perf_hw_breakpoint(struct perf_event *bp)\n{\n\tint ret;\n\n\tret = reserve_bp_slot(bp);\n\tif (ret)\n\t\treturn ret;\n\n\tret = validate_hw_breakpoint(bp);\n\n\t\n\tif (ret)\n\t\trelease_bp_slot(bp);\n\n\treturn ret;\n}\n\n\nstruct perf_event *\nregister_user_hw_breakpoint(struct perf_event_attr *attr,\n\t\t\t    perf_overflow_handler_t triggered,\n\t\t\t    void *context,\n\t\t\t    struct task_struct *tsk)\n{\n\treturn perf_event_create_kernel_counter(attr, -1, tsk, triggered,\n\t\t\t\t\t\tcontext);\n}\nEXPORT_SYMBOL_GPL(register_user_hw_breakpoint);\n\n\nint modify_user_hw_breakpoint(struct perf_event *bp, struct perf_event_attr *attr)\n{\n\tu64 old_addr = bp->attr.bp_addr;\n\tu64 old_len = bp->attr.bp_len;\n\tint old_type = bp->attr.bp_type;\n\tint err = 0;\n\n\t\n\tif (irqs_disabled() && bp->ctx && bp->ctx->task == current)\n\t\t__perf_event_disable(bp);\n\telse\n\t\tperf_event_disable(bp);\n\n\tbp->attr.bp_addr = attr->bp_addr;\n\tbp->attr.bp_type = attr->bp_type;\n\tbp->attr.bp_len = attr->bp_len;\n\n\tif (attr->disabled)\n\t\tgoto end;\n\n\terr = validate_hw_breakpoint(bp);\n\tif (!err)\n\t\tperf_event_enable(bp);\n\n\tif (err) {\n\t\tbp->attr.bp_addr = old_addr;\n\t\tbp->attr.bp_type = old_type;\n\t\tbp->attr.bp_len = old_len;\n\t\tif (!bp->attr.disabled)\n\t\t\tperf_event_enable(bp);\n\n\t\treturn err;\n\t}\n\nend:\n\tbp->attr.disabled = attr->disabled;\n\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(modify_user_hw_breakpoint);\n\n\nvoid unregister_hw_breakpoint(struct perf_event *bp)\n{\n\tif (!bp)\n\t\treturn;\n\tperf_event_release_kernel(bp);\n}\nEXPORT_SYMBOL_GPL(unregister_hw_breakpoint);\n\n\nstruct perf_event * __percpu *\nregister_wide_hw_breakpoint(struct perf_event_attr *attr,\n\t\t\t    perf_overflow_handler_t triggered,\n\t\t\t    void *context)\n{\n\tstruct perf_event * __percpu *cpu_events, *bp;\n\tlong err = 0;\n\tint cpu;\n\n\tcpu_events = alloc_percpu(typeof(*cpu_events));\n\tif (!cpu_events)\n\t\treturn (void __percpu __force *)ERR_PTR(-ENOMEM);\n\n\tget_online_cpus();\n\tfor_each_online_cpu(cpu) {\n\t\tbp = perf_event_create_kernel_counter(attr, cpu, NULL,\n\t\t\t\t\t\t      triggered, context);\n\t\tif (IS_ERR(bp)) {\n\t\t\terr = PTR_ERR(bp);\n\t\t\tbreak;\n\t\t}\n\n\t\tper_cpu(*cpu_events, cpu) = bp;\n\t}\n\tput_online_cpus();\n\n\tif (likely(!err))\n\t\treturn cpu_events;\n\n\tunregister_wide_hw_breakpoint(cpu_events);\n\treturn (void __percpu __force *)ERR_PTR(err);\n}\nEXPORT_SYMBOL_GPL(register_wide_hw_breakpoint);\n\n\nvoid unregister_wide_hw_breakpoint(struct perf_event * __percpu *cpu_events)\n{\n\tint cpu;\n\n\tfor_each_possible_cpu(cpu)\n\t\tunregister_hw_breakpoint(per_cpu(*cpu_events, cpu));\n\n\tfree_percpu(cpu_events);\n}\nEXPORT_SYMBOL_GPL(unregister_wide_hw_breakpoint);\n\nstatic struct notifier_block hw_breakpoint_exceptions_nb = {\n\t.notifier_call = hw_breakpoint_exceptions_notify,\n\t\n\t.priority = 0x7fffffff\n};\n\nstatic void bp_perf_event_destroy(struct perf_event *event)\n{\n\trelease_bp_slot(event);\n}\n\nstatic int hw_breakpoint_event_init(struct perf_event *bp)\n{\n\tint err;\n\n\tif (bp->attr.type != PERF_TYPE_BREAKPOINT)\n\t\treturn -ENOENT;\n\n\t\n\tif (has_branch_stack(bp))\n\t\treturn -EOPNOTSUPP;\n\n\terr = register_perf_hw_breakpoint(bp);\n\tif (err)\n\t\treturn err;\n\n\tbp->destroy = bp_perf_event_destroy;\n\n\treturn 0;\n}\n\nstatic int hw_breakpoint_add(struct perf_event *bp, int flags)\n{\n\tif (!(flags & PERF_EF_START))\n\t\tbp->hw.state = PERF_HES_STOPPED;\n\n\tif (is_sampling_event(bp)) {\n\t\tbp->hw.last_period = bp->hw.sample_period;\n\t\tperf_swevent_set_period(bp);\n\t}\n\n\treturn arch_install_hw_breakpoint(bp);\n}\n\nstatic void hw_breakpoint_del(struct perf_event *bp, int flags)\n{\n\tarch_uninstall_hw_breakpoint(bp);\n}\n\nstatic void hw_breakpoint_start(struct perf_event *bp, int flags)\n{\n\tbp->hw.state = 0;\n}\n\nstatic void hw_breakpoint_stop(struct perf_event *bp, int flags)\n{\n\tbp->hw.state = PERF_HES_STOPPED;\n}\n\nstatic struct pmu perf_breakpoint = {\n\t.task_ctx_nr\t= perf_sw_context, \n\n\t.event_init\t= hw_breakpoint_event_init,\n\t.add\t\t= hw_breakpoint_add,\n\t.del\t\t= hw_breakpoint_del,\n\t.start\t\t= hw_breakpoint_start,\n\t.stop\t\t= hw_breakpoint_stop,\n\t.read\t\t= hw_breakpoint_pmu_read,\n};\n\nint __init init_hw_breakpoint(void)\n{\n\tint cpu, err_cpu;\n\tint i;\n\n\tfor (i = 0; i < TYPE_MAX; i++)\n\t\tnr_slots[i] = hw_breakpoint_slots(i);\n\n\tfor_each_possible_cpu(cpu) {\n\t\tfor (i = 0; i < TYPE_MAX; i++) {\n\t\t\tstruct bp_cpuinfo *info = get_bp_info(cpu, i);\n\n\t\t\tinfo->tsk_pinned = kcalloc(nr_slots[i], sizeof(int),\n\t\t\t\t\t\t\tGFP_KERNEL);\n\t\t\tif (!info->tsk_pinned)\n\t\t\t\tgoto err_alloc;\n\t\t}\n\t}\n\n\tconstraints_initialized = 1;\n\n\tperf_pmu_register(&perf_breakpoint, \"", "862": "\");\n\n\nvoid suspend_console(void)\n{\n\tif (!console_suspend_enabled)\n\t\treturn;\n\tprintk(\"", "863": "\");\n\n out_enable:\n\ttrace_flags |= old_userobj;\n\n\tfor_each_tracing_cpu(cpu) {\n\t\tatomic_dec(&per_cpu_ptr(iter.trace_buffer->data, cpu)->disabled);\n\t}\n \tatomic_dec(&dump_running);\n\tlocal_irq_restore(flags);\n}\nEXPORT_SYMBOL_GPL(ftrace_dump);\n\n__init static int tracer_alloc_buffers(void)\n{\n\tint ring_buf_size;\n\tint ret = -ENOMEM;\n\n\tif (!alloc_cpumask_var(&tracing_buffer_mask, GFP_KERNEL))\n\t\tgoto out;\n\n\tif (!alloc_cpumask_var(&global_trace.tracing_cpumask, GFP_KERNEL))\n\t\tgoto out_free_buffer_mask;\n\n\t\n\tif (__stop___trace_bprintk_fmt != __start___trace_bprintk_fmt)\n\t\t\n\t\ttrace_printk_init_buffers();\n\n\t\n\tif (ring_buffer_expanded)\n\t\tring_buf_size = trace_buf_size;\n\telse\n\t\tring_buf_size = 1;\n\n\tcpumask_copy(tracing_buffer_mask, cpu_possible_mask);\n\tcpumask_copy(global_trace.tracing_cpumask, cpu_all_mask);\n\n\traw_spin_lock_init(&global_trace.start_lock);\n\n\t\n\ttemp_buffer = ring_buffer_alloc(PAGE_SIZE, RB_FL_OVERWRITE);\n\tif (!temp_buffer)\n\t\tgoto out_free_cpumask;\n\n\tif (trace_create_savedcmd() < 0)\n\t\tgoto out_free_temp_buffer;\n\n\t\n\tif (allocate_trace_buffers(&global_trace, ring_buf_size) < 0) {\n\t\tprintk(KERN_ERR \"", "864": "\");\n\n#ifdef CONFIG_BOOT_PRINTK_DELAY\n\nstatic int boot_delay; \nstatic unsigned long long loops_per_msec;\t\n\nstatic int __init boot_delay_setup(char *str)\n{\n\tunsigned long lpj;\n\n\tlpj = preset_lpj ? preset_lpj : 1000000;\t\n\tloops_per_msec = (unsigned long long)lpj / 1000 * HZ;\n\n\tget_option(&str, &boot_delay);\n\tif (boot_delay > 10 * 1000)\n\t\tboot_delay = 0;\n\n\tpr_debug(\"", "865": "\");\n\n#ifdef CONFIG_TRACER_SNAPSHOT\n\ttrace_create_file(\"", "866": "\");\n\nstatic void check_cpu_stall(struct rcu_ctrlblk *rcp)\n{\n\tunsigned long j;\n\tunsigned long js;\n\n\tif (rcu_cpu_stall_suppress)\n\t\treturn;\n\trcp->ticks_this_gp++;\n\tj = jiffies;\n\tjs = ACCESS_ONCE(rcp->jiffies_stall);\n\tif (rcp->rcucblist && ULONG_CMP_GE(j, js)) {\n\t\tpr_err(\"", "867": "\");\n#else\n\tseq_puts(m, \"", "868": "\");\n#endif\n\tfor (s = buf; *s; s++)\n\t\tif (isdigit(*s) || *s == ',')\n\t\t\tbreak;\n\tidx = simple_strtoul(s, NULL, 10);\n\t*s = 0;\n\n\t__add_preferred_console(buf, idx, options, brl_options);\n\tconsole_set_on_cmdline = 1;\n\treturn 1;\n}\n__setup(\"", "869": "\");\n#endif\n\tseq_puts(m, \"", "870": "\");\n#endif\n\nstatic int suspend_test(int level)\n{\n#ifdef CONFIG_PM_DEBUG\n\tif (pm_test_level == level) {\n\t\tprintk(KERN_INFO \"", "871": "\");\n#endif\n}\n#endif\n\nstatic inline void timer_list_header(struct seq_file *m, u64 now)\n{\n\tSEQ_printf(m, \"", "872": "\");\n#ifdef CONFIG_HIGH_RES_TIMERS\n\tSEQ_printf(m, \"", "873": "\");\n#ifdef CONFIG_RING_BUFFER_ALLOW_SWAP\n\tseq_puts(m, \"", "874": "\");\nMODULE_DESCRIPTION(\"", "875": "\");\nMODULE_LICENSE(\"", "876": "\");\n}\n\n\nstatic noinline int\nprint_circular_bug_header(struct lock_list *entry, unsigned int depth,\n\t\t\tstruct held_lock *check_src,\n\t\t\tstruct held_lock *check_tgt)\n{\n\tstruct task_struct *curr = current;\n\n\tif (debug_locks_silent)\n\t\treturn 0;\n\n\tprintk(\"", "877": "\");\n}\n\n#ifdef CONFIG_TRACER_MAX_TRACE\nstatic void show_snapshot_main_help(struct seq_file *m)\n{\n\tseq_puts(m, \"", "878": "\");\n}\n\nstatic int\nprint_bad_irq_dependency(struct task_struct *curr,\n\t\t\t struct lock_list *prev_root,\n\t\t\t struct lock_list *next_root,\n\t\t\t struct lock_list *backwards_entry,\n\t\t\t struct lock_list *forwards_entry,\n\t\t\t struct held_lock *prev,\n\t\t\t struct held_lock *next,\n\t\t\t enum lock_usage_bit bit1,\n\t\t\t enum lock_usage_bit bit2,\n\t\t\t const char *irqclass)\n{\n\tif (!debug_locks_off_graph_unlock() || debug_locks_silent)\n\t\treturn 0;\n\n\tprintk(\"", "879": "\");\n}\n\nstatic int timer_list_show(struct seq_file *m, void *v)\n{\n\tstruct timer_list_iter *iter = v;\n\n\tif (iter->cpu == -1 && !iter->second_pass)\n\t\ttimer_list_header(m, iter->now);\n\telse if (!iter->second_pass)\n\t\tprint_cpu(m, iter->cpu, iter->now);\n#ifdef CONFIG_GENERIC_CLOCKEVENTS\n\telse if (iter->cpu == -1 && iter->second_pass)\n\t\ttimer_list_show_tickdevices_header(m);\n\telse\n\t\tprint_tickdevice(m, tick_get_device(iter->cpu), iter->cpu);\n#endif\n\treturn 0;\n}\n\nvoid sysrq_timer_list_show(void)\n{\n\tu64 now = ktime_to_ns(ktime_get());\n\tint cpu;\n\n\ttimer_list_header(NULL, now);\n\n\tfor_each_online_cpu(cpu)\n\t\tprint_cpu(NULL, cpu, now);\n\n#ifdef CONFIG_GENERIC_CLOCKEVENTS\n\ttimer_list_show_tickdevices_header(NULL);\n\tfor_each_online_cpu(cpu)\n\t\tprint_tickdevice(NULL, tick_get_device(cpu), cpu);\n#endif\n\treturn;\n}\n\nstatic void *move_iter(struct timer_list_iter *iter, loff_t offset)\n{\n\tfor (; offset; offset--) {\n\t\titer->cpu = cpumask_next(iter->cpu, cpu_online_mask);\n\t\tif (iter->cpu >= nr_cpu_ids) {\n#ifdef CONFIG_GENERIC_CLOCKEVENTS\n\t\t\tif (!iter->second_pass) {\n\t\t\t\titer->cpu = -1;\n\t\t\t\titer->second_pass = true;\n\t\t\t} else\n\t\t\t\treturn NULL;\n#else\n\t\t\treturn NULL;\n#endif\n\t\t}\n\t}\n\treturn iter;\n}\n\nstatic void *timer_list_start(struct seq_file *file, loff_t *offset)\n{\n\tstruct timer_list_iter *iter = file->private;\n\n\tif (!*offset)\n\t\titer->now = ktime_to_ns(ktime_get());\n\titer->cpu = -1;\n\titer->second_pass = false;\n\treturn move_iter(iter, *offset);\n}\n\nstatic void *timer_list_next(struct seq_file *file, void *v, loff_t *offset)\n{\n\tstruct timer_list_iter *iter = file->private;\n\t++*offset;\n\treturn move_iter(iter, 1);\n}\n\nstatic void timer_list_stop(struct seq_file *seq, void *v)\n{\n}\n\nstatic const struct seq_operations timer_list_sops = {\n\t.start = timer_list_start,\n\t.next = timer_list_next,\n\t.stop = timer_list_stop,\n\t.show = timer_list_show,\n};\n\nstatic int timer_list_open(struct inode *inode, struct file *filp)\n{\n\treturn seq_open_private(filp, &timer_list_sops,\n\t\t\tsizeof(struct timer_list_iter));\n}\n\nstatic const struct file_operations timer_list_fops = {\n\t.open\t\t= timer_list_open,\n\t.read\t\t= seq_read,\n\t.llseek\t\t= seq_lseek,\n\t.release\t= seq_release_private,\n};\n\nstatic int __init init_timer_list_procfs(void)\n{\n\tstruct proc_dir_entry *pe;\n\n\tpe = proc_create(\"", "880": "\");\n}\n\nstatic void __clocksource_unstable(struct clocksource *cs)\n{\n\tcs->flags &= ~(CLOCK_SOURCE_VALID_FOR_HRES | CLOCK_SOURCE_WATCHDOG);\n\tcs->flags |= CLOCK_SOURCE_UNSTABLE;\n\tif (finished_booting)\n\t\tschedule_work(&watchdog_work);\n}\n\n\nvoid clocksource_mark_unstable(struct clocksource *cs)\n{\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&watchdog_lock, flags);\n\tif (!(cs->flags & CLOCK_SOURCE_UNSTABLE)) {\n\t\tif (list_empty(&cs->wd_list))\n\t\t\tlist_add(&cs->wd_list, &watchdog_list);\n\t\t__clocksource_unstable(cs);\n\t}\n\tspin_unlock_irqrestore(&watchdog_lock, flags);\n}\n\nstatic void clocksource_watchdog(unsigned long data)\n{\n\tstruct clocksource *cs;\n\tcycle_t csnow, wdnow, cslast, wdlast, delta;\n\tint64_t wd_nsec, cs_nsec;\n\tint next_cpu, reset_pending;\n\n\tspin_lock(&watchdog_lock);\n\tif (!watchdog_running)\n\t\tgoto out;\n\n\treset_pending = atomic_read(&watchdog_reset_pending);\n\n\tlist_for_each_entry(cs, &watchdog_list, wd_list) {\n\n\t\t\n\t\tif (cs->flags & CLOCK_SOURCE_UNSTABLE) {\n\t\t\tif (finished_booting)\n\t\t\t\tschedule_work(&watchdog_work);\n\t\t\tcontinue;\n\t\t}\n\n\t\tlocal_irq_disable();\n\t\tcsnow = cs->read(cs);\n\t\twdnow = watchdog->read(watchdog);\n\t\tlocal_irq_enable();\n\n\t\t\n\t\tif (!(cs->flags & CLOCK_SOURCE_WATCHDOG) ||\n\t\t    atomic_read(&watchdog_reset_pending)) {\n\t\t\tcs->flags |= CLOCK_SOURCE_WATCHDOG;\n\t\t\tcs->wd_last = wdnow;\n\t\t\tcs->cs_last = csnow;\n\t\t\tcontinue;\n\t\t}\n\n\t\tdelta = clocksource_delta(wdnow, cs->wd_last, watchdog->mask);\n\t\twd_nsec = clocksource_cyc2ns(delta, watchdog->mult,\n\t\t\t\t\t     watchdog->shift);\n\n\t\tdelta = clocksource_delta(csnow, cs->cs_last, cs->mask);\n\t\tcs_nsec = clocksource_cyc2ns(delta, cs->mult, cs->shift);\n\t\twdlast = cs->wd_last; \n\t\tcslast = cs->cs_last;\n\t\tcs->cs_last = csnow;\n\t\tcs->wd_last = wdnow;\n\n\t\tif (atomic_read(&watchdog_reset_pending))\n\t\t\tcontinue;\n\n\t\t\n\t\tif ((abs(cs_nsec - wd_nsec) > WATCHDOG_THRESHOLD)) {\n\t\t\tpr_warn(\"", "881": "\");\n}\n\nstatic void print_event_info(struct trace_buffer *buf, struct seq_file *m)\n{\n\tunsigned long total;\n\tunsigned long entries;\n\n\tget_total_entries(buf, &total, &entries);\n\tseq_printf(m, \"", "882": "\");\n}\n\nstatic void print_func_help_header(struct trace_buffer *buf, struct seq_file *m)\n{\n\tprint_event_info(buf, m);\n\tseq_puts(m, \"", "883": "\");\n}\n\nstatic void print_func_help_header_irq(struct trace_buffer *buf, struct seq_file *m)\n{\n\tprint_event_info(buf, m);\n\tseq_puts(m, \"", "884": "\");\n}\n\nstatic void print_snapshot_help(struct seq_file *m, struct trace_iterator *iter)\n{\n\tif (iter->tr->allocated_snapshot)\n\t\tseq_puts(m, \"", "885": "\");\n}\n\nstatic void show_snapshot_percpu_help(struct seq_file *m)\n{\n\tseq_puts(m, \"", "886": "\");\n}\n\nstatic void test_cpu_buff_start(struct trace_iterator *iter)\n{\n\tstruct trace_seq *s = &iter->seq;\n\n\tif (!(trace_flags & TRACE_ITER_ANNOTATE))\n\t\treturn;\n\n\tif (!(iter->iter_flags & TRACE_FILE_ANNOTATE))\n\t\treturn;\n\n\tif (cpumask_test_cpu(iter->cpu, iter->started))\n\t\treturn;\n\n\tif (per_cpu_ptr(iter->trace_buffer->data, iter->cpu)->skipped_entries)\n\t\treturn;\n\n\tcpumask_set_cpu(iter->cpu, iter->started);\n\n\t\n\tif (iter->idx > 1)\n\t\ttrace_seq_printf(s, \"", "887": "\");\n}\n\nstatic void timer_list_show_tickdevices_header(struct seq_file *m)\n{\n#ifdef CONFIG_GENERIC_CLOCKEVENTS_BROADCAST\n\tprint_tickdevice(m, tick_get_broadcast_device(), -1);\n\tSEQ_printf(m, \"", "888": "\");\n}\n\nvoid\nprint_trace_header(struct seq_file *m, struct trace_iterator *iter)\n{\n\tunsigned long sym_flags = (trace_flags & TRACE_ITER_SYM_MASK);\n\tstruct trace_buffer *buf = iter->trace_buffer;\n\tstruct trace_array_cpu *data = per_cpu_ptr(buf->data, buf->cpu);\n\tstruct tracer *type = iter->trace;\n\tunsigned long entries;\n\tunsigned long total;\n\tconst char *name = \"", "889": "\");\n}\n\nvoid trace_find_cmdline(int pid, char comm[])\n{\n\tpreempt_disable();\n\tarch_spin_lock(&trace_cmdline_lock);\n\n\t__trace_find_cmdline(pid, comm);\n\n\tarch_spin_unlock(&trace_cmdline_lock);\n\tpreempt_enable();\n}\n\nvoid tracing_record_cmdline(struct task_struct *tsk)\n{\n\tif (atomic_read(&trace_record_cmdline_disabled) || !tracing_is_on())\n\t\treturn;\n\n\tif (!__this_cpu_read(trace_cmdline_save))\n\t\treturn;\n\n\tif (trace_save_cmdline(tsk))\n\t\t__this_cpu_write(trace_cmdline_save, false);\n}\n\nvoid\ntracing_generic_entry_update(struct trace_entry *entry, unsigned long flags,\n\t\t\t     int pc)\n{\n\tstruct task_struct *tsk = current;\n\n\tentry->preempt_count\t\t= pc & 0xff;\n\tentry->pid\t\t\t= (tsk) ? tsk->pid : 0;\n\tentry->flags =\n#ifdef CONFIG_TRACE_IRQFLAGS_SUPPORT\n\t\t(irqs_disabled_flags(flags) ? TRACE_FLAG_IRQS_OFF : 0) |\n#else\n\t\tTRACE_FLAG_IRQS_NOSUPPORT |\n#endif\n\t\t((pc & HARDIRQ_MASK) ? TRACE_FLAG_HARDIRQ : 0) |\n\t\t((pc & SOFTIRQ_MASK) ? TRACE_FLAG_SOFTIRQ : 0) |\n\t\t(tif_need_resched() ? TRACE_FLAG_NEED_RESCHED : 0) |\n\t\t(test_preempt_need_resched() ? TRACE_FLAG_PREEMPT_RESCHED : 0);\n}\nEXPORT_SYMBOL_GPL(tracing_generic_entry_update);\n\nstruct ring_buffer_event *\ntrace_buffer_lock_reserve(struct ring_buffer *buffer,\n\t\t\t  int type,\n\t\t\t  unsigned long len,\n\t\t\t  unsigned long flags, int pc)\n{\n\tstruct ring_buffer_event *event;\n\n\tevent = ring_buffer_lock_reserve(buffer, len);\n\tif (event != NULL) {\n\t\tstruct trace_entry *ent = ring_buffer_event_data(event);\n\n\t\ttracing_generic_entry_update(ent, flags, pc);\n\t\tent->type = type;\n\t}\n\n\treturn event;\n}\n\nvoid\n__buffer_unlock_commit(struct ring_buffer *buffer, struct ring_buffer_event *event)\n{\n\t__this_cpu_write(trace_cmdline_save, true);\n\tring_buffer_unlock_commit(buffer, event);\n}\n\nstatic inline void\n__trace_buffer_unlock_commit(struct ring_buffer *buffer,\n\t\t\t     struct ring_buffer_event *event,\n\t\t\t     unsigned long flags, int pc)\n{\n\t__buffer_unlock_commit(buffer, event);\n\n\tftrace_trace_stack(buffer, flags, 6, pc);\n\tftrace_trace_userstack(buffer, flags, pc);\n}\n\nvoid trace_buffer_unlock_commit(struct ring_buffer *buffer,\n\t\t\t\tstruct ring_buffer_event *event,\n\t\t\t\tunsigned long flags, int pc)\n{\n\t__trace_buffer_unlock_commit(buffer, event, flags, pc);\n}\nEXPORT_SYMBOL_GPL(trace_buffer_unlock_commit);\n\nstatic struct ring_buffer *temp_buffer;\n\nstruct ring_buffer_event *\ntrace_event_buffer_lock_reserve(struct ring_buffer **current_rb,\n\t\t\t  struct ftrace_event_file *ftrace_file,\n\t\t\t  int type, unsigned long len,\n\t\t\t  unsigned long flags, int pc)\n{\n\tstruct ring_buffer_event *entry;\n\n\t*current_rb = ftrace_file->tr->trace_buffer.buffer;\n\tentry = trace_buffer_lock_reserve(*current_rb,\n\t\t\t\t\t type, len, flags, pc);\n\t\n\tif (!entry && ftrace_file->flags & FTRACE_EVENT_FL_TRIGGER_COND) {\n\t\t*current_rb = temp_buffer;\n\t\tentry = trace_buffer_lock_reserve(*current_rb,\n\t\t\t\t\t\t  type, len, flags, pc);\n\t}\n\treturn entry;\n}\nEXPORT_SYMBOL_GPL(trace_event_buffer_lock_reserve);\n\nstruct ring_buffer_event *\ntrace_current_buffer_lock_reserve(struct ring_buffer **current_rb,\n\t\t\t\t  int type, unsigned long len,\n\t\t\t\t  unsigned long flags, int pc)\n{\n\t*current_rb = global_trace.trace_buffer.buffer;\n\treturn trace_buffer_lock_reserve(*current_rb,\n\t\t\t\t\t type, len, flags, pc);\n}\nEXPORT_SYMBOL_GPL(trace_current_buffer_lock_reserve);\n\nvoid trace_current_buffer_unlock_commit(struct ring_buffer *buffer,\n\t\t\t\t\tstruct ring_buffer_event *event,\n\t\t\t\t\tunsigned long flags, int pc)\n{\n\t__trace_buffer_unlock_commit(buffer, event, flags, pc);\n}\nEXPORT_SYMBOL_GPL(trace_current_buffer_unlock_commit);\n\nvoid trace_buffer_unlock_commit_regs(struct ring_buffer *buffer,\n\t\t\t\t     struct ring_buffer_event *event,\n\t\t\t\t     unsigned long flags, int pc,\n\t\t\t\t     struct pt_regs *regs)\n{\n\t__buffer_unlock_commit(buffer, event);\n\n\tftrace_trace_stack_regs(buffer, flags, 0, pc, regs);\n\tftrace_trace_userstack(buffer, flags, pc);\n}\nEXPORT_SYMBOL_GPL(trace_buffer_unlock_commit_regs);\n\nvoid trace_current_buffer_discard_commit(struct ring_buffer *buffer,\n\t\t\t\t\t struct ring_buffer_event *event)\n{\n\tring_buffer_discard_commit(buffer, event);\n}\nEXPORT_SYMBOL_GPL(trace_current_buffer_discard_commit);\n\nvoid\ntrace_function(struct trace_array *tr,\n\t       unsigned long ip, unsigned long parent_ip, unsigned long flags,\n\t       int pc)\n{\n\tstruct ftrace_event_call *call = &event_function;\n\tstruct ring_buffer *buffer = tr->trace_buffer.buffer;\n\tstruct ring_buffer_event *event;\n\tstruct ftrace_entry *entry;\n\n\t\n\tif (unlikely(__this_cpu_read(ftrace_cpu_disabled)))\n\t\treturn;\n\n\tevent = trace_buffer_lock_reserve(buffer, TRACE_FN, sizeof(*entry),\n\t\t\t\t\t  flags, pc);\n\tif (!event)\n\t\treturn;\n\tentry\t= ring_buffer_event_data(event);\n\tentry->ip\t\t\t= ip;\n\tentry->parent_ip\t\t= parent_ip;\n\n\tif (!call_filter_check_discard(call, entry, buffer, event))\n\t\t__buffer_unlock_commit(buffer, event);\n}\n\n#ifdef CONFIG_STACKTRACE\n\n#define FTRACE_STACK_MAX_ENTRIES (PAGE_SIZE / sizeof(unsigned long))\nstruct ftrace_stack {\n\tunsigned long\t\tcalls[FTRACE_STACK_MAX_ENTRIES];\n};\n\nstatic DEFINE_PER_CPU(struct ftrace_stack, ftrace_stack);\nstatic DEFINE_PER_CPU(int, ftrace_stack_reserve);\n\nstatic void __ftrace_trace_stack(struct ring_buffer *buffer,\n\t\t\t\t unsigned long flags,\n\t\t\t\t int skip, int pc, struct pt_regs *regs)\n{\n\tstruct ftrace_event_call *call = &event_kernel_stack;\n\tstruct ring_buffer_event *event;\n\tstruct stack_entry *entry;\n\tstruct stack_trace trace;\n\tint use_stack;\n\tint size = FTRACE_STACK_ENTRIES;\n\n\ttrace.nr_entries\t= 0;\n\ttrace.skip\t\t= skip;\n\n\t\n\tpreempt_disable_notrace();\n\n\tuse_stack = __this_cpu_inc_return(ftrace_stack_reserve);\n\t\n\tbarrier();\n\tif (use_stack == 1) {\n\t\ttrace.entries\t\t= this_cpu_ptr(ftrace_stack.calls);\n\t\ttrace.max_entries\t= FTRACE_STACK_MAX_ENTRIES;\n\n\t\tif (regs)\n\t\t\tsave_stack_trace_regs(regs, &trace);\n\t\telse\n\t\t\tsave_stack_trace(&trace);\n\n\t\tif (trace.nr_entries > size)\n\t\t\tsize = trace.nr_entries;\n\t} else\n\t\t\n\t\tuse_stack = 0;\n\n\tsize *= sizeof(unsigned long);\n\n\tevent = trace_buffer_lock_reserve(buffer, TRACE_STACK,\n\t\t\t\t\t  sizeof(*entry) + size, flags, pc);\n\tif (!event)\n\t\tgoto out;\n\tentry = ring_buffer_event_data(event);\n\n\tmemset(&entry->caller, 0, size);\n\n\tif (use_stack)\n\t\tmemcpy(&entry->caller, trace.entries,\n\t\t       trace.nr_entries * sizeof(unsigned long));\n\telse {\n\t\ttrace.max_entries\t= FTRACE_STACK_ENTRIES;\n\t\ttrace.entries\t\t= entry->caller;\n\t\tif (regs)\n\t\t\tsave_stack_trace_regs(regs, &trace);\n\t\telse\n\t\t\tsave_stack_trace(&trace);\n\t}\n\n\tentry->size = trace.nr_entries;\n\n\tif (!call_filter_check_discard(call, entry, buffer, event))\n\t\t__buffer_unlock_commit(buffer, event);\n\n out:\n\t\n\tbarrier();\n\t__this_cpu_dec(ftrace_stack_reserve);\n\tpreempt_enable_notrace();\n\n}\n\nvoid ftrace_trace_stack_regs(struct ring_buffer *buffer, unsigned long flags,\n\t\t\t     int skip, int pc, struct pt_regs *regs)\n{\n\tif (!(trace_flags & TRACE_ITER_STACKTRACE))\n\t\treturn;\n\n\t__ftrace_trace_stack(buffer, flags, skip, pc, regs);\n}\n\nvoid ftrace_trace_stack(struct ring_buffer *buffer, unsigned long flags,\n\t\t\tint skip, int pc)\n{\n\tif (!(trace_flags & TRACE_ITER_STACKTRACE))\n\t\treturn;\n\n\t__ftrace_trace_stack(buffer, flags, skip, pc, NULL);\n}\n\nvoid __trace_stack(struct trace_array *tr, unsigned long flags, int skip,\n\t\t   int pc)\n{\n\t__ftrace_trace_stack(tr->trace_buffer.buffer, flags, skip, pc, NULL);\n}\n\n\nvoid trace_dump_stack(int skip)\n{\n\tunsigned long flags;\n\n\tif (tracing_disabled || tracing_selftest_running)\n\t\treturn;\n\n\tlocal_save_flags(flags);\n\n\t\n\tskip += 3;\n\t__ftrace_trace_stack(global_trace.trace_buffer.buffer,\n\t\t\t     flags, skip, preempt_count(), NULL);\n}\n\nstatic DEFINE_PER_CPU(int, user_stack_count);\n\nvoid\nftrace_trace_userstack(struct ring_buffer *buffer, unsigned long flags, int pc)\n{\n\tstruct ftrace_event_call *call = &event_user_stack;\n\tstruct ring_buffer_event *event;\n\tstruct userstack_entry *entry;\n\tstruct stack_trace trace;\n\n\tif (!(trace_flags & TRACE_ITER_USERSTACKTRACE))\n\t\treturn;\n\n\t\n\tif (unlikely(in_nmi()))\n\t\treturn;\n\n\t\n\tpreempt_disable();\n\tif (__this_cpu_read(user_stack_count))\n\t\tgoto out;\n\n\t__this_cpu_inc(user_stack_count);\n\n\tevent = trace_buffer_lock_reserve(buffer, TRACE_USER_STACK,\n\t\t\t\t\t  sizeof(*entry), flags, pc);\n\tif (!event)\n\t\tgoto out_drop_count;\n\tentry\t= ring_buffer_event_data(event);\n\n\tentry->tgid\t\t= current->tgid;\n\tmemset(&entry->caller, 0, sizeof(entry->caller));\n\n\ttrace.nr_entries\t= 0;\n\ttrace.max_entries\t= FTRACE_STACK_ENTRIES;\n\ttrace.skip\t\t= 0;\n\ttrace.entries\t\t= entry->caller;\n\n\tsave_stack_trace_user(&trace);\n\tif (!call_filter_check_discard(call, entry, buffer, event))\n\t\t__buffer_unlock_commit(buffer, event);\n\n out_drop_count:\n\t__this_cpu_dec(user_stack_count);\n out:\n\tpreempt_enable();\n}\n\n#ifdef UNUSED\nstatic void __trace_userstack(struct trace_array *tr, unsigned long flags)\n{\n\tftrace_trace_userstack(tr, flags, preempt_count());\n}\n#endif \n\n#endif \n\n\nstruct trace_buffer_struct {\n\tchar buffer[TRACE_BUF_SIZE];\n};\n\nstatic struct trace_buffer_struct *trace_percpu_buffer;\nstatic struct trace_buffer_struct *trace_percpu_sirq_buffer;\nstatic struct trace_buffer_struct *trace_percpu_irq_buffer;\nstatic struct trace_buffer_struct *trace_percpu_nmi_buffer;\n\n\nstatic char *get_trace_buf(void)\n{\n\tstruct trace_buffer_struct *percpu_buffer;\n\n\t\n\tif (in_nmi())\n\t\tpercpu_buffer = trace_percpu_nmi_buffer;\n\telse if (in_irq())\n\t\tpercpu_buffer = trace_percpu_irq_buffer;\n\telse if (in_softirq())\n\t\tpercpu_buffer = trace_percpu_sirq_buffer;\n\telse\n\t\tpercpu_buffer = trace_percpu_buffer;\n\n\tif (!percpu_buffer)\n\t\treturn NULL;\n\n\treturn this_cpu_ptr(&percpu_buffer->buffer[0]);\n}\n\nstatic int alloc_percpu_trace_buffer(void)\n{\n\tstruct trace_buffer_struct *buffers;\n\tstruct trace_buffer_struct *sirq_buffers;\n\tstruct trace_buffer_struct *irq_buffers;\n\tstruct trace_buffer_struct *nmi_buffers;\n\n\tbuffers = alloc_percpu(struct trace_buffer_struct);\n\tif (!buffers)\n\t\tgoto err_warn;\n\n\tsirq_buffers = alloc_percpu(struct trace_buffer_struct);\n\tif (!sirq_buffers)\n\t\tgoto err_sirq;\n\n\tirq_buffers = alloc_percpu(struct trace_buffer_struct);\n\tif (!irq_buffers)\n\t\tgoto err_irq;\n\n\tnmi_buffers = alloc_percpu(struct trace_buffer_struct);\n\tif (!nmi_buffers)\n\t\tgoto err_nmi;\n\n\ttrace_percpu_buffer = buffers;\n\ttrace_percpu_sirq_buffer = sirq_buffers;\n\ttrace_percpu_irq_buffer = irq_buffers;\n\ttrace_percpu_nmi_buffer = nmi_buffers;\n\n\treturn 0;\n\n err_nmi:\n\tfree_percpu(irq_buffers);\n err_irq:\n\tfree_percpu(sirq_buffers);\n err_sirq:\n\tfree_percpu(buffers);\n err_warn:\n\tWARN(1, \"", "890": "\");\\n\"", "891": "\")\\n\"", "892": "\")\\n\\t=> (\"", "893": "\"){%s}\"", "894": "\"*\"", "895": "\"*** Can not use snapshot (sorry) ***\\n\"", "896": "\"*** LATENCY TRACER ACTIVE ***\\n\"", "897": "\"*** SNAPSHOT CALLED FROM NMI CONTEXT ***\\n\"", "898": "\"*** SNAPSHOT NOT ALLOCATED ***\\n\"", "899": "\"*** snapshot is being ignored        ***\\n\"", "900": "\"*** stopping trace here!   ***\\n\"", "901": "\"*=\"", "902": "\"*Could not set filter* \"", "903": "\"*WARNING* lock debugging disabled!! - possibly due to a lockdep warning\\n\"", "904": "\"*callback never called* \"", "905": "\"*callback not called expected 2 times (%d)* \"", "906": "\"*callback not called once (%d)* \"", "907": "\"*callback received NULL regs* \"", "908": "\"*callback received regs without arch support* \"", "909": "\"*could not register callback* \"", "910": "\"*registered save-regs without arch support* \"", "911": "\"+%#lx/%#lx\"", "912": "\"++=\"", "913": "\"+0x%lx\"", "914": "\"+=\"", "915": "\"+rm\"", "916": "\",\t\t\t\n KDB_PLATFORM_ENV,\n \"", "917": "\",\n\t\t\t\t\t\t\t\tt, usec_rem);\n\n\t\tt = ns2usecs(ring_buffer_time_stamp(trace_buf->buffer, cpu));\n\t\tusec_rem = do_div(t, USEC_PER_SEC);\n\t\ttrace_seq_printf(s, \"", "918": "\",\n\t\t\t\t\t    size >> 10,\n\t\t\t\t\t    trace_buf_size >> 10);\n\t\t\telse\n\t\t\t\tr = sprintf(buf, \"", "919": "\",\n\t\t\t\t\t   (void *)ops->trampoline);\n\t\t\telse\n\t\t\t\tseq_puts(m, \"", "920": "\",\n\t\t\t\t\t   count);\n\t\t\t}\n\t\t\tkdb_printf(\"", "921": "\",\n\t\t\t\t\tbcon->name, bcon->index))\n\t\t\t\treturn;\n\n\t\n\tif (console_drivers && newcon->flags & CON_BOOT) {\n\t\t\n\t\tfor_each_console(bcon) {\n\t\t\tif (!(bcon->flags & CON_BOOT)) {\n\t\t\t\tpr_info(\"", "922": "\",\n\t\t\t\t\tnewcon->name, newcon->index);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (console_drivers && console_drivers->flags & CON_BOOT)\n\t\tbcon = console_drivers;\n\n\tif (preferred_console < 0 || bcon || !console_drivers)\n\t\tpreferred_console = selected_console;\n\n\t\n\tif (preferred_console < 0) {\n\t\tif (newcon->index < 0)\n\t\t\tnewcon->index = 0;\n\t\tif (newcon->setup == NULL ||\n\t\t    newcon->setup(newcon, NULL) == 0) {\n\t\t\tnewcon->flags |= CON_ENABLED;\n\t\t\tif (newcon->device) {\n\t\t\t\tnewcon->flags |= CON_CONSDEV;\n\t\t\t\tpreferred_console = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t\n\tfor (i = 0, c = console_cmdline;\n\t     i < MAX_CMDLINECONSOLES && c->name[0];\n\t     i++, c++) {\n\t\tif (!newcon->match ||\n\t\t    newcon->match(newcon, c->name, c->index, c->options) != 0) {\n\t\t\t\n\t\t\tBUILD_BUG_ON(sizeof(c->name) != sizeof(newcon->name));\n\t\t\tif (strcmp(c->name, newcon->name) != 0)\n\t\t\t\tcontinue;\n\t\t\tif (newcon->index >= 0 &&\n\t\t\t    newcon->index != c->index)\n\t\t\t\tcontinue;\n\t\t\tif (newcon->index < 0)\n\t\t\t\tnewcon->index = c->index;\n\n\t\t\tif (_braille_register_console(newcon, c))\n\t\t\t\treturn;\n\n\t\t\tif (newcon->setup &&\n\t\t\t    newcon->setup(newcon, c->options) != 0)\n\t\t\t\tbreak;\n\t\t}\n\n\t\tnewcon->flags |= CON_ENABLED;\n\t\tif (i == selected_console) {\n\t\t\tnewcon->flags |= CON_CONSDEV;\n\t\t\tpreferred_console = selected_console;\n\t\t}\n\t\tbreak;\n\t}\n\n\tif (!(newcon->flags & CON_ENABLED))\n\t\treturn;\n\n\t\n\tif (bcon && ((newcon->flags & (CON_CONSDEV | CON_BOOT)) == CON_CONSDEV))\n\t\tnewcon->flags &= ~CON_PRINTBUFFER;\n\n\t\n\tconsole_lock();\n\tif ((newcon->flags & CON_CONSDEV) || console_drivers == NULL) {\n\t\tnewcon->next = console_drivers;\n\t\tconsole_drivers = newcon;\n\t\tif (newcon->next)\n\t\t\tnewcon->next->flags &= ~CON_CONSDEV;\n\t} else {\n\t\tnewcon->next = console_drivers->next;\n\t\tconsole_drivers->next = newcon;\n\t}\n\tif (newcon->flags & CON_PRINTBUFFER) {\n\t\t\n\t\traw_spin_lock_irqsave(&logbuf_lock, flags);\n\t\tconsole_seq = syslog_seq;\n\t\tconsole_idx = syslog_idx;\n\t\tconsole_prev = syslog_prev;\n\t\traw_spin_unlock_irqrestore(&logbuf_lock, flags);\n\t\t\n\t\texclusive_console = newcon;\n\t}\n\tconsole_unlock();\n\tconsole_sysfs_notify();\n\n\t\n\tpr_info(\"", "923": "\",\n\t\t\t\t      (unsigned)(log_first_seq - console_seq));\n\n\t\t\t\n\t\t\tconsole_seq = log_first_seq;\n\t\t\tconsole_idx = log_first_idx;\n\t\t\tconsole_prev = 0;\n\t\t} else {\n\t\t\tlen = 0;\n\t\t}\nskip:\n\t\tif (console_seq == log_next_seq)\n\t\t\tbreak;\n\n\t\tmsg = log_from_idx(console_idx);\n\t\tif (msg->flags & LOG_NOCONS) {\n\t\t\t\n\t\t\tconsole_idx = log_next(console_idx);\n\t\t\tconsole_seq++;\n\t\t\t\n\t\t\tmsg->flags &= ~LOG_NOCONS;\n\t\t\tconsole_prev = msg->flags;\n\t\t\tgoto skip;\n\t\t}\n\n\t\tlevel = msg->level;\n\t\tlen += msg_print_text(msg, console_prev, false,\n\t\t\t\t      text + len, sizeof(text) - len);\n\t\tconsole_idx = log_next(console_idx);\n\t\tconsole_seq++;\n\t\tconsole_prev = msg->flags;\n\t\traw_spin_unlock(&logbuf_lock);\n\n\t\tstop_critical_timings();\t\n\t\tcall_console_drivers(level, text, len);\n\t\tstart_critical_timings();\n\t\tlocal_irq_restore(flags);\n\t}\n\tconsole_locked = 0;\n\n\t\n\tif (unlikely(exclusive_console))\n\t\texclusive_console = NULL;\n\n\traw_spin_unlock(&logbuf_lock);\n\n\tup_console_sem();\n\n\t\n\traw_spin_lock(&logbuf_lock);\n\tretry = console_seq != log_next_seq;\n\traw_spin_unlock_irqrestore(&logbuf_lock, flags);\n\n\tif (retry && console_trylock())\n\t\tgoto again;\n\n\tif (wake_klogd)\n\t\twake_up_klogd();\n}\nEXPORT_SYMBOL(console_unlock);\n\n\nvoid __sched console_conditional_schedule(void)\n{\n\tif (console_may_schedule)\n\t\tcond_resched();\n}\nEXPORT_SYMBOL(console_conditional_schedule);\n\nvoid console_unblank(void)\n{\n\tstruct console *c;\n\n\t\n\tif (oops_in_progress) {\n\t\tif (down_trylock_console_sem() != 0)\n\t\t\treturn;\n\t} else\n\t\tconsole_lock();\n\n\tconsole_locked = 1;\n\tconsole_may_schedule = 0;\n\tfor_each_console(c)\n\t\tif ((c->flags & CON_ENABLED) && c->unblank)\n\t\t\tc->unblank();\n\tconsole_unlock();\n}\n\n\nstruct tty_driver *console_device(int *index)\n{\n\tstruct console *c;\n\tstruct tty_driver *driver = NULL;\n\n\tconsole_lock();\n\tfor_each_console(c) {\n\t\tif (!c->device)\n\t\t\tcontinue;\n\t\tdriver = c->device(c, index);\n\t\tif (driver)\n\t\t\tbreak;\n\t}\n\tconsole_unlock();\n\treturn driver;\n}\n\n\nvoid console_stop(struct console *console)\n{\n\tconsole_lock();\n\tconsole->flags &= ~CON_ENABLED;\n\tconsole_unlock();\n}\nEXPORT_SYMBOL(console_stop);\n\nvoid console_start(struct console *console)\n{\n\tconsole_lock();\n\tconsole->flags |= CON_ENABLED;\n\tconsole_unlock();\n}\nEXPORT_SYMBOL(console_start);\n\nstatic int __read_mostly keep_bootcon;\n\nstatic int __init keep_bootcon_setup(char *str)\n{\n\tkeep_bootcon = 1;\n\tpr_info(\"", "924": "\",\n\t\t\t\t    argv[2]);\n\t\t\treturn 0;\n\t\t}\n\t\tkdb_flags = (kdb_flags &\n\t\t\t     ~(KDB_DEBUG_FLAG_MASK << KDB_DEBUG_FLAG_SHIFT))\n\t\t\t| (debugflags << KDB_DEBUG_FLAG_SHIFT);\n\n\t\treturn 0;\n\t}\n\n\t\n\tvarlen = strlen(argv[1]);\n\tvallen = strlen(argv[2]);\n\tep = kdballocenv(varlen + vallen + 2);\n\tif (ep == (char *)0)\n\t\treturn KDB_ENVBUFFULL;\n\n\tsprintf(ep, \"", "925": "\",\n\t\t\t\t   (hwirq < domain->revmap_size) ? \"", "926": "\",\n\t\t\t\t   direct ? \"", "927": "\",\n\t\t\t\t   trace_boot_clock);\n\t}\n\n\t\n\tglobal_trace.current_trace = &nop_trace;\n\n\tglobal_trace.max_lock = (arch_spinlock_t)__ARCH_SPIN_LOCK_UNLOCKED;\n\n\tftrace_init_global_array_ops(&global_trace);\n\n\tregister_tracer(&nop_trace);\n\n\t\n\ttracing_disabled = 0;\n\n\tatomic_notifier_chain_register(&panic_notifier_list,\n\t\t\t\t       &trace_panic_notifier);\n\n\tregister_die_notifier(&trace_die_notifier);\n\n\tglobal_trace.flags = TRACE_ARRAY_FL_GLOBAL;\n\n\tINIT_LIST_HEAD(&global_trace.systems);\n\tINIT_LIST_HEAD(&global_trace.events);\n\tlist_add(&global_trace.list, &ftrace_trace_arrays);\n\n\twhile (trace_boot_options) {\n\t\tchar *option;\n\n\t\toption = strsep(&trace_boot_options, \"", "928": "\",\n\t\t\t\t current->comm, task_pid_nr(current));\n\t\t\treturn 0;\n\t\t}\n\t\treturn -EPERM;\n\t}\n\treturn security_syslog(type);\n}\n\n\n\nstruct devkmsg_user {\n\tu64 seq;\n\tu32 idx;\n\tenum log_flags prev;\n\tstruct mutex lock;\n\tchar buf[8192];\n};\n\nstatic ssize_t devkmsg_write(struct kiocb *iocb, struct iov_iter *from)\n{\n\tchar *buf, *line;\n\tint i;\n\tint level = default_message_loglevel;\n\tint facility = 1;\t\n\tsize_t len = iov_iter_count(from);\n\tssize_t ret = len;\n\n\tif (len > LOG_LINE_MAX)\n\t\treturn -EINVAL;\n\tbuf = kmalloc(len+1, GFP_KERNEL);\n\tif (buf == NULL)\n\t\treturn -ENOMEM;\n\n\tbuf[len] = '\\0';\n\tif (copy_from_iter(buf, len, from) != len) {\n\t\tkfree(buf);\n\t\treturn -EFAULT;\n\t}\n\n\t\n\tline = buf;\n\tif (line[0] == '<') {\n\t\tchar *endp = NULL;\n\n\t\ti = simple_strtoul(line+1, &endp, 10);\n\t\tif (endp && endp[0] == '>') {\n\t\t\tlevel = i & 7;\n\t\t\tif (i >> 3)\n\t\t\t\tfacility = i >> 3;\n\t\t\tendp++;\n\t\t\tlen -= endp - line;\n\t\t\tline = endp;\n\t\t}\n\t}\n\n\tprintk_emit(facility, level, NULL, 0, \"", "929": "\",\n\t\t\t\t entry->pid, iter->cpu, iter->ts);\n\n\tif (trace_seq_has_overflowed(s))\n\t\treturn TRACE_TYPE_PARTIAL_LINE;\n\n\tevent = ftrace_find_event(entry->type);\n\tif (event)\n\t\treturn event->funcs->raw(iter, 0, event);\n\n\ttrace_seq_printf(s, \"", "930": "\",\n\t\t\t\t irq_base, nr_irqs);\n\t\t\treturn virq;\n\t\t}\n\t}\n\n\tif (irq_domain_alloc_irq_data(domain, virq, nr_irqs)) {\n\t\tpr_debug(\"", "931": "\",\n\t\t\t\t iter->cpu, iter->lost_events);\n\t\tif (trace_seq_has_overflowed(&iter->seq))\n\t\t\treturn TRACE_TYPE_PARTIAL_LINE;\n\t}\n\n\tif (iter->trace && iter->trace->print_line) {\n\t\tret = iter->trace->print_line(iter);\n\t\tif (ret != TRACE_TYPE_UNHANDLED)\n\t\t\treturn ret;\n\t}\n\n\tif (iter->ent->type == TRACE_BPUTS &&\n\t\t\ttrace_flags & TRACE_ITER_PRINTK &&\n\t\t\ttrace_flags & TRACE_ITER_PRINTK_MSGONLY)\n\t\treturn trace_print_bputs_msg_only(iter);\n\n\tif (iter->ent->type == TRACE_BPRINT &&\n\t\t\ttrace_flags & TRACE_ITER_PRINTK &&\n\t\t\ttrace_flags & TRACE_ITER_PRINTK_MSGONLY)\n\t\treturn trace_print_bprintk_msg_only(iter);\n\n\tif (iter->ent->type == TRACE_PRINT &&\n\t\t\ttrace_flags & TRACE_ITER_PRINTK &&\n\t\t\ttrace_flags & TRACE_ITER_PRINTK_MSGONLY)\n\t\treturn trace_print_printk_msg_only(iter);\n\n\tif (trace_flags & TRACE_ITER_BIN)\n\t\treturn print_bin_fmt(iter);\n\n\tif (trace_flags & TRACE_ITER_HEX)\n\t\treturn print_hex_fmt(iter);\n\n\tif (trace_flags & TRACE_ITER_RAW)\n\t\treturn print_raw_fmt(iter);\n\n\treturn print_trace_fmt(iter);\n}\n\nvoid trace_latency_header(struct seq_file *m)\n{\n\tstruct trace_iterator *iter = m->private;\n\n\t\n\tif (trace_empty(iter))\n\t\treturn;\n\n\tif (iter->iter_flags & TRACE_FILE_LAT_FMT)\n\t\tprint_trace_header(m, iter);\n\n\tif (!(trace_flags & TRACE_ITER_VERBOSE))\n\t\tprint_lat_help_header(m);\n}\n\nvoid trace_default_header(struct seq_file *m)\n{\n\tstruct trace_iterator *iter = m->private;\n\n\tif (!(trace_flags & TRACE_ITER_CONTEXT_INFO))\n\t\treturn;\n\n\tif (iter->iter_flags & TRACE_FILE_LAT_FMT) {\n\t\t\n\t\tif (trace_empty(iter))\n\t\t\treturn;\n\t\tprint_trace_header(m, iter);\n\t\tif (!(trace_flags & TRACE_ITER_VERBOSE))\n\t\t\tprint_lat_help_header(m);\n\t} else {\n\t\tif (!(trace_flags & TRACE_ITER_VERBOSE)) {\n\t\t\tif (trace_flags & TRACE_ITER_IRQ_INFO)\n\t\t\t\tprint_func_help_header_irq(iter->trace_buffer, m);\n\t\t\telse\n\t\t\t\tprint_func_help_header(iter->trace_buffer, m);\n\t\t}\n\t}\n}\n\nstatic void test_ftrace_alive(struct seq_file *m)\n{\n\tif (!ftrace_is_dead())\n\t\treturn;\n\tseq_puts(m, \"", "932": "\",\n\t\t\t\tcs->name, csnow, cslast, cs->mask);\n\t\t\t__clocksource_unstable(cs);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!(cs->flags & CLOCK_SOURCE_VALID_FOR_HRES) &&\n\t\t    (cs->flags & CLOCK_SOURCE_IS_CONTINUOUS) &&\n\t\t    (watchdog->flags & CLOCK_SOURCE_IS_CONTINUOUS)) {\n\t\t\t\n\t\t\tcs->flags |= CLOCK_SOURCE_VALID_FOR_HRES;\n\n\t\t\t\n\t\t\tif (!finished_booting)\n\t\t\t\tcontinue;\n\n\t\t\t\n\t\t\tif (cs != curr_clocksource) {\n\t\t\t\tcs->flags |= CLOCK_SOURCE_RESELECT;\n\t\t\t\tschedule_work(&watchdog_work);\n\t\t\t} else {\n\t\t\t\ttick_clock_notify();\n\t\t\t}\n\t\t}\n\t}\n\n\t\n\tif (reset_pending)\n\t\tatomic_dec(&watchdog_reset_pending);\n\n\t\n\tnext_cpu = cpumask_next(raw_smp_processor_id(), cpu_online_mask);\n\tif (next_cpu >= nr_cpu_ids)\n\t\tnext_cpu = cpumask_first(cpu_online_mask);\n\twatchdog_timer.expires += WATCHDOG_INTERVAL;\n\tadd_timer_on(&watchdog_timer, next_cpu);\nout:\n\tspin_unlock(&watchdog_lock);\n}\n\nstatic inline void clocksource_start_watchdog(void)\n{\n\tif (watchdog_running || !watchdog || list_empty(&watchdog_list))\n\t\treturn;\n\tinit_timer(&watchdog_timer);\n\twatchdog_timer.function = clocksource_watchdog;\n\twatchdog_timer.expires = jiffies + WATCHDOG_INTERVAL;\n\tadd_timer_on(&watchdog_timer, cpumask_first(cpu_online_mask));\n\twatchdog_running = 1;\n}\n\nstatic inline void clocksource_stop_watchdog(void)\n{\n\tif (!watchdog_running || (watchdog && !list_empty(&watchdog_list)))\n\t\treturn;\n\tdel_timer(&watchdog_timer);\n\twatchdog_running = 0;\n}\n\nstatic inline void clocksource_reset_watchdog(void)\n{\n\tstruct clocksource *cs;\n\n\tlist_for_each_entry(cs, &watchdog_list, wd_list)\n\t\tcs->flags &= ~CLOCK_SOURCE_WATCHDOG;\n}\n\nstatic void clocksource_resume_watchdog(void)\n{\n\tatomic_inc(&watchdog_reset_pending);\n}\n\nstatic void clocksource_enqueue_watchdog(struct clocksource *cs)\n{\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&watchdog_lock, flags);\n\tif (cs->flags & CLOCK_SOURCE_MUST_VERIFY) {\n\t\t\n\t\tlist_add(&cs->wd_list, &watchdog_list);\n\t\tcs->flags &= ~CLOCK_SOURCE_WATCHDOG;\n\t} else {\n\t\t\n\t\tif (cs->flags & CLOCK_SOURCE_IS_CONTINUOUS)\n\t\t\tcs->flags |= CLOCK_SOURCE_VALID_FOR_HRES;\n\t\t\n\t\tif (!watchdog || cs->rating > watchdog->rating) {\n\t\t\twatchdog = cs;\n\t\t\t\n\t\t\tclocksource_reset_watchdog();\n\t\t}\n\t}\n\t\n\tclocksource_start_watchdog();\n\tspin_unlock_irqrestore(&watchdog_lock, flags);\n}\n\nstatic void clocksource_dequeue_watchdog(struct clocksource *cs)\n{\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&watchdog_lock, flags);\n\tif (cs != watchdog) {\n\t\tif (cs->flags & CLOCK_SOURCE_MUST_VERIFY) {\n\t\t\t\n\t\t\tlist_del_init(&cs->wd_list);\n\t\t\t\n\t\t\tclocksource_stop_watchdog();\n\t\t}\n\t}\n\tspin_unlock_irqrestore(&watchdog_lock, flags);\n}\n\nstatic int __clocksource_watchdog_kthread(void)\n{\n\tstruct clocksource *cs, *tmp;\n\tunsigned long flags;\n\tLIST_HEAD(unstable);\n\tint select = 0;\n\n\tspin_lock_irqsave(&watchdog_lock, flags);\n\tlist_for_each_entry_safe(cs, tmp, &watchdog_list, wd_list) {\n\t\tif (cs->flags & CLOCK_SOURCE_UNSTABLE) {\n\t\t\tlist_del_init(&cs->wd_list);\n\t\t\tlist_add(&cs->wd_list, &unstable);\n\t\t\tselect = 1;\n\t\t}\n\t\tif (cs->flags & CLOCK_SOURCE_RESELECT) {\n\t\t\tcs->flags &= ~CLOCK_SOURCE_RESELECT;\n\t\t\tselect = 1;\n\t\t}\n\t}\n\t\n\tclocksource_stop_watchdog();\n\tspin_unlock_irqrestore(&watchdog_lock, flags);\n\n\t\n\tlist_for_each_entry_safe(cs, tmp, &unstable, wd_list) {\n\t\tlist_del_init(&cs->wd_list);\n\t\t__clocksource_change_rating(cs, 0);\n\t}\n\treturn select;\n}\n\nstatic int clocksource_watchdog_kthread(void *data)\n{\n\tmutex_lock(&clocksource_mutex);\n\tif (__clocksource_watchdog_kthread())\n\t\tclocksource_select();\n\tmutex_unlock(&clocksource_mutex);\n\treturn 0;\n}\n\nstatic bool clocksource_is_watchdog(struct clocksource *cs)\n{\n\treturn cs == watchdog;\n}\n\n#else \n\nstatic void clocksource_enqueue_watchdog(struct clocksource *cs)\n{\n\tif (cs->flags & CLOCK_SOURCE_IS_CONTINUOUS)\n\t\tcs->flags |= CLOCK_SOURCE_VALID_FOR_HRES;\n}\n\nstatic inline void clocksource_dequeue_watchdog(struct clocksource *cs) { }\nstatic inline void clocksource_resume_watchdog(void) { }\nstatic inline int __clocksource_watchdog_kthread(void) { return 0; }\nstatic bool clocksource_is_watchdog(struct clocksource *cs) { return false; }\nvoid clocksource_mark_unstable(struct clocksource *cs) { }\n\n#endif \n\n\nvoid clocksource_suspend(void)\n{\n\tstruct clocksource *cs;\n\n\tlist_for_each_entry_reverse(cs, &clocksource_list, list)\n\t\tif (cs->suspend)\n\t\t\tcs->suspend(cs);\n}\n\n\nvoid clocksource_resume(void)\n{\n\tstruct clocksource *cs;\n\n\tlist_for_each_entry(cs, &clocksource_list, list)\n\t\tif (cs->resume)\n\t\t\tcs->resume(cs);\n\n\tclocksource_resume_watchdog();\n}\n\n\nvoid clocksource_touch_watchdog(void)\n{\n\tclocksource_resume_watchdog();\n}\n\n\nstatic u32 clocksource_max_adjustment(struct clocksource *cs)\n{\n\tu64 ret;\n\t\n\tret = (u64)cs->mult * 11;\n\tdo_div(ret,100);\n\treturn (u32)ret;\n}\n\n\nu64 clocks_calc_max_nsecs(u32 mult, u32 shift, u32 maxadj, u64 mask, u64 *max_cyc)\n{\n\tu64 max_nsecs, max_cycles;\n\n\t\n\tmax_cycles = ULLONG_MAX;\n\tdo_div(max_cycles, mult+maxadj);\n\n\t\n\tmax_cycles = min(max_cycles, mask);\n\tmax_nsecs = clocksource_cyc2ns(max_cycles, mult - maxadj, shift);\n\n\t\n\tif (max_cyc)\n\t\t*max_cyc = max_cycles;\n\n\t\n\tmax_nsecs >>= 1;\n\n\treturn max_nsecs;\n}\n\n\nstatic inline void clocksource_update_max_deferment(struct clocksource *cs)\n{\n\tcs->max_idle_ns = clocks_calc_max_nsecs(cs->mult, cs->shift,\n\t\t\t\t\t\tcs->maxadj, cs->mask,\n\t\t\t\t\t\t&cs->max_cycles);\n}\n\n#ifndef CONFIG_ARCH_USES_GETTIMEOFFSET\n\nstatic struct clocksource *clocksource_find_best(bool oneshot, bool skipcur)\n{\n\tstruct clocksource *cs;\n\n\tif (!finished_booting || list_empty(&clocksource_list))\n\t\treturn NULL;\n\n\t\n\tlist_for_each_entry(cs, &clocksource_list, list) {\n\t\tif (skipcur && cs == curr_clocksource)\n\t\t\tcontinue;\n\t\tif (oneshot && !(cs->flags & CLOCK_SOURCE_VALID_FOR_HRES))\n\t\t\tcontinue;\n\t\treturn cs;\n\t}\n\treturn NULL;\n}\n\nstatic void __clocksource_select(bool skipcur)\n{\n\tbool oneshot = tick_oneshot_mode_active();\n\tstruct clocksource *best, *cs;\n\n\t\n\tbest = clocksource_find_best(oneshot, skipcur);\n\tif (!best)\n\t\treturn;\n\n\t\n\tlist_for_each_entry(cs, &clocksource_list, list) {\n\t\tif (skipcur && cs == curr_clocksource)\n\t\t\tcontinue;\n\t\tif (strcmp(cs->name, override_name) != 0)\n\t\t\tcontinue;\n\t\t\n\t\tif (!(cs->flags & CLOCK_SOURCE_VALID_FOR_HRES) && oneshot) {\n\t\t\t\n\t\t\tprintk(KERN_WARNING \"", "933": "\",\n\t\t\t\tentry->count, entry->pid, entry->comm);\n\t\t}\n\n\t\tprint_name_offset(m, (unsigned long)entry->start_func);\n\t\tseq_puts(m, \"", "934": "\",\n\t\t\t\tentry->count, entry->pid, entry->comm);\n\t\t} else {\n\t\t\tseq_printf(m, \"", "935": "\",\n\t\t\t\titer->cpu);\n}\n\nstatic enum print_line_t print_trace_fmt(struct trace_iterator *iter)\n{\n\tstruct trace_seq *s = &iter->seq;\n\tunsigned long sym_flags = (trace_flags & TRACE_ITER_SYM_MASK);\n\tstruct trace_entry *entry;\n\tstruct trace_event *event;\n\n\tentry = iter->ent;\n\n\ttest_cpu_buff_start(iter);\n\n\tevent = ftrace_find_event(entry->type);\n\n\tif (trace_flags & TRACE_ITER_CONTEXT_INFO) {\n\t\tif (iter->iter_flags & TRACE_FILE_LAT_FMT)\n\t\t\ttrace_print_lat_context(iter);\n\t\telse\n\t\t\ttrace_print_context(iter);\n\t}\n\n\tif (trace_seq_has_overflowed(s))\n\t\treturn TRACE_TYPE_PARTIAL_LINE;\n\n\tif (event)\n\t\treturn event->funcs->trace(iter, sym_flags, event);\n\n\ttrace_seq_printf(s, \"", "936": "\",\n\t\t\t\tpm_test_delay);\n\t\tmdelay(pm_test_delay * 1000);\n\t\treturn 1;\n\t}\n#endif \n\treturn 0;\n}\n\n\nstatic int suspend_prepare(suspend_state_t state)\n{\n\tint error;\n\n\tif (!sleep_state_supported(state))\n\t\treturn -EPERM;\n\n\tpm_prepare_console();\n\n\terror = pm_notifier_call_chain(PM_SUSPEND_PREPARE);\n\tif (error)\n\t\tgoto Finish;\n\n\ttrace_suspend_resume(TPS(\"", "937": "\",\n\t\t\t\tring_buffer_oldest_event_ts(trace_buf->buffer, cpu));\n\n\t\ttrace_seq_printf(s, \"", "938": "\",\n\t\t\t\tring_buffer_time_stamp(trace_buf->buffer, cpu));\n\t}\n\n\tcnt = ring_buffer_dropped_events_cpu(trace_buf->buffer, cpu);\n\ttrace_seq_printf(s, \"", "939": "\",\n\t\t\t\ttsk->comm, task_pid_nr(tsk));\n\t\t\t__group_send_sig_info(SIGXCPU, SEND_SIG_PRIV, tsk);\n\t\t}\n\t}\n}\n\nstatic void stop_process_timers(struct signal_struct *sig)\n{\n\tstruct thread_group_cputimer *cputimer = &sig->cputimer;\n\tunsigned long flags;\n\n\traw_spin_lock_irqsave(&cputimer->lock, flags);\n\tcputimer->running = 0;\n\traw_spin_unlock_irqrestore(&cputimer->lock, flags);\n}\n\nstatic u32 onecputick;\n\nstatic void check_cpu_itimer(struct task_struct *tsk, struct cpu_itimer *it,\n\t\t\t     unsigned long long *expires,\n\t\t\t     unsigned long long cur_time, int signo)\n{\n\tif (!it->expires)\n\t\treturn;\n\n\tif (cur_time >= it->expires) {\n\t\tif (it->incr) {\n\t\t\tit->expires += it->incr;\n\t\t\tit->error += it->incr_error;\n\t\t\tif (it->error >= onecputick) {\n\t\t\t\tit->expires -= cputime_one_jiffy;\n\t\t\t\tit->error -= onecputick;\n\t\t\t}\n\t\t} else {\n\t\t\tit->expires = 0;\n\t\t}\n\n\t\ttrace_itimer_expire(signo == SIGPROF ?\n\t\t\t\t    ITIMER_PROF : ITIMER_VIRTUAL,\n\t\t\t\t    tsk->signal->leader_pid, cur_time);\n\t\t__group_send_sig_info(signo, SEND_SIG_PRIV, tsk);\n\t}\n\n\tif (it->expires && (!*expires || it->expires < *expires)) {\n\t\t*expires = it->expires;\n\t}\n}\n\n\nstatic void check_process_timers(struct task_struct *tsk,\n\t\t\t\t struct list_head *firing)\n{\n\tstruct signal_struct *const sig = tsk->signal;\n\tunsigned long long utime, ptime, virt_expires, prof_expires;\n\tunsigned long long sum_sched_runtime, sched_expires;\n\tstruct list_head *timers = sig->cpu_timers;\n\tstruct task_cputime cputime;\n\tunsigned long soft;\n\n\t\n\tthread_group_cputimer(tsk, &cputime);\n\tutime = cputime_to_expires(cputime.utime);\n\tptime = utime + cputime_to_expires(cputime.stime);\n\tsum_sched_runtime = cputime.sum_exec_runtime;\n\n\tprof_expires = check_timers_list(timers, firing, ptime);\n\tvirt_expires = check_timers_list(++timers, firing, utime);\n\tsched_expires = check_timers_list(++timers, firing, sum_sched_runtime);\n\n\t\n\tcheck_cpu_itimer(tsk, &sig->it[CPUCLOCK_PROF], &prof_expires, ptime,\n\t\t\t SIGPROF);\n\tcheck_cpu_itimer(tsk, &sig->it[CPUCLOCK_VIRT], &virt_expires, utime,\n\t\t\t SIGVTALRM);\n\tsoft = ACCESS_ONCE(sig->rlim[RLIMIT_CPU].rlim_cur);\n\tif (soft != RLIM_INFINITY) {\n\t\tunsigned long psecs = cputime_to_secs(ptime);\n\t\tunsigned long hard =\n\t\t\tACCESS_ONCE(sig->rlim[RLIMIT_CPU].rlim_max);\n\t\tcputime_t x;\n\t\tif (psecs >= hard) {\n\t\t\t\n\t\t\t__group_send_sig_info(SIGKILL, SEND_SIG_PRIV, tsk);\n\t\t\treturn;\n\t\t}\n\t\tif (psecs >= soft) {\n\t\t\t\n\t\t\t__group_send_sig_info(SIGXCPU, SEND_SIG_PRIV, tsk);\n\t\t\tif (soft < hard) {\n\t\t\t\tsoft++;\n\t\t\t\tsig->rlim[RLIMIT_CPU].rlim_cur = soft;\n\t\t\t}\n\t\t}\n\t\tx = secs_to_cputime(soft);\n\t\tif (!prof_expires || x < prof_expires) {\n\t\t\tprof_expires = x;\n\t\t}\n\t}\n\n\tsig->cputime_expires.prof_exp = expires_to_cputime(prof_expires);\n\tsig->cputime_expires.virt_exp = expires_to_cputime(virt_expires);\n\tsig->cputime_expires.sched_exp = sched_expires;\n\tif (task_cputime_zero(&sig->cputime_expires))\n\t\tstop_process_timers(sig);\n}\n\n\nvoid posix_cpu_timer_schedule(struct k_itimer *timer)\n{\n\tstruct sighand_struct *sighand;\n\tunsigned long flags;\n\tstruct task_struct *p = timer->it.cpu.task;\n\tunsigned long long now;\n\n\tWARN_ON_ONCE(p == NULL);\n\n\t\n\tif (CPUCLOCK_PERTHREAD(timer->it_clock)) {\n\t\tcpu_clock_sample(timer->it_clock, p, &now);\n\t\tbump_cpu_timer(timer, now);\n\t\tif (unlikely(p->exit_state))\n\t\t\tgoto out;\n\n\t\t\n\t\tsighand = lock_task_sighand(p, &flags);\n\t\tif (!sighand)\n\t\t\tgoto out;\n\t} else {\n\t\t\n\t\tsighand = lock_task_sighand(p, &flags);\n\t\tif (unlikely(sighand == NULL)) {\n\t\t\t\n\t\t\ttimer->it.cpu.expires = 0;\n\t\t\tgoto out;\n\t\t} else if (unlikely(p->exit_state) && thread_group_empty(p)) {\n\t\t\tunlock_task_sighand(p, &flags);\n\t\t\t\n\t\t\tgoto out;\n\t\t}\n\t\tcpu_timer_sample_group(timer->it_clock, p, &now);\n\t\tbump_cpu_timer(timer, now);\n\t\t\n\t}\n\n\t\n\tWARN_ON_ONCE(!irqs_disabled());\n\tarm_timer(timer);\n\tunlock_task_sighand(p, &flags);\n\n\t\n\tposix_cpu_timer_kick_nohz();\nout:\n\ttimer->it_overrun_last = timer->it_overrun;\n\ttimer->it_overrun = -1;\n\t++timer->it_requeue_pending;\n}\n\n\nstatic inline int task_cputime_expired(const struct task_cputime *sample,\n\t\t\t\t\tconst struct task_cputime *expires)\n{\n\tif (expires->utime && sample->utime >= expires->utime)\n\t\treturn 1;\n\tif (expires->stime && sample->utime + sample->stime >= expires->stime)\n\t\treturn 1;\n\tif (expires->sum_exec_runtime != 0 &&\n\t    sample->sum_exec_runtime >= expires->sum_exec_runtime)\n\t\treturn 1;\n\treturn 0;\n}\n\n\nstatic inline int fastpath_timer_check(struct task_struct *tsk)\n{\n\tstruct signal_struct *sig;\n\tcputime_t utime, stime;\n\n\ttask_cputime(tsk, &utime, &stime);\n\n\tif (!task_cputime_zero(&tsk->cputime_expires)) {\n\t\tstruct task_cputime task_sample = {\n\t\t\t.utime = utime,\n\t\t\t.stime = stime,\n\t\t\t.sum_exec_runtime = tsk->se.sum_exec_runtime\n\t\t};\n\n\t\tif (task_cputime_expired(&task_sample, &tsk->cputime_expires))\n\t\t\treturn 1;\n\t}\n\n\tsig = tsk->signal;\n\tif (sig->cputimer.running) {\n\t\tstruct task_cputime group_sample;\n\n\t\traw_spin_lock(&sig->cputimer.lock);\n\t\tgroup_sample = sig->cputimer.cputime;\n\t\traw_spin_unlock(&sig->cputimer.lock);\n\n\t\tif (task_cputime_expired(&group_sample, &sig->cputime_expires))\n\t\t\treturn 1;\n\t}\n\n\treturn 0;\n}\n\n\nvoid run_posix_cpu_timers(struct task_struct *tsk)\n{\n\tLIST_HEAD(firing);\n\tstruct k_itimer *timer, *next;\n\tunsigned long flags;\n\n\tWARN_ON_ONCE(!irqs_disabled());\n\n\t\n\tif (!fastpath_timer_check(tsk))\n\t\treturn;\n\n\tif (!lock_task_sighand(tsk, &flags))\n\t\treturn;\n\t\n\tcheck_thread_timers(tsk, &firing);\n\t\n\tif (tsk->signal->cputimer.running)\n\t\tcheck_process_timers(tsk, &firing);\n\n\t\n\tunlock_task_sighand(tsk, &flags);\n\n\t\n\tlist_for_each_entry_safe(timer, next, &firing, it.cpu.entry) {\n\t\tint cpu_firing;\n\n\t\tspin_lock(&timer->it_lock);\n\t\tlist_del_init(&timer->it.cpu.entry);\n\t\tcpu_firing = timer->it.cpu.firing;\n\t\ttimer->it.cpu.firing = 0;\n\t\t\n\t\tif (likely(cpu_firing >= 0))\n\t\t\tcpu_timer_fire(timer);\n\t\tspin_unlock(&timer->it_lock);\n\t}\n}\n\n\nvoid set_process_cpu_timer(struct task_struct *tsk, unsigned int clock_idx,\n\t\t\t   cputime_t *newval, cputime_t *oldval)\n{\n\tunsigned long long now;\n\n\tWARN_ON_ONCE(clock_idx == CPUCLOCK_SCHED);\n\tcpu_timer_sample_group(clock_idx, tsk, &now);\n\n\tif (oldval) {\n\t\t\n\t\tif (*oldval) {\n\t\t\tif (*oldval <= now) {\n\t\t\t\t\n\t\t\t\t*oldval = cputime_one_jiffy;\n\t\t\t} else {\n\t\t\t\t*oldval -= now;\n\t\t\t}\n\t\t}\n\n\t\tif (!*newval)\n\t\t\tgoto out;\n\t\t*newval += now;\n\t}\n\n\t\n\tswitch (clock_idx) {\n\tcase CPUCLOCK_PROF:\n\t\tif (expires_gt(tsk->signal->cputime_expires.prof_exp, *newval))\n\t\t\ttsk->signal->cputime_expires.prof_exp = *newval;\n\t\tbreak;\n\tcase CPUCLOCK_VIRT:\n\t\tif (expires_gt(tsk->signal->cputime_expires.virt_exp, *newval))\n\t\t\ttsk->signal->cputime_expires.virt_exp = *newval;\n\t\tbreak;\n\t}\nout:\n\tposix_cpu_timer_kick_nohz();\n}\n\nstatic int do_cpu_nanosleep(const clockid_t which_clock, int flags,\n\t\t\t    struct timespec *rqtp, struct itimerspec *it)\n{\n\tstruct k_itimer timer;\n\tint error;\n\n\t\n\tmemset(&timer, 0, sizeof timer);\n\tspin_lock_init(&timer.it_lock);\n\ttimer.it_clock = which_clock;\n\ttimer.it_overrun = -1;\n\terror = posix_cpu_timer_create(&timer);\n\ttimer.it_process = current;\n\tif (!error) {\n\t\tstatic struct itimerspec zero_it;\n\n\t\tmemset(it, 0, sizeof *it);\n\t\tit->it_value = *rqtp;\n\n\t\tspin_lock_irq(&timer.it_lock);\n\t\terror = posix_cpu_timer_set(&timer, flags, it, NULL);\n\t\tif (error) {\n\t\t\tspin_unlock_irq(&timer.it_lock);\n\t\t\treturn error;\n\t\t}\n\n\t\twhile (!signal_pending(current)) {\n\t\t\tif (timer.it.cpu.expires == 0) {\n\t\t\t\t\n\t\t\t\tposix_cpu_timer_del(&timer);\n\t\t\t\tspin_unlock_irq(&timer.it_lock);\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\t\n\t\t\t__set_current_state(TASK_INTERRUPTIBLE);\n\t\t\tspin_unlock_irq(&timer.it_lock);\n\t\t\tschedule();\n\t\t\tspin_lock_irq(&timer.it_lock);\n\t\t}\n\n\t\t\n\t\tsample_to_timespec(which_clock, timer.it.cpu.expires, rqtp);\n\t\terror = posix_cpu_timer_set(&timer, 0, &zero_it, it);\n\t\tif (!error) {\n\t\t\t\n\t\t\tposix_cpu_timer_del(&timer);\n\t\t}\n\t\tspin_unlock_irq(&timer.it_lock);\n\n\t\twhile (error == TIMER_RETRY) {\n\t\t\t\n\t\t\tspin_lock_irq(&timer.it_lock);\n\t\t\terror = posix_cpu_timer_del(&timer);\n\t\t\tspin_unlock_irq(&timer.it_lock);\n\t\t}\n\n\t\tif ((it->it_value.tv_sec | it->it_value.tv_nsec) == 0) {\n\t\t\t\n\t\t\treturn 0;\n\t\t}\n\n\t\terror = -ERESTART_RESTARTBLOCK;\n\t}\n\n\treturn error;\n}\n\nstatic long posix_cpu_nsleep_restart(struct restart_block *restart_block);\n\nstatic int posix_cpu_nsleep(const clockid_t which_clock, int flags,\n\t\t\t    struct timespec *rqtp, struct timespec __user *rmtp)\n{\n\tstruct restart_block *restart_block = &current->restart_block;\n\tstruct itimerspec it;\n\tint error;\n\n\t\n\tif (CPUCLOCK_PERTHREAD(which_clock) &&\n\t    (CPUCLOCK_PID(which_clock) == 0 ||\n\t     CPUCLOCK_PID(which_clock) == current->pid))\n\t\treturn -EINVAL;\n\n\terror = do_cpu_nanosleep(which_clock, flags, rqtp, &it);\n\n\tif (error == -ERESTART_RESTARTBLOCK) {\n\n\t\tif (flags & TIMER_ABSTIME)\n\t\t\treturn -ERESTARTNOHAND;\n\t\t\n\t\tif (rmtp && copy_to_user(rmtp, &it.it_value, sizeof *rmtp))\n\t\t\treturn -EFAULT;\n\n\t\trestart_block->fn = posix_cpu_nsleep_restart;\n\t\trestart_block->nanosleep.clockid = which_clock;\n\t\trestart_block->nanosleep.rmtp = rmtp;\n\t\trestart_block->nanosleep.expires = timespec_to_ns(rqtp);\n\t}\n\treturn error;\n}\n\nstatic long posix_cpu_nsleep_restart(struct restart_block *restart_block)\n{\n\tclockid_t which_clock = restart_block->nanosleep.clockid;\n\tstruct timespec t;\n\tstruct itimerspec it;\n\tint error;\n\n\tt = ns_to_timespec(restart_block->nanosleep.expires);\n\n\terror = do_cpu_nanosleep(which_clock, TIMER_ABSTIME, &t, &it);\n\n\tif (error == -ERESTART_RESTARTBLOCK) {\n\t\tstruct timespec __user *rmtp = restart_block->nanosleep.rmtp;\n\t\t\n\t\tif (rmtp && copy_to_user(rmtp, &it.it_value, sizeof *rmtp))\n\t\t\treturn -EFAULT;\n\n\t\trestart_block->nanosleep.expires = timespec_to_ns(&t);\n\t}\n\treturn error;\n\n}\n\n#define PROCESS_CLOCK\tMAKE_PROCESS_CPUCLOCK(0, CPUCLOCK_SCHED)\n#define THREAD_CLOCK\tMAKE_THREAD_CPUCLOCK(0, CPUCLOCK_SCHED)\n\nstatic int process_cpu_clock_getres(const clockid_t which_clock,\n\t\t\t\t    struct timespec *tp)\n{\n\treturn posix_cpu_clock_getres(PROCESS_CLOCK, tp);\n}\nstatic int process_cpu_clock_get(const clockid_t which_clock,\n\t\t\t\t struct timespec *tp)\n{\n\treturn posix_cpu_clock_get(PROCESS_CLOCK, tp);\n}\nstatic int process_cpu_timer_create(struct k_itimer *timer)\n{\n\ttimer->it_clock = PROCESS_CLOCK;\n\treturn posix_cpu_timer_create(timer);\n}\nstatic int process_cpu_nsleep(const clockid_t which_clock, int flags,\n\t\t\t      struct timespec *rqtp,\n\t\t\t      struct timespec __user *rmtp)\n{\n\treturn posix_cpu_nsleep(PROCESS_CLOCK, flags, rqtp, rmtp);\n}\nstatic long process_cpu_nsleep_restart(struct restart_block *restart_block)\n{\n\treturn -EINVAL;\n}\nstatic int thread_cpu_clock_getres(const clockid_t which_clock,\n\t\t\t\t   struct timespec *tp)\n{\n\treturn posix_cpu_clock_getres(THREAD_CLOCK, tp);\n}\nstatic int thread_cpu_clock_get(const clockid_t which_clock,\n\t\t\t\tstruct timespec *tp)\n{\n\treturn posix_cpu_clock_get(THREAD_CLOCK, tp);\n}\nstatic int thread_cpu_timer_create(struct k_itimer *timer)\n{\n\ttimer->it_clock = THREAD_CLOCK;\n\treturn posix_cpu_timer_create(timer);\n}\n\nstruct k_clock clock_posix_cpu = {\n\t.clock_getres\t= posix_cpu_clock_getres,\n\t.clock_set\t= posix_cpu_clock_set,\n\t.clock_get\t= posix_cpu_clock_get,\n\t.timer_create\t= posix_cpu_timer_create,\n\t.nsleep\t\t= posix_cpu_nsleep,\n\t.nsleep_restart\t= posix_cpu_nsleep_restart,\n\t.timer_set\t= posix_cpu_timer_set,\n\t.timer_del\t= posix_cpu_timer_del,\n\t.timer_get\t= posix_cpu_timer_get,\n};\n\nstatic __init int init_posix_cpu_timers(void)\n{\n\tstruct k_clock process = {\n\t\t.clock_getres\t= process_cpu_clock_getres,\n\t\t.clock_get\t= process_cpu_clock_get,\n\t\t.timer_create\t= process_cpu_timer_create,\n\t\t.nsleep\t\t= process_cpu_nsleep,\n\t\t.nsleep_restart\t= process_cpu_nsleep_restart,\n\t};\n\tstruct k_clock thread = {\n\t\t.clock_getres\t= thread_cpu_clock_getres,\n\t\t.clock_get\t= thread_cpu_clock_get,\n\t\t.timer_create\t= thread_cpu_timer_create,\n\t};\n\tstruct timespec ts;\n\n\tposix_timers_register_clock(CLOCK_PROCESS_CPUTIME_ID, &process);\n\tposix_timers_register_clock(CLOCK_THREAD_CPUTIME_ID, &thread);\n\n\tcputime_to_timespec(cputime_one_jiffy, &ts);\n\tonecputick = ts.tv_nsec;\n\tWARN_ON(ts.tv_sec != 0);\n\n\treturn 0;\n}\n__initcall(init_posix_cpu_timers);\n\n\n#include <linux/export.h>\n#include <linux/uts.h>\n#include <linux/utsname.h>\n#include <linux/sysctl.h>\n#include <linux/wait.h>\n\n#ifdef CONFIG_PROC_SYSCTL\n\nstatic void *get_uts(struct ctl_table *table, int write)\n{\n\tchar *which = table->data;\n\tstruct uts_namespace *uts_ns;\n\n\tuts_ns = current->nsproxy->uts_ns;\n\twhich = (which - (char *)&init_uts_ns) + (char *)uts_ns;\n\n\tif (!write)\n\t\tdown_read(&uts_sem);\n\telse\n\t\tdown_write(&uts_sem);\n\treturn which;\n}\n\nstatic void put_uts(struct ctl_table *table, int write, void *which)\n{\n\tif (!write)\n\t\tup_read(&uts_sem);\n\telse\n\t\tup_write(&uts_sem);\n}\n\n\nstatic int proc_do_uts_string(struct ctl_table *table, int write,\n\t\t  void __user *buffer, size_t *lenp, loff_t *ppos)\n{\n\tstruct ctl_table uts_table;\n\tint r;\n\tmemcpy(&uts_table, table, sizeof(uts_table));\n\tuts_table.data = get_uts(table, write);\n\tr = proc_dostring(&uts_table, write, buffer, lenp, ppos);\n\tput_uts(table, write, uts_table.data);\n\n\tif (write)\n\t\tproc_sys_poll_notify(table->poll);\n\n\treturn r;\n}\n#else\n#define proc_do_uts_string NULL\n#endif\n\nstatic DEFINE_CTL_TABLE_POLL(hostname_poll);\nstatic DEFINE_CTL_TABLE_POLL(domainname_poll);\n\nstatic struct ctl_table uts_kern_table[] = {\n\t{\n\t\t.procname\t= \"", "940": "\",\n\t\t\t\twatchdog->name, wdnow, wdlast, watchdog->mask);\n\t\t\tpr_warn(\"", "941": "\",\n\t\t\t       event->type);\n\t\t\tWARN_ON_ONCE(1);\n\t\t}\n\t}\n\n\treturn 0;\n}\nearly_initcall(init_events);\n\n#ifndef _KERNEL_WORKQUEUE_INTERNAL_H\n#define _KERNEL_WORKQUEUE_INTERNAL_H\n\n#include <linux/workqueue.h>\n#include <linux/kthread.h>\n\nstruct worker_pool;\n\n\nstruct worker {\n\t\n\tunion {\n\t\tstruct list_head\tentry;\t\n\t\tstruct hlist_node\thentry;\t\n\t};\n\n\tstruct work_struct\t*current_work;\t\n\twork_func_t\t\tcurrent_func;\t\n\tstruct pool_workqueue\t*current_pwq; \n\tbool\t\t\tdesc_valid;\t\n\tstruct list_head\tscheduled;\t\n\n\t\n\n\tstruct task_struct\t*task;\t\t\n\tstruct worker_pool\t*pool;\t\t\n\t\t\t\t\t\t\n\tstruct list_head\tnode;\t\t\n\t\t\t\t\t\t\n\n\tunsigned long\t\tlast_active;\t\n\tunsigned int\t\tflags;\t\t\n\tint\t\t\tid;\t\t\n\n\t\n\tchar\t\t\tdesc[WORKER_DESC_LEN];\n\n\t\n\tstruct workqueue_struct\t*rescue_wq;\t\n};\n\n\nstatic inline struct worker *current_wq_worker(void)\n{\n\tif (current->flags & PF_WQ_WORKER)\n\t\treturn kthread_data(current);\n\treturn NULL;\n}\n\n\nvoid wq_worker_waking_up(struct task_struct *task, int cpu);\nstruct task_struct *wq_worker_sleeping(struct task_struct *task, int cpu);\n\n#endif \n\n#include <linux/cpu.h>\n#include <linux/err.h>\n#include <linux/hrtimer.h>\n#include <linux/interrupt.h>\n#include <linux/percpu.h>\n#include <linux/profile.h>\n#include <linux/sched.h>\n#include <linux/module.h>\n\n#include <asm/irq_regs.h>\n\n#include \"", "942": "\",\n\t\t\t     avg_local_sample_len, allowed_ns >> 1,\n\t\t\t     sysctl_perf_event_sample_rate);\n\t}\n}\n\nstatic atomic64_t perf_event_id;\n\nstatic void cpu_ctx_sched_out(struct perf_cpu_context *cpuctx,\n\t\t\t      enum event_type_t event_type);\n\nstatic void cpu_ctx_sched_in(struct perf_cpu_context *cpuctx,\n\t\t\t     enum event_type_t event_type,\n\t\t\t     struct task_struct *task);\n\nstatic void update_context_time(struct perf_event_context *ctx);\nstatic u64 perf_event_time(struct perf_event *event);\n\nvoid __weak perf_event_print_debug(void)\t{ }\n\nextern __weak const char *perf_pmu_name(void)\n{\n\treturn \"", "943": "\",\n\t\t\t   cmdstr);\n\t\ts->usable = 0;\n\t\treturn KDB_NOTIMP;\n\t}\n\tmemcpy(s->command, save_command, s->count * sizeof(*(s->command)));\n\ts->command[s->count++] = kdb_strdup(cmdstr, GFP_KDB);\n\tkfree(save_command);\n\treturn 0;\n}\n\nstatic int kdb_defcmd(int argc, const char **argv)\n{\n\tstruct defcmd_set *save_defcmd_set = defcmd_set, *s;\n\tif (defcmd_in_progress) {\n\t\tkdb_printf(\"", "944": "\",\n\t\t\t   domain == irq_default_domain ? '*' : ' ', domain->name,\n\t\t\t   domain->revmap_size + count, domain->revmap_size,\n\t\t\t   domain->revmap_direct_max_irq,\n\t\t\t   domain->of_node ? of_node_full_name(domain->of_node) : \"", "945": "\",\n\t\t\t   events, events * 1000 / ms,\n\t\t\t   (events * 1000000 / ms) % 1000);\n\telse\n\t\tseq_printf(m, \"", "946": "\",\n\t\t\t   ftrace_rec_count(rec),\n\t\t\t   rec->flags & FTRACE_FL_REGS ? \"", "947": "\",\n\t\t\t   rec->flags & FTRACE_FL_IPMODIFY ? \"", "948": "\",\n\t\t\t  iter->ent->type);\n\t}\n\ttrace_access_unlock(iter->cpu_file);\n\ttrace_event_read_unlock();\n\n\t\n\tsret = trace_seq_to_user(&iter->seq, ubuf, cnt);\n\tif (iter->seq.seq.readpos >= trace_seq_used(&iter->seq))\n\t\ttrace_seq_init(&iter->seq);\n\n\t\n\tif (sret == -EBUSY)\n\t\tgoto waitagain;\n\nout:\n\tmutex_unlock(&iter->mutex);\n\n\treturn sret;\n}\n\nstatic void tracing_spd_release_pipe(struct splice_pipe_desc *spd,\n\t\t\t\t     unsigned int idx)\n{\n\t__free_page(spd->pages[idx]);\n}\n\nstatic const struct pipe_buf_operations tracing_pipe_buf_ops = {\n\t.can_merge\t\t= 0,\n\t.confirm\t\t= generic_pipe_buf_confirm,\n\t.release\t\t= generic_pipe_buf_release,\n\t.steal\t\t\t= generic_pipe_buf_steal,\n\t.get\t\t\t= generic_pipe_buf_get,\n};\n\nstatic size_t\ntracing_fill_pipe_page(size_t rem, struct trace_iterator *iter)\n{\n\tsize_t count;\n\tint save_len;\n\tint ret;\n\n\t\n\tfor (;;) {\n\t\tsave_len = iter->seq.seq.len;\n\t\tret = print_trace_line(iter);\n\n\t\tif (trace_seq_has_overflowed(&iter->seq)) {\n\t\t\titer->seq.seq.len = save_len;\n\t\t\tbreak;\n\t\t}\n\n\t\t\n\t\tif (ret == TRACE_TYPE_PARTIAL_LINE) {\n\t\t\titer->seq.seq.len = save_len;\n\t\t\tbreak;\n\t\t}\n\n\t\tcount = trace_seq_used(&iter->seq) - save_len;\n\t\tif (rem < count) {\n\t\t\trem = 0;\n\t\t\titer->seq.seq.len = save_len;\n\t\t\tbreak;\n\t\t}\n\n\t\tif (ret != TRACE_TYPE_NO_CONSUME)\n\t\t\ttrace_consume(iter);\n\t\trem -= count;\n\t\tif (!trace_find_next_entry_inc(iter))\t{\n\t\t\trem = 0;\n\t\t\titer->ent = NULL;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn rem;\n}\n\nstatic ssize_t tracing_splice_read_pipe(struct file *filp,\n\t\t\t\t\tloff_t *ppos,\n\t\t\t\t\tstruct pipe_inode_info *pipe,\n\t\t\t\t\tsize_t len,\n\t\t\t\t\tunsigned int flags)\n{\n\tstruct page *pages_def[PIPE_DEF_BUFFERS];\n\tstruct partial_page partial_def[PIPE_DEF_BUFFERS];\n\tstruct trace_iterator *iter = filp->private_data;\n\tstruct splice_pipe_desc spd = {\n\t\t.pages\t\t= pages_def,\n\t\t.partial\t= partial_def,\n\t\t.nr_pages\t= 0, \n\t\t.nr_pages_max\t= PIPE_DEF_BUFFERS,\n\t\t.flags\t\t= flags,\n\t\t.ops\t\t= &tracing_pipe_buf_ops,\n\t\t.spd_release\t= tracing_spd_release_pipe,\n\t};\n\tssize_t ret;\n\tsize_t rem;\n\tunsigned int i;\n\n\tif (splice_grow_spd(pipe, &spd))\n\t\treturn -ENOMEM;\n\n\tmutex_lock(&iter->mutex);\n\n\tif (iter->trace->splice_read) {\n\t\tret = iter->trace->splice_read(iter, filp,\n\t\t\t\t\t       ppos, pipe, len, flags);\n\t\tif (ret)\n\t\t\tgoto out_err;\n\t}\n\n\tret = tracing_wait_pipe(filp);\n\tif (ret <= 0)\n\t\tgoto out_err;\n\n\tif (!iter->ent && !trace_find_next_entry_inc(iter)) {\n\t\tret = -EFAULT;\n\t\tgoto out_err;\n\t}\n\n\ttrace_event_read_lock();\n\ttrace_access_lock(iter->cpu_file);\n\n\t\n\tfor (i = 0, rem = len; i < spd.nr_pages_max && rem; i++) {\n\t\tspd.pages[i] = alloc_page(GFP_KERNEL);\n\t\tif (!spd.pages[i])\n\t\t\tbreak;\n\n\t\trem = tracing_fill_pipe_page(rem, iter);\n\n\t\t\n\t\tret = trace_seq_to_buffer(&iter->seq,\n\t\t\t\t\t  page_address(spd.pages[i]),\n\t\t\t\t\t  trace_seq_used(&iter->seq));\n\t\tif (ret < 0) {\n\t\t\t__free_page(spd.pages[i]);\n\t\t\tbreak;\n\t\t}\n\t\tspd.partial[i].offset = 0;\n\t\tspd.partial[i].len = trace_seq_used(&iter->seq);\n\n\t\ttrace_seq_init(&iter->seq);\n\t}\n\n\ttrace_access_unlock(iter->cpu_file);\n\ttrace_event_read_unlock();\n\tmutex_unlock(&iter->mutex);\n\n\tspd.nr_pages = i;\n\n\tret = splice_to_pipe(pipe, &spd);\nout:\n\tsplice_shrink_spd(&spd);\n\treturn ret;\n\nout_err:\n\tmutex_unlock(&iter->mutex);\n\tgoto out;\n}\n\nstatic ssize_t\ntracing_entries_read(struct file *filp, char __user *ubuf,\n\t\t     size_t cnt, loff_t *ppos)\n{\n\tstruct inode *inode = file_inode(filp);\n\tstruct trace_array *tr = inode->i_private;\n\tint cpu = tracing_get_cpu(inode);\n\tchar buf[64];\n\tint r = 0;\n\tssize_t ret;\n\n\tmutex_lock(&trace_types_lock);\n\n\tif (cpu == RING_BUFFER_ALL_CPUS) {\n\t\tint cpu, buf_size_same;\n\t\tunsigned long size;\n\n\t\tsize = 0;\n\t\tbuf_size_same = 1;\n\t\t\n\t\tfor_each_tracing_cpu(cpu) {\n\t\t\t\n\t\t\tif (size == 0)\n\t\t\t\tsize = per_cpu_ptr(tr->trace_buffer.data, cpu)->entries;\n\t\t\tif (size != per_cpu_ptr(tr->trace_buffer.data, cpu)->entries) {\n\t\t\t\tbuf_size_same = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (buf_size_same) {\n\t\t\tif (!ring_buffer_expanded)\n\t\t\t\tr = sprintf(buf, \"", "949": "\",\n\t\t\t RINGBUF_TYPE_PADDING);\n\ttrace_seq_printf(s, \"", "950": "\",\n\t\t\t RINGBUF_TYPE_TIME_EXTEND);\n\ttrace_seq_printf(s, \"", "951": "\",\n\t\t\t(unsigned long long)ktime_to_ns(base->resolution));\n\tSEQ_printf(m,   \"", "952": "\",\n\t\t\tbase->index);\n\tSEQ_printf(m, \"", "953": "\",\n\t\t\tcs->name, cs->mask, cs->max_cycles, cs->max_idle_ns);\n}\nEXPORT_SYMBOL_GPL(__clocksource_update_freq_scale);\n\n\nint __clocksource_register_scale(struct clocksource *cs, u32 scale, u32 freq)\n{\n\n\t\n\t__clocksource_update_freq_scale(cs, scale, freq);\n\n\t\n\tmutex_lock(&clocksource_mutex);\n\tclocksource_enqueue(cs);\n\tclocksource_enqueue_watchdog(cs);\n\tclocksource_select();\n\tmutex_unlock(&clocksource_mutex);\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(__clocksource_register_scale);\n\nstatic void __clocksource_change_rating(struct clocksource *cs, int rating)\n{\n\tlist_del(&cs->list);\n\tcs->rating = rating;\n\tclocksource_enqueue(cs);\n}\n\n\nvoid clocksource_change_rating(struct clocksource *cs, int rating)\n{\n\tmutex_lock(&clocksource_mutex);\n\t__clocksource_change_rating(cs, rating);\n\tclocksource_select();\n\tmutex_unlock(&clocksource_mutex);\n}\nEXPORT_SYMBOL(clocksource_change_rating);\n\n\nstatic int clocksource_unbind(struct clocksource *cs)\n{\n\t\n\tif (clocksource_is_watchdog(cs))\n\t\treturn -EBUSY;\n\n\tif (cs == curr_clocksource) {\n\t\t\n\t\tclocksource_select_fallback();\n\t\tif (curr_clocksource == cs)\n\t\t\treturn -EBUSY;\n\t}\n\tclocksource_dequeue_watchdog(cs);\n\tlist_del_init(&cs->list);\n\treturn 0;\n}\n\n\nint clocksource_unregister(struct clocksource *cs)\n{\n\tint ret = 0;\n\n\tmutex_lock(&clocksource_mutex);\n\tif (!list_empty(&cs->list))\n\t\tret = clocksource_unbind(cs);\n\tmutex_unlock(&clocksource_mutex);\n\treturn ret;\n}\nEXPORT_SYMBOL(clocksource_unregister);\n\n#ifdef CONFIG_SYSFS\n\nstatic ssize_t\nsysfs_show_current_clocksources(struct device *dev,\n\t\t\t\tstruct device_attribute *attr, char *buf)\n{\n\tssize_t count = 0;\n\n\tmutex_lock(&clocksource_mutex);\n\tcount = snprintf(buf, PAGE_SIZE, \"", "954": "\",\n\t\t\tcurrent->comm, task_pid_nr(current),\n\t\t\tpreempt_count());\n\n\tacct_update_integrals(tsk);\n\t\n\tif (tsk->mm)\n\t\tsync_mm_rss(tsk->mm);\n\tgroup_dead = atomic_dec_and_test(&tsk->signal->live);\n\tif (group_dead) {\n\t\thrtimer_cancel(&tsk->signal->real_timer);\n\t\texit_itimers(tsk->signal);\n\t\tif (tsk->mm)\n\t\t\tsetmax_mm_hiwater_rss(&tsk->signal->maxrss, tsk->mm);\n\t}\n\tacct_collect(code, group_dead);\n\tif (group_dead)\n\t\ttty_audit_exit();\n\taudit_free(tsk);\n\n\ttsk->exit_code = code;\n\ttaskstats_exit(tsk, group_dead);\n\n\texit_mm(tsk);\n\n\tif (group_dead)\n\t\tacct_process();\n\ttrace_sched_process_exit(tsk);\n\n\texit_sem(tsk);\n\texit_shm(tsk);\n\texit_files(tsk);\n\texit_fs(tsk);\n\tif (group_dead)\n\t\tdisassociate_ctty(1);\n\texit_task_namespaces(tsk);\n\texit_task_work(tsk);\n\texit_thread();\n\n\t\n\tperf_event_exit_task(tsk);\n\n\tcgroup_exit(tsk);\n\n\t\n\tflush_ptrace_hw_breakpoint(tsk);\n\n\tTASKS_RCU(tasks_rcu_i = __srcu_read_lock(&tasks_rcu_exit_srcu));\n\texit_notify(tsk, group_dead);\n\tproc_exit_connector(tsk);\n#ifdef CONFIG_NUMA\n\ttask_lock(tsk);\n\tmpol_put(tsk->mempolicy);\n\ttsk->mempolicy = NULL;\n\ttask_unlock(tsk);\n#endif\n#ifdef CONFIG_FUTEX\n\tif (unlikely(current->pi_state_cache))\n\t\tkfree(current->pi_state_cache);\n#endif\n\t\n\tdebug_check_no_locks_held();\n\t\n\ttsk->flags |= PF_EXITPIDONE;\n\n\tif (tsk->io_context)\n\t\texit_io_context(tsk);\n\n\tif (tsk->splice_pipe)\n\t\tfree_pipe_info(tsk->splice_pipe);\n\n\tif (tsk->task_frag.page)\n\t\tput_page(tsk->task_frag.page);\n\n\tvalidate_creds_for_do_exit(tsk);\n\n\tcheck_stack_usage();\n\tpreempt_disable();\n\tif (tsk->nr_dirtied)\n\t\t__this_cpu_add(dirty_throttle_leaks, tsk->nr_dirtied);\n\texit_rcu();\n\tTASKS_RCU(__srcu_read_unlock(&tasks_rcu_exit_srcu, tasks_rcu_i));\n\n\t\n\tsmp_mb();\n\traw_spin_unlock_wait(&tsk->pi_lock);\n\n\t\n\ttsk->state = TASK_DEAD;\n\ttsk->flags |= PF_NOFREEZE;\t\n\tschedule();\n\tBUG();\n\t\n\tfor (;;)\n\t\tcpu_relax();\t\n}\nEXPORT_SYMBOL_GPL(do_exit);\n\nvoid complete_and_exit(struct completion *comp, long code)\n{\n\tif (comp)\n\t\tcomplete(comp);\n\n\tdo_exit(code);\n}\nEXPORT_SYMBOL(complete_and_exit);\n\nSYSCALL_DEFINE1(exit, int, error_code)\n{\n\tdo_exit((error_code&0xff)<<8);\n}\n\n\nvoid\ndo_group_exit(int exit_code)\n{\n\tstruct signal_struct *sig = current->signal;\n\n\tBUG_ON(exit_code & 0x80); \n\n\tif (signal_group_exit(sig))\n\t\texit_code = sig->group_exit_code;\n\telse if (!thread_group_empty(current)) {\n\t\tstruct sighand_struct *const sighand = current->sighand;\n\n\t\tspin_lock_irq(&sighand->siglock);\n\t\tif (signal_group_exit(sig))\n\t\t\t\n\t\t\texit_code = sig->group_exit_code;\n\t\telse {\n\t\t\tsig->group_exit_code = exit_code;\n\t\t\tsig->flags = SIGNAL_GROUP_EXIT;\n\t\t\tzap_other_threads(current);\n\t\t}\n\t\tspin_unlock_irq(&sighand->siglock);\n\t}\n\n\tdo_exit(exit_code);\n\t\n}\n\n\nSYSCALL_DEFINE1(exit_group, int, error_code)\n{\n\tdo_group_exit((error_code & 0xff) << 8);\n\t\n\treturn 0;\n}\n\nstruct wait_opts {\n\tenum pid_type\t\two_type;\n\tint\t\t\two_flags;\n\tstruct pid\t\t*wo_pid;\n\n\tstruct siginfo __user\t*wo_info;\n\tint __user\t\t*wo_stat;\n\tstruct rusage __user\t*wo_rusage;\n\n\twait_queue_t\t\tchild_wait;\n\tint\t\t\tnotask_error;\n};\n\nstatic inline\nstruct pid *task_pid_type(struct task_struct *task, enum pid_type type)\n{\n\tif (type != PIDTYPE_PID)\n\t\ttask = task->group_leader;\n\treturn task->pids[type].pid;\n}\n\nstatic int eligible_pid(struct wait_opts *wo, struct task_struct *p)\n{\n\treturn\two->wo_type == PIDTYPE_MAX ||\n\t\ttask_pid_type(p, wo->wo_type) == wo->wo_pid;\n}\n\nstatic int eligible_child(struct wait_opts *wo, struct task_struct *p)\n{\n\tif (!eligible_pid(wo, p))\n\t\treturn 0;\n\t\n\tif (((p->exit_signal != SIGCHLD) ^ !!(wo->wo_flags & __WCLONE))\n\t    && !(wo->wo_flags & __WALL))\n\t\treturn 0;\n\n\treturn 1;\n}\n\nstatic int wait_noreap_copyout(struct wait_opts *wo, struct task_struct *p,\n\t\t\t\tpid_t pid, uid_t uid, int why, int status)\n{\n\tstruct siginfo __user *infop;\n\tint retval = wo->wo_rusage\n\t\t? getrusage(p, RUSAGE_BOTH, wo->wo_rusage) : 0;\n\n\tput_task_struct(p);\n\tinfop = wo->wo_info;\n\tif (infop) {\n\t\tif (!retval)\n\t\t\tretval = put_user(SIGCHLD, &infop->si_signo);\n\t\tif (!retval)\n\t\t\tretval = put_user(0, &infop->si_errno);\n\t\tif (!retval)\n\t\t\tretval = put_user((short)why, &infop->si_code);\n\t\tif (!retval)\n\t\t\tretval = put_user(pid, &infop->si_pid);\n\t\tif (!retval)\n\t\t\tretval = put_user(uid, &infop->si_uid);\n\t\tif (!retval)\n\t\t\tretval = put_user(status, &infop->si_status);\n\t}\n\tif (!retval)\n\t\tretval = pid;\n\treturn retval;\n}\n\n\nstatic int wait_task_zombie(struct wait_opts *wo, struct task_struct *p)\n{\n\tint state, retval, status;\n\tpid_t pid = task_pid_vnr(p);\n\tuid_t uid = from_kuid_munged(current_user_ns(), task_uid(p));\n\tstruct siginfo __user *infop;\n\n\tif (!likely(wo->wo_flags & WEXITED))\n\t\treturn 0;\n\n\tif (unlikely(wo->wo_flags & WNOWAIT)) {\n\t\tint exit_code = p->exit_code;\n\t\tint why;\n\n\t\tget_task_struct(p);\n\t\tread_unlock(&tasklist_lock);\n\t\tsched_annotate_sleep();\n\n\t\tif ((exit_code & 0x7f) == 0) {\n\t\t\twhy = CLD_EXITED;\n\t\t\tstatus = exit_code >> 8;\n\t\t} else {\n\t\t\twhy = (exit_code & 0x80) ? CLD_DUMPED : CLD_KILLED;\n\t\t\tstatus = exit_code & 0x7f;\n\t\t}\n\t\treturn wait_noreap_copyout(wo, p, pid, uid, why, status);\n\t}\n\t\n\tstate = (ptrace_reparented(p) && thread_group_leader(p)) ?\n\t\tEXIT_TRACE : EXIT_DEAD;\n\tif (cmpxchg(&p->exit_state, EXIT_ZOMBIE, state) != EXIT_ZOMBIE)\n\t\treturn 0;\n\t\n\tread_unlock(&tasklist_lock);\n\tsched_annotate_sleep();\n\n\t\n\tif (state == EXIT_DEAD && thread_group_leader(p)) {\n\t\tstruct signal_struct *sig = p->signal;\n\t\tstruct signal_struct *psig = current->signal;\n\t\tunsigned long maxrss;\n\t\tcputime_t tgutime, tgstime;\n\n\t\t\n\t\tthread_group_cputime_adjusted(p, &tgutime, &tgstime);\n\t\tspin_lock_irq(&current->sighand->siglock);\n\t\twrite_seqlock(&psig->stats_lock);\n\t\tpsig->cutime += tgutime + sig->cutime;\n\t\tpsig->cstime += tgstime + sig->cstime;\n\t\tpsig->cgtime += task_gtime(p) + sig->gtime + sig->cgtime;\n\t\tpsig->cmin_flt +=\n\t\t\tp->min_flt + sig->min_flt + sig->cmin_flt;\n\t\tpsig->cmaj_flt +=\n\t\t\tp->maj_flt + sig->maj_flt + sig->cmaj_flt;\n\t\tpsig->cnvcsw +=\n\t\t\tp->nvcsw + sig->nvcsw + sig->cnvcsw;\n\t\tpsig->cnivcsw +=\n\t\t\tp->nivcsw + sig->nivcsw + sig->cnivcsw;\n\t\tpsig->cinblock +=\n\t\t\ttask_io_get_inblock(p) +\n\t\t\tsig->inblock + sig->cinblock;\n\t\tpsig->coublock +=\n\t\t\ttask_io_get_oublock(p) +\n\t\t\tsig->oublock + sig->coublock;\n\t\tmaxrss = max(sig->maxrss, sig->cmaxrss);\n\t\tif (psig->cmaxrss < maxrss)\n\t\t\tpsig->cmaxrss = maxrss;\n\t\ttask_io_accounting_add(&psig->ioac, &p->ioac);\n\t\ttask_io_accounting_add(&psig->ioac, &sig->ioac);\n\t\twrite_sequnlock(&psig->stats_lock);\n\t\tspin_unlock_irq(&current->sighand->siglock);\n\t}\n\n\tretval = wo->wo_rusage\n\t\t? getrusage(p, RUSAGE_BOTH, wo->wo_rusage) : 0;\n\tstatus = (p->signal->flags & SIGNAL_GROUP_EXIT)\n\t\t? p->signal->group_exit_code : p->exit_code;\n\tif (!retval && wo->wo_stat)\n\t\tretval = put_user(status, wo->wo_stat);\n\n\tinfop = wo->wo_info;\n\tif (!retval && infop)\n\t\tretval = put_user(SIGCHLD, &infop->si_signo);\n\tif (!retval && infop)\n\t\tretval = put_user(0, &infop->si_errno);\n\tif (!retval && infop) {\n\t\tint why;\n\n\t\tif ((status & 0x7f) == 0) {\n\t\t\twhy = CLD_EXITED;\n\t\t\tstatus >>= 8;\n\t\t} else {\n\t\t\twhy = (status & 0x80) ? CLD_DUMPED : CLD_KILLED;\n\t\t\tstatus &= 0x7f;\n\t\t}\n\t\tretval = put_user((short)why, &infop->si_code);\n\t\tif (!retval)\n\t\t\tretval = put_user(status, &infop->si_status);\n\t}\n\tif (!retval && infop)\n\t\tretval = put_user(pid, &infop->si_pid);\n\tif (!retval && infop)\n\t\tretval = put_user(uid, &infop->si_uid);\n\tif (!retval)\n\t\tretval = pid;\n\n\tif (state == EXIT_TRACE) {\n\t\twrite_lock_irq(&tasklist_lock);\n\t\t\n\t\tptrace_unlink(p);\n\n\t\t\n\t\tstate = EXIT_ZOMBIE;\n\t\tif (do_notify_parent(p, p->exit_signal))\n\t\t\tstate = EXIT_DEAD;\n\t\tp->exit_state = state;\n\t\twrite_unlock_irq(&tasklist_lock);\n\t}\n\tif (state == EXIT_DEAD)\n\t\trelease_task(p);\n\n\treturn retval;\n}\n\nstatic int *task_stopped_code(struct task_struct *p, bool ptrace)\n{\n\tif (ptrace) {\n\t\tif (task_is_stopped_or_traced(p) &&\n\t\t    !(p->jobctl & JOBCTL_LISTENING))\n\t\t\treturn &p->exit_code;\n\t} else {\n\t\tif (p->signal->flags & SIGNAL_STOP_STOPPED)\n\t\t\treturn &p->signal->group_exit_code;\n\t}\n\treturn NULL;\n}\n\n\nstatic int wait_task_stopped(struct wait_opts *wo,\n\t\t\t\tint ptrace, struct task_struct *p)\n{\n\tstruct siginfo __user *infop;\n\tint retval, exit_code, *p_code, why;\n\tuid_t uid = 0; \n\tpid_t pid;\n\n\t\n\tif (!ptrace && !(wo->wo_flags & WUNTRACED))\n\t\treturn 0;\n\n\tif (!task_stopped_code(p, ptrace))\n\t\treturn 0;\n\n\texit_code = 0;\n\tspin_lock_irq(&p->sighand->siglock);\n\n\tp_code = task_stopped_code(p, ptrace);\n\tif (unlikely(!p_code))\n\t\tgoto unlock_sig;\n\n\texit_code = *p_code;\n\tif (!exit_code)\n\t\tgoto unlock_sig;\n\n\tif (!unlikely(wo->wo_flags & WNOWAIT))\n\t\t*p_code = 0;\n\n\tuid = from_kuid_munged(current_user_ns(), task_uid(p));\nunlock_sig:\n\tspin_unlock_irq(&p->sighand->siglock);\n\tif (!exit_code)\n\t\treturn 0;\n\n\t\n\tget_task_struct(p);\n\tpid = task_pid_vnr(p);\n\twhy = ptrace ? CLD_TRAPPED : CLD_STOPPED;\n\tread_unlock(&tasklist_lock);\n\tsched_annotate_sleep();\n\n\tif (unlikely(wo->wo_flags & WNOWAIT))\n\t\treturn wait_noreap_copyout(wo, p, pid, uid, why, exit_code);\n\n\tretval = wo->wo_rusage\n\t\t? getrusage(p, RUSAGE_BOTH, wo->wo_rusage) : 0;\n\tif (!retval && wo->wo_stat)\n\t\tretval = put_user((exit_code << 8) | 0x7f, wo->wo_stat);\n\n\tinfop = wo->wo_info;\n\tif (!retval && infop)\n\t\tretval = put_user(SIGCHLD, &infop->si_signo);\n\tif (!retval && infop)\n\t\tretval = put_user(0, &infop->si_errno);\n\tif (!retval && infop)\n\t\tretval = put_user((short)why, &infop->si_code);\n\tif (!retval && infop)\n\t\tretval = put_user(exit_code, &infop->si_status);\n\tif (!retval && infop)\n\t\tretval = put_user(pid, &infop->si_pid);\n\tif (!retval && infop)\n\t\tretval = put_user(uid, &infop->si_uid);\n\tif (!retval)\n\t\tretval = pid;\n\tput_task_struct(p);\n\n\tBUG_ON(!retval);\n\treturn retval;\n}\n\n\nstatic int wait_task_continued(struct wait_opts *wo, struct task_struct *p)\n{\n\tint retval;\n\tpid_t pid;\n\tuid_t uid;\n\n\tif (!unlikely(wo->wo_flags & WCONTINUED))\n\t\treturn 0;\n\n\tif (!(p->signal->flags & SIGNAL_STOP_CONTINUED))\n\t\treturn 0;\n\n\tspin_lock_irq(&p->sighand->siglock);\n\t\n\tif (!(p->signal->flags & SIGNAL_STOP_CONTINUED)) {\n\t\tspin_unlock_irq(&p->sighand->siglock);\n\t\treturn 0;\n\t}\n\tif (!unlikely(wo->wo_flags & WNOWAIT))\n\t\tp->signal->flags &= ~SIGNAL_STOP_CONTINUED;\n\tuid = from_kuid_munged(current_user_ns(), task_uid(p));\n\tspin_unlock_irq(&p->sighand->siglock);\n\n\tpid = task_pid_vnr(p);\n\tget_task_struct(p);\n\tread_unlock(&tasklist_lock);\n\tsched_annotate_sleep();\n\n\tif (!wo->wo_info) {\n\t\tretval = wo->wo_rusage\n\t\t\t? getrusage(p, RUSAGE_BOTH, wo->wo_rusage) : 0;\n\t\tput_task_struct(p);\n\t\tif (!retval && wo->wo_stat)\n\t\t\tretval = put_user(0xffff, wo->wo_stat);\n\t\tif (!retval)\n\t\t\tretval = pid;\n\t} else {\n\t\tretval = wait_noreap_copyout(wo, p, pid, uid,\n\t\t\t\t\t     CLD_CONTINUED, SIGCONT);\n\t\tBUG_ON(retval == 0);\n\t}\n\n\treturn retval;\n}\n\n\nstatic int wait_consider_task(struct wait_opts *wo, int ptrace,\n\t\t\t\tstruct task_struct *p)\n{\n\t\n\tint exit_state = ACCESS_ONCE(p->exit_state);\n\tint ret;\n\n\tif (unlikely(exit_state == EXIT_DEAD))\n\t\treturn 0;\n\n\tret = eligible_child(wo, p);\n\tif (!ret)\n\t\treturn ret;\n\n\tret = security_task_wait(p);\n\tif (unlikely(ret < 0)) {\n\t\t\n\t\tif (wo->notask_error)\n\t\t\two->notask_error = ret;\n\t\treturn 0;\n\t}\n\n\tif (unlikely(exit_state == EXIT_TRACE)) {\n\t\t\n\t\tif (likely(!ptrace))\n\t\t\two->notask_error = 0;\n\t\treturn 0;\n\t}\n\n\tif (likely(!ptrace) && unlikely(p->ptrace)) {\n\t\t\n\t\tif (!ptrace_reparented(p))\n\t\t\tptrace = 1;\n\t}\n\n\t\n\tif (exit_state == EXIT_ZOMBIE) {\n\t\t\n\t\tif (!delay_group_leader(p)) {\n\t\t\t\n\t\t\tif (unlikely(ptrace) || likely(!p->ptrace))\n\t\t\t\treturn wait_task_zombie(wo, p);\n\t\t}\n\n\t\t\n\t\tif (likely(!ptrace) || (wo->wo_flags & (WCONTINUED | WEXITED)))\n\t\t\two->notask_error = 0;\n\t} else {\n\t\t\n\t\two->notask_error = 0;\n\t}\n\n\t\n\tret = wait_task_stopped(wo, ptrace, p);\n\tif (ret)\n\t\treturn ret;\n\n\t\n\treturn wait_task_continued(wo, p);\n}\n\n\nstatic int do_wait_thread(struct wait_opts *wo, struct task_struct *tsk)\n{\n\tstruct task_struct *p;\n\n\tlist_for_each_entry(p, &tsk->children, sibling) {\n\t\tint ret = wait_consider_task(wo, 0, p);\n\n\t\tif (ret)\n\t\t\treturn ret;\n\t}\n\n\treturn 0;\n}\n\nstatic int ptrace_do_wait(struct wait_opts *wo, struct task_struct *tsk)\n{\n\tstruct task_struct *p;\n\n\tlist_for_each_entry(p, &tsk->ptraced, ptrace_entry) {\n\t\tint ret = wait_consider_task(wo, 1, p);\n\n\t\tif (ret)\n\t\t\treturn ret;\n\t}\n\n\treturn 0;\n}\n\nstatic int child_wait_callback(wait_queue_t *wait, unsigned mode,\n\t\t\t\tint sync, void *key)\n{\n\tstruct wait_opts *wo = container_of(wait, struct wait_opts,\n\t\t\t\t\t\tchild_wait);\n\tstruct task_struct *p = key;\n\n\tif (!eligible_pid(wo, p))\n\t\treturn 0;\n\n\tif ((wo->wo_flags & __WNOTHREAD) && wait->private != p->parent)\n\t\treturn 0;\n\n\treturn default_wake_function(wait, mode, sync, key);\n}\n\nvoid __wake_up_parent(struct task_struct *p, struct task_struct *parent)\n{\n\t__wake_up_sync_key(&parent->signal->wait_chldexit,\n\t\t\t\tTASK_INTERRUPTIBLE, 1, p);\n}\n\nstatic long do_wait(struct wait_opts *wo)\n{\n\tstruct task_struct *tsk;\n\tint retval;\n\n\ttrace_sched_process_wait(wo->wo_pid);\n\n\tinit_waitqueue_func_entry(&wo->child_wait, child_wait_callback);\n\two->child_wait.private = current;\n\tadd_wait_queue(&current->signal->wait_chldexit, &wo->child_wait);\nrepeat:\n\t\n\two->notask_error = -ECHILD;\n\tif ((wo->wo_type < PIDTYPE_MAX) &&\n\t   (!wo->wo_pid || hlist_empty(&wo->wo_pid->tasks[wo->wo_type])))\n\t\tgoto notask;\n\n\tset_current_state(TASK_INTERRUPTIBLE);\n\tread_lock(&tasklist_lock);\n\ttsk = current;\n\tdo {\n\t\tretval = do_wait_thread(wo, tsk);\n\t\tif (retval)\n\t\t\tgoto end;\n\n\t\tretval = ptrace_do_wait(wo, tsk);\n\t\tif (retval)\n\t\t\tgoto end;\n\n\t\tif (wo->wo_flags & __WNOTHREAD)\n\t\t\tbreak;\n\t} while_each_thread(current, tsk);\n\tread_unlock(&tasklist_lock);\n\nnotask:\n\tretval = wo->notask_error;\n\tif (!retval && !(wo->wo_flags & WNOHANG)) {\n\t\tretval = -ERESTARTSYS;\n\t\tif (!signal_pending(current)) {\n\t\t\tschedule();\n\t\t\tgoto repeat;\n\t\t}\n\t}\nend:\n\t__set_current_state(TASK_RUNNING);\n\tremove_wait_queue(&current->signal->wait_chldexit, &wo->child_wait);\n\treturn retval;\n}\n\nSYSCALL_DEFINE5(waitid, int, which, pid_t, upid, struct siginfo __user *,\n\t\tinfop, int, options, struct rusage __user *, ru)\n{\n\tstruct wait_opts wo;\n\tstruct pid *pid = NULL;\n\tenum pid_type type;\n\tlong ret;\n\n\tif (options & ~(WNOHANG|WNOWAIT|WEXITED|WSTOPPED|WCONTINUED))\n\t\treturn -EINVAL;\n\tif (!(options & (WEXITED|WSTOPPED|WCONTINUED)))\n\t\treturn -EINVAL;\n\n\tswitch (which) {\n\tcase P_ALL:\n\t\ttype = PIDTYPE_MAX;\n\t\tbreak;\n\tcase P_PID:\n\t\ttype = PIDTYPE_PID;\n\t\tif (upid <= 0)\n\t\t\treturn -EINVAL;\n\t\tbreak;\n\tcase P_PGID:\n\t\ttype = PIDTYPE_PGID;\n\t\tif (upid <= 0)\n\t\t\treturn -EINVAL;\n\t\tbreak;\n\tdefault:\n\t\treturn -EINVAL;\n\t}\n\n\tif (type < PIDTYPE_MAX)\n\t\tpid = find_get_pid(upid);\n\n\two.wo_type\t= type;\n\two.wo_pid\t= pid;\n\two.wo_flags\t= options;\n\two.wo_info\t= infop;\n\two.wo_stat\t= NULL;\n\two.wo_rusage\t= ru;\n\tret = do_wait(&wo);\n\n\tif (ret > 0) {\n\t\tret = 0;\n\t} else if (infop) {\n\t\t\n\t\tif (!ret)\n\t\t\tret = put_user(0, &infop->si_signo);\n\t\tif (!ret)\n\t\t\tret = put_user(0, &infop->si_errno);\n\t\tif (!ret)\n\t\t\tret = put_user(0, &infop->si_code);\n\t\tif (!ret)\n\t\t\tret = put_user(0, &infop->si_pid);\n\t\tif (!ret)\n\t\t\tret = put_user(0, &infop->si_uid);\n\t\tif (!ret)\n\t\t\tret = put_user(0, &infop->si_status);\n\t}\n\n\tput_pid(pid);\n\treturn ret;\n}\n\nSYSCALL_DEFINE4(wait4, pid_t, upid, int __user *, stat_addr,\n\t\tint, options, struct rusage __user *, ru)\n{\n\tstruct wait_opts wo;\n\tstruct pid *pid = NULL;\n\tenum pid_type type;\n\tlong ret;\n\n\tif (options & ~(WNOHANG|WUNTRACED|WCONTINUED|\n\t\t\t__WNOTHREAD|__WCLONE|__WALL))\n\t\treturn -EINVAL;\n\n\tif (upid == -1)\n\t\ttype = PIDTYPE_MAX;\n\telse if (upid < 0) {\n\t\ttype = PIDTYPE_PGID;\n\t\tpid = find_get_pid(-upid);\n\t} else if (upid == 0) {\n\t\ttype = PIDTYPE_PGID;\n\t\tpid = get_task_pid(current, PIDTYPE_PGID);\n\t} else  {\n\t\ttype = PIDTYPE_PID;\n\t\tpid = find_get_pid(upid);\n\t}\n\n\two.wo_type\t= type;\n\two.wo_pid\t= pid;\n\two.wo_flags\t= options | WEXITED;\n\two.wo_info\t= NULL;\n\two.wo_stat\t= stat_addr;\n\two.wo_rusage\t= ru;\n\tret = do_wait(&wo);\n\tput_pid(pid);\n\n\treturn ret;\n}\n\n#ifdef __ARCH_WANT_SYS_WAITPID\n\n\nSYSCALL_DEFINE3(waitpid, pid_t, pid, int __user *, stat_addr, int, options)\n{\n\treturn sys_wait4(pid, stat_addr, options, NULL);\n}\n\n#endif\n\n\n#include <linux/cpu.h>\n#include <linux/export.h>\n#include <linux/percpu.h>\n#include <linux/hrtimer.h>\n#include <linux/notifier.h>\n#include <linux/syscalls.h>\n#include <linux/kallsyms.h>\n#include <linux/interrupt.h>\n#include <linux/tick.h>\n#include <linux/seq_file.h>\n#include <linux/err.h>\n#include <linux/debugobjects.h>\n#include <linux/sched.h>\n#include <linux/sched/sysctl.h>\n#include <linux/sched/rt.h>\n#include <linux/sched/deadline.h>\n#include <linux/timer.h>\n#include <linux/freezer.h>\n\n#include <asm/uaccess.h>\n\n#include <trace/events/timer.h>\n\n#include \"", "955": "\",\n\t\t\tcurrent->comm, task_pid_nr(current), free);\n\t\tlowest_to_date = free;\n\t}\n\tspin_unlock(&low_water_lock);\n}\n#else\nstatic inline void check_stack_usage(void) {}\n#endif\n\nvoid do_exit(long code)\n{\n\tstruct task_struct *tsk = current;\n\tint group_dead;\n\tTASKS_RCU(int tasks_rcu_i);\n\n\tprofile_task_exit(tsk);\n\n\tWARN_ON(blk_needs_flush_plug(tsk));\n\n\tif (unlikely(in_interrupt()))\n\t\tpanic(\"", "956": "\",\n\t\t\tfather->signal->group_exit_code ?: father->exit_code);\n\t}\n\tzap_pid_ns_processes(pid_ns);\n\twrite_lock_irq(&tasklist_lock);\n\n\treturn father;\n}\n\n\nstatic struct task_struct *find_new_reaper(struct task_struct *father,\n\t\t\t\t\t   struct task_struct *child_reaper)\n{\n\tstruct task_struct *thread, *reaper;\n\n\tthread = find_alive_thread(father);\n\tif (thread)\n\t\treturn thread;\n\n\tif (father->signal->has_child_subreaper) {\n\t\t\n\t\tfor (reaper = father;\n\t\t     !same_thread_group(reaper, child_reaper);\n\t\t     reaper = reaper->real_parent) {\n\t\t\t\n\t\t\tif (reaper == &init_task)\n\t\t\t\tbreak;\n\t\t\tif (!reaper->signal->is_child_subreaper)\n\t\t\t\tcontinue;\n\t\t\tthread = find_alive_thread(reaper);\n\t\t\tif (thread)\n\t\t\t\treturn thread;\n\t\t}\n\t}\n\n\treturn child_reaper;\n}\n\n\nstatic void reparent_leader(struct task_struct *father, struct task_struct *p,\n\t\t\t\tstruct list_head *dead)\n{\n\tif (unlikely(p->exit_state == EXIT_DEAD))\n\t\treturn;\n\n\t\n\tp->exit_signal = SIGCHLD;\n\n\t\n\tif (!p->ptrace &&\n\t    p->exit_state == EXIT_ZOMBIE && thread_group_empty(p)) {\n\t\tif (do_notify_parent(p, p->exit_signal)) {\n\t\t\tp->exit_state = EXIT_DEAD;\n\t\t\tlist_add(&p->ptrace_entry, dead);\n\t\t}\n\t}\n\n\tkill_orphaned_pgrp(p, father);\n}\n\n\nstatic void forget_original_parent(struct task_struct *father,\n\t\t\t\t\tstruct list_head *dead)\n{\n\tstruct task_struct *p, *t, *reaper;\n\n\tif (unlikely(!list_empty(&father->ptraced)))\n\t\texit_ptrace(father, dead);\n\n\t\n\treaper = find_child_reaper(father);\n\tif (list_empty(&father->children))\n\t\treturn;\n\n\treaper = find_new_reaper(father, reaper);\n\tlist_for_each_entry(p, &father->children, sibling) {\n\t\tfor_each_thread(p, t) {\n\t\t\tt->real_parent = reaper;\n\t\t\tBUG_ON((!t->ptrace) != (t->parent == father));\n\t\t\tif (likely(!t->ptrace))\n\t\t\t\tt->parent = t->real_parent;\n\t\t\tif (t->pdeath_signal)\n\t\t\t\tgroup_send_sig_info(t->pdeath_signal,\n\t\t\t\t\t\t    SEND_SIG_NOINFO, t);\n\t\t}\n\t\t\n\t\tif (!same_thread_group(reaper, father))\n\t\t\treparent_leader(father, p, dead);\n\t}\n\tlist_splice_tail_init(&father->children, &reaper->children);\n}\n\n\nstatic void exit_notify(struct task_struct *tsk, int group_dead)\n{\n\tbool autoreap;\n\tstruct task_struct *p, *n;\n\tLIST_HEAD(dead);\n\n\twrite_lock_irq(&tasklist_lock);\n\tforget_original_parent(tsk, &dead);\n\n\tif (group_dead)\n\t\tkill_orphaned_pgrp(tsk->group_leader, NULL);\n\n\tif (unlikely(tsk->ptrace)) {\n\t\tint sig = thread_group_leader(tsk) &&\n\t\t\t\tthread_group_empty(tsk) &&\n\t\t\t\t!ptrace_reparented(tsk) ?\n\t\t\ttsk->exit_signal : SIGCHLD;\n\t\tautoreap = do_notify_parent(tsk, sig);\n\t} else if (thread_group_leader(tsk)) {\n\t\tautoreap = thread_group_empty(tsk) &&\n\t\t\tdo_notify_parent(tsk, tsk->exit_signal);\n\t} else {\n\t\tautoreap = true;\n\t}\n\n\ttsk->exit_state = autoreap ? EXIT_DEAD : EXIT_ZOMBIE;\n\tif (tsk->exit_state == EXIT_DEAD)\n\t\tlist_add(&tsk->ptrace_entry, &dead);\n\n\t\n\tif (unlikely(tsk->signal->notify_count < 0))\n\t\twake_up_process(tsk->signal->group_exit_task);\n\twrite_unlock_irq(&tasklist_lock);\n\n\tlist_for_each_entry_safe(p, n, &dead, ptrace_entry) {\n\t\tlist_del_init(&p->ptrace_entry);\n\t\trelease_task(p);\n\t}\n}\n\n#ifdef CONFIG_DEBUG_STACK_USAGE\nstatic void check_stack_usage(void)\n{\n\tstatic DEFINE_SPINLOCK(low_water_lock);\n\tstatic int lowest_to_date = THREAD_SIZE;\n\tunsigned long free;\n\n\tfree = stack_not_used(current);\n\n\tif (free >= lowest_to_date)\n\t\treturn;\n\n\tspin_lock(&low_water_lock);\n\tif (free < lowest_to_date) {\n\t\tpr_warn(\"", "957": "\",\n\t\t\ti == tr->clock_id ? \"", "958": "\",\n\t\t\tnew_log_buf_len);\n\t\treturn;\n\t}\n\n\traw_spin_lock_irqsave(&logbuf_lock, flags);\n\tlog_buf_len = new_log_buf_len;\n\tlog_buf = new_log_buf;\n\tnew_log_buf_len = 0;\n\tfree = __LOG_BUF_LEN - log_next_idx;\n\tmemcpy(log_buf, __log_buf, __LOG_BUF_LEN);\n\traw_spin_unlock_irqrestore(&logbuf_lock, flags);\n\n\tpr_info(\"", "959": "\",\n\t\t\tof_node_full_name(irq_data->np));\n\t\treturn 0;\n\t}\n\n\t\n\tif (domain->ops->xlate == NULL)\n\t\thwirq = irq_data->args[0];\n\telse {\n\t\tif (domain->ops->xlate(domain, irq_data->np, irq_data->args,\n\t\t\t\t\tirq_data->args_count, &hwirq, &type))\n\t\t\treturn 0;\n\t}\n\n\tif (irq_domain_is_hierarchy(domain)) {\n\t\t\n\t\tvirq = irq_find_mapping(domain, hwirq);\n\t\tif (virq)\n\t\t\treturn virq;\n\n\t\tvirq = irq_domain_alloc_irqs(domain, 1, NUMA_NO_NODE, irq_data);\n\t\tif (virq <= 0)\n\t\t\treturn 0;\n\t} else {\n\t\t\n\t\tvirq = irq_create_mapping(domain, hwirq);\n\t\tif (!virq)\n\t\t\treturn virq;\n\t}\n\n\t\n\tif (type != IRQ_TYPE_NONE &&\n\t    type != irq_get_trigger_type(virq))\n\t\tirq_set_irq_type(virq, type);\n\treturn virq;\n}\nEXPORT_SYMBOL_GPL(irq_create_of_mapping);\n\n\nvoid irq_dispose_mapping(unsigned int virq)\n{\n\tstruct irq_data *irq_data = irq_get_irq_data(virq);\n\tstruct irq_domain *domain;\n\n\tif (!virq || !irq_data)\n\t\treturn;\n\n\tdomain = irq_data->domain;\n\tif (WARN_ON(domain == NULL))\n\t\treturn;\n\n\tirq_domain_disassociate(domain, virq);\n\tirq_free_desc(virq);\n}\nEXPORT_SYMBOL_GPL(irq_dispose_mapping);\n\n\nunsigned int irq_find_mapping(struct irq_domain *domain,\n\t\t\t      irq_hw_number_t hwirq)\n{\n\tstruct irq_data *data;\n\n\t\n\tif (domain == NULL)\n\t\tdomain = irq_default_domain;\n\tif (domain == NULL)\n\t\treturn 0;\n\n\tif (hwirq < domain->revmap_direct_max_irq) {\n\t\tdata = irq_domain_get_irq_data(domain, hwirq);\n\t\tif (data && data->hwirq == hwirq)\n\t\t\treturn hwirq;\n\t}\n\n\t\n\tif (hwirq < domain->revmap_size)\n\t\treturn domain->linear_revmap[hwirq];\n\n\trcu_read_lock();\n\tdata = radix_tree_lookup(&domain->revmap_tree, hwirq);\n\trcu_read_unlock();\n\treturn data ? data->irq : 0;\n}\nEXPORT_SYMBOL_GPL(irq_find_mapping);\n\n#ifdef CONFIG_IRQ_DOMAIN_DEBUG\nstatic int virq_debug_show(struct seq_file *m, void *private)\n{\n\tunsigned long flags;\n\tstruct irq_desc *desc;\n\tstruct irq_domain *domain;\n\tstruct radix_tree_iter iter;\n\tvoid *data, **slot;\n\tint i;\n\n\tseq_printf(m, \"", "960": "\",\n\t\t\tset);\n\t\treturn -EINVAL;\n\t}\n\n\treturn 0;\n}\n\n\nstruct tracer nop_trace __read_mostly =\n{\n\t.name\t\t= \"", "961": "\",\n\t\t\tset);\n\t\treturn 0;\n\t}\n\n\tif (bit == TRACE_NOP_OPT_REFUSE) {\n\t\tprintk(KERN_DEBUG \"", "962": "\",\n\t\t       ((u32*)cred->security)[0],\n\t\t       ((u32*)cred->security)[1]);\n#endif\n}\n\n\nvoid __invalid_creds(const struct cred *cred, const char *file, unsigned line)\n{\n\tprintk(KERN_ERR \"", "963": "\",\n\t\t       (unsigned long)ts, rem_nsec / 1000);\n}\n\nstatic size_t print_prefix(const struct printk_log *msg, bool syslog, char *buf)\n{\n\tsize_t len = 0;\n\tunsigned int prefix = (msg->facility << 3) | msg->level;\n\n\tif (syslog) {\n\t\tif (buf) {\n\t\t\tlen += sprintf(buf, \"", "964": "\",\n\t\t       chan->last_toobig, chan->subbuf_size);\n\n\tlist_del(&chan->list);\n\tkref_put(&chan->kref, relay_destroy_channel);\n\tmutex_unlock(&relay_channels_mutex);\n}\nEXPORT_SYMBOL_GPL(relay_close);\n\n\nvoid relay_flush(struct rchan *chan)\n{\n\tunsigned int i;\n\n\tif (!chan)\n\t\treturn;\n\n\tif (chan->is_global && chan->buf[0]) {\n\t\trelay_switch_subbuf(chan->buf[0], 0);\n\t\treturn;\n\t}\n\n\tmutex_lock(&relay_channels_mutex);\n\tfor_each_possible_cpu(i)\n\t\tif (chan->buf[i])\n\t\t\trelay_switch_subbuf(chan->buf[i], 0);\n\tmutex_unlock(&relay_channels_mutex);\n}\nEXPORT_SYMBOL_GPL(relay_flush);\n\n\nstatic int relay_file_open(struct inode *inode, struct file *filp)\n{\n\tstruct rchan_buf *buf = inode->i_private;\n\tkref_get(&buf->kref);\n\tfilp->private_data = buf;\n\n\treturn nonseekable_open(inode, filp);\n}\n\n\nstatic int relay_file_mmap(struct file *filp, struct vm_area_struct *vma)\n{\n\tstruct rchan_buf *buf = filp->private_data;\n\treturn relay_mmap_buf(buf, vma);\n}\n\n\nstatic unsigned int relay_file_poll(struct file *filp, poll_table *wait)\n{\n\tunsigned int mask = 0;\n\tstruct rchan_buf *buf = filp->private_data;\n\n\tif (buf->finalized)\n\t\treturn POLLERR;\n\n\tif (filp->f_mode & FMODE_READ) {\n\t\tpoll_wait(filp, &buf->read_wait, wait);\n\t\tif (!relay_buf_empty(buf))\n\t\t\tmask |= POLLIN | POLLRDNORM;\n\t}\n\n\treturn mask;\n}\n\n\nstatic int relay_file_release(struct inode *inode, struct file *filp)\n{\n\tstruct rchan_buf *buf = filp->private_data;\n\tkref_put(&buf->kref, relay_remove_buf);\n\n\treturn 0;\n}\n\n\nstatic void relay_file_read_consume(struct rchan_buf *buf,\n\t\t\t\t    size_t read_pos,\n\t\t\t\t    size_t bytes_consumed)\n{\n\tsize_t subbuf_size = buf->chan->subbuf_size;\n\tsize_t n_subbufs = buf->chan->n_subbufs;\n\tsize_t read_subbuf;\n\n\tif (buf->subbufs_produced == buf->subbufs_consumed &&\n\t    buf->offset == buf->bytes_consumed)\n\t\treturn;\n\n\tif (buf->bytes_consumed + bytes_consumed > subbuf_size) {\n\t\trelay_subbufs_consumed(buf->chan, buf->cpu, 1);\n\t\tbuf->bytes_consumed = 0;\n\t}\n\n\tbuf->bytes_consumed += bytes_consumed;\n\tif (!read_pos)\n\t\tread_subbuf = buf->subbufs_consumed % n_subbufs;\n\telse\n\t\tread_subbuf = read_pos / buf->chan->subbuf_size;\n\tif (buf->bytes_consumed + buf->padding[read_subbuf] == subbuf_size) {\n\t\tif ((read_subbuf == buf->subbufs_produced % n_subbufs) &&\n\t\t    (buf->offset == subbuf_size))\n\t\t\treturn;\n\t\trelay_subbufs_consumed(buf->chan, buf->cpu, 1);\n\t\tbuf->bytes_consumed = 0;\n\t}\n}\n\n\nstatic int relay_file_read_avail(struct rchan_buf *buf, size_t read_pos)\n{\n\tsize_t subbuf_size = buf->chan->subbuf_size;\n\tsize_t n_subbufs = buf->chan->n_subbufs;\n\tsize_t produced = buf->subbufs_produced;\n\tsize_t consumed = buf->subbufs_consumed;\n\n\trelay_file_read_consume(buf, read_pos, 0);\n\n\tconsumed = buf->subbufs_consumed;\n\n\tif (unlikely(buf->offset > subbuf_size)) {\n\t\tif (produced == consumed)\n\t\t\treturn 0;\n\t\treturn 1;\n\t}\n\n\tif (unlikely(produced - consumed >= n_subbufs)) {\n\t\tconsumed = produced - n_subbufs + 1;\n\t\tbuf->subbufs_consumed = consumed;\n\t\tbuf->bytes_consumed = 0;\n\t}\n\n\tproduced = (produced % n_subbufs) * subbuf_size + buf->offset;\n\tconsumed = (consumed % n_subbufs) * subbuf_size + buf->bytes_consumed;\n\n\tif (consumed > produced)\n\t\tproduced += n_subbufs * subbuf_size;\n\n\tif (consumed == produced) {\n\t\tif (buf->offset == subbuf_size &&\n\t\t    buf->subbufs_produced > buf->subbufs_consumed)\n\t\t\treturn 1;\n\t\treturn 0;\n\t}\n\n\treturn 1;\n}\n\n\nstatic size_t relay_file_read_subbuf_avail(size_t read_pos,\n\t\t\t\t\t   struct rchan_buf *buf)\n{\n\tsize_t padding, avail = 0;\n\tsize_t read_subbuf, read_offset, write_subbuf, write_offset;\n\tsize_t subbuf_size = buf->chan->subbuf_size;\n\n\twrite_subbuf = (buf->data - buf->start) / subbuf_size;\n\twrite_offset = buf->offset > subbuf_size ? subbuf_size : buf->offset;\n\tread_subbuf = read_pos / subbuf_size;\n\tread_offset = read_pos % subbuf_size;\n\tpadding = buf->padding[read_subbuf];\n\n\tif (read_subbuf == write_subbuf) {\n\t\tif (read_offset + padding < write_offset)\n\t\t\tavail = write_offset - (read_offset + padding);\n\t} else\n\t\tavail = (subbuf_size - padding) - read_offset;\n\n\treturn avail;\n}\n\n\nstatic size_t relay_file_read_start_pos(size_t read_pos,\n\t\t\t\t\tstruct rchan_buf *buf)\n{\n\tsize_t read_subbuf, padding, padding_start, padding_end;\n\tsize_t subbuf_size = buf->chan->subbuf_size;\n\tsize_t n_subbufs = buf->chan->n_subbufs;\n\tsize_t consumed = buf->subbufs_consumed % n_subbufs;\n\n\tif (!read_pos)\n\t\tread_pos = consumed * subbuf_size + buf->bytes_consumed;\n\tread_subbuf = read_pos / subbuf_size;\n\tpadding = buf->padding[read_subbuf];\n\tpadding_start = (read_subbuf + 1) * subbuf_size - padding;\n\tpadding_end = (read_subbuf + 1) * subbuf_size;\n\tif (read_pos >= padding_start && read_pos < padding_end) {\n\t\tread_subbuf = (read_subbuf + 1) % n_subbufs;\n\t\tread_pos = read_subbuf * subbuf_size;\n\t}\n\n\treturn read_pos;\n}\n\n\nstatic size_t relay_file_read_end_pos(struct rchan_buf *buf,\n\t\t\t\t      size_t read_pos,\n\t\t\t\t      size_t count)\n{\n\tsize_t read_subbuf, padding, end_pos;\n\tsize_t subbuf_size = buf->chan->subbuf_size;\n\tsize_t n_subbufs = buf->chan->n_subbufs;\n\n\tread_subbuf = read_pos / subbuf_size;\n\tpadding = buf->padding[read_subbuf];\n\tif (read_pos % subbuf_size + count + padding == subbuf_size)\n\t\tend_pos = (read_subbuf + 1) * subbuf_size;\n\telse\n\t\tend_pos = read_pos + count;\n\tif (end_pos >= subbuf_size * n_subbufs)\n\t\tend_pos = 0;\n\n\treturn end_pos;\n}\n\n\nstatic int subbuf_read_actor(size_t read_start,\n\t\t\t     struct rchan_buf *buf,\n\t\t\t     size_t avail,\n\t\t\t     read_descriptor_t *desc)\n{\n\tvoid *from;\n\tint ret = 0;\n\n\tfrom = buf->start + read_start;\n\tret = avail;\n\tif (copy_to_user(desc->arg.buf, from, avail)) {\n\t\tdesc->error = -EFAULT;\n\t\tret = 0;\n\t}\n\tdesc->arg.data += ret;\n\tdesc->written += ret;\n\tdesc->count -= ret;\n\n\treturn ret;\n}\n\ntypedef int (*subbuf_actor_t) (size_t read_start,\n\t\t\t       struct rchan_buf *buf,\n\t\t\t       size_t avail,\n\t\t\t       read_descriptor_t *desc);\n\n\nstatic ssize_t relay_file_read_subbufs(struct file *filp, loff_t *ppos,\n\t\t\t\t\tsubbuf_actor_t subbuf_actor,\n\t\t\t\t\tread_descriptor_t *desc)\n{\n\tstruct rchan_buf *buf = filp->private_data;\n\tsize_t read_start, avail;\n\tint ret;\n\n\tif (!desc->count)\n\t\treturn 0;\n\n\tmutex_lock(&file_inode(filp)->i_mutex);\n\tdo {\n\t\tif (!relay_file_read_avail(buf, *ppos))\n\t\t\tbreak;\n\n\t\tread_start = relay_file_read_start_pos(*ppos, buf);\n\t\tavail = relay_file_read_subbuf_avail(read_start, buf);\n\t\tif (!avail)\n\t\t\tbreak;\n\n\t\tavail = min(desc->count, avail);\n\t\tret = subbuf_actor(read_start, buf, avail, desc);\n\t\tif (desc->error < 0)\n\t\t\tbreak;\n\n\t\tif (ret) {\n\t\t\trelay_file_read_consume(buf, read_start, ret);\n\t\t\t*ppos = relay_file_read_end_pos(buf, read_start, ret);\n\t\t}\n\t} while (desc->count && ret);\n\tmutex_unlock(&file_inode(filp)->i_mutex);\n\n\treturn desc->written;\n}\n\nstatic ssize_t relay_file_read(struct file *filp,\n\t\t\t       char __user *buffer,\n\t\t\t       size_t count,\n\t\t\t       loff_t *ppos)\n{\n\tread_descriptor_t desc;\n\tdesc.written = 0;\n\tdesc.count = count;\n\tdesc.arg.buf = buffer;\n\tdesc.error = 0;\n\treturn relay_file_read_subbufs(filp, ppos, subbuf_read_actor, &desc);\n}\n\nstatic void relay_consume_bytes(struct rchan_buf *rbuf, int bytes_consumed)\n{\n\trbuf->bytes_consumed += bytes_consumed;\n\n\tif (rbuf->bytes_consumed >= rbuf->chan->subbuf_size) {\n\t\trelay_subbufs_consumed(rbuf->chan, rbuf->cpu, 1);\n\t\trbuf->bytes_consumed %= rbuf->chan->subbuf_size;\n\t}\n}\n\nstatic void relay_pipe_buf_release(struct pipe_inode_info *pipe,\n\t\t\t\t   struct pipe_buffer *buf)\n{\n\tstruct rchan_buf *rbuf;\n\n\trbuf = (struct rchan_buf *)page_private(buf->page);\n\trelay_consume_bytes(rbuf, buf->private);\n}\n\nstatic const struct pipe_buf_operations relay_pipe_buf_ops = {\n\t.can_merge = 0,\n\t.confirm = generic_pipe_buf_confirm,\n\t.release = relay_pipe_buf_release,\n\t.steal = generic_pipe_buf_steal,\n\t.get = generic_pipe_buf_get,\n};\n\nstatic void relay_page_release(struct splice_pipe_desc *spd, unsigned int i)\n{\n}\n\n\nstatic ssize_t subbuf_splice_actor(struct file *in,\n\t\t\t       loff_t *ppos,\n\t\t\t       struct pipe_inode_info *pipe,\n\t\t\t       size_t len,\n\t\t\t       unsigned int flags,\n\t\t\t       int *nonpad_ret)\n{\n\tunsigned int pidx, poff, total_len, subbuf_pages, nr_pages;\n\tstruct rchan_buf *rbuf = in->private_data;\n\tunsigned int subbuf_size = rbuf->chan->subbuf_size;\n\tuint64_t pos = (uint64_t) *ppos;\n\tuint32_t alloc_size = (uint32_t) rbuf->chan->alloc_size;\n\tsize_t read_start = (size_t) do_div(pos, alloc_size);\n\tsize_t read_subbuf = read_start / subbuf_size;\n\tsize_t padding = rbuf->padding[read_subbuf];\n\tsize_t nonpad_end = read_subbuf * subbuf_size + subbuf_size - padding;\n\tstruct page *pages[PIPE_DEF_BUFFERS];\n\tstruct partial_page partial[PIPE_DEF_BUFFERS];\n\tstruct splice_pipe_desc spd = {\n\t\t.pages = pages,\n\t\t.nr_pages = 0,\n\t\t.nr_pages_max = PIPE_DEF_BUFFERS,\n\t\t.partial = partial,\n\t\t.flags = flags,\n\t\t.ops = &relay_pipe_buf_ops,\n\t\t.spd_release = relay_page_release,\n\t};\n\tssize_t ret;\n\n\tif (rbuf->subbufs_produced == rbuf->subbufs_consumed)\n\t\treturn 0;\n\tif (splice_grow_spd(pipe, &spd))\n\t\treturn -ENOMEM;\n\n\t\n\tif (len > (subbuf_size - read_start % subbuf_size))\n\t\tlen = subbuf_size - read_start % subbuf_size;\n\n\tsubbuf_pages = rbuf->chan->alloc_size >> PAGE_SHIFT;\n\tpidx = (read_start / PAGE_SIZE) % subbuf_pages;\n\tpoff = read_start & ~PAGE_MASK;\n\tnr_pages = min_t(unsigned int, subbuf_pages, spd.nr_pages_max);\n\n\tfor (total_len = 0; spd.nr_pages < nr_pages; spd.nr_pages++) {\n\t\tunsigned int this_len, this_end, private;\n\t\tunsigned int cur_pos = read_start + total_len;\n\n\t\tif (!len)\n\t\t\tbreak;\n\n\t\tthis_len = min_t(unsigned long, len, PAGE_SIZE - poff);\n\t\tprivate = this_len;\n\n\t\tspd.pages[spd.nr_pages] = rbuf->page_array[pidx];\n\t\tspd.partial[spd.nr_pages].offset = poff;\n\n\t\tthis_end = cur_pos + this_len;\n\t\tif (this_end >= nonpad_end) {\n\t\t\tthis_len = nonpad_end - cur_pos;\n\t\t\tprivate = this_len + padding;\n\t\t}\n\t\tspd.partial[spd.nr_pages].len = this_len;\n\t\tspd.partial[spd.nr_pages].private = private;\n\n\t\tlen -= this_len;\n\t\ttotal_len += this_len;\n\t\tpoff = 0;\n\t\tpidx = (pidx + 1) % subbuf_pages;\n\n\t\tif (this_end >= nonpad_end) {\n\t\t\tspd.nr_pages++;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tret = 0;\n\tif (!spd.nr_pages)\n\t\tgoto out;\n\n\tret = *nonpad_ret = splice_to_pipe(pipe, &spd);\n\tif (ret < 0 || ret < total_len)\n\t\tgoto out;\n\n        if (read_start + ret == nonpad_end)\n                ret += padding;\n\nout:\n\tsplice_shrink_spd(&spd);\n\treturn ret;\n}\n\nstatic ssize_t relay_file_splice_read(struct file *in,\n\t\t\t\t      loff_t *ppos,\n\t\t\t\t      struct pipe_inode_info *pipe,\n\t\t\t\t      size_t len,\n\t\t\t\t      unsigned int flags)\n{\n\tssize_t spliced;\n\tint ret;\n\tint nonpad_ret = 0;\n\n\tret = 0;\n\tspliced = 0;\n\n\twhile (len && !spliced) {\n\t\tret = subbuf_splice_actor(in, ppos, pipe, len, flags, &nonpad_ret);\n\t\tif (ret < 0)\n\t\t\tbreak;\n\t\telse if (!ret) {\n\t\t\tif (flags & SPLICE_F_NONBLOCK)\n\t\t\t\tret = -EAGAIN;\n\t\t\tbreak;\n\t\t}\n\n\t\t*ppos += ret;\n\t\tif (ret > len)\n\t\t\tlen = 0;\n\t\telse\n\t\t\tlen -= ret;\n\t\tspliced += nonpad_ret;\n\t\tnonpad_ret = 0;\n\t}\n\n\tif (spliced)\n\t\treturn spliced;\n\n\treturn ret;\n}\n\nconst struct file_operations relay_file_operations = {\n\t.open\t\t= relay_file_open,\n\t.poll\t\t= relay_file_poll,\n\t.mmap\t\t= relay_file_mmap,\n\t.read\t\t= relay_file_read,\n\t.llseek\t\t= no_llseek,\n\t.release\t= relay_file_release,\n\t.splice_read\t= relay_file_splice_read,\n};\nEXPORT_SYMBOL_GPL(relay_file_operations);\n\nstatic __init int relay_init(void)\n{\n\n\thotcpu_notifier(relay_hotcpu_callback, 0);\n\treturn 0;\n}\n\nearly_initcall(relay_init);\n\n\n#include <linux/sched.h>\n#include <linux/completion.h>\n\n\nvoid complete(struct completion *x)\n{\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&x->wait.lock, flags);\n\tx->done++;\n\t__wake_up_locked(&x->wait, TASK_NORMAL, 1);\n\tspin_unlock_irqrestore(&x->wait.lock, flags);\n}\nEXPORT_SYMBOL(complete);\n\n\nvoid complete_all(struct completion *x)\n{\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&x->wait.lock, flags);\n\tx->done += UINT_MAX/2;\n\t__wake_up_locked(&x->wait, TASK_NORMAL, 0);\n\tspin_unlock_irqrestore(&x->wait.lock, flags);\n}\nEXPORT_SYMBOL(complete_all);\n\nstatic inline long __sched\ndo_wait_for_common(struct completion *x,\n\t\t   long (*action)(long), long timeout, int state)\n{\n\tif (!x->done) {\n\t\tDECLARE_WAITQUEUE(wait, current);\n\n\t\t__add_wait_queue_tail_exclusive(&x->wait, &wait);\n\t\tdo {\n\t\t\tif (signal_pending_state(state, current)) {\n\t\t\t\ttimeout = -ERESTARTSYS;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t__set_current_state(state);\n\t\t\tspin_unlock_irq(&x->wait.lock);\n\t\t\ttimeout = action(timeout);\n\t\t\tspin_lock_irq(&x->wait.lock);\n\t\t} while (!x->done && timeout);\n\t\t__remove_wait_queue(&x->wait, &wait);\n\t\tif (!x->done)\n\t\t\treturn timeout;\n\t}\n\tx->done--;\n\treturn timeout ?: 1;\n}\n\nstatic inline long __sched\n__wait_for_common(struct completion *x,\n\t\t  long (*action)(long), long timeout, int state)\n{\n\tmight_sleep();\n\n\tspin_lock_irq(&x->wait.lock);\n\ttimeout = do_wait_for_common(x, action, timeout, state);\n\tspin_unlock_irq(&x->wait.lock);\n\treturn timeout;\n}\n\nstatic long __sched\nwait_for_common(struct completion *x, long timeout, int state)\n{\n\treturn __wait_for_common(x, schedule_timeout, timeout, state);\n}\n\nstatic long __sched\nwait_for_common_io(struct completion *x, long timeout, int state)\n{\n\treturn __wait_for_common(x, io_schedule_timeout, timeout, state);\n}\n\n\nvoid __sched wait_for_completion(struct completion *x)\n{\n\twait_for_common(x, MAX_SCHEDULE_TIMEOUT, TASK_UNINTERRUPTIBLE);\n}\nEXPORT_SYMBOL(wait_for_completion);\n\n\nunsigned long __sched\nwait_for_completion_timeout(struct completion *x, unsigned long timeout)\n{\n\treturn wait_for_common(x, timeout, TASK_UNINTERRUPTIBLE);\n}\nEXPORT_SYMBOL(wait_for_completion_timeout);\n\n\nvoid __sched wait_for_completion_io(struct completion *x)\n{\n\twait_for_common_io(x, MAX_SCHEDULE_TIMEOUT, TASK_UNINTERRUPTIBLE);\n}\nEXPORT_SYMBOL(wait_for_completion_io);\n\n\nunsigned long __sched\nwait_for_completion_io_timeout(struct completion *x, unsigned long timeout)\n{\n\treturn wait_for_common_io(x, timeout, TASK_UNINTERRUPTIBLE);\n}\nEXPORT_SYMBOL(wait_for_completion_io_timeout);\n\n\nint __sched wait_for_completion_interruptible(struct completion *x)\n{\n\tlong t = wait_for_common(x, MAX_SCHEDULE_TIMEOUT, TASK_INTERRUPTIBLE);\n\tif (t == -ERESTARTSYS)\n\t\treturn t;\n\treturn 0;\n}\nEXPORT_SYMBOL(wait_for_completion_interruptible);\n\n\nlong __sched\nwait_for_completion_interruptible_timeout(struct completion *x,\n\t\t\t\t\t  unsigned long timeout)\n{\n\treturn wait_for_common(x, timeout, TASK_INTERRUPTIBLE);\n}\nEXPORT_SYMBOL(wait_for_completion_interruptible_timeout);\n\n\nint __sched wait_for_completion_killable(struct completion *x)\n{\n\tlong t = wait_for_common(x, MAX_SCHEDULE_TIMEOUT, TASK_KILLABLE);\n\tif (t == -ERESTARTSYS)\n\t\treturn t;\n\treturn 0;\n}\nEXPORT_SYMBOL(wait_for_completion_killable);\n\n\nlong __sched\nwait_for_completion_killable_timeout(struct completion *x,\n\t\t\t\t     unsigned long timeout)\n{\n\treturn wait_for_common(x, timeout, TASK_KILLABLE);\n}\nEXPORT_SYMBOL(wait_for_completion_killable_timeout);\n\n\nbool try_wait_for_completion(struct completion *x)\n{\n\tunsigned long flags;\n\tint ret = 1;\n\n\t\n\tif (!READ_ONCE(x->done))\n\t\treturn 0;\n\n\tspin_lock_irqsave(&x->wait.lock, flags);\n\tif (!x->done)\n\t\tret = 0;\n\telse\n\t\tx->done--;\n\tspin_unlock_irqrestore(&x->wait.lock, flags);\n\treturn ret;\n}\nEXPORT_SYMBOL(try_wait_for_completion);\n\n\nbool completion_done(struct completion *x)\n{\n\tif (!READ_ONCE(x->done))\n\t\treturn false;\n\n\t\n\tsmp_rmb();\n\tspin_unlock_wait(&x->wait.lock);\n\treturn true;\n}\nEXPORT_SYMBOL(completion_done);\n\n\n#include <linux/kdb.h>\n#include <linux/keyboard.h>\n#include <linux/ctype.h>\n#include <linux/module.h>\n#include <linux/io.h>\n\n\n\n#define KBD_STATUS_REG\t\t0x64\t\n#define KBD_DATA_REG\t\t0x60\t\n\n\n\n#define KBD_STAT_OBF \t\t0x01\t\n#define KBD_STAT_MOUSE_OBF\t0x20\t\n\nstatic int kbd_exists;\nstatic int kbd_last_ret;\n\n\nint kdb_get_kbd_char(void)\n{\n\tint scancode, scanstatus;\n\tstatic int shift_lock;\t\n\tstatic int shift_key;\t\n\tstatic int ctrl_key;\n\tu_short keychar;\n\n\tif (KDB_FLAG(NO_I8042) || KDB_FLAG(NO_VT_CONSOLE) ||\n\t    (inb(KBD_STATUS_REG) == 0xff && inb(KBD_DATA_REG) == 0xff)) {\n\t\tkbd_exists = 0;\n\t\treturn -1;\n\t}\n\tkbd_exists = 1;\n\n\tif ((inb(KBD_STATUS_REG) & KBD_STAT_OBF) == 0)\n\t\treturn -1;\n\n\t\n\tscancode = inb(KBD_DATA_REG);\n\tscanstatus = inb(KBD_STATUS_REG);\n\n\t\n\tif (scanstatus & KBD_STAT_MOUSE_OBF)\n\t\treturn -1;\n\n\t\n\n\tif (((scancode&0x7f) == 0x2a) || ((scancode&0x7f) == 0x36)) {\n\t\t\n\t\tif ((scancode & 0x80) == 0)\n\t\t\tshift_key = 1;\n\t\telse\n\t\t\tshift_key = 0;\n\t\treturn -1;\n\t}\n\n\tif ((scancode&0x7f) == 0x1d) {\n\t\t\n\t\tif ((scancode & 0x80) == 0)\n\t\t\tctrl_key = 1;\n\t\telse\n\t\t\tctrl_key = 0;\n\t\treturn -1;\n\t}\n\n\tif ((scancode & 0x80) != 0) {\n\t\tif (scancode == 0x9c)\n\t\t\tkbd_last_ret = 0;\n\t\treturn -1;\n\t}\n\n\tscancode &= 0x7f;\n\n\t\n\n\tif (scancode == 0x3a) {\n\t\t\n\t\tshift_lock ^= 1;\n\n#ifdef\tKDB_BLINK_LED\n\t\tkdb_toggleled(0x4);\n#endif\n\t\treturn -1;\n\t}\n\n\tif (scancode == 0x0e) {\n\t\t\n\t\treturn 8;\n\t}\n\n\t\n\tswitch (scancode) {\n\tcase 0xF: \n\t\treturn 9;\n\tcase 0x53: \n\t\treturn 4;\n\tcase 0x47: \n\t\treturn 1;\n\tcase 0x4F: \n\t\treturn 5;\n\tcase 0x4B: \n\t\treturn 2;\n\tcase 0x48: \n\t\treturn 16;\n\tcase 0x50: \n\t\treturn 14;\n\tcase 0x4D: \n\t\treturn 6;\n\t}\n\n\tif (scancode == 0xe0)\n\t\treturn -1;\n\n\t\n\tif (scancode == 0x73)\n\t\tscancode = 0x59;\n\telse if (scancode == 0x7d)\n\t\tscancode = 0x7c;\n\n\tif (!shift_lock && !shift_key && !ctrl_key) {\n\t\tkeychar = plain_map[scancode];\n\t} else if ((shift_lock || shift_key) && key_maps[1]) {\n\t\tkeychar = key_maps[1][scancode];\n\t} else if (ctrl_key && key_maps[4]) {\n\t\tkeychar = key_maps[4][scancode];\n\t} else {\n\t\tkeychar = 0x0020;\n\t\tkdb_printf(\"", "965": "\",\n\t\t       cpumask_pr_args(tr->tracing_cpumask));\n\tif (len >= count) {\n\t\tcount = -EINVAL;\n\t\tgoto out_err;\n\t}\n\tcount = simple_read_from_buffer(ubuf, count, ppos, mask_str, NR_CPUS+1);\n\nout_err:\n\tmutex_unlock(&tracing_cpumask_update_lock);\n\n\treturn count;\n}\n\nstatic ssize_t\ntracing_cpumask_write(struct file *filp, const char __user *ubuf,\n\t\t      size_t count, loff_t *ppos)\n{\n\tstruct trace_array *tr = file_inode(filp)->i_private;\n\tcpumask_var_t tracing_cpumask_new;\n\tint err, cpu;\n\n\tif (!alloc_cpumask_var(&tracing_cpumask_new, GFP_KERNEL))\n\t\treturn -ENOMEM;\n\n\terr = cpumask_parse_user(ubuf, count, tracing_cpumask_new);\n\tif (err)\n\t\tgoto err_unlock;\n\n\tmutex_lock(&tracing_cpumask_update_lock);\n\n\tlocal_irq_disable();\n\tarch_spin_lock(&tr->max_lock);\n\tfor_each_tracing_cpu(cpu) {\n\t\t\n\t\tif (cpumask_test_cpu(cpu, tr->tracing_cpumask) &&\n\t\t\t\t!cpumask_test_cpu(cpu, tracing_cpumask_new)) {\n\t\t\tatomic_inc(&per_cpu_ptr(tr->trace_buffer.data, cpu)->disabled);\n\t\t\tring_buffer_record_disable_cpu(tr->trace_buffer.buffer, cpu);\n\t\t}\n\t\tif (!cpumask_test_cpu(cpu, tr->tracing_cpumask) &&\n\t\t\t\tcpumask_test_cpu(cpu, tracing_cpumask_new)) {\n\t\t\tatomic_dec(&per_cpu_ptr(tr->trace_buffer.data, cpu)->disabled);\n\t\t\tring_buffer_record_enable_cpu(tr->trace_buffer.buffer, cpu);\n\t\t}\n\t}\n\tarch_spin_unlock(&tr->max_lock);\n\tlocal_irq_enable();\n\n\tcpumask_copy(tr->tracing_cpumask, tracing_cpumask_new);\n\n\tmutex_unlock(&tracing_cpumask_update_lock);\n\tfree_cpumask_var(tracing_cpumask_new);\n\n\treturn count;\n\nerr_unlock:\n\tfree_cpumask_var(tracing_cpumask_new);\n\n\treturn err;\n}\n\nstatic const struct file_operations tracing_cpumask_fops = {\n\t.open\t\t= tracing_open_generic_tr,\n\t.read\t\t= tracing_cpumask_read,\n\t.write\t\t= tracing_cpumask_write,\n\t.release\t= tracing_release_generic_tr,\n\t.llseek\t\t= generic_file_llseek,\n};\n\nstatic int tracing_trace_options_show(struct seq_file *m, void *v)\n{\n\tstruct tracer_opt *trace_opts;\n\tstruct trace_array *tr = m->private;\n\tu32 tracer_flags;\n\tint i;\n\n\tmutex_lock(&trace_types_lock);\n\ttracer_flags = tr->current_trace->flags->val;\n\ttrace_opts = tr->current_trace->flags->opts;\n\n\tfor (i = 0; trace_options[i]; i++) {\n\t\tif (trace_flags & (1 << i))\n\t\t\tseq_printf(m, \"", "966": "\",\n\t\t       log_lvl, dump_stack_arch_desc_str);\n\n\tprint_worker_info(log_lvl, current);\n}\n\n\nvoid show_regs_print_info(const char *log_lvl)\n{\n\tdump_stack_print_info(log_lvl);\n\n\tprintk(\"", "967": "\",\n\t\t       rcp->name, rcp->ticks_this_gp, DYNTICK_TASK_EXIT_IDLE,\n\t\t       jiffies - rcp->gp_start, rcp->qlen);\n\t\tdump_stack();\n\t\tACCESS_ONCE(rcp->jiffies_stall) = jiffies +\n\t\t\t3 * rcu_jiffies_till_stall_check() + 3;\n\t} else if (ULONG_CMP_GE(j, js)) {\n\t\tACCESS_ONCE(rcp->jiffies_stall) = jiffies + rcu_jiffies_till_stall_check();\n\t}\n}\n\nstatic void reset_cpu_stall_ticks(struct rcu_ctrlblk *rcp)\n{\n\trcp->ticks_this_gp = 0;\n\trcp->gp_start = jiffies;\n\tACCESS_ONCE(rcp->jiffies_stall) = jiffies + rcu_jiffies_till_stall_check();\n}\n\nstatic void check_cpu_stalls(void)\n{\n\tRCU_TRACE(check_cpu_stall(&rcu_bh_ctrlblk));\n\tRCU_TRACE(check_cpu_stall(&rcu_sched_ctrlblk));\n}\n\n#endif \n\n\n#include <linux/gfp.h>\n#include <linux/sched.h>\n#include <linux/sched/rt.h>\n#include <linux/slab.h>\n#include \"", "968": "\",\n\t\t      \"", "969": "\",\n\t\t      (msg->facility << 3) | msg->level,\n\t\t      user->seq, ts_usec, cont);\n\tuser->prev = msg->flags;\n\n\t\n\tfor (i = 0; i < msg->text_len; i++) {\n\t\tunsigned char c = log_text(msg)[i];\n\n\t\tif (c < ' ' || c >= 127 || c == '\\\\')\n\t\t\tlen += sprintf(user->buf + len, \"", "970": "\",\n\t\t     *ptr == (unsigned long)-1 ? -1 : nsecs_to_usecs(*ptr));\n\tif (r > sizeof(buf))\n\t\tr = sizeof(buf);\n\treturn simple_read_from_buffer(ubuf, cnt, ppos, buf, r);\n}\n\nstatic ssize_t\ntracing_nsecs_write(unsigned long *ptr, const char __user *ubuf,\n\t\t    size_t cnt, loff_t *ppos)\n{\n\tunsigned long val;\n\tint ret;\n\n\tret = kstrtoul_from_user(ubuf, cnt, 10, &val);\n\tif (ret)\n\t\treturn ret;\n\n\t*ptr = val * 1000;\n\n\treturn cnt;\n}\n\nstatic ssize_t\ntracing_thresh_read(struct file *filp, char __user *ubuf,\n\t\t    size_t cnt, loff_t *ppos)\n{\n\treturn tracing_nsecs_read(&tracing_thresh, ubuf, cnt, ppos);\n}\n\nstatic ssize_t\ntracing_thresh_write(struct file *filp, const char __user *ubuf,\n\t\t     size_t cnt, loff_t *ppos)\n{\n\tstruct trace_array *tr = filp->private_data;\n\tint ret;\n\n\tmutex_lock(&trace_types_lock);\n\tret = tracing_nsecs_write(&tracing_thresh, ubuf, cnt, ppos);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (tr->current_trace->update_thresh) {\n\t\tret = tr->current_trace->update_thresh(tr);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n\n\tret = cnt;\nout:\n\tmutex_unlock(&trace_types_lock);\n\n\treturn ret;\n}\n\nstatic ssize_t\ntracing_max_lat_read(struct file *filp, char __user *ubuf,\n\t\t     size_t cnt, loff_t *ppos)\n{\n\treturn tracing_nsecs_read(filp->private_data, ubuf, cnt, ppos);\n}\n\nstatic ssize_t\ntracing_max_lat_write(struct file *filp, const char __user *ubuf,\n\t\t      size_t cnt, loff_t *ppos)\n{\n\treturn tracing_nsecs_write(filp->private_data, ubuf, cnt, ppos);\n}\n\nstatic int tracing_open_pipe(struct inode *inode, struct file *filp)\n{\n\tstruct trace_array *tr = inode->i_private;\n\tstruct trace_iterator *iter;\n\tint ret = 0;\n\n\tif (tracing_disabled)\n\t\treturn -ENODEV;\n\n\tif (trace_array_get(tr) < 0)\n\t\treturn -ENODEV;\n\n\tmutex_lock(&trace_types_lock);\n\n\t\n\titer = kzalloc(sizeof(*iter), GFP_KERNEL);\n\tif (!iter) {\n\t\tret = -ENOMEM;\n\t\t__trace_array_put(tr);\n\t\tgoto out;\n\t}\n\n\ttrace_seq_init(&iter->seq);\n\titer->trace = tr->current_trace;\n\n\tif (!alloc_cpumask_var(&iter->started, GFP_KERNEL)) {\n\t\tret = -ENOMEM;\n\t\tgoto fail;\n\t}\n\n\t\n\tcpumask_setall(iter->started);\n\n\tif (trace_flags & TRACE_ITER_LATENCY_FMT)\n\t\titer->iter_flags |= TRACE_FILE_LAT_FMT;\n\n\t\n\tif (trace_clocks[tr->clock_id].in_ns)\n\t\titer->iter_flags |= TRACE_FILE_TIME_IN_NS;\n\n\titer->tr = tr;\n\titer->trace_buffer = &tr->trace_buffer;\n\titer->cpu_file = tracing_get_cpu(inode);\n\tmutex_init(&iter->mutex);\n\tfilp->private_data = iter;\n\n\tif (iter->trace->pipe_open)\n\t\titer->trace->pipe_open(iter);\n\n\tnonseekable_open(inode, filp);\n\n\ttr->current_trace->ref++;\nout:\n\tmutex_unlock(&trace_types_lock);\n\treturn ret;\n\nfail:\n\tkfree(iter->trace);\n\tkfree(iter);\n\t__trace_array_put(tr);\n\tmutex_unlock(&trace_types_lock);\n\treturn ret;\n}\n\nstatic int tracing_release_pipe(struct inode *inode, struct file *file)\n{\n\tstruct trace_iterator *iter = file->private_data;\n\tstruct trace_array *tr = inode->i_private;\n\n\tmutex_lock(&trace_types_lock);\n\n\ttr->current_trace->ref--;\n\n\tif (iter->trace->pipe_close)\n\t\titer->trace->pipe_close(iter);\n\n\tmutex_unlock(&trace_types_lock);\n\n\tfree_cpumask_var(iter->started);\n\tmutex_destroy(&iter->mutex);\n\tkfree(iter);\n\n\ttrace_array_put(tr);\n\n\treturn 0;\n}\n\nstatic unsigned int\ntrace_poll(struct trace_iterator *iter, struct file *filp, poll_table *poll_table)\n{\n\t\n\tif (trace_buffer_iter(iter, iter->cpu_file))\n\t\treturn POLLIN | POLLRDNORM;\n\n\tif (trace_flags & TRACE_ITER_BLOCK)\n\t\t\n\t\treturn POLLIN | POLLRDNORM;\n\telse\n\t\treturn ring_buffer_poll_wait(iter->trace_buffer->buffer, iter->cpu_file,\n\t\t\t\t\t     filp, poll_table);\n}\n\nstatic unsigned int\ntracing_poll_pipe(struct file *filp, poll_table *poll_table)\n{\n\tstruct trace_iterator *iter = filp->private_data;\n\n\treturn trace_poll(iter, filp, poll_table);\n}\n\n\nstatic int tracing_wait_pipe(struct file *filp)\n{\n\tstruct trace_iterator *iter = filp->private_data;\n\tint ret;\n\n\twhile (trace_empty(iter)) {\n\n\t\tif ((filp->f_flags & O_NONBLOCK)) {\n\t\t\treturn -EAGAIN;\n\t\t}\n\n\t\t\n\t\tif (!tracing_is_on() && iter->pos)\n\t\t\tbreak;\n\n\t\tmutex_unlock(&iter->mutex);\n\n\t\tret = wait_on_pipe(iter, false);\n\n\t\tmutex_lock(&iter->mutex);\n\n\t\tif (ret)\n\t\t\treturn ret;\n\t}\n\n\treturn 1;\n}\n\n\nstatic ssize_t\ntracing_read_pipe(struct file *filp, char __user *ubuf,\n\t\t  size_t cnt, loff_t *ppos)\n{\n\tstruct trace_iterator *iter = filp->private_data;\n\tssize_t sret;\n\n\t\n\tsret = trace_seq_to_user(&iter->seq, ubuf, cnt);\n\tif (sret != -EBUSY)\n\t\treturn sret;\n\n\ttrace_seq_init(&iter->seq);\n\n\t\n\tmutex_lock(&iter->mutex);\n\tif (iter->trace->read) {\n\t\tsret = iter->trace->read(iter, filp, ubuf, cnt, ppos);\n\t\tif (sret)\n\t\t\tgoto out;\n\t}\n\nwaitagain:\n\tsret = tracing_wait_pipe(filp);\n\tif (sret <= 0)\n\t\tgoto out;\n\n\t\n\tif (trace_empty(iter)) {\n\t\tsret = 0;\n\t\tgoto out;\n\t}\n\n\tif (cnt >= PAGE_SIZE)\n\t\tcnt = PAGE_SIZE - 1;\n\n\t\n\tmemset(&iter->seq, 0,\n\t       sizeof(struct trace_iterator) -\n\t       offsetof(struct trace_iterator, seq));\n\tcpumask_clear(iter->started);\n\titer->pos = -1;\n\n\ttrace_event_read_lock();\n\ttrace_access_lock(iter->cpu_file);\n\twhile (trace_find_next_entry_inc(iter) != NULL) {\n\t\tenum print_line_t ret;\n\t\tint save_len = iter->seq.seq.len;\n\n\t\tret = print_trace_line(iter);\n\t\tif (ret == TRACE_TYPE_PARTIAL_LINE) {\n\t\t\t\n\t\t\titer->seq.seq.len = save_len;\n\t\t\tbreak;\n\t\t}\n\t\tif (ret != TRACE_TYPE_NO_CONSUME)\n\t\t\ttrace_consume(iter);\n\n\t\tif (trace_seq_used(&iter->seq) >= cnt)\n\t\t\tbreak;\n\n\t\t\n\t\tWARN_ONCE(iter->seq.full, \"", "971": "\",\n\t\t    ktime_to_ns(delta));\n}\n\n\nstatic void __hrtimer_peek_ahead_timers(void)\n{\n\tstruct tick_device *td;\n\n\tif (!hrtimer_hres_active())\n\t\treturn;\n\n\ttd = this_cpu_ptr(&tick_cpu_device);\n\tif (td && td->evtdev)\n\t\thrtimer_interrupt(td->evtdev);\n}\n\n\nvoid hrtimer_peek_ahead_timers(void)\n{\n\tunsigned long flags;\n\n\tlocal_irq_save(flags);\n\t__hrtimer_peek_ahead_timers();\n\tlocal_irq_restore(flags);\n}\n\nstatic void run_hrtimer_softirq(struct softirq_action *h)\n{\n\thrtimer_peek_ahead_timers();\n}\n\n#else \n\nstatic inline void __hrtimer_peek_ahead_timers(void) { }\n\n#endif\t\n\n\nvoid hrtimer_run_pending(void)\n{\n\tif (hrtimer_hres_active())\n\t\treturn;\n\n\t\n\tif (tick_check_oneshot_change(!hrtimer_is_hres_enabled()))\n\t\thrtimer_switch_to_hres();\n}\n\n\nvoid hrtimer_run_queues(void)\n{\n\tstruct timerqueue_node *node;\n\tstruct hrtimer_cpu_base *cpu_base = this_cpu_ptr(&hrtimer_bases);\n\tstruct hrtimer_clock_base *base;\n\tint index, gettime = 1;\n\n\tif (hrtimer_hres_active())\n\t\treturn;\n\n\tfor (index = 0; index < HRTIMER_MAX_CLOCK_BASES; index++) {\n\t\tbase = &cpu_base->clock_base[index];\n\t\tif (!timerqueue_getnext(&base->active))\n\t\t\tcontinue;\n\n\t\tif (gettime) {\n\t\t\thrtimer_get_softirq_time(cpu_base);\n\t\t\tgettime = 0;\n\t\t}\n\n\t\traw_spin_lock(&cpu_base->lock);\n\n\t\twhile ((node = timerqueue_getnext(&base->active))) {\n\t\t\tstruct hrtimer *timer;\n\n\t\t\ttimer = container_of(node, struct hrtimer, node);\n\t\t\tif (base->softirq_time.tv64 <=\n\t\t\t\t\thrtimer_get_expires_tv64(timer))\n\t\t\t\tbreak;\n\n\t\t\t__run_hrtimer(timer, &base->softirq_time);\n\t\t}\n\t\traw_spin_unlock(&cpu_base->lock);\n\t}\n}\n\n\nstatic enum hrtimer_restart hrtimer_wakeup(struct hrtimer *timer)\n{\n\tstruct hrtimer_sleeper *t =\n\t\tcontainer_of(timer, struct hrtimer_sleeper, timer);\n\tstruct task_struct *task = t->task;\n\n\tt->task = NULL;\n\tif (task)\n\t\twake_up_process(task);\n\n\treturn HRTIMER_NORESTART;\n}\n\nvoid hrtimer_init_sleeper(struct hrtimer_sleeper *sl, struct task_struct *task)\n{\n\tsl->timer.function = hrtimer_wakeup;\n\tsl->task = task;\n}\nEXPORT_SYMBOL_GPL(hrtimer_init_sleeper);\n\nstatic int __sched do_nanosleep(struct hrtimer_sleeper *t, enum hrtimer_mode mode)\n{\n\thrtimer_init_sleeper(t, current);\n\n\tdo {\n\t\tset_current_state(TASK_INTERRUPTIBLE);\n\t\thrtimer_start_expires(&t->timer, mode);\n\t\tif (!hrtimer_active(&t->timer))\n\t\t\tt->task = NULL;\n\n\t\tif (likely(t->task))\n\t\t\tfreezable_schedule();\n\n\t\thrtimer_cancel(&t->timer);\n\t\tmode = HRTIMER_MODE_ABS;\n\n\t} while (t->task && !signal_pending(current));\n\n\t__set_current_state(TASK_RUNNING);\n\n\treturn t->task == NULL;\n}\n\nstatic int update_rmtp(struct hrtimer *timer, struct timespec __user *rmtp)\n{\n\tstruct timespec rmt;\n\tktime_t rem;\n\n\trem = hrtimer_expires_remaining(timer);\n\tif (rem.tv64 <= 0)\n\t\treturn 0;\n\trmt = ktime_to_timespec(rem);\n\n\tif (copy_to_user(rmtp, &rmt, sizeof(*rmtp)))\n\t\treturn -EFAULT;\n\n\treturn 1;\n}\n\nlong __sched hrtimer_nanosleep_restart(struct restart_block *restart)\n{\n\tstruct hrtimer_sleeper t;\n\tstruct timespec __user  *rmtp;\n\tint ret = 0;\n\n\thrtimer_init_on_stack(&t.timer, restart->nanosleep.clockid,\n\t\t\t\tHRTIMER_MODE_ABS);\n\thrtimer_set_expires_tv64(&t.timer, restart->nanosleep.expires);\n\n\tif (do_nanosleep(&t, HRTIMER_MODE_ABS))\n\t\tgoto out;\n\n\trmtp = restart->nanosleep.rmtp;\n\tif (rmtp) {\n\t\tret = update_rmtp(&t.timer, rmtp);\n\t\tif (ret <= 0)\n\t\t\tgoto out;\n\t}\n\n\t\n\tret = -ERESTART_RESTARTBLOCK;\nout:\n\tdestroy_hrtimer_on_stack(&t.timer);\n\treturn ret;\n}\n\nlong hrtimer_nanosleep(struct timespec *rqtp, struct timespec __user *rmtp,\n\t\t       const enum hrtimer_mode mode, const clockid_t clockid)\n{\n\tstruct restart_block *restart;\n\tstruct hrtimer_sleeper t;\n\tint ret = 0;\n\tunsigned long slack;\n\n\tslack = current->timer_slack_ns;\n\tif (dl_task(current) || rt_task(current))\n\t\tslack = 0;\n\n\thrtimer_init_on_stack(&t.timer, clockid, mode);\n\thrtimer_set_expires_range_ns(&t.timer, timespec_to_ktime(*rqtp), slack);\n\tif (do_nanosleep(&t, mode))\n\t\tgoto out;\n\n\t\n\tif (mode == HRTIMER_MODE_ABS) {\n\t\tret = -ERESTARTNOHAND;\n\t\tgoto out;\n\t}\n\n\tif (rmtp) {\n\t\tret = update_rmtp(&t.timer, rmtp);\n\t\tif (ret <= 0)\n\t\t\tgoto out;\n\t}\n\n\trestart = &current->restart_block;\n\trestart->fn = hrtimer_nanosleep_restart;\n\trestart->nanosleep.clockid = t.timer.base->clockid;\n\trestart->nanosleep.rmtp = rmtp;\n\trestart->nanosleep.expires = hrtimer_get_expires_tv64(&t.timer);\n\n\tret = -ERESTART_RESTARTBLOCK;\nout:\n\tdestroy_hrtimer_on_stack(&t.timer);\n\treturn ret;\n}\n\nSYSCALL_DEFINE2(nanosleep, struct timespec __user *, rqtp,\n\t\tstruct timespec __user *, rmtp)\n{\n\tstruct timespec tu;\n\n\tif (copy_from_user(&tu, rqtp, sizeof(tu)))\n\t\treturn -EFAULT;\n\n\tif (!timespec_valid(&tu))\n\t\treturn -EINVAL;\n\n\treturn hrtimer_nanosleep(&tu, rmtp, HRTIMER_MODE_REL, CLOCK_MONOTONIC);\n}\n\n\nstatic void init_hrtimers_cpu(int cpu)\n{\n\tstruct hrtimer_cpu_base *cpu_base = &per_cpu(hrtimer_bases, cpu);\n\tint i;\n\n\tfor (i = 0; i < HRTIMER_MAX_CLOCK_BASES; i++) {\n\t\tcpu_base->clock_base[i].cpu_base = cpu_base;\n\t\ttimerqueue_init_head(&cpu_base->clock_base[i].active);\n\t}\n\n\tcpu_base->cpu = cpu;\n\thrtimer_init_hres(cpu_base);\n}\n\n#ifdef CONFIG_HOTPLUG_CPU\n\nstatic void migrate_hrtimer_list(struct hrtimer_clock_base *old_base,\n\t\t\t\tstruct hrtimer_clock_base *new_base)\n{\n\tstruct hrtimer *timer;\n\tstruct timerqueue_node *node;\n\n\twhile ((node = timerqueue_getnext(&old_base->active))) {\n\t\ttimer = container_of(node, struct hrtimer, node);\n\t\tBUG_ON(hrtimer_callback_running(timer));\n\t\tdebug_deactivate(timer);\n\n\t\t\n\t\t__remove_hrtimer(timer, old_base, HRTIMER_STATE_MIGRATE, 0);\n\t\ttimer->base = new_base;\n\t\t\n\t\tenqueue_hrtimer(timer, new_base);\n\n\t\t\n\t\ttimer->state &= ~HRTIMER_STATE_MIGRATE;\n\t}\n}\n\nstatic void migrate_hrtimers(int scpu)\n{\n\tstruct hrtimer_cpu_base *old_base, *new_base;\n\tint i;\n\n\tBUG_ON(cpu_online(scpu));\n\ttick_cancel_sched_timer(scpu);\n\n\tlocal_irq_disable();\n\told_base = &per_cpu(hrtimer_bases, scpu);\n\tnew_base = this_cpu_ptr(&hrtimer_bases);\n\t\n\traw_spin_lock(&new_base->lock);\n\traw_spin_lock_nested(&old_base->lock, SINGLE_DEPTH_NESTING);\n\n\tfor (i = 0; i < HRTIMER_MAX_CLOCK_BASES; i++) {\n\t\tmigrate_hrtimer_list(&old_base->clock_base[i],\n\t\t\t\t     &new_base->clock_base[i]);\n\t}\n\n\traw_spin_unlock(&old_base->lock);\n\traw_spin_unlock(&new_base->lock);\n\n\t\n\t__hrtimer_peek_ahead_timers();\n\tlocal_irq_enable();\n}\n\n#endif \n\nstatic int hrtimer_cpu_notify(struct notifier_block *self,\n\t\t\t\t\tunsigned long action, void *hcpu)\n{\n\tint scpu = (long)hcpu;\n\n\tswitch (action) {\n\n\tcase CPU_UP_PREPARE:\n\tcase CPU_UP_PREPARE_FROZEN:\n\t\tinit_hrtimers_cpu(scpu);\n\t\tbreak;\n\n#ifdef CONFIG_HOTPLUG_CPU\n\tcase CPU_DEAD:\n\tcase CPU_DEAD_FROZEN:\n\t\tmigrate_hrtimers(scpu);\n\t\tbreak;\n#endif\n\n\tdefault:\n\t\tbreak;\n\t}\n\n\treturn NOTIFY_OK;\n}\n\nstatic struct notifier_block hrtimers_nb = {\n\t.notifier_call = hrtimer_cpu_notify,\n};\n\nvoid __init hrtimers_init(void)\n{\n\thrtimer_cpu_notify(&hrtimers_nb, (unsigned long)CPU_UP_PREPARE,\n\t\t\t  (void *)(long)smp_processor_id());\n\tregister_cpu_notifier(&hrtimers_nb);\n#ifdef CONFIG_HIGH_RES_TIMERS\n\topen_softirq(HRTIMER_SOFTIRQ, run_hrtimer_softirq);\n#endif\n}\n\n\nint __sched\nschedule_hrtimeout_range_clock(ktime_t *expires, unsigned long delta,\n\t\t\t       const enum hrtimer_mode mode, int clock)\n{\n\tstruct hrtimer_sleeper t;\n\n\t\n\tif (expires && !expires->tv64) {\n\t\t__set_current_state(TASK_RUNNING);\n\t\treturn 0;\n\t}\n\n\t\n\tif (!expires) {\n\t\tschedule();\n\t\treturn -EINTR;\n\t}\n\n\thrtimer_init_on_stack(&t.timer, clock, mode);\n\thrtimer_set_expires_range_ns(&t.timer, *expires, delta);\n\n\thrtimer_init_sleeper(&t, current);\n\n\thrtimer_start_expires(&t.timer, mode);\n\tif (!hrtimer_active(&t.timer))\n\t\tt.task = NULL;\n\n\tif (likely(t.task))\n\t\tschedule();\n\n\thrtimer_cancel(&t.timer);\n\tdestroy_hrtimer_on_stack(&t.timer);\n\n\t__set_current_state(TASK_RUNNING);\n\n\treturn !t.task ? 0 : -EINTR;\n}\n\n\nint __sched schedule_hrtimeout_range(ktime_t *expires, unsigned long delta,\n\t\t\t\t     const enum hrtimer_mode mode)\n{\n\treturn schedule_hrtimeout_range_clock(expires, delta, mode,\n\t\t\t\t\t      CLOCK_MONOTONIC);\n}\nEXPORT_SYMBOL_GPL(schedule_hrtimeout_range);\n\n\nint __sched schedule_hrtimeout(ktime_t *expires,\n\t\t\t       const enum hrtimer_mode mode)\n{\n\treturn schedule_hrtimeout_range(expires, 0, mode);\n}\nEXPORT_SYMBOL_GPL(schedule_hrtimeout);\n\n#include <linux/user-return-notifier.h>\n#include <linux/percpu.h>\n#include <linux/sched.h>\n#include <linux/export.h>\n\nstatic DEFINE_PER_CPU(struct hlist_head, return_notifier_list);\n\n\nvoid user_return_notifier_register(struct user_return_notifier *urn)\n{\n\tset_tsk_thread_flag(current, TIF_USER_RETURN_NOTIFY);\n\thlist_add_head(&urn->link, this_cpu_ptr(&return_notifier_list));\n}\nEXPORT_SYMBOL_GPL(user_return_notifier_register);\n\n\nvoid user_return_notifier_unregister(struct user_return_notifier *urn)\n{\n\thlist_del(&urn->link);\n\tif (hlist_empty(this_cpu_ptr(&return_notifier_list)))\n\t\tclear_tsk_thread_flag(current, TIF_USER_RETURN_NOTIFY);\n}\nEXPORT_SYMBOL_GPL(user_return_notifier_unregister);\n\n\nvoid fire_user_return_notifiers(void)\n{\n\tstruct user_return_notifier *urn;\n\tstruct hlist_node *tmp2;\n\tstruct hlist_head *head;\n\n\thead = &get_cpu_var(return_notifier_list);\n\thlist_for_each_entry_safe(urn, tmp2, head, link)\n\t\turn->on_user_return(urn);\n\tput_cpu_var(return_notifier_list);\n}\n#define pr_fmt(fmt) KBUILD_MODNAME \"", "972": "\",\n\t\t   \"", "973": "\",\n\t\t   (unsigned long long) dev->max_delta_ns);\n\tSEQ_printf(m, \"", "974": "\",\n\t\t   (unsigned long long) dev->min_delta_ns);\n\tSEQ_printf(m, \"", "975": "\",\n\t\t   (unsigned long long) ktime_to_ns(base->offset));\n#endif\n\tSEQ_printf(m,   \"", "976": "\",\n\t\t   (unsigned long long) ktime_to_ns(dev->next_event));\n\n\tSEQ_printf(m, \"", "977": "\",\n\t\t   cpumask_bits(tick_get_broadcast_mask())[0]);\n#ifdef CONFIG_TICK_ONESHOT\n\tSEQ_printf(m, \"", "978": "\",\n\t\t   cpumask_bits(tick_get_broadcast_oneshot_mask())[0]);\n#endif\n\tSEQ_printf(m, \"", "979": "\",\n\t\t   data->comm, data->pid,\n\t\t   from_kuid_munged(seq_user_ns(m), data->uid), data->nice,\n\t\t   data->policy, data->rt_priority);\n\tseq_puts(m, \"", "980": "\",\n\t\t   entries, total, num_online_cpus());\n\tseq_puts(m, \"", "981": "\",\n\t\t   name, UTS_RELEASE);\n\tseq_puts(m, \"", "982": "\",\n\t\t   nsecs_to_usecs(data->saved_latency),\n\t\t   entries,\n\t\t   total,\n\t\t   buf->cpu,\n#if defined(CONFIG_PREEMPT_NONE)\n\t\t   \"", "983": "\",\n\t\t   ptr->map.enum_string, ptr->map.enum_value,\n\t\t   ptr->map.system);\n\n\treturn 0;\n}\n\nstatic const struct seq_operations tracing_enum_map_seq_ops = {\n\t.start\t\t= enum_map_start,\n\t.next\t\t= enum_map_next,\n\t.stop\t\t= enum_map_stop,\n\t.show\t\t= enum_map_show,\n};\n\nstatic int tracing_enum_map_open(struct inode *inode, struct file *filp)\n{\n\tif (tracing_disabled)\n\t\treturn -ENODEV;\n\n\treturn seq_open(filp, &tracing_enum_map_seq_ops);\n}\n\nstatic const struct file_operations tracing_enum_map_fops = {\n\t.open\t\t= tracing_enum_map_open,\n\t.read\t\t= seq_read,\n\t.llseek\t\t= seq_lseek,\n\t.release\t= seq_release,\n};\n\nstatic inline union trace_enum_map_item *\ntrace_enum_jmp_to_tail(union trace_enum_map_item *ptr)\n{\n\t\n\treturn ptr + ptr->head.length + 1;\n}\n\nstatic void\ntrace_insert_enum_map_file(struct module *mod, struct trace_enum_map **start,\n\t\t\t   int len)\n{\n\tstruct trace_enum_map **stop;\n\tstruct trace_enum_map **map;\n\tunion trace_enum_map_item *map_array;\n\tunion trace_enum_map_item *ptr;\n\n\tstop = start + len;\n\n\t\n\tmap_array = kmalloc(sizeof(*map_array) * (len + 2), GFP_KERNEL);\n\tif (!map_array) {\n\t\tpr_warning(\"", "984": "\",\n\t\t(console->flags & CON_BOOT) ? \"", "985": "\",\n\t\t(newcon->flags & CON_BOOT) ? \"", "986": "\",\n\t\t(unsigned long long)ktime_to_ns(hrtimer_get_softexpires(timer)),\n\t\t(unsigned long long)ktime_to_ns(hrtimer_get_expires(timer)),\n\t\t(long long)(ktime_to_ns(hrtimer_get_softexpires(timer)) - now),\n\t\t(long long)(ktime_to_ns(hrtimer_get_expires(timer)) - now));\n}\n\nstatic void\nprint_active_timers(struct seq_file *m, struct hrtimer_clock_base *base,\n\t\t    u64 now)\n{\n\tstruct hrtimer *timer, tmp;\n\tunsigned long next = 0, i;\n\tstruct timerqueue_node *curr;\n\tunsigned long flags;\n\nnext_one:\n\ti = 0;\n\traw_spin_lock_irqsave(&base->cpu_base->lock, flags);\n\n\tcurr = timerqueue_getnext(&base->active);\n\t\n\twhile (curr && i < next) {\n\t\tcurr = timerqueue_iterate_next(curr);\n\t\ti++;\n\t}\n\n\tif (curr) {\n\n\t\ttimer = container_of(curr, struct hrtimer, node);\n\t\ttmp = *timer;\n\t\traw_spin_unlock_irqrestore(&base->cpu_base->lock, flags);\n\n\t\tprint_timer(m, timer, &tmp, i, now);\n\t\tnext++;\n\t\tgoto next_one;\n\t}\n\traw_spin_unlock_irqrestore(&base->cpu_base->lock, flags);\n}\n\nstatic void\nprint_base(struct seq_file *m, struct hrtimer_clock_base *base, u64 now)\n{\n\tSEQ_printf(m, \"", "987": "\",\n\t\t.data\t\t= init_uts_ns.name.domainname,\n\t\t.maxlen\t\t= sizeof(init_uts_ns.name.domainname),\n\t\t.mode\t\t= 0644,\n\t\t.proc_handler\t= proc_do_uts_string,\n\t\t.poll\t\t= &domainname_poll,\n\t},\n\t{}\n};\n\nstatic struct ctl_table uts_root_table[] = {\n\t{\n\t\t.procname\t= \"", "988": "\",\n\t\t.data\t\t= init_uts_ns.name.nodename,\n\t\t.maxlen\t\t= sizeof(init_uts_ns.name.nodename),\n\t\t.mode\t\t= 0644,\n\t\t.proc_handler\t= proc_do_uts_string,\n\t\t.poll\t\t= &hostname_poll,\n\t},\n\t{\n\t\t.procname\t= \"", "989": "\",\n\t\t.data\t\t= init_uts_ns.name.release,\n\t\t.maxlen\t\t= sizeof(init_uts_ns.name.release),\n\t\t.mode\t\t= 0444,\n\t\t.proc_handler\t= proc_do_uts_string,\n\t},\n\t{\n\t\t.procname\t= \"", "990": "\",\n\t\t.data\t\t= init_uts_ns.name.sysname,\n\t\t.maxlen\t\t= sizeof(init_uts_ns.name.sysname),\n\t\t.mode\t\t= 0444,\n\t\t.proc_handler\t= proc_do_uts_string,\n\t},\n\t{\n\t\t.procname\t= \"", "991": "\",\n\t\t.data\t\t= init_uts_ns.name.version,\n\t\t.maxlen\t\t= sizeof(init_uts_ns.name.version),\n\t\t.mode\t\t= 0444,\n\t\t.proc_handler\t= proc_do_uts_string,\n\t},\n\t{\n\t\t.procname\t= \"", "992": "\",\n\t\t.mode\t\t= 0555,\n\t\t.child\t\t= uts_kern_table,\n\t},\n\t{}\n};\n\n#ifdef CONFIG_PROC_SYSCTL\n\nvoid uts_proc_notify(enum uts_proc proc)\n{\n\tstruct ctl_table *table = &uts_kern_table[proc];\n\n\tproc_sys_poll_notify(table->poll);\n}\n#endif\n\nstatic int __init utsname_sysctl_init(void)\n{\n\tregister_sysctl_table(uts_root_table);\n\treturn 0;\n}\n\ndevice_initcall(utsname_sysctl_init);\n\n#include <linux/errno.h>\n#include <linux/stddef.h>\n#include <linux/slab.h>\n#include <linux/export.h>\n#include <linux/string.h>\n#include <linux/relay.h>\n#include <linux/vmalloc.h>\n#include <linux/mm.h>\n#include <linux/cpu.h>\n#include <linux/splice.h>\n\n\nstatic DEFINE_MUTEX(relay_channels_mutex);\nstatic LIST_HEAD(relay_channels);\n\n\nstatic void relay_file_mmap_close(struct vm_area_struct *vma)\n{\n\tstruct rchan_buf *buf = vma->vm_private_data;\n\tbuf->chan->cb->buf_unmapped(buf, vma->vm_file);\n}\n\n\nstatic int relay_buf_fault(struct vm_area_struct *vma, struct vm_fault *vmf)\n{\n\tstruct page *page;\n\tstruct rchan_buf *buf = vma->vm_private_data;\n\tpgoff_t pgoff = vmf->pgoff;\n\n\tif (!buf)\n\t\treturn VM_FAULT_OOM;\n\n\tpage = vmalloc_to_page(buf->start + (pgoff << PAGE_SHIFT));\n\tif (!page)\n\t\treturn VM_FAULT_SIGBUS;\n\tget_page(page);\n\tvmf->page = page;\n\n\treturn 0;\n}\n\n\nstatic const struct vm_operations_struct relay_file_mmap_ops = {\n\t.fault = relay_buf_fault,\n\t.close = relay_file_mmap_close,\n};\n\n\nstatic struct page **relay_alloc_page_array(unsigned int n_pages)\n{\n\tconst size_t pa_size = n_pages * sizeof(struct page *);\n\tif (pa_size > PAGE_SIZE)\n\t\treturn vzalloc(pa_size);\n\treturn kzalloc(pa_size, GFP_KERNEL);\n}\n\n\nstatic void relay_free_page_array(struct page **array)\n{\n\tif (is_vmalloc_addr(array))\n\t\tvfree(array);\n\telse\n\t\tkfree(array);\n}\n\n\nstatic int relay_mmap_buf(struct rchan_buf *buf, struct vm_area_struct *vma)\n{\n\tunsigned long length = vma->vm_end - vma->vm_start;\n\tstruct file *filp = vma->vm_file;\n\n\tif (!buf)\n\t\treturn -EBADF;\n\n\tif (length != (unsigned long)buf->chan->alloc_size)\n\t\treturn -EINVAL;\n\n\tvma->vm_ops = &relay_file_mmap_ops;\n\tvma->vm_flags |= VM_DONTEXPAND;\n\tvma->vm_private_data = buf;\n\tbuf->chan->cb->buf_mapped(buf, filp);\n\n\treturn 0;\n}\n\n\nstatic void *relay_alloc_buf(struct rchan_buf *buf, size_t *size)\n{\n\tvoid *mem;\n\tunsigned int i, j, n_pages;\n\n\t*size = PAGE_ALIGN(*size);\n\tn_pages = *size >> PAGE_SHIFT;\n\n\tbuf->page_array = relay_alloc_page_array(n_pages);\n\tif (!buf->page_array)\n\t\treturn NULL;\n\n\tfor (i = 0; i < n_pages; i++) {\n\t\tbuf->page_array[i] = alloc_page(GFP_KERNEL);\n\t\tif (unlikely(!buf->page_array[i]))\n\t\t\tgoto depopulate;\n\t\tset_page_private(buf->page_array[i], (unsigned long)buf);\n\t}\n\tmem = vmap(buf->page_array, n_pages, VM_MAP, PAGE_KERNEL);\n\tif (!mem)\n\t\tgoto depopulate;\n\n\tmemset(mem, 0, *size);\n\tbuf->page_count = n_pages;\n\treturn mem;\n\ndepopulate:\n\tfor (j = 0; j < i; j++)\n\t\t__free_page(buf->page_array[j]);\n\trelay_free_page_array(buf->page_array);\n\treturn NULL;\n}\n\n\nstatic struct rchan_buf *relay_create_buf(struct rchan *chan)\n{\n\tstruct rchan_buf *buf;\n\n\tif (chan->n_subbufs > UINT_MAX / sizeof(size_t *))\n\t\treturn NULL;\n\n\tbuf = kzalloc(sizeof(struct rchan_buf), GFP_KERNEL);\n\tif (!buf)\n\t\treturn NULL;\n\tbuf->padding = kmalloc(chan->n_subbufs * sizeof(size_t *), GFP_KERNEL);\n\tif (!buf->padding)\n\t\tgoto free_buf;\n\n\tbuf->start = relay_alloc_buf(buf, &chan->alloc_size);\n\tif (!buf->start)\n\t\tgoto free_buf;\n\n\tbuf->chan = chan;\n\tkref_get(&buf->chan->kref);\n\treturn buf;\n\nfree_buf:\n\tkfree(buf->padding);\n\tkfree(buf);\n\treturn NULL;\n}\n\n\nstatic void relay_destroy_channel(struct kref *kref)\n{\n\tstruct rchan *chan = container_of(kref, struct rchan, kref);\n\tkfree(chan);\n}\n\n\nstatic void relay_destroy_buf(struct rchan_buf *buf)\n{\n\tstruct rchan *chan = buf->chan;\n\tunsigned int i;\n\n\tif (likely(buf->start)) {\n\t\tvunmap(buf->start);\n\t\tfor (i = 0; i < buf->page_count; i++)\n\t\t\t__free_page(buf->page_array[i]);\n\t\trelay_free_page_array(buf->page_array);\n\t}\n\tchan->buf[buf->cpu] = NULL;\n\tkfree(buf->padding);\n\tkfree(buf);\n\tkref_put(&chan->kref, relay_destroy_channel);\n}\n\n\nstatic void relay_remove_buf(struct kref *kref)\n{\n\tstruct rchan_buf *buf = container_of(kref, struct rchan_buf, kref);\n\trelay_destroy_buf(buf);\n}\n\n\nstatic int relay_buf_empty(struct rchan_buf *buf)\n{\n\treturn (buf->subbufs_produced - buf->subbufs_consumed) ? 0 : 1;\n}\n\n\nint relay_buf_full(struct rchan_buf *buf)\n{\n\tsize_t ready = buf->subbufs_produced - buf->subbufs_consumed;\n\treturn (ready >= buf->chan->n_subbufs) ? 1 : 0;\n}\nEXPORT_SYMBOL_GPL(relay_buf_full);\n\n\n\n\n\n\nstatic int subbuf_start_default_callback (struct rchan_buf *buf,\n\t\t\t\t\t  void *subbuf,\n\t\t\t\t\t  void *prev_subbuf,\n\t\t\t\t\t  size_t prev_padding)\n{\n\tif (relay_buf_full(buf))\n\t\treturn 0;\n\n\treturn 1;\n}\n\n\nstatic void buf_mapped_default_callback(struct rchan_buf *buf,\n\t\t\t\t\tstruct file *filp)\n{\n}\n\n\nstatic void buf_unmapped_default_callback(struct rchan_buf *buf,\n\t\t\t\t\t  struct file *filp)\n{\n}\n\n\nstatic struct dentry *create_buf_file_default_callback(const char *filename,\n\t\t\t\t\t\t       struct dentry *parent,\n\t\t\t\t\t\t       umode_t mode,\n\t\t\t\t\t\t       struct rchan_buf *buf,\n\t\t\t\t\t\t       int *is_global)\n{\n\treturn NULL;\n}\n\n\nstatic int remove_buf_file_default_callback(struct dentry *dentry)\n{\n\treturn -EINVAL;\n}\n\n\nstatic struct rchan_callbacks default_channel_callbacks = {\n\t.subbuf_start = subbuf_start_default_callback,\n\t.buf_mapped = buf_mapped_default_callback,\n\t.buf_unmapped = buf_unmapped_default_callback,\n\t.create_buf_file = create_buf_file_default_callback,\n\t.remove_buf_file = remove_buf_file_default_callback,\n};\n\n\nstatic void wakeup_readers(unsigned long data)\n{\n\tstruct rchan_buf *buf = (struct rchan_buf *)data;\n\twake_up_interruptible(&buf->read_wait);\n}\n\n\nstatic void __relay_reset(struct rchan_buf *buf, unsigned int init)\n{\n\tsize_t i;\n\n\tif (init) {\n\t\tinit_waitqueue_head(&buf->read_wait);\n\t\tkref_init(&buf->kref);\n\t\tsetup_timer(&buf->timer, wakeup_readers, (unsigned long)buf);\n\t} else\n\t\tdel_timer_sync(&buf->timer);\n\n\tbuf->subbufs_produced = 0;\n\tbuf->subbufs_consumed = 0;\n\tbuf->bytes_consumed = 0;\n\tbuf->finalized = 0;\n\tbuf->data = buf->start;\n\tbuf->offset = 0;\n\n\tfor (i = 0; i < buf->chan->n_subbufs; i++)\n\t\tbuf->padding[i] = 0;\n\n\tbuf->chan->cb->subbuf_start(buf, buf->data, NULL, 0);\n}\n\n\nvoid relay_reset(struct rchan *chan)\n{\n\tunsigned int i;\n\n\tif (!chan)\n\t\treturn;\n\n\tif (chan->is_global && chan->buf[0]) {\n\t\t__relay_reset(chan->buf[0], 0);\n\t\treturn;\n\t}\n\n\tmutex_lock(&relay_channels_mutex);\n\tfor_each_possible_cpu(i)\n\t\tif (chan->buf[i])\n\t\t\t__relay_reset(chan->buf[i], 0);\n\tmutex_unlock(&relay_channels_mutex);\n}\nEXPORT_SYMBOL_GPL(relay_reset);\n\nstatic inline void relay_set_buf_dentry(struct rchan_buf *buf,\n\t\t\t\t\tstruct dentry *dentry)\n{\n\tbuf->dentry = dentry;\n\td_inode(buf->dentry)->i_size = buf->early_bytes;\n}\n\nstatic struct dentry *relay_create_buf_file(struct rchan *chan,\n\t\t\t\t\t    struct rchan_buf *buf,\n\t\t\t\t\t    unsigned int cpu)\n{\n\tstruct dentry *dentry;\n\tchar *tmpname;\n\n\ttmpname = kzalloc(NAME_MAX + 1, GFP_KERNEL);\n\tif (!tmpname)\n\t\treturn NULL;\n\tsnprintf(tmpname, NAME_MAX, \"", "993": "\",\n\t\t__LOG_CPU_MAX_BUF_LEN);\n\tpr_info(\"", "994": "\",\n\t\tbits, r, r_unit, res, wrap);\n\n\t\n\tif (irqtime > 0 || (irqtime == -1 && rate >= 1000000))\n\t\tenable_sched_clock_irqtime();\n\n\tpr_debug(\"", "995": "\",\n\t\tboot_delay, preset_lpj, lpj, HZ, loops_per_msec);\n\treturn 0;\n}\nearly_param(\"", "996": "\",\n\t\tcount, count / ENTRIES_PER_PAGE + 1);\n\n\tlast_ftrace_enabled = ftrace_enabled = 1;\n\n\tret = ftrace_process_locs(NULL,\n\t\t\t\t  __start_mcount_loc,\n\t\t\t\t  __stop_mcount_loc);\n\n\tret = register_module_notifier(&ftrace_module_exit_nb);\n\tif (ret)\n\t\tpr_warning(\"", "997": "\",\n\t\tcpu_extra);\n\tpr_info(\"", "998": "\",\n\t\tcs->name);\n\n\tclocksource_update_max_deferment(cs);\n\n\tpr_info(\"", "999": "\",\n\t\tcurr->comm, task_pid_nr(curr));\n\tprint_lock(check_src);\n\tprintk(\"", "1000": "\",\n\t\tcurr->comm, task_pid_nr(curr),\n\t\tcurr->hardirq_context, hardirq_count() >> HARDIRQ_SHIFT,\n\t\tcurr->softirq_context, softirq_count() >> SOFTIRQ_SHIFT,\n\t\tcurr->hardirqs_enabled,\n\t\tcurr->softirqs_enabled);\n\tprint_lock(next);\n\n\tprintk(\"", "1001": "\",\n\t\tfree, (free * 100) / __LOG_BUF_LEN);\n}\n\nstatic bool __read_mostly ignore_loglevel;\n\nstatic int __init ignore_loglevel_setup(char *str)\n{\n\tignore_loglevel = true;\n\tpr_info(\"", "1002": "\",\n\t\thwirq, of_node_full_name(domain->of_node), virq);\n\n\treturn virq;\n}\nEXPORT_SYMBOL_GPL(irq_create_mapping);\n\n\nint irq_create_strict_mappings(struct irq_domain *domain, unsigned int irq_base,\n\t\t\t       irq_hw_number_t hwirq_base, int count)\n{\n\tint ret;\n\n\tret = irq_alloc_descs(irq_base, irq_base, count,\n\t\t\t      of_node_to_nid(domain->of_node));\n\tif (unlikely(ret < 0))\n\t\treturn ret;\n\n\tirq_domain_associate_many(domain, irq_base, hwirq_base, count);\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(irq_create_strict_mappings);\n\nunsigned int irq_create_of_mapping(struct of_phandle_args *irq_data)\n{\n\tstruct irq_domain *domain;\n\tirq_hw_number_t hwirq;\n\tunsigned int type = IRQ_TYPE_NONE;\n\tint virq;\n\n\tdomain = irq_data->np ? irq_find_host(irq_data->np) : irq_default_domain;\n\tif (!domain) {\n\t\tpr_warn(\"", "1003": "\",\n\t\tirqclass);\n\tprint_lock_name(backwards_entry->class);\n\tprintk(\"", "1004": "\",\n\t\tirqclass, irqclass);\n\tprint_kernel_ident();\n\tprintk(\"", "1005": "\",\n\t       default_bootup_tracer);\n\tdefault_bootup_tracer = NULL;\n\n\treturn 0;\n}\n\nfs_initcall(tracer_init_tracefs);\nlate_initcall(clear_boot_tracer);\n\n#include <linux/spinlock.h>\n#include <linux/export.h>\n#include <linux/sched.h>\n#include <linux/sched/rt.h>\n#include <linux/sched/deadline.h>\n#include <linux/timer.h>\n\n#include \"", "1006": "\",\n\t       log_lvl, current, current_thread_info(),\n\t       task_thread_info(current));\n}\n\n#endif\n\n\n#include <linux/sched.h>\n#include <linux/posix-timers.h>\n#include <linux/errno.h>\n#include <linux/math64.h>\n#include <asm/uaccess.h>\n#include <linux/kernel_stat.h>\n#include <trace/events/timer.h>\n#include <linux/random.h>\n#include <linux/tick.h>\n#include <linux/workqueue.h>\n\n\nvoid update_rlimit_cpu(struct task_struct *task, unsigned long rlim_new)\n{\n\tcputime_t cputime = secs_to_cputime(rlim_new);\n\n\tspin_lock_irq(&task->sighand->siglock);\n\tset_process_cpu_timer(task, CPUCLOCK_PROF, &cputime, NULL);\n\tspin_unlock_irq(&task->sighand->siglock);\n}\n\nstatic int check_clock(const clockid_t which_clock)\n{\n\tint error = 0;\n\tstruct task_struct *p;\n\tconst pid_t pid = CPUCLOCK_PID(which_clock);\n\n\tif (CPUCLOCK_WHICH(which_clock) >= CPUCLOCK_MAX)\n\t\treturn -EINVAL;\n\n\tif (pid == 0)\n\t\treturn 0;\n\n\trcu_read_lock();\n\tp = find_task_by_vpid(pid);\n\tif (!p || !(CPUCLOCK_PERTHREAD(which_clock) ?\n\t\t   same_thread_group(p, current) : has_group_leader_pid(p))) {\n\t\terror = -EINVAL;\n\t}\n\trcu_read_unlock();\n\n\treturn error;\n}\n\nstatic inline unsigned long long\ntimespec_to_sample(const clockid_t which_clock, const struct timespec *tp)\n{\n\tunsigned long long ret;\n\n\tret = 0;\t\t\n\tif (CPUCLOCK_WHICH(which_clock) == CPUCLOCK_SCHED) {\n\t\tret = (unsigned long long)tp->tv_sec * NSEC_PER_SEC + tp->tv_nsec;\n\t} else {\n\t\tret = cputime_to_expires(timespec_to_cputime(tp));\n\t}\n\treturn ret;\n}\n\nstatic void sample_to_timespec(const clockid_t which_clock,\n\t\t\t       unsigned long long expires,\n\t\t\t       struct timespec *tp)\n{\n\tif (CPUCLOCK_WHICH(which_clock) == CPUCLOCK_SCHED)\n\t\t*tp = ns_to_timespec(expires);\n\telse\n\t\tcputime_to_timespec((__force cputime_t)expires, tp);\n}\n\n\nstatic void bump_cpu_timer(struct k_itimer *timer,\n\t\t\t   unsigned long long now)\n{\n\tint i;\n\tunsigned long long delta, incr;\n\n\tif (timer->it.cpu.incr == 0)\n\t\treturn;\n\n\tif (now < timer->it.cpu.expires)\n\t\treturn;\n\n\tincr = timer->it.cpu.incr;\n\tdelta = now + incr - timer->it.cpu.expires;\n\n\t\n\tfor (i = 0; incr < delta - incr; i++)\n\t\tincr = incr << 1;\n\n\tfor (; i >= 0; incr >>= 1, i--) {\n\t\tif (delta < incr)\n\t\t\tcontinue;\n\n\t\ttimer->it.cpu.expires += incr;\n\t\ttimer->it_overrun += 1 << i;\n\t\tdelta -= incr;\n\t}\n}\n\n\nstatic inline int task_cputime_zero(const struct task_cputime *cputime)\n{\n\tif (!cputime->utime && !cputime->stime && !cputime->sum_exec_runtime)\n\t\treturn 1;\n\treturn 0;\n}\n\nstatic inline unsigned long long prof_ticks(struct task_struct *p)\n{\n\tcputime_t utime, stime;\n\n\ttask_cputime(p, &utime, &stime);\n\n\treturn cputime_to_expires(utime + stime);\n}\nstatic inline unsigned long long virt_ticks(struct task_struct *p)\n{\n\tcputime_t utime;\n\n\ttask_cputime(p, &utime, NULL);\n\n\treturn cputime_to_expires(utime);\n}\n\nstatic int\nposix_cpu_clock_getres(const clockid_t which_clock, struct timespec *tp)\n{\n\tint error = check_clock(which_clock);\n\tif (!error) {\n\t\ttp->tv_sec = 0;\n\t\ttp->tv_nsec = ((NSEC_PER_SEC + HZ - 1) / HZ);\n\t\tif (CPUCLOCK_WHICH(which_clock) == CPUCLOCK_SCHED) {\n\t\t\t\n\t\t\ttp->tv_nsec = 1;\n\t\t}\n\t}\n\treturn error;\n}\n\nstatic int\nposix_cpu_clock_set(const clockid_t which_clock, const struct timespec *tp)\n{\n\t\n\tint error = check_clock(which_clock);\n\tif (error == 0) {\n\t\terror = -EPERM;\n\t}\n\treturn error;\n}\n\n\n\nstatic int cpu_clock_sample(const clockid_t which_clock, struct task_struct *p,\n\t\t\t    unsigned long long *sample)\n{\n\tswitch (CPUCLOCK_WHICH(which_clock)) {\n\tdefault:\n\t\treturn -EINVAL;\n\tcase CPUCLOCK_PROF:\n\t\t*sample = prof_ticks(p);\n\t\tbreak;\n\tcase CPUCLOCK_VIRT:\n\t\t*sample = virt_ticks(p);\n\t\tbreak;\n\tcase CPUCLOCK_SCHED:\n\t\t*sample = task_sched_runtime(p);\n\t\tbreak;\n\t}\n\treturn 0;\n}\n\nstatic void update_gt_cputime(struct task_cputime *a, struct task_cputime *b)\n{\n\tif (b->utime > a->utime)\n\t\ta->utime = b->utime;\n\n\tif (b->stime > a->stime)\n\t\ta->stime = b->stime;\n\n\tif (b->sum_exec_runtime > a->sum_exec_runtime)\n\t\ta->sum_exec_runtime = b->sum_exec_runtime;\n}\n\nvoid thread_group_cputimer(struct task_struct *tsk, struct task_cputime *times)\n{\n\tstruct thread_group_cputimer *cputimer = &tsk->signal->cputimer;\n\tstruct task_cputime sum;\n\tunsigned long flags;\n\n\tif (!cputimer->running) {\n\t\t\n\t\tthread_group_cputime(tsk, &sum);\n\t\traw_spin_lock_irqsave(&cputimer->lock, flags);\n\t\tcputimer->running = 1;\n\t\tupdate_gt_cputime(&cputimer->cputime, &sum);\n\t} else\n\t\traw_spin_lock_irqsave(&cputimer->lock, flags);\n\t*times = cputimer->cputime;\n\traw_spin_unlock_irqrestore(&cputimer->lock, flags);\n}\n\n\nstatic int cpu_clock_sample_group(const clockid_t which_clock,\n\t\t\t\t  struct task_struct *p,\n\t\t\t\t  unsigned long long *sample)\n{\n\tstruct task_cputime cputime;\n\n\tswitch (CPUCLOCK_WHICH(which_clock)) {\n\tdefault:\n\t\treturn -EINVAL;\n\tcase CPUCLOCK_PROF:\n\t\tthread_group_cputime(p, &cputime);\n\t\t*sample = cputime_to_expires(cputime.utime + cputime.stime);\n\t\tbreak;\n\tcase CPUCLOCK_VIRT:\n\t\tthread_group_cputime(p, &cputime);\n\t\t*sample = cputime_to_expires(cputime.utime);\n\t\tbreak;\n\tcase CPUCLOCK_SCHED:\n\t\tthread_group_cputime(p, &cputime);\n\t\t*sample = cputime.sum_exec_runtime;\n\t\tbreak;\n\t}\n\treturn 0;\n}\n\nstatic int posix_cpu_clock_get_task(struct task_struct *tsk,\n\t\t\t\t    const clockid_t which_clock,\n\t\t\t\t    struct timespec *tp)\n{\n\tint err = -EINVAL;\n\tunsigned long long rtn;\n\n\tif (CPUCLOCK_PERTHREAD(which_clock)) {\n\t\tif (same_thread_group(tsk, current))\n\t\t\terr = cpu_clock_sample(which_clock, tsk, &rtn);\n\t} else {\n\t\tif (tsk == current || thread_group_leader(tsk))\n\t\t\terr = cpu_clock_sample_group(which_clock, tsk, &rtn);\n\t}\n\n\tif (!err)\n\t\tsample_to_timespec(which_clock, rtn, tp);\n\n\treturn err;\n}\n\n\nstatic int posix_cpu_clock_get(const clockid_t which_clock, struct timespec *tp)\n{\n\tconst pid_t pid = CPUCLOCK_PID(which_clock);\n\tint err = -EINVAL;\n\n\tif (pid == 0) {\n\t\t\n\t\terr = posix_cpu_clock_get_task(current, which_clock, tp);\n\t} else {\n\t\t\n\t\tstruct task_struct *p;\n\t\trcu_read_lock();\n\t\tp = find_task_by_vpid(pid);\n\t\tif (p)\n\t\t\terr = posix_cpu_clock_get_task(p, which_clock, tp);\n\t\trcu_read_unlock();\n\t}\n\n\treturn err;\n}\n\n\n\nstatic int posix_cpu_timer_create(struct k_itimer *new_timer)\n{\n\tint ret = 0;\n\tconst pid_t pid = CPUCLOCK_PID(new_timer->it_clock);\n\tstruct task_struct *p;\n\n\tif (CPUCLOCK_WHICH(new_timer->it_clock) >= CPUCLOCK_MAX)\n\t\treturn -EINVAL;\n\n\tINIT_LIST_HEAD(&new_timer->it.cpu.entry);\n\n\trcu_read_lock();\n\tif (CPUCLOCK_PERTHREAD(new_timer->it_clock)) {\n\t\tif (pid == 0) {\n\t\t\tp = current;\n\t\t} else {\n\t\t\tp = find_task_by_vpid(pid);\n\t\t\tif (p && !same_thread_group(p, current))\n\t\t\t\tp = NULL;\n\t\t}\n\t} else {\n\t\tif (pid == 0) {\n\t\t\tp = current->group_leader;\n\t\t} else {\n\t\t\tp = find_task_by_vpid(pid);\n\t\t\tif (p && !has_group_leader_pid(p))\n\t\t\t\tp = NULL;\n\t\t}\n\t}\n\tnew_timer->it.cpu.task = p;\n\tif (p) {\n\t\tget_task_struct(p);\n\t} else {\n\t\tret = -EINVAL;\n\t}\n\trcu_read_unlock();\n\n\treturn ret;\n}\n\n\nstatic int posix_cpu_timer_del(struct k_itimer *timer)\n{\n\tint ret = 0;\n\tunsigned long flags;\n\tstruct sighand_struct *sighand;\n\tstruct task_struct *p = timer->it.cpu.task;\n\n\tWARN_ON_ONCE(p == NULL);\n\n\t\n\tsighand = lock_task_sighand(p, &flags);\n\tif (unlikely(sighand == NULL)) {\n\t\t\n\t\tWARN_ON_ONCE(!list_empty(&timer->it.cpu.entry));\n\t} else {\n\t\tif (timer->it.cpu.firing)\n\t\t\tret = TIMER_RETRY;\n\t\telse\n\t\t\tlist_del(&timer->it.cpu.entry);\n\n\t\tunlock_task_sighand(p, &flags);\n\t}\n\n\tif (!ret)\n\t\tput_task_struct(p);\n\n\treturn ret;\n}\n\nstatic void cleanup_timers_list(struct list_head *head)\n{\n\tstruct cpu_timer_list *timer, *next;\n\n\tlist_for_each_entry_safe(timer, next, head, entry)\n\t\tlist_del_init(&timer->entry);\n}\n\n\nstatic void cleanup_timers(struct list_head *head)\n{\n\tcleanup_timers_list(head);\n\tcleanup_timers_list(++head);\n\tcleanup_timers_list(++head);\n}\n\n\nvoid posix_cpu_timers_exit(struct task_struct *tsk)\n{\n\tadd_device_randomness((const void*) &tsk->se.sum_exec_runtime,\n\t\t\t\t\t\tsizeof(unsigned long long));\n\tcleanup_timers(tsk->cpu_timers);\n\n}\nvoid posix_cpu_timers_exit_group(struct task_struct *tsk)\n{\n\tcleanup_timers(tsk->signal->cpu_timers);\n}\n\nstatic inline int expires_gt(cputime_t expires, cputime_t new_exp)\n{\n\treturn expires == 0 || expires > new_exp;\n}\n\n\nstatic void arm_timer(struct k_itimer *timer)\n{\n\tstruct task_struct *p = timer->it.cpu.task;\n\tstruct list_head *head, *listpos;\n\tstruct task_cputime *cputime_expires;\n\tstruct cpu_timer_list *const nt = &timer->it.cpu;\n\tstruct cpu_timer_list *next;\n\n\tif (CPUCLOCK_PERTHREAD(timer->it_clock)) {\n\t\thead = p->cpu_timers;\n\t\tcputime_expires = &p->cputime_expires;\n\t} else {\n\t\thead = p->signal->cpu_timers;\n\t\tcputime_expires = &p->signal->cputime_expires;\n\t}\n\thead += CPUCLOCK_WHICH(timer->it_clock);\n\n\tlistpos = head;\n\tlist_for_each_entry(next, head, entry) {\n\t\tif (nt->expires < next->expires)\n\t\t\tbreak;\n\t\tlistpos = &next->entry;\n\t}\n\tlist_add(&nt->entry, listpos);\n\n\tif (listpos == head) {\n\t\tunsigned long long exp = nt->expires;\n\n\t\t\n\n\t\tswitch (CPUCLOCK_WHICH(timer->it_clock)) {\n\t\tcase CPUCLOCK_PROF:\n\t\t\tif (expires_gt(cputime_expires->prof_exp, expires_to_cputime(exp)))\n\t\t\t\tcputime_expires->prof_exp = expires_to_cputime(exp);\n\t\t\tbreak;\n\t\tcase CPUCLOCK_VIRT:\n\t\t\tif (expires_gt(cputime_expires->virt_exp, expires_to_cputime(exp)))\n\t\t\t\tcputime_expires->virt_exp = expires_to_cputime(exp);\n\t\t\tbreak;\n\t\tcase CPUCLOCK_SCHED:\n\t\t\tif (cputime_expires->sched_exp == 0 ||\n\t\t\t    cputime_expires->sched_exp > exp)\n\t\t\t\tcputime_expires->sched_exp = exp;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\n\nstatic void cpu_timer_fire(struct k_itimer *timer)\n{\n\tif ((timer->it_sigev_notify & ~SIGEV_THREAD_ID) == SIGEV_NONE) {\n\t\t\n\t\ttimer->it.cpu.expires = 0;\n\t} else if (unlikely(timer->sigq == NULL)) {\n\t\t\n\t\twake_up_process(timer->it_process);\n\t\ttimer->it.cpu.expires = 0;\n\t} else if (timer->it.cpu.incr == 0) {\n\t\t\n\t\tposix_timer_event(timer, 0);\n\t\ttimer->it.cpu.expires = 0;\n\t} else if (posix_timer_event(timer, ++timer->it_requeue_pending)) {\n\t\t\n\t\tposix_cpu_timer_schedule(timer);\n\t}\n}\n\n\nstatic int cpu_timer_sample_group(const clockid_t which_clock,\n\t\t\t\t  struct task_struct *p,\n\t\t\t\t  unsigned long long *sample)\n{\n\tstruct task_cputime cputime;\n\n\tthread_group_cputimer(p, &cputime);\n\tswitch (CPUCLOCK_WHICH(which_clock)) {\n\tdefault:\n\t\treturn -EINVAL;\n\tcase CPUCLOCK_PROF:\n\t\t*sample = cputime_to_expires(cputime.utime + cputime.stime);\n\t\tbreak;\n\tcase CPUCLOCK_VIRT:\n\t\t*sample = cputime_to_expires(cputime.utime);\n\t\tbreak;\n\tcase CPUCLOCK_SCHED:\n\t\t*sample = cputime.sum_exec_runtime;\n\t\tbreak;\n\t}\n\treturn 0;\n}\n\n#ifdef CONFIG_NO_HZ_FULL\nstatic void nohz_kick_work_fn(struct work_struct *work)\n{\n\ttick_nohz_full_kick_all();\n}\n\nstatic DECLARE_WORK(nohz_kick_work, nohz_kick_work_fn);\n\n\nstatic void posix_cpu_timer_kick_nohz(void)\n{\n\tif (context_tracking_is_enabled())\n\t\tschedule_work(&nohz_kick_work);\n}\n\nbool posix_cpu_timers_can_stop_tick(struct task_struct *tsk)\n{\n\tif (!task_cputime_zero(&tsk->cputime_expires))\n\t\treturn false;\n\n\tif (tsk->signal->cputimer.running)\n\t\treturn false;\n\n\treturn true;\n}\n#else\nstatic inline void posix_cpu_timer_kick_nohz(void) { }\n#endif\n\n\nstatic int posix_cpu_timer_set(struct k_itimer *timer, int timer_flags,\n\t\t\t       struct itimerspec *new, struct itimerspec *old)\n{\n\tunsigned long flags;\n\tstruct sighand_struct *sighand;\n\tstruct task_struct *p = timer->it.cpu.task;\n\tunsigned long long old_expires, new_expires, old_incr, val;\n\tint ret;\n\n\tWARN_ON_ONCE(p == NULL);\n\n\tnew_expires = timespec_to_sample(timer->it_clock, &new->it_value);\n\n\t\n\tsighand = lock_task_sighand(p, &flags);\n\t\n\tif (unlikely(sighand == NULL)) {\n\t\treturn -ESRCH;\n\t}\n\n\t\n\tWARN_ON_ONCE(!irqs_disabled());\n\n\tret = 0;\n\told_incr = timer->it.cpu.incr;\n\told_expires = timer->it.cpu.expires;\n\tif (unlikely(timer->it.cpu.firing)) {\n\t\ttimer->it.cpu.firing = -1;\n\t\tret = TIMER_RETRY;\n\t} else\n\t\tlist_del_init(&timer->it.cpu.entry);\n\n\t\n\tif (CPUCLOCK_PERTHREAD(timer->it_clock)) {\n\t\tcpu_clock_sample(timer->it_clock, p, &val);\n\t} else {\n\t\tcpu_timer_sample_group(timer->it_clock, p, &val);\n\t}\n\n\tif (old) {\n\t\tif (old_expires == 0) {\n\t\t\told->it_value.tv_sec = 0;\n\t\t\told->it_value.tv_nsec = 0;\n\t\t} else {\n\t\t\t\n\t\t\tbump_cpu_timer(timer, val);\n\t\t\tif (val < timer->it.cpu.expires) {\n\t\t\t\told_expires = timer->it.cpu.expires - val;\n\t\t\t\tsample_to_timespec(timer->it_clock,\n\t\t\t\t\t\t   old_expires,\n\t\t\t\t\t\t   &old->it_value);\n\t\t\t} else {\n\t\t\t\told->it_value.tv_nsec = 1;\n\t\t\t\told->it_value.tv_sec = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (unlikely(ret)) {\n\t\t\n\t\tunlock_task_sighand(p, &flags);\n\t\tgoto out;\n\t}\n\n\tif (new_expires != 0 && !(timer_flags & TIMER_ABSTIME)) {\n\t\tnew_expires += val;\n\t}\n\n\t\n\ttimer->it.cpu.expires = new_expires;\n\tif (new_expires != 0 && val < new_expires) {\n\t\tarm_timer(timer);\n\t}\n\n\tunlock_task_sighand(p, &flags);\n\t\n\ttimer->it.cpu.incr = timespec_to_sample(timer->it_clock,\n\t\t\t\t\t\t&new->it_interval);\n\n\t\n\ttimer->it_requeue_pending = (timer->it_requeue_pending + 2) &\n\t\t~REQUEUE_PENDING;\n\ttimer->it_overrun_last = 0;\n\ttimer->it_overrun = -1;\n\n\tif (new_expires != 0 && !(val < new_expires)) {\n\t\t\n\t\tcpu_timer_fire(timer);\n\t}\n\n\tret = 0;\n out:\n\tif (old) {\n\t\tsample_to_timespec(timer->it_clock,\n\t\t\t\t   old_incr, &old->it_interval);\n\t}\n\tif (!ret)\n\t\tposix_cpu_timer_kick_nohz();\n\treturn ret;\n}\n\nstatic void posix_cpu_timer_get(struct k_itimer *timer, struct itimerspec *itp)\n{\n\tunsigned long long now;\n\tstruct task_struct *p = timer->it.cpu.task;\n\n\tWARN_ON_ONCE(p == NULL);\n\n\t\n\tsample_to_timespec(timer->it_clock,\n\t\t\t   timer->it.cpu.incr, &itp->it_interval);\n\n\tif (timer->it.cpu.expires == 0) {\t\n\t\titp->it_value.tv_sec = itp->it_value.tv_nsec = 0;\n\t\treturn;\n\t}\n\n\t\n\tif (CPUCLOCK_PERTHREAD(timer->it_clock)) {\n\t\tcpu_clock_sample(timer->it_clock, p, &now);\n\t} else {\n\t\tstruct sighand_struct *sighand;\n\t\tunsigned long flags;\n\n\t\t\n\t\tsighand = lock_task_sighand(p, &flags);\n\t\tif (unlikely(sighand == NULL)) {\n\t\t\t\n\t\t\ttimer->it.cpu.expires = 0;\n\t\t\tsample_to_timespec(timer->it_clock, timer->it.cpu.expires,\n\t\t\t\t\t   &itp->it_value);\n\t\t} else {\n\t\t\tcpu_timer_sample_group(timer->it_clock, p, &now);\n\t\t\tunlock_task_sighand(p, &flags);\n\t\t}\n\t}\n\n\tif (now < timer->it.cpu.expires) {\n\t\tsample_to_timespec(timer->it_clock,\n\t\t\t\t   timer->it.cpu.expires - now,\n\t\t\t\t   &itp->it_value);\n\t} else {\n\t\t\n\t\titp->it_value.tv_nsec = 1;\n\t\titp->it_value.tv_sec = 0;\n\t}\n}\n\nstatic unsigned long long\ncheck_timers_list(struct list_head *timers,\n\t\t  struct list_head *firing,\n\t\t  unsigned long long curr)\n{\n\tint maxfire = 20;\n\n\twhile (!list_empty(timers)) {\n\t\tstruct cpu_timer_list *t;\n\n\t\tt = list_first_entry(timers, struct cpu_timer_list, entry);\n\n\t\tif (!--maxfire || curr < t->expires)\n\t\t\treturn t->expires;\n\n\t\tt->firing = 1;\n\t\tlist_move_tail(&t->entry, firing);\n\t}\n\n\treturn 0;\n}\n\n\nstatic void check_thread_timers(struct task_struct *tsk,\n\t\t\t\tstruct list_head *firing)\n{\n\tstruct list_head *timers = tsk->cpu_timers;\n\tstruct signal_struct *const sig = tsk->signal;\n\tstruct task_cputime *tsk_expires = &tsk->cputime_expires;\n\tunsigned long long expires;\n\tunsigned long soft;\n\n\texpires = check_timers_list(timers, firing, prof_ticks(tsk));\n\ttsk_expires->prof_exp = expires_to_cputime(expires);\n\n\texpires = check_timers_list(++timers, firing, virt_ticks(tsk));\n\ttsk_expires->virt_exp = expires_to_cputime(expires);\n\n\ttsk_expires->sched_exp = check_timers_list(++timers, firing,\n\t\t\t\t\t\t   tsk->se.sum_exec_runtime);\n\n\t\n\tsoft = ACCESS_ONCE(sig->rlim[RLIMIT_RTTIME].rlim_cur);\n\tif (soft != RLIM_INFINITY) {\n\t\tunsigned long hard =\n\t\t\tACCESS_ONCE(sig->rlim[RLIMIT_RTTIME].rlim_max);\n\n\t\tif (hard != RLIM_INFINITY &&\n\t\t    tsk->rt.timeout > DIV_ROUND_UP(hard, USEC_PER_SEC/HZ)) {\n\t\t\t\n\t\t\t__group_send_sig_info(SIGKILL, SEND_SIG_PRIV, tsk);\n\t\t\treturn;\n\t\t}\n\t\tif (tsk->rt.timeout > DIV_ROUND_UP(soft, USEC_PER_SEC/HZ)) {\n\t\t\t\n\t\t\tif (soft < hard) {\n\t\t\t\tsoft += USEC_PER_SEC;\n\t\t\t\tsig->rlim[RLIMIT_RTTIME].rlim_cur = soft;\n\t\t\t}\n\t\t\tprintk(KERN_INFO\n\t\t\t\t\"", "1007": "\",\n\t       log_lvl, raw_smp_processor_id(), current->pid, current->comm,\n\t       print_tainted(), init_utsname()->release,\n\t       (int)strcspn(init_utsname()->version, \"", "1008": "\",\n\t.debug_hint\t= hrtimer_debug_hint,\n\t.fixup_init\t= hrtimer_fixup_init,\n\t.fixup_activate\t= hrtimer_fixup_activate,\n\t.fixup_free\t= hrtimer_fixup_free,\n};\n\nstatic inline void debug_hrtimer_init(struct hrtimer *timer)\n{\n\tdebug_object_init(timer, &hrtimer_debug_descr);\n}\n\nstatic inline void debug_hrtimer_activate(struct hrtimer *timer)\n{\n\tdebug_object_activate(timer, &hrtimer_debug_descr);\n}\n\nstatic inline void debug_hrtimer_deactivate(struct hrtimer *timer)\n{\n\tdebug_object_deactivate(timer, &hrtimer_debug_descr);\n}\n\nstatic inline void debug_hrtimer_free(struct hrtimer *timer)\n{\n\tdebug_object_free(timer, &hrtimer_debug_descr);\n}\n\nstatic void __hrtimer_init(struct hrtimer *timer, clockid_t clock_id,\n\t\t\t   enum hrtimer_mode mode);\n\nvoid hrtimer_init_on_stack(struct hrtimer *timer, clockid_t clock_id,\n\t\t\t   enum hrtimer_mode mode)\n{\n\tdebug_object_init_on_stack(timer, &hrtimer_debug_descr);\n\t__hrtimer_init(timer, clock_id, mode);\n}\nEXPORT_SYMBOL_GPL(hrtimer_init_on_stack);\n\nvoid destroy_hrtimer_on_stack(struct hrtimer *timer)\n{\n\tdebug_object_free(timer, &hrtimer_debug_descr);\n}\n\n#else\nstatic inline void debug_hrtimer_init(struct hrtimer *timer) { }\nstatic inline void debug_hrtimer_activate(struct hrtimer *timer) { }\nstatic inline void debug_hrtimer_deactivate(struct hrtimer *timer) { }\n#endif\n\nstatic inline void\ndebug_init(struct hrtimer *timer, clockid_t clockid,\n\t   enum hrtimer_mode mode)\n{\n\tdebug_hrtimer_init(timer);\n\ttrace_hrtimer_init(timer, clockid, mode);\n}\n\nstatic inline void debug_activate(struct hrtimer *timer)\n{\n\tdebug_hrtimer_activate(timer);\n\ttrace_hrtimer_start(timer);\n}\n\nstatic inline void debug_deactivate(struct hrtimer *timer)\n{\n\tdebug_hrtimer_deactivate(timer);\n\ttrace_hrtimer_cancel(timer);\n}\n\n#if defined(CONFIG_NO_HZ_COMMON) || defined(CONFIG_HIGH_RES_TIMERS)\nstatic ktime_t __hrtimer_get_next_event(struct hrtimer_cpu_base *cpu_base)\n{\n\tstruct hrtimer_clock_base *base = cpu_base->clock_base;\n\tktime_t expires, expires_next = { .tv64 = KTIME_MAX };\n\tint i;\n\n\tfor (i = 0; i < HRTIMER_MAX_CLOCK_BASES; i++, base++) {\n\t\tstruct timerqueue_node *next;\n\t\tstruct hrtimer *timer;\n\n\t\tnext = timerqueue_getnext(&base->active);\n\t\tif (!next)\n\t\t\tcontinue;\n\n\t\ttimer = container_of(next, struct hrtimer, node);\n\t\texpires = ktime_sub(hrtimer_get_expires(timer), base->offset);\n\t\tif (expires.tv64 < expires_next.tv64)\n\t\t\texpires_next = expires;\n\t}\n\t\n\tif (expires_next.tv64 < 0)\n\t\texpires_next.tv64 = 0;\n\treturn expires_next;\n}\n#endif\n\n\n#ifdef CONFIG_HIGH_RES_TIMERS\n\n\nstatic int hrtimer_hres_enabled __read_mostly  = 1;\n\n\nstatic int __init setup_hrtimer_hres(char *str)\n{\n\tif (!strcmp(str, \"", "1009": "\",\n\t.dev_groups\t= pmu_dev_groups,\n};\n\nstatic void pmu_dev_release(struct device *dev)\n{\n\tkfree(dev);\n}\n\nstatic int pmu_dev_alloc(struct pmu *pmu)\n{\n\tint ret = -ENOMEM;\n\n\tpmu->dev = kzalloc(sizeof(struct device), GFP_KERNEL);\n\tif (!pmu->dev)\n\t\tgoto out;\n\n\tpmu->dev->groups = pmu->attr_groups;\n\tdevice_initialize(pmu->dev);\n\tret = dev_set_name(pmu->dev, \"", "1010": "\",\n\t.dev_name = \"", "1011": "\",\n\t.func\t\t\t= ftrace_mod_callback,\n};\n\nstatic int __init ftrace_mod_cmd_init(void)\n{\n\treturn register_ftrace_command(&ftrace_mod_cmd);\n}\ncore_initcall(ftrace_mod_cmd_init);\n\nstatic void function_trace_probe_call(unsigned long ip, unsigned long parent_ip,\n\t\t\t\t      struct ftrace_ops *op, struct pt_regs *pt_regs)\n{\n\tstruct ftrace_func_probe *entry;\n\tstruct hlist_head *hhd;\n\tunsigned long key;\n\n\tkey = hash_long(ip, FTRACE_HASH_BITS);\n\n\thhd = &ftrace_func_hash[key];\n\n\tif (hlist_empty(hhd))\n\t\treturn;\n\n\t\n\tpreempt_disable_notrace();\n\thlist_for_each_entry_rcu_notrace(entry, hhd, node) {\n\t\tif (entry->ip == ip)\n\t\t\tentry->ops->func(ip, parent_ip, &entry->data);\n\t}\n\tpreempt_enable_notrace();\n}\n\nstatic struct ftrace_ops trace_probe_ops __read_mostly =\n{\n\t.func\t\t= function_trace_probe_call,\n\t.flags\t\t= FTRACE_OPS_FL_INITIALIZED,\n\tINIT_OPS_HASH(trace_probe_ops)\n};\n\nstatic int ftrace_probe_registered;\n\nstatic void __enable_ftrace_function_probe(struct ftrace_ops_hash *old_hash)\n{\n\tint ret;\n\tint i;\n\n\tif (ftrace_probe_registered) {\n\t\t\n\t\tif (ftrace_enabled)\n\t\t\tftrace_run_modify_code(&trace_probe_ops, FTRACE_UPDATE_CALLS,\n\t\t\t\t\t       old_hash);\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < FTRACE_FUNC_HASHSIZE; i++) {\n\t\tstruct hlist_head *hhd = &ftrace_func_hash[i];\n\t\tif (hhd->first)\n\t\t\tbreak;\n\t}\n\t\n\tif (i == FTRACE_FUNC_HASHSIZE)\n\t\treturn;\n\n\tret = ftrace_startup(&trace_probe_ops, 0);\n\n\tftrace_probe_registered = 1;\n}\n\nstatic void __disable_ftrace_function_probe(void)\n{\n\tint i;\n\n\tif (!ftrace_probe_registered)\n\t\treturn;\n\n\tfor (i = 0; i < FTRACE_FUNC_HASHSIZE; i++) {\n\t\tstruct hlist_head *hhd = &ftrace_func_hash[i];\n\t\tif (hhd->first)\n\t\t\treturn;\n\t}\n\n\t\n\tftrace_shutdown(&trace_probe_ops, 0);\n\n\tftrace_probe_registered = 0;\n}\n\n\nstatic void ftrace_free_entry(struct ftrace_func_probe *entry)\n{\n\tif (entry->ops->free)\n\t\tentry->ops->free(entry->ops, entry->ip, &entry->data);\n\tkfree(entry);\n}\n\nint\nregister_ftrace_function_probe(char *glob, struct ftrace_probe_ops *ops,\n\t\t\t      void *data)\n{\n\tstruct ftrace_ops_hash old_hash_ops;\n\tstruct ftrace_func_probe *entry;\n\tstruct ftrace_hash **orig_hash = &trace_probe_ops.func_hash->filter_hash;\n\tstruct ftrace_hash *old_hash = *orig_hash;\n\tstruct ftrace_hash *hash;\n\tstruct ftrace_page *pg;\n\tstruct dyn_ftrace *rec;\n\tint type, len, not;\n\tunsigned long key;\n\tint count = 0;\n\tchar *search;\n\tint ret;\n\n\ttype = filter_parse_regex(glob, strlen(glob), &search, &not);\n\tlen = strlen(search);\n\n\t\n\tif (WARN_ON(not))\n\t\treturn -EINVAL;\n\n\tmutex_lock(&trace_probe_ops.func_hash->regex_lock);\n\n\told_hash_ops.filter_hash = old_hash;\n\t\n\told_hash_ops.notrace_hash = NULL;\n\n\thash = alloc_and_copy_ftrace_hash(FTRACE_HASH_DEFAULT_BITS, old_hash);\n\tif (!hash) {\n\t\tcount = -ENOMEM;\n\t\tgoto out;\n\t}\n\n\tif (unlikely(ftrace_disabled)) {\n\t\tcount = -ENODEV;\n\t\tgoto out;\n\t}\n\n\tmutex_lock(&ftrace_lock);\n\n\tdo_for_each_ftrace_rec(pg, rec) {\n\n\t\tif (!ftrace_match_record(rec, NULL, search, len, type))\n\t\t\tcontinue;\n\n\t\tentry = kmalloc(sizeof(*entry), GFP_KERNEL);\n\t\tif (!entry) {\n\t\t\t\n\t\t\tif (!count)\n\t\t\t\tcount = -ENOMEM;\n\t\t\tgoto out_unlock;\n\t\t}\n\n\t\tcount++;\n\n\t\tentry->data = data;\n\n\t\t\n\t\tif (ops->init) {\n\t\t\tif (ops->init(ops, rec->ip, &entry->data) < 0) {\n\t\t\t\t\n\t\t\t\tkfree(entry);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tret = enter_record(hash, rec, 0);\n\t\tif (ret < 0) {\n\t\t\tkfree(entry);\n\t\t\tcount = ret;\n\t\t\tgoto out_unlock;\n\t\t}\n\n\t\tentry->ops = ops;\n\t\tentry->ip = rec->ip;\n\n\t\tkey = hash_long(entry->ip, FTRACE_HASH_BITS);\n\t\thlist_add_head_rcu(&entry->node, &ftrace_func_hash[key]);\n\n\t} while_for_each_ftrace_rec();\n\n\tret = ftrace_hash_move(&trace_probe_ops, 1, orig_hash, hash);\n\n\t__enable_ftrace_function_probe(&old_hash_ops);\n\n\tif (!ret)\n\t\tfree_ftrace_hash_rcu(old_hash);\n\telse\n\t\tcount = ret;\n\n out_unlock:\n\tmutex_unlock(&ftrace_lock);\n out:\n\tmutex_unlock(&trace_probe_ops.func_hash->regex_lock);\n\tfree_ftrace_hash(hash);\n\n\treturn count;\n}\n\nenum {\n\tPROBE_TEST_FUNC\t\t= 1,\n\tPROBE_TEST_DATA\t\t= 2\n};\n\nstatic void\n__unregister_ftrace_function_probe(char *glob, struct ftrace_probe_ops *ops,\n\t\t\t\t  void *data, int flags)\n{\n\tstruct ftrace_func_entry *rec_entry;\n\tstruct ftrace_func_probe *entry;\n\tstruct ftrace_func_probe *p;\n\tstruct ftrace_hash **orig_hash = &trace_probe_ops.func_hash->filter_hash;\n\tstruct ftrace_hash *old_hash = *orig_hash;\n\tstruct list_head free_list;\n\tstruct ftrace_hash *hash;\n\tstruct hlist_node *tmp;\n\tchar str[KSYM_SYMBOL_LEN];\n\tint type = MATCH_FULL;\n\tint i, len = 0;\n\tchar *search;\n\tint ret;\n\n\tif (glob && (strcmp(glob, \"", "1012": "\",\n\t.func\t\t\t= ftrace_trace_snapshot_callback,\n};\n\nstatic __init int register_snapshot_cmd(void)\n{\n\treturn register_ftrace_command(&ftrace_snapshot_cmd);\n}\n#else\nstatic inline __init int register_snapshot_cmd(void) { return 0; }\n#endif \n\nstatic struct dentry *tracing_get_dentry(struct trace_array *tr)\n{\n\tif (WARN_ON(!tr->dir))\n\t\treturn ERR_PTR(-ENODEV);\n\n\t\n\tif (tr->flags & TRACE_ARRAY_FL_GLOBAL)\n\t\treturn NULL;\n\n\t\n\treturn tr->dir;\n}\n\nstatic struct dentry *tracing_dentry_percpu(struct trace_array *tr, int cpu)\n{\n\tstruct dentry *d_tracer;\n\n\tif (tr->percpu_dir)\n\t\treturn tr->percpu_dir;\n\n\td_tracer = tracing_get_dentry(tr);\n\tif (IS_ERR(d_tracer))\n\t\treturn NULL;\n\n\ttr->percpu_dir = tracefs_create_dir(\"", "1013": "\",\n\t.init\t\t= nop_trace_init,\n\t.reset\t\t= nop_trace_reset,\n#ifdef CONFIG_FTRACE_SELFTEST\n\t.selftest\t= trace_selftest_startup_nop,\n#endif\n\t.flags\t\t= &nop_flags,\n\t.set_flag\t= nop_set_flag,\n\t.allow_instances = true,\n};\n\n#ifdef CONFIG_RWSEM_SPIN_ON_OWNER\nstatic inline void rwsem_set_owner(struct rw_semaphore *sem)\n{\n\tsem->owner = current;\n}\n\nstatic inline void rwsem_clear_owner(struct rw_semaphore *sem)\n{\n\tsem->owner = NULL;\n}\n\n#else\nstatic inline void rwsem_set_owner(struct rw_semaphore *sem)\n{\n}\n\nstatic inline void rwsem_clear_owner(struct rw_semaphore *sem)\n{\n}\n#endif\n\n\n#include <linux/device.h>\n#include <linux/clocksource.h>\n#include <linux/init.h>\n#include <linux/module.h>\n#include <linux/sched.h> \n#include <linux/tick.h>\n#include <linux/kthread.h>\n\n#include \"", "1014": "\",\n \"", "1015": "\",\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n (char *)0,\n};\n\nstatic const int __nenv = ARRAY_SIZE(__env);\n\nstruct task_struct *kdb_curr_task(int cpu)\n{\n\tstruct task_struct *p = curr_task(cpu);\n#ifdef\t_TIF_MCA_INIT\n\tif ((task_thread_info(p)->flags & _TIF_MCA_INIT) && KDB_TSK(cpu))\n\t\tp = krp->p;\n#endif\n\treturn p;\n}\n\n\nstatic inline bool kdb_check_flags(kdb_cmdflags_t flags, int permissions,\n\t\t\t\t   bool no_args)\n{\n\t\n\tpermissions &= KDB_ENABLE_MASK;\n\tpermissions |= KDB_ENABLE_ALWAYS_SAFE;\n\n\t\n\tif (no_args)\n\t\tpermissions |= permissions << KDB_ENABLE_NO_ARGS_SHIFT;\n\n\tflags |= KDB_ENABLE_ALL;\n\n\treturn permissions & flags;\n}\n\n\nchar *kdbgetenv(const char *match)\n{\n\tchar **ep = __env;\n\tint matchlen = strlen(match);\n\tint i;\n\n\tfor (i = 0; i < __nenv; i++) {\n\t\tchar *e = *ep++;\n\n\t\tif (!e)\n\t\t\tcontinue;\n\n\t\tif ((strncmp(match, e, matchlen) == 0)\n\t\t && ((e[matchlen] == '\\0')\n\t\t   || (e[matchlen] == '='))) {\n\t\t\tchar *cp = strchr(e, '=');\n\t\t\treturn cp ? ++cp : \"", "1016": "\",\n#elif defined(CONFIG_PREEMPT)\n\t\t   \"", "1017": "\",\n#elif defined(CONFIG_PREEMPT_VOLUNTARY)\n\t\t   \"", "1018": "\",\n#else\n\t\t   \"", "1019": "\",\n#else\n \"", "1020": "\",\n#endif\n\t\t   \n\t\t   0, 0, 0, 0);\n#ifdef CONFIG_SMP\n\tseq_printf(m, \"", "1021": "\",\n#endif\n \"", "1022": "\",\n};\n\nstatic struct device device_clocksource = {\n\t.id\t= 0,\n\t.bus\t= &clocksource_subsys,\n};\n\nstatic int __init init_clocksource_sysfs(void)\n{\n\tint error = subsys_system_register(&clocksource_subsys, NULL);\n\n\tif (!error)\n\t\terror = device_register(&device_clocksource);\n\tif (!error)\n\t\terror = device_create_file(\n\t\t\t\t&device_clocksource,\n\t\t\t\t&dev_attr_current_clocksource);\n\tif (!error)\n\t\terror = device_create_file(&device_clocksource,\n\t\t\t\t\t   &dev_attr_unbind_clocksource);\n\tif (!error)\n\t\terror = device_create_file(\n\t\t\t\t&device_clocksource,\n\t\t\t\t&dev_attr_available_clocksource);\n\treturn error;\n}\n\ndevice_initcall(init_clocksource_sysfs);\n#endif \n\n\nstatic int __init boot_override_clocksource(char* str)\n{\n\tmutex_lock(&clocksource_mutex);\n\tif (str)\n\t\tstrlcpy(override_name, str, sizeof(override_name));\n\tmutex_unlock(&clocksource_mutex);\n\treturn 1;\n}\n\n__setup(\"", "1023": "\", \"", "1024": "\", %s\"", "1025": "\", &colcount);\n\tif (diag || colcount <= 1)\n\t\tcolcount = 80;\n\n\tdiag = kdbgetintenv(\"", "1026": "\", &dtab_count);\n\tif (diag)\n\t\tdtab_count = 30;\n\n\tif (len > 0) {\n\t\tcp += len;\n\t\tif (*(buffer+len-1) == '\\n')\n\t\t\tcp--;\n\t}\n\n\tlastchar = cp;\n\t*cp = '\\0';\n\tkdb_printf(\"", "1027": "\", &linecount);\n\tif (diag || linecount <= 1)\n\t\tlinecount = 24;\n\n\tdiag = kdbgetintenv(\"", "1028": "\", &logging);\n\tif (diag)\n\t\tlogging = 0;\n\n\tif (!kdb_grepping_flag || suspend_grep) {\n\t\t\n\t\tnext_avail = kdb_buffer;\n\t\tsize_avail = sizeof(kdb_buffer);\n\t}\n\tvsnprintf(next_avail, size_avail, fmt, ap);\n\n\t\n\n\t\n\tif (!suspend_grep && kdb_grepping_flag) {\n\t\tcp = strchr(kdb_buffer, '\\n');\n\t\tif (!cp) {\n\t\t\t\n\t\t\tif (next_avail == kdb_buffer) {\n\t\t\t\t\n\t\t\t\tcp2 = kdb_buffer;\n\t\t\t\tlen = strlen(kdb_prompt_str);\n\t\t\t\tif (!strncmp(cp2, kdb_prompt_str, len)) {\n\t\t\t\t\t\n\t\t\t\t\tkdb_grepping_flag = 0;\n\t\t\t\t\tgoto kdb_printit;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tlen = strlen(kdb_buffer);\n\t\t\tnext_avail = kdb_buffer + len;\n\t\t\tsize_avail = sizeof(kdb_buffer) - len;\n\t\t\tgoto kdb_print_out;\n\t\t}\n\n\t\t\n\t\tcp++;\t \t     \n\t\treplaced_byte = *cp; \n\t\tcphold = cp;\n\t\t*cp = '\\0';\t     \n\n\t\t\n\t\tfnd = kdb_search_string(kdb_buffer, kdb_grep_string);\n\t\tif (!fnd) {\n\t\t\t\n\t\t\t*cphold = replaced_byte;\n\t\t\tstrcpy(kdb_buffer, cphold);\n\t\t\tlen = strlen(kdb_buffer);\n\t\t\tnext_avail = kdb_buffer + len;\n\t\t\tsize_avail = sizeof(kdb_buffer) - len;\n\t\t\tgoto kdb_print_out;\n\t\t}\n\t\tif (kdb_grepping_flag >= KDB_GREPPING_FLAG_SEARCH)\n\t\t\t\n\t\t\tkdb_grepping_flag = 0;\n\t\t\n\t}\nkdb_printit:\n\n\t\n\tretlen = strlen(kdb_buffer);\n\tcp = (char *) printk_skip_level(kdb_buffer);\n\tif (!dbg_kdb_mode && kgdb_connected) {\n\t\tgdbstub_msg_write(cp, retlen - (cp - kdb_buffer));\n\t} else {\n\t\tif (dbg_io_ops && !dbg_io_ops->is_console) {\n\t\t\tlen = retlen - (cp - kdb_buffer);\n\t\t\tcp2 = cp;\n\t\t\twhile (len--) {\n\t\t\t\tdbg_io_ops->write_char(*cp2);\n\t\t\t\tcp2++;\n\t\t\t}\n\t\t}\n\t\twhile (c) {\n\t\t\tc->write(c, cp, retlen - (cp - kdb_buffer));\n\t\t\ttouch_nmi_watchdog();\n\t\t\tc = c->next;\n\t\t}\n\t}\n\tif (logging) {\n\t\tsaved_loglevel = console_loglevel;\n\t\tconsole_loglevel = CONSOLE_LOGLEVEL_SILENT;\n\t\tif (printk_get_level(kdb_buffer) || src == KDB_MSGSRC_PRINTK)\n\t\t\tprintk(\"", "1029": "\", &perf_fops, event,\n\t\t\t\t\tf_flags);\n\tif (IS_ERR(event_file)) {\n\t\terr = PTR_ERR(event_file);\n\t\tgoto err_context;\n\t}\n\n\tif (move_group) {\n\t\tgctx = group_leader->ctx;\n\n\t\t\n\t\tmutex_lock_double(&gctx->mutex, &ctx->mutex);\n\n\t\tperf_remove_from_context(group_leader, false);\n\n\t\tlist_for_each_entry(sibling, &group_leader->sibling_list,\n\t\t\t\t    group_entry) {\n\t\t\tperf_remove_from_context(sibling, false);\n\t\t\tput_ctx(gctx);\n\t\t}\n\t} else {\n\t\tmutex_lock(&ctx->mutex);\n\t}\n\n\tWARN_ON_ONCE(ctx->parent_ctx);\n\n\tif (move_group) {\n\t\t\n\t\tsynchronize_rcu();\n\n\t\t\n\t\tlist_for_each_entry(sibling, &group_leader->sibling_list,\n\t\t\t\t    group_entry) {\n\t\t\tperf_event__state_init(sibling);\n\t\t\tperf_install_in_context(ctx, sibling, sibling->cpu);\n\t\t\tget_ctx(ctx);\n\t\t}\n\n\t\t\n\t\tperf_event__state_init(group_leader);\n\t\tperf_install_in_context(ctx, group_leader, group_leader->cpu);\n\t\tget_ctx(ctx);\n\t}\n\n\tif (!exclusive_event_installable(event, ctx)) {\n\t\terr = -EBUSY;\n\t\tmutex_unlock(&ctx->mutex);\n\t\tfput(event_file);\n\t\tgoto err_context;\n\t}\n\n\tperf_install_in_context(ctx, event, event->cpu);\n\tperf_unpin_context(ctx);\n\n\tif (move_group) {\n\t\tmutex_unlock(&gctx->mutex);\n\t\tput_ctx(gctx);\n\t}\n\tmutex_unlock(&ctx->mutex);\n\n\tput_online_cpus();\n\n\tevent->owner = current;\n\n\tmutex_lock(&current->perf_event_mutex);\n\tlist_add_tail(&event->owner_entry, &current->perf_event_list);\n\tmutex_unlock(&current->perf_event_mutex);\n\n\t\n\tperf_event__header_size(event);\n\tperf_event__id_header_size(event);\n\n\t\n\tfdput(group);\n\tfd_install(event_fd, event_file);\n\treturn event_fd;\n\nerr_context:\n\tperf_unpin_context(ctx);\n\tput_ctx(ctx);\nerr_alloc:\n\tfree_event(event);\nerr_cpus:\n\tput_online_cpus();\nerr_task:\n\tif (task)\n\t\tput_task_struct(task);\nerr_group_fd:\n\tfdput(group);\nerr_fd:\n\tput_unused_fd(event_fd);\n\treturn err;\n}\n\n\nstruct perf_event *\nperf_event_create_kernel_counter(struct perf_event_attr *attr, int cpu,\n\t\t\t\t struct task_struct *task,\n\t\t\t\t perf_overflow_handler_t overflow_handler,\n\t\t\t\t void *context)\n{\n\tstruct perf_event_context *ctx;\n\tstruct perf_event *event;\n\tint err;\n\n\t\n\n\tevent = perf_event_alloc(attr, cpu, task, NULL, NULL,\n\t\t\t\t overflow_handler, context, -1);\n\tif (IS_ERR(event)) {\n\t\terr = PTR_ERR(event);\n\t\tgoto err;\n\t}\n\n\t\n\tevent->owner = EVENT_OWNER_KERNEL;\n\n\taccount_event(event);\n\n\tctx = find_get_context(event->pmu, task, event);\n\tif (IS_ERR(ctx)) {\n\t\terr = PTR_ERR(ctx);\n\t\tgoto err_free;\n\t}\n\n\tWARN_ON_ONCE(ctx->parent_ctx);\n\tmutex_lock(&ctx->mutex);\n\tif (!exclusive_event_installable(event, ctx)) {\n\t\tmutex_unlock(&ctx->mutex);\n\t\tperf_unpin_context(ctx);\n\t\tput_ctx(ctx);\n\t\terr = -EBUSY;\n\t\tgoto err_free;\n\t}\n\n\tperf_install_in_context(ctx, event, cpu);\n\tperf_unpin_context(ctx);\n\tmutex_unlock(&ctx->mutex);\n\n\treturn event;\n\nerr_free:\n\tfree_event(event);\nerr:\n\treturn ERR_PTR(err);\n}\nEXPORT_SYMBOL_GPL(perf_event_create_kernel_counter);\n\nvoid perf_pmu_migrate_context(struct pmu *pmu, int src_cpu, int dst_cpu)\n{\n\tstruct perf_event_context *src_ctx;\n\tstruct perf_event_context *dst_ctx;\n\tstruct perf_event *event, *tmp;\n\tLIST_HEAD(events);\n\n\tsrc_ctx = &per_cpu_ptr(pmu->pmu_cpu_context, src_cpu)->ctx;\n\tdst_ctx = &per_cpu_ptr(pmu->pmu_cpu_context, dst_cpu)->ctx;\n\n\t\n\tmutex_lock_double(&src_ctx->mutex, &dst_ctx->mutex);\n\tlist_for_each_entry_safe(event, tmp, &src_ctx->event_list,\n\t\t\t\t event_entry) {\n\t\tperf_remove_from_context(event, false);\n\t\tunaccount_event_cpu(event, src_cpu);\n\t\tput_ctx(src_ctx);\n\t\tlist_add(&event->migrate_entry, &events);\n\t}\n\n\t\n\tsynchronize_rcu();\n\n\t\n\tlist_for_each_entry_safe(event, tmp, &events, migrate_entry) {\n\t\tif (event->group_leader == event)\n\t\t\tcontinue;\n\n\t\tlist_del(&event->migrate_entry);\n\t\tif (event->state >= PERF_EVENT_STATE_OFF)\n\t\t\tevent->state = PERF_EVENT_STATE_INACTIVE;\n\t\taccount_event_cpu(event, dst_cpu);\n\t\tperf_install_in_context(dst_ctx, event, dst_cpu);\n\t\tget_ctx(dst_ctx);\n\t}\n\n\t\n\tlist_for_each_entry_safe(event, tmp, &events, migrate_entry) {\n\t\tlist_del(&event->migrate_entry);\n\t\tif (event->state >= PERF_EVENT_STATE_OFF)\n\t\t\tevent->state = PERF_EVENT_STATE_INACTIVE;\n\t\taccount_event_cpu(event, dst_cpu);\n\t\tperf_install_in_context(dst_ctx, event, dst_cpu);\n\t\tget_ctx(dst_ctx);\n\t}\n\tmutex_unlock(&dst_ctx->mutex);\n\tmutex_unlock(&src_ctx->mutex);\n}\nEXPORT_SYMBOL_GPL(perf_pmu_migrate_context);\n\nstatic void sync_child_event(struct perf_event *child_event,\n\t\t\t       struct task_struct *child)\n{\n\tstruct perf_event *parent_event = child_event->parent;\n\tu64 child_val;\n\n\tif (child_event->attr.inherit_stat)\n\t\tperf_event_read_event(child_event, child);\n\n\tchild_val = perf_event_count(child_event);\n\n\t\n\tatomic64_add(child_val, &parent_event->child_count);\n\tatomic64_add(child_event->total_time_enabled,\n\t\t     &parent_event->child_total_time_enabled);\n\tatomic64_add(child_event->total_time_running,\n\t\t     &parent_event->child_total_time_running);\n\n\t\n\tWARN_ON_ONCE(parent_event->ctx->parent_ctx);\n\tmutex_lock(&parent_event->child_mutex);\n\tlist_del_init(&child_event->child_list);\n\tmutex_unlock(&parent_event->child_mutex);\n\n\t\n\tperf_event_wakeup(parent_event);\n\n\t\n\tput_event(parent_event);\n}\n\nstatic void\n__perf_event_exit_task(struct perf_event *child_event,\n\t\t\t struct perf_event_context *child_ctx,\n\t\t\t struct task_struct *child)\n{\n\t\n\tperf_remove_from_context(child_event, !!child_event->parent);\n\n\t\n\tif (child_event->parent) {\n\t\tsync_child_event(child_event, child);\n\t\tfree_event(child_event);\n\t} else {\n\t\tchild_event->state = PERF_EVENT_STATE_EXIT;\n\t\tperf_event_wakeup(child_event);\n\t}\n}\n\nstatic void perf_event_exit_task_context(struct task_struct *child, int ctxn)\n{\n\tstruct perf_event *child_event, *next;\n\tstruct perf_event_context *child_ctx, *clone_ctx = NULL;\n\tunsigned long flags;\n\n\tif (likely(!child->perf_event_ctxp[ctxn])) {\n\t\tperf_event_task(child, NULL, 0);\n\t\treturn;\n\t}\n\n\tlocal_irq_save(flags);\n\t\n\tchild_ctx = rcu_dereference_raw(child->perf_event_ctxp[ctxn]);\n\n\t\n\traw_spin_lock(&child_ctx->lock);\n\ttask_ctx_sched_out(child_ctx);\n\tchild->perf_event_ctxp[ctxn] = NULL;\n\n\t\n\tclone_ctx = unclone_ctx(child_ctx);\n\tupdate_context_time(child_ctx);\n\traw_spin_unlock_irqrestore(&child_ctx->lock, flags);\n\n\tif (clone_ctx)\n\t\tput_ctx(clone_ctx);\n\n\t\n\tperf_event_task(child, child_ctx, 0);\n\n\t\n\tmutex_lock(&child_ctx->mutex);\n\n\tlist_for_each_entry_safe(child_event, next, &child_ctx->event_list, event_entry)\n\t\t__perf_event_exit_task(child_event, child_ctx, child);\n\n\tmutex_unlock(&child_ctx->mutex);\n\n\tput_ctx(child_ctx);\n}\n\n\nvoid perf_event_exit_task(struct task_struct *child)\n{\n\tstruct perf_event *event, *tmp;\n\tint ctxn;\n\n\tmutex_lock(&child->perf_event_mutex);\n\tlist_for_each_entry_safe(event, tmp, &child->perf_event_list,\n\t\t\t\t owner_entry) {\n\t\tlist_del_init(&event->owner_entry);\n\n\t\t\n\t\tsmp_wmb();\n\t\tevent->owner = NULL;\n\t}\n\tmutex_unlock(&child->perf_event_mutex);\n\n\tfor_each_task_context_nr(ctxn)\n\t\tperf_event_exit_task_context(child, ctxn);\n}\n\nstatic void perf_free_event(struct perf_event *event,\n\t\t\t    struct perf_event_context *ctx)\n{\n\tstruct perf_event *parent = event->parent;\n\n\tif (WARN_ON_ONCE(!parent))\n\t\treturn;\n\n\tmutex_lock(&parent->child_mutex);\n\tlist_del_init(&event->child_list);\n\tmutex_unlock(&parent->child_mutex);\n\n\tput_event(parent);\n\n\traw_spin_lock_irq(&ctx->lock);\n\tperf_group_detach(event);\n\tlist_del_event(event, ctx);\n\traw_spin_unlock_irq(&ctx->lock);\n\tfree_event(event);\n}\n\n\nvoid perf_event_free_task(struct task_struct *task)\n{\n\tstruct perf_event_context *ctx;\n\tstruct perf_event *event, *tmp;\n\tint ctxn;\n\n\tfor_each_task_context_nr(ctxn) {\n\t\tctx = task->perf_event_ctxp[ctxn];\n\t\tif (!ctx)\n\t\t\tcontinue;\n\n\t\tmutex_lock(&ctx->mutex);\nagain:\n\t\tlist_for_each_entry_safe(event, tmp, &ctx->pinned_groups,\n\t\t\t\tgroup_entry)\n\t\t\tperf_free_event(event, ctx);\n\n\t\tlist_for_each_entry_safe(event, tmp, &ctx->flexible_groups,\n\t\t\t\tgroup_entry)\n\t\t\tperf_free_event(event, ctx);\n\n\t\tif (!list_empty(&ctx->pinned_groups) ||\n\t\t\t\t!list_empty(&ctx->flexible_groups))\n\t\t\tgoto again;\n\n\t\tmutex_unlock(&ctx->mutex);\n\n\t\tput_ctx(ctx);\n\t}\n}\n\nvoid perf_event_delayed_put(struct task_struct *task)\n{\n\tint ctxn;\n\n\tfor_each_task_context_nr(ctxn)\n\t\tWARN_ON_ONCE(task->perf_event_ctxp[ctxn]);\n}\n\n\nstatic struct perf_event *\ninherit_event(struct perf_event *parent_event,\n\t      struct task_struct *parent,\n\t      struct perf_event_context *parent_ctx,\n\t      struct task_struct *child,\n\t      struct perf_event *group_leader,\n\t      struct perf_event_context *child_ctx)\n{\n\tenum perf_event_active_state parent_state = parent_event->state;\n\tstruct perf_event *child_event;\n\tunsigned long flags;\n\n\t\n\tif (parent_event->parent)\n\t\tparent_event = parent_event->parent;\n\n\tchild_event = perf_event_alloc(&parent_event->attr,\n\t\t\t\t\t   parent_event->cpu,\n\t\t\t\t\t   child,\n\t\t\t\t\t   group_leader, parent_event,\n\t\t\t\t\t   NULL, NULL, -1);\n\tif (IS_ERR(child_event))\n\t\treturn child_event;\n\n\tif (is_orphaned_event(parent_event) ||\n\t    !atomic_long_inc_not_zero(&parent_event->refcount)) {\n\t\tfree_event(child_event);\n\t\treturn NULL;\n\t}\n\n\tget_ctx(child_ctx);\n\n\t\n\tif (parent_state >= PERF_EVENT_STATE_INACTIVE)\n\t\tchild_event->state = PERF_EVENT_STATE_INACTIVE;\n\telse\n\t\tchild_event->state = PERF_EVENT_STATE_OFF;\n\n\tif (parent_event->attr.freq) {\n\t\tu64 sample_period = parent_event->hw.sample_period;\n\t\tstruct hw_perf_event *hwc = &child_event->hw;\n\n\t\thwc->sample_period = sample_period;\n\t\thwc->last_period   = sample_period;\n\n\t\tlocal64_set(&hwc->period_left, sample_period);\n\t}\n\n\tchild_event->ctx = child_ctx;\n\tchild_event->overflow_handler = parent_event->overflow_handler;\n\tchild_event->overflow_handler_context\n\t\t= parent_event->overflow_handler_context;\n\n\t\n\tperf_event__header_size(child_event);\n\tperf_event__id_header_size(child_event);\n\n\t\n\traw_spin_lock_irqsave(&child_ctx->lock, flags);\n\tadd_event_to_ctx(child_event, child_ctx);\n\traw_spin_unlock_irqrestore(&child_ctx->lock, flags);\n\n\t\n\tWARN_ON_ONCE(parent_event->ctx->parent_ctx);\n\tmutex_lock(&parent_event->child_mutex);\n\tlist_add_tail(&child_event->child_list, &parent_event->child_list);\n\tmutex_unlock(&parent_event->child_mutex);\n\n\treturn child_event;\n}\n\nstatic int inherit_group(struct perf_event *parent_event,\n\t      struct task_struct *parent,\n\t      struct perf_event_context *parent_ctx,\n\t      struct task_struct *child,\n\t      struct perf_event_context *child_ctx)\n{\n\tstruct perf_event *leader;\n\tstruct perf_event *sub;\n\tstruct perf_event *child_ctr;\n\n\tleader = inherit_event(parent_event, parent, parent_ctx,\n\t\t\t\t child, NULL, child_ctx);\n\tif (IS_ERR(leader))\n\t\treturn PTR_ERR(leader);\n\tlist_for_each_entry(sub, &parent_event->sibling_list, group_entry) {\n\t\tchild_ctr = inherit_event(sub, parent, parent_ctx,\n\t\t\t\t\t    child, leader, child_ctx);\n\t\tif (IS_ERR(child_ctr))\n\t\t\treturn PTR_ERR(child_ctr);\n\t}\n\treturn 0;\n}\n\nstatic int\ninherit_task_group(struct perf_event *event, struct task_struct *parent,\n\t\t   struct perf_event_context *parent_ctx,\n\t\t   struct task_struct *child, int ctxn,\n\t\t   int *inherited_all)\n{\n\tint ret;\n\tstruct perf_event_context *child_ctx;\n\n\tif (!event->attr.inherit) {\n\t\t*inherited_all = 0;\n\t\treturn 0;\n\t}\n\n\tchild_ctx = child->perf_event_ctxp[ctxn];\n\tif (!child_ctx) {\n\t\t\n\n\t\tchild_ctx = alloc_perf_context(parent_ctx->pmu, child);\n\t\tif (!child_ctx)\n\t\t\treturn -ENOMEM;\n\n\t\tchild->perf_event_ctxp[ctxn] = child_ctx;\n\t}\n\n\tret = inherit_group(event, parent, parent_ctx,\n\t\t\t    child, child_ctx);\n\n\tif (ret)\n\t\t*inherited_all = 0;\n\n\treturn ret;\n}\n\n\nstatic int perf_event_init_context(struct task_struct *child, int ctxn)\n{\n\tstruct perf_event_context *child_ctx, *parent_ctx;\n\tstruct perf_event_context *cloned_ctx;\n\tstruct perf_event *event;\n\tstruct task_struct *parent = current;\n\tint inherited_all = 1;\n\tunsigned long flags;\n\tint ret = 0;\n\n\tif (likely(!parent->perf_event_ctxp[ctxn]))\n\t\treturn 0;\n\n\t\n\tparent_ctx = perf_pin_task_context(parent, ctxn);\n\tif (!parent_ctx)\n\t\treturn 0;\n\n\t\n\n\t\n\tmutex_lock(&parent_ctx->mutex);\n\n\t\n\tlist_for_each_entry(event, &parent_ctx->pinned_groups, group_entry) {\n\t\tret = inherit_task_group(event, parent, parent_ctx,\n\t\t\t\t\t child, ctxn, &inherited_all);\n\t\tif (ret)\n\t\t\tbreak;\n\t}\n\n\t\n\traw_spin_lock_irqsave(&parent_ctx->lock, flags);\n\tparent_ctx->rotate_disable = 1;\n\traw_spin_unlock_irqrestore(&parent_ctx->lock, flags);\n\n\tlist_for_each_entry(event, &parent_ctx->flexible_groups, group_entry) {\n\t\tret = inherit_task_group(event, parent, parent_ctx,\n\t\t\t\t\t child, ctxn, &inherited_all);\n\t\tif (ret)\n\t\t\tbreak;\n\t}\n\n\traw_spin_lock_irqsave(&parent_ctx->lock, flags);\n\tparent_ctx->rotate_disable = 0;\n\n\tchild_ctx = child->perf_event_ctxp[ctxn];\n\n\tif (child_ctx && inherited_all) {\n\t\t\n\t\tcloned_ctx = parent_ctx->parent_ctx;\n\t\tif (cloned_ctx) {\n\t\t\tchild_ctx->parent_ctx = cloned_ctx;\n\t\t\tchild_ctx->parent_gen = parent_ctx->parent_gen;\n\t\t} else {\n\t\t\tchild_ctx->parent_ctx = parent_ctx;\n\t\t\tchild_ctx->parent_gen = parent_ctx->generation;\n\t\t}\n\t\tget_ctx(child_ctx->parent_ctx);\n\t}\n\n\traw_spin_unlock_irqrestore(&parent_ctx->lock, flags);\n\tmutex_unlock(&parent_ctx->mutex);\n\n\tperf_unpin_context(parent_ctx);\n\tput_ctx(parent_ctx);\n\n\treturn ret;\n}\n\n\nint perf_event_init_task(struct task_struct *child)\n{\n\tint ctxn, ret;\n\n\tmemset(child->perf_event_ctxp, 0, sizeof(child->perf_event_ctxp));\n\tmutex_init(&child->perf_event_mutex);\n\tINIT_LIST_HEAD(&child->perf_event_list);\n\n\tfor_each_task_context_nr(ctxn) {\n\t\tret = perf_event_init_context(child, ctxn);\n\t\tif (ret) {\n\t\t\tperf_event_free_task(child);\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nstatic void __init perf_event_init_all_cpus(void)\n{\n\tstruct swevent_htable *swhash;\n\tint cpu;\n\n\tfor_each_possible_cpu(cpu) {\n\t\tswhash = &per_cpu(swevent_htable, cpu);\n\t\tmutex_init(&swhash->hlist_mutex);\n\t\tINIT_LIST_HEAD(&per_cpu(active_ctx_list, cpu));\n\t}\n}\n\nstatic void perf_event_init_cpu(int cpu)\n{\n\tstruct swevent_htable *swhash = &per_cpu(swevent_htable, cpu);\n\n\tmutex_lock(&swhash->hlist_mutex);\n\tswhash->online = true;\n\tif (swhash->hlist_refcount > 0) {\n\t\tstruct swevent_hlist *hlist;\n\n\t\thlist = kzalloc_node(sizeof(*hlist), GFP_KERNEL, cpu_to_node(cpu));\n\t\tWARN_ON(!hlist);\n\t\trcu_assign_pointer(swhash->swevent_hlist, hlist);\n\t}\n\tmutex_unlock(&swhash->hlist_mutex);\n}\n\n#if defined CONFIG_HOTPLUG_CPU || defined CONFIG_KEXEC\nstatic void __perf_event_exit_context(void *__info)\n{\n\tstruct remove_event re = { .detach_group = true };\n\tstruct perf_event_context *ctx = __info;\n\n\trcu_read_lock();\n\tlist_for_each_entry_rcu(re.event, &ctx->event_list, event_entry)\n\t\t__perf_remove_from_context(&re);\n\trcu_read_unlock();\n}\n\nstatic void perf_event_exit_cpu_context(int cpu)\n{\n\tstruct perf_event_context *ctx;\n\tstruct pmu *pmu;\n\tint idx;\n\n\tidx = srcu_read_lock(&pmus_srcu);\n\tlist_for_each_entry_rcu(pmu, &pmus, entry) {\n\t\tctx = &per_cpu_ptr(pmu->pmu_cpu_context, cpu)->ctx;\n\n\t\tmutex_lock(&ctx->mutex);\n\t\tsmp_call_function_single(cpu, __perf_event_exit_context, ctx, 1);\n\t\tmutex_unlock(&ctx->mutex);\n\t}\n\tsrcu_read_unlock(&pmus_srcu, idx);\n}\n\nstatic void perf_event_exit_cpu(int cpu)\n{\n\tstruct swevent_htable *swhash = &per_cpu(swevent_htable, cpu);\n\n\tperf_event_exit_cpu_context(cpu);\n\n\tmutex_lock(&swhash->hlist_mutex);\n\tswhash->online = false;\n\tswevent_hlist_release(swhash);\n\tmutex_unlock(&swhash->hlist_mutex);\n}\n#else\nstatic inline void perf_event_exit_cpu(int cpu) { }\n#endif\n\nstatic int\nperf_reboot(struct notifier_block *notifier, unsigned long val, void *v)\n{\n\tint cpu;\n\n\tfor_each_online_cpu(cpu)\n\t\tperf_event_exit_cpu(cpu);\n\n\treturn NOTIFY_OK;\n}\n\n\nstatic struct notifier_block perf_reboot_notifier = {\n\t.notifier_call = perf_reboot,\n\t.priority = INT_MIN,\n};\n\nstatic int\nperf_cpu_notify(struct notifier_block *self, unsigned long action, void *hcpu)\n{\n\tunsigned int cpu = (long)hcpu;\n\n\tswitch (action & ~CPU_TASKS_FROZEN) {\n\n\tcase CPU_UP_PREPARE:\n\tcase CPU_DOWN_FAILED:\n\t\tperf_event_init_cpu(cpu);\n\t\tbreak;\n\n\tcase CPU_UP_CANCELED:\n\tcase CPU_DOWN_PREPARE:\n\t\tperf_event_exit_cpu(cpu);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\n\treturn NOTIFY_OK;\n}\n\nvoid __init perf_event_init(void)\n{\n\tint ret;\n\n\tidr_init(&pmu_idr);\n\n\tperf_event_init_all_cpus();\n\tinit_srcu_struct(&pmus_srcu);\n\tperf_pmu_register(&perf_swevent, \"", "1030": "\", ((unsigned long)(REC->%s))\"", "1031": "\", (chip && chip->name) ? chip->name : \"", "1032": "\", (desc->action && desc->action->handler) ? '*' : ' ');\n\t\t\tdirect = (i == hwirq) && (i < domain->revmap_direct_max_irq);\n\t\t\tseq_printf(m, \"", "1033": "\", (int)(2 * sizeof(void *) + 2), \"", "1034": "\", (unsigned long long)now);\n\tSEQ_printf(m, \"", "1035": "\", (unsigned long)ts);\n\n\treturn sprintf(buf, \"", "1036": "\", (void *)*ptr);\n\n\treturn 0;\n}\n\nstatic const struct seq_operations ftrace_graph_seq_ops = {\n\t.start = g_start,\n\t.next = g_next,\n\t.stop = g_stop,\n\t.show = g_show,\n};\n\nstatic int\n__ftrace_graph_open(struct inode *inode, struct file *file,\n\t\t    struct ftrace_graph_data *fgd)\n{\n\tint ret = 0;\n\n\tmutex_lock(&graph_lock);\n\tif ((file->f_mode & FMODE_WRITE) &&\n\t    (file->f_flags & O_TRUNC)) {\n\t\t*fgd->count = 0;\n\t\tmemset(fgd->table, 0, fgd->size * sizeof(*fgd->table));\n\t}\n\tmutex_unlock(&graph_lock);\n\n\tif (file->f_mode & FMODE_READ) {\n\t\tret = seq_open(file, fgd->seq_ops);\n\t\tif (!ret) {\n\t\t\tstruct seq_file *m = file->private_data;\n\t\t\tm->private = fgd;\n\t\t}\n\t} else\n\t\tfile->private_data = fgd;\n\n\treturn ret;\n}\n\nstatic int\nftrace_graph_open(struct inode *inode, struct file *file)\n{\n\tstruct ftrace_graph_data *fgd;\n\n\tif (unlikely(ftrace_disabled))\n\t\treturn -ENODEV;\n\n\tfgd = kmalloc(sizeof(*fgd), GFP_KERNEL);\n\tif (fgd == NULL)\n\t\treturn -ENOMEM;\n\n\tfgd->table = ftrace_graph_funcs;\n\tfgd->size = FTRACE_GRAPH_MAX_FUNCS;\n\tfgd->count = &ftrace_graph_count;\n\tfgd->seq_ops = &ftrace_graph_seq_ops;\n\n\treturn __ftrace_graph_open(inode, file, fgd);\n}\n\nstatic int\nftrace_graph_notrace_open(struct inode *inode, struct file *file)\n{\n\tstruct ftrace_graph_data *fgd;\n\n\tif (unlikely(ftrace_disabled))\n\t\treturn -ENODEV;\n\n\tfgd = kmalloc(sizeof(*fgd), GFP_KERNEL);\n\tif (fgd == NULL)\n\t\treturn -ENOMEM;\n\n\tfgd->table = ftrace_graph_notrace_funcs;\n\tfgd->size = FTRACE_GRAPH_MAX_FUNCS;\n\tfgd->count = &ftrace_graph_notrace_count;\n\tfgd->seq_ops = &ftrace_graph_seq_ops;\n\n\treturn __ftrace_graph_open(inode, file, fgd);\n}\n\nstatic int\nftrace_graph_release(struct inode *inode, struct file *file)\n{\n\tif (file->f_mode & FMODE_READ) {\n\t\tstruct seq_file *m = file->private_data;\n\n\t\tkfree(m->private);\n\t\tseq_release(inode, file);\n\t} else {\n\t\tkfree(file->private_data);\n\t}\n\n\treturn 0;\n}\n\nstatic int\nftrace_set_func(unsigned long *array, int *idx, int size, char *buffer)\n{\n\tstruct dyn_ftrace *rec;\n\tstruct ftrace_page *pg;\n\tint search_len;\n\tint fail = 1;\n\tint type, not;\n\tchar *search;\n\tbool exists;\n\tint i;\n\n\t\n\ttype = filter_parse_regex(buffer, strlen(buffer), &search, &not);\n\tif (!not && *idx >= size)\n\t\treturn -EBUSY;\n\n\tsearch_len = strlen(search);\n\n\tmutex_lock(&ftrace_lock);\n\n\tif (unlikely(ftrace_disabled)) {\n\t\tmutex_unlock(&ftrace_lock);\n\t\treturn -ENODEV;\n\t}\n\n\tdo_for_each_ftrace_rec(pg, rec) {\n\n\t\tif (ftrace_match_record(rec, NULL, search, search_len, type)) {\n\t\t\t\n\t\t\texists = false;\n\t\t\tfor (i = 0; i < *idx; i++) {\n\t\t\t\tif (array[i] == rec->ip) {\n\t\t\t\t\texists = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!not) {\n\t\t\t\tfail = 0;\n\t\t\t\tif (!exists) {\n\t\t\t\t\tarray[(*idx)++] = rec->ip;\n\t\t\t\t\tif (*idx >= size)\n\t\t\t\t\t\tgoto out;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (exists) {\n\t\t\t\t\tarray[i] = array[--(*idx)];\n\t\t\t\t\tarray[*idx] = 0;\n\t\t\t\t\tfail = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} while_for_each_ftrace_rec();\nout:\n\tmutex_unlock(&ftrace_lock);\n\n\tif (fail)\n\t\treturn -EINVAL;\n\n\treturn 0;\n}\n\nstatic ssize_t\nftrace_graph_write(struct file *file, const char __user *ubuf,\n\t\t   size_t cnt, loff_t *ppos)\n{\n\tstruct trace_parser parser;\n\tssize_t read, ret = 0;\n\tstruct ftrace_graph_data *fgd = file->private_data;\n\n\tif (!cnt)\n\t\treturn 0;\n\n\tif (trace_parser_get_init(&parser, FTRACE_BUFF_MAX))\n\t\treturn -ENOMEM;\n\n\tread = trace_get_user(&parser, ubuf, cnt, ppos);\n\n\tif (read >= 0 && trace_parser_loaded((&parser))) {\n\t\tparser.buffer[parser.idx] = 0;\n\n\t\tmutex_lock(&graph_lock);\n\n\t\t\n\t\tret = ftrace_set_func(fgd->table, fgd->count, fgd->size,\n\t\t\t\t      parser.buffer);\n\n\t\tmutex_unlock(&graph_lock);\n\t}\n\n\tif (!ret)\n\t\tret = read;\n\n\ttrace_parser_put(&parser);\n\n\treturn ret;\n}\n\nstatic const struct file_operations ftrace_graph_fops = {\n\t.open\t\t= ftrace_graph_open,\n\t.read\t\t= seq_read,\n\t.write\t\t= ftrace_graph_write,\n\t.llseek\t\t= tracing_lseek,\n\t.release\t= ftrace_graph_release,\n};\n\nstatic const struct file_operations ftrace_graph_notrace_fops = {\n\t.open\t\t= ftrace_graph_notrace_open,\n\t.read\t\t= seq_read,\n\t.write\t\t= ftrace_graph_write,\n\t.llseek\t\t= tracing_lseek,\n\t.release\t= ftrace_graph_release,\n};\n#endif \n\nvoid ftrace_create_filter_files(struct ftrace_ops *ops,\n\t\t\t\tstruct dentry *parent)\n{\n\n\ttrace_create_file(\"", "1037": "\", (void *)addr);\n\telse\n\t\tseq_printf(m, \"", "1038": "\", (void *)ip);\n\n\tseq_puts(m, \"", "1039": "\", (void *)rec->ip);\n\tif (iter->flags & FTRACE_ITER_ENABLED) {\n\t\tstruct ftrace_ops *ops = NULL;\n\n\t\tseq_printf(m, \"", "1040": "\", *cp);\n\t\t\t++cp;\n\t\t}\n\t\tbreak;\n\tcase 16: \n\t\tmemset(tmpbuffer, ' ',\n\t\t       strlen(kdb_prompt_str) + (lastchar-buffer));\n\t\t*(tmpbuffer+strlen(kdb_prompt_str) +\n\t\t  (lastchar-buffer)) = '\\0';\n\t\tkdb_printf(\"", "1041": "\", *p);\n\n\tr += ftrace_arch_read_dyn_info(buf+r, (size-1)-r);\n\tbuf[r++] = '\\n';\n\n\tr = simple_read_from_buffer(ubuf, cnt, ppos, buf, r);\n\n\tmutex_unlock(&dyn_info_mutex);\n\n\treturn r;\n}\n\nstatic const struct file_operations tracing_dyn_info_fops = {\n\t.open\t\t= tracing_open_generic,\n\t.read\t\t= tracing_read_dyn_info,\n\t.llseek\t\t= generic_file_llseek,\n};\n#endif \n\n#if defined(CONFIG_TRACER_SNAPSHOT) && defined(CONFIG_DYNAMIC_FTRACE)\nstatic void\nftrace_snapshot(unsigned long ip, unsigned long parent_ip, void **data)\n{\n\ttracing_snapshot();\n}\n\nstatic void\nftrace_count_snapshot(unsigned long ip, unsigned long parent_ip, void **data)\n{\n\tunsigned long *count = (long *)data;\n\n\tif (!*count)\n\t\treturn;\n\n\tif (*count != -1)\n\t\t(*count)--;\n\n\ttracing_snapshot();\n}\n\nstatic int\nftrace_snapshot_print(struct seq_file *m, unsigned long ip,\n\t\t      struct ftrace_probe_ops *ops, void *data)\n{\n\tlong count = (long)data;\n\n\tseq_printf(m, \"", "1042": "\", *pid, buf);\n\treturn 0;\n}\n\nstatic const struct seq_operations tracing_saved_cmdlines_seq_ops = {\n\t.start\t\t= saved_cmdlines_start,\n\t.next\t\t= saved_cmdlines_next,\n\t.stop\t\t= saved_cmdlines_stop,\n\t.show\t\t= saved_cmdlines_show,\n};\n\nstatic int tracing_saved_cmdlines_open(struct inode *inode, struct file *filp)\n{\n\tif (tracing_disabled)\n\t\treturn -ENODEV;\n\n\treturn seq_open(filp, &tracing_saved_cmdlines_seq_ops);\n}\n\nstatic const struct file_operations tracing_saved_cmdlines_fops = {\n\t.open\t\t= tracing_saved_cmdlines_open,\n\t.read\t\t= seq_read,\n\t.llseek\t\t= seq_lseek,\n\t.release\t= seq_release,\n};\n\nstatic ssize_t\ntracing_saved_cmdlines_size_read(struct file *filp, char __user *ubuf,\n\t\t\t\t size_t cnt, loff_t *ppos)\n{\n\tchar buf[64];\n\tint r;\n\n\tarch_spin_lock(&trace_cmdline_lock);\n\tr = scnprintf(buf, sizeof(buf), \"", "1043": "\", -diag);\n}\n\n\nstruct defcmd_set {\n\tint count;\n\tint usable;\n\tchar *name;\n\tchar *usage;\n\tchar *help;\n\tchar **command;\n};\nstatic struct defcmd_set *defcmd_set;\nstatic int defcmd_set_count;\nstatic int defcmd_in_progress;\n\n\nstatic int kdb_exec_defcmd(int argc, const char **argv);\n\nstatic int kdb_defcmd2(const char *cmdstr, const char *argv0)\n{\n\tstruct defcmd_set *s = defcmd_set + defcmd_set_count - 1;\n\tchar **save_command = s->command;\n\tif (strcmp(argv0, \"", "1044": "\", 0200, d_tracer,\n\t\t\t  tr, &tracing_free_buffer_fops);\n\n\ttrace_create_file(\"", "1045": "\", 0220, d_tracer,\n\t\t\t  tr, &tracing_mark_fops);\n\n\ttrace_create_file(\"", "1046": "\", 0444,\n\t\t\td_tracer, NULL, &ftrace_avail_fops);\n\n\ttrace_create_file(\"", "1047": "\", 0444,\n\t\t\td_tracer, NULL, &ftrace_enabled_fops);\n\n\tftrace_create_filter_files(&global_ops, d_tracer);\n\n#ifdef CONFIG_FUNCTION_GRAPH_TRACER\n\ttrace_create_file(\"", "1048": "\", 0444, NULL, &timer_list_fops);\n\tif (!pe)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n__initcall(init_timer_list_procfs);\n\n\n#include <linux/console.h>\n#include <linux/vt_kern.h>\n#include <linux/kbd_kern.h>\n#include <linux/vt.h>\n#include <linux/module.h>\n#include <linux/slab.h>\n#include \"", "1049": "\", 0444, d_cpu,\n\t\t\t\ttr, cpu, &snapshot_raw_fops);\n#endif\n}\n\n#ifdef CONFIG_FTRACE_SELFTEST\n\n#include \"", "1050": "\", 0444, d_cpu,\n\t\t\t\ttr, cpu, &tracing_buffers_fops);\n\n\ttrace_create_cpu_file(\"", "1051": "\", 0444, d_cpu,\n\t\t\t\ttr, cpu, &tracing_entries_fops);\n\n#ifdef CONFIG_TRACER_SNAPSHOT\n\ttrace_create_cpu_file(\"", "1052": "\", 0444, d_cpu,\n\t\t\t\ttr, cpu, &tracing_pipe_fops);\n\n\t\n\ttrace_create_cpu_file(\"", "1053": "\", 0444, d_cpu,\n\t\t\t\ttr, cpu, &tracing_stats_fops);\n\n\ttrace_create_cpu_file(\"", "1054": "\", 0444, d_tracer,\n\t\t\t\t    NULL,\n\t\t\t\t    &ftrace_graph_fops);\n\ttrace_create_file(\"", "1055": "\", 0444, d_tracer,\n\t\t\t\t    NULL,\n\t\t\t\t    &ftrace_graph_notrace_fops);\n#endif \n\n\treturn 0;\n}\n\nstatic int ftrace_cmp_ips(const void *a, const void *b)\n{\n\tconst unsigned long *ipa = a;\n\tconst unsigned long *ipb = b;\n\n\tif (*ipa > *ipb)\n\t\treturn 1;\n\tif (*ipa < *ipb)\n\t\treturn -1;\n\treturn 0;\n}\n\nstatic void ftrace_swap_ips(void *a, void *b, int size)\n{\n\tunsigned long *ipa = a;\n\tunsigned long *ipb = b;\n\tunsigned long t;\n\n\tt = *ipa;\n\t*ipa = *ipb;\n\t*ipb = t;\n}\n\nstatic int ftrace_process_locs(struct module *mod,\n\t\t\t       unsigned long *start,\n\t\t\t       unsigned long *end)\n{\n\tstruct ftrace_page *start_pg;\n\tstruct ftrace_page *pg;\n\tstruct dyn_ftrace *rec;\n\tunsigned long count;\n\tunsigned long *p;\n\tunsigned long addr;\n\tunsigned long flags = 0; \n\tint ret = -ENOMEM;\n\n\tcount = end - start;\n\n\tif (!count)\n\t\treturn 0;\n\n\tsort(start, count, sizeof(*start),\n\t     ftrace_cmp_ips, ftrace_swap_ips);\n\n\tstart_pg = ftrace_allocate_pages(count);\n\tif (!start_pg)\n\t\treturn -ENOMEM;\n\n\tmutex_lock(&ftrace_lock);\n\n\t\n\tif (!mod) {\n\t\tWARN_ON(ftrace_pages || ftrace_pages_start);\n\t\t\n\t\tftrace_pages = ftrace_pages_start = start_pg;\n\t} else {\n\t\tif (!ftrace_pages)\n\t\t\tgoto out;\n\n\t\tif (WARN_ON(ftrace_pages->next)) {\n\t\t\t\n\t\t\twhile (ftrace_pages->next)\n\t\t\t\tftrace_pages = ftrace_pages->next;\n\t\t}\n\n\t\tftrace_pages->next = start_pg;\n\t}\n\n\tp = start;\n\tpg = start_pg;\n\twhile (p < end) {\n\t\taddr = ftrace_call_adjust(*p++);\n\t\t\n\t\tif (!addr)\n\t\t\tcontinue;\n\n\t\tif (pg->index == pg->size) {\n\t\t\t\n\t\t\tif (WARN_ON(!pg->next))\n\t\t\t\tbreak;\n\t\t\tpg = pg->next;\n\t\t}\n\n\t\trec = &pg->records[pg->index++];\n\t\trec->ip = addr;\n\t}\n\n\t\n\tWARN_ON(pg->next);\n\n\t\n\tftrace_pages = pg;\n\n\t\n\tif (!mod)\n\t\tlocal_irq_save(flags);\n\tftrace_update_code(mod, start_pg);\n\tif (!mod)\n\t\tlocal_irq_restore(flags);\n\tret = 0;\n out:\n\tmutex_unlock(&ftrace_lock);\n\n\treturn ret;\n}\n\n#ifdef CONFIG_MODULES\n\n#define next_to_ftrace_page(p) container_of(p, struct ftrace_page, next)\n\nvoid ftrace_release_mod(struct module *mod)\n{\n\tstruct dyn_ftrace *rec;\n\tstruct ftrace_page **last_pg;\n\tstruct ftrace_page *pg;\n\tint order;\n\n\tmutex_lock(&ftrace_lock);\n\n\tif (ftrace_disabled)\n\t\tgoto out_unlock;\n\n\t\n\tlast_pg = &ftrace_pages_start;\n\tfor (pg = ftrace_pages_start; pg; pg = *last_pg) {\n\t\trec = &pg->records[0];\n\t\tif (within_module_core(rec->ip, mod)) {\n\t\t\t\n\t\t\tif (WARN_ON(pg == ftrace_pages_start))\n\t\t\t\tgoto out_unlock;\n\n\t\t\t\n\t\t\tif (pg == ftrace_pages)\n\t\t\t\tftrace_pages = next_to_ftrace_page(last_pg);\n\n\t\t\t*last_pg = pg->next;\n\t\t\torder = get_count_order(pg->size / ENTRIES_PER_PAGE);\n\t\t\tfree_pages((unsigned long)pg->records, order);\n\t\t\tkfree(pg);\n\t\t} else\n\t\t\tlast_pg = &pg->next;\n\t}\n out_unlock:\n\tmutex_unlock(&ftrace_lock);\n}\n\nstatic void ftrace_init_module(struct module *mod,\n\t\t\t       unsigned long *start, unsigned long *end)\n{\n\tif (ftrace_disabled || start == end)\n\t\treturn;\n\tftrace_process_locs(mod, start, end);\n}\n\nvoid ftrace_module_init(struct module *mod)\n{\n\tftrace_init_module(mod, mod->ftrace_callsites,\n\t\t\t   mod->ftrace_callsites +\n\t\t\t   mod->num_ftrace_callsites);\n}\n\nstatic int ftrace_module_notify_exit(struct notifier_block *self,\n\t\t\t\t     unsigned long val, void *data)\n{\n\tstruct module *mod = data;\n\n\tif (val == MODULE_STATE_GOING)\n\t\tftrace_release_mod(mod);\n\n\treturn 0;\n}\n#else\nstatic int ftrace_module_notify_exit(struct notifier_block *self,\n\t\t\t\t     unsigned long val, void *data)\n{\n\treturn 0;\n}\n#endif \n\nstruct notifier_block ftrace_module_exit_nb = {\n\t.notifier_call = ftrace_module_notify_exit,\n\t.priority = INT_MIN,\t\n};\n\nvoid __init ftrace_init(void)\n{\n\textern unsigned long __start_mcount_loc[];\n\textern unsigned long __stop_mcount_loc[];\n\tunsigned long count, flags;\n\tint ret;\n\n\tlocal_irq_save(flags);\n\tret = ftrace_dyn_arch_init();\n\tlocal_irq_restore(flags);\n\tif (ret)\n\t\tgoto failed;\n\n\tcount = __stop_mcount_loc - __start_mcount_loc;\n\tif (!count) {\n\t\tpr_info(\"", "1056": "\", 0444, d_tracer,\n\t\t\t  NULL, &tracing_enum_map_fops);\n}\n\n#else \nstatic inline void trace_create_enum_file(struct dentry *d_tracer) { }\nstatic inline void trace_insert_enum_map_file(struct module *mod,\n\t\t\t      struct trace_enum_map **start, int len) { }\n#endif \n\nstatic void trace_insert_enum_map(struct module *mod,\n\t\t\t\t  struct trace_enum_map **start, int len)\n{\n\tstruct trace_enum_map **map;\n\n\tif (len <= 0)\n\t\treturn;\n\n\tmap = start;\n\n\ttrace_event_enum_update(map, len);\n\n\ttrace_insert_enum_map_file(mod, start, len);\n}\n\nstatic ssize_t\ntracing_set_trace_read(struct file *filp, char __user *ubuf,\n\t\t       size_t cnt, loff_t *ppos)\n{\n\tstruct trace_array *tr = filp->private_data;\n\tchar buf[MAX_TRACER_SIZE+2];\n\tint r;\n\n\tmutex_lock(&trace_types_lock);\n\tr = sprintf(buf, \"", "1057": "\", 0444, d_tracer,\n\t\t\t  tr, &tracing_pipe_fops);\n\n\ttrace_create_file(\"", "1058": "\", 0444, d_tracer,\n\t\t\t  tr, &tracing_total_entries_fops);\n\n\ttrace_create_file(\"", "1059": "\", 0444, d_tracer,\n\t\t\t&ftrace_update_tot_cnt, &tracing_dyn_info_fops);\n#endif\n\n\tcreate_trace_instances(d_tracer);\n\n\tcreate_trace_options_dir(&global_trace);\n\n\t\n\tif (global_trace.current_trace != &nop_trace)\n\t\tupdate_tracer_options(&global_trace, global_trace.current_trace);\n\n\treturn 0;\n}\n\nstatic int trace_panic_handler(struct notifier_block *this,\n\t\t\t       unsigned long event, void *unused)\n{\n\tif (ftrace_dump_on_oops)\n\t\tftrace_dump(ftrace_dump_on_oops);\n\treturn NOTIFY_OK;\n}\n\nstatic struct notifier_block trace_panic_notifier = {\n\t.notifier_call  = trace_panic_handler,\n\t.next           = NULL,\n\t.priority       = 150   \n};\n\nstatic int trace_die_handler(struct notifier_block *self,\n\t\t\t     unsigned long val,\n\t\t\t     void *data)\n{\n\tswitch (val) {\n\tcase DIE_OOPS:\n\t\tif (ftrace_dump_on_oops)\n\t\t\tftrace_dump(ftrace_dump_on_oops);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn NOTIFY_OK;\n}\n\nstatic struct notifier_block trace_die_notifier = {\n\t.notifier_call = trace_die_handler,\n\t.priority = 200\n};\n\n\n#define TRACE_MAX_PRINT\t\t1000\n\n\n#define KERN_TRACE\t\tKERN_EMERG\n\nvoid\ntrace_printk_seq(struct trace_seq *s)\n{\n\t\n\tif (s->seq.len >= TRACE_MAX_PRINT)\n\t\ts->seq.len = TRACE_MAX_PRINT;\n\n\t\n\tif (WARN_ON_ONCE(s->seq.len >= s->seq.size))\n\t\ts->seq.len = s->seq.size - 1;\n\n\t\n\ts->buffer[s->seq.len] = 0;\n\n\tprintk(KERN_TRACE \"", "1060": "\", 0444, d_tracer,\n\t\t\tNULL, &tracing_readme_fops);\n\n\ttrace_create_file(\"", "1061": "\", 0444, d_tracer,\n\t\t\tNULL, &tracing_saved_cmdlines_fops);\n\n\ttrace_create_file(\"", "1062": "\", 0444, d_tracer,\n\t\t\ttr, &show_traces_fops);\n\n\ttrace_create_file(\"", "1063": "\", 0444, rcudir,\n\t\t\t\t     NULL, &show_tiny_stats_fops);\n\tif (!retval)\n\t\tgoto free_out;\n\treturn 0;\nfree_out:\n\tdebugfs_remove_recursive(rcudir);\n\treturn 1;\n}\n\nstatic void __exit rcutiny_trace_cleanup(void)\n{\n\tdebugfs_remove_recursive(rcudir);\n}\n\nmodule_init(rcutiny_trace_init);\nmodule_exit(rcutiny_trace_cleanup);\n\nMODULE_AUTHOR(\"", "1064": "\", 0644, NULL, &tstats_fops);\n\tif (!pe)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n__initcall(init_tstats_procfs);\n\n\n#include <linux/kthread.h>\n#include <linux/module.h>\n#include <linux/debugfs.h>\n#include <linux/seq_file.h>\n\n\nstruct rcu_ctrlblk {\n\tstruct rcu_head *rcucblist;\t\n\tstruct rcu_head **donetail;\t\n\tstruct rcu_head **curtail;\t\n\tRCU_TRACE(long qlen);\t\t\n\tRCU_TRACE(unsigned long gp_start); \n\tRCU_TRACE(unsigned long ticks_this_gp); \n\tRCU_TRACE(unsigned long jiffies_stall); \n\tRCU_TRACE(const char *name);\t\n};\n\n\nstatic struct rcu_ctrlblk rcu_sched_ctrlblk = {\n\t.donetail\t= &rcu_sched_ctrlblk.rcucblist,\n\t.curtail\t= &rcu_sched_ctrlblk.rcucblist,\n\tRCU_TRACE(.name = \"", "1065": "\", 0644, d_cpu,\n\t\t\t\ttr, cpu, &snapshot_fops);\n\n\ttrace_create_cpu_file(\"", "1066": "\", 0644, d_cpu,\n\t\t\t\ttr, cpu, &tracing_fops);\n\n\ttrace_create_cpu_file(\"", "1067": "\", 0644, d_tracer,\n\t\t\t  NULL, &tracing_saved_cmdlines_size_fops);\n\n\ttrace_enum_init();\n\n\ttrace_create_enum_file(d_tracer);\n\n#ifdef CONFIG_MODULES\n\tregister_module_notifier(&trace_module_nb);\n#endif\n\n#ifdef CONFIG_DYNAMIC_FTRACE\n\ttrace_create_file(\"", "1068": "\", 0644, d_tracer,\n\t\t\t  tr, &rb_simple_fops);\n\n#ifdef CONFIG_TRACER_MAX_TRACE\n\ttrace_create_file(\"", "1069": "\", 0644, d_tracer,\n\t\t\t  tr, &snapshot_fops);\n#endif\n\n\tfor_each_tracing_cpu(cpu)\n\t\ttracing_init_tracefs_percpu(tr, cpu);\n\n}\n\nstatic struct vfsmount *trace_automount(void *ingore)\n{\n\tstruct vfsmount *mnt;\n\tstruct file_system_type *type;\n\n\t\n\ttype = get_fs_type(\"", "1070": "\", 0644, d_tracer,\n\t\t\t  tr, &tracing_cpumask_fops);\n\n\ttrace_create_file(\"", "1071": "\", 0644, d_tracer,\n\t\t\t  tr, &tracing_entries_fops);\n\n\ttrace_create_file(\"", "1072": "\", 0644, d_tracer,\n\t\t\t  tr, &tracing_fops);\n\n\ttrace_create_file(\"", "1073": "\", 0644, d_tracer,\n\t\t\t  tr, &tracing_iter_fops);\n\n\ttrace_create_file(\"", "1074": "\", 0644, d_tracer,\n\t\t\t&global_trace, &tracing_thresh_fops);\n\n\ttrace_create_file(\"", "1075": "\", 0644, d_tracer,\n\t\t\t&tr->max_latency, &tracing_max_lat_fops);\n#endif\n\n\tif (ftrace_create_function_files(tr, d_tracer))\n\t\tWARN(1, \"", "1076": "\", 0644, d_tracer,\n\t\t\ttr, &set_tracer_fops);\n\n\ttrace_create_file(\"", "1077": "\", 0644, d_tracer, tr,\n\t\t\t  &trace_clock_fops);\n\n\ttrace_create_file(\"", "1078": "\", 0644, parent,\n\t\t\t  ops, &ftrace_filter_fops);\n\n\ttrace_create_file(\"", "1079": "\", 0644, parent,\n\t\t\t  ops, &ftrace_notrace_fops);\n}\n\n\nvoid ftrace_destroy_filter_files(struct ftrace_ops *ops)\n{\n\tmutex_lock(&ftrace_lock);\n\tif (ops->flags & FTRACE_OPS_FL_ENABLED)\n\t\tftrace_shutdown(ops, 0);\n\tops->flags |= FTRACE_OPS_FL_DELETED;\n\tmutex_unlock(&ftrace_lock);\n}\n\nstatic __init int ftrace_init_dyn_tracefs(struct dentry *d_tracer)\n{\n\n\ttrace_create_file(\"", "1080": "\", 1);\n\tpm_states[PM_SUSPEND_FREEZE] = pm_labels[relative_states ? 0 : 2];\n\treturn 1;\n}\n\n__setup(\"", "1081": "\", 2) == 0) {\n\t\tneg = 1;\n\t\tcmp += 2;\n\t}\n\n\tmutex_lock(&trace_types_lock);\n\n\tfor (i = 0; trace_options[i]; i++) {\n\t\tif (strcmp(cmp, trace_options[i]) == 0) {\n\t\t\tret = set_tracer_flag(tr, 1 << i, !neg);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t\n\tif (!trace_options[i])\n\t\tret = set_tracer_option(tr, cmp, neg);\n\n\tmutex_unlock(&trace_types_lock);\n\n\treturn ret;\n}\n\nstatic ssize_t\ntracing_trace_options_write(struct file *filp, const char __user *ubuf,\n\t\t\tsize_t cnt, loff_t *ppos)\n{\n\tstruct seq_file *m = filp->private_data;\n\tstruct trace_array *tr = m->private;\n\tchar buf[64];\n\tint ret;\n\n\tif (cnt >= sizeof(buf))\n\t\treturn -EINVAL;\n\n\tif (copy_from_user(&buf, ubuf, cnt))\n\t\treturn -EFAULT;\n\n\tbuf[cnt] = 0;\n\n\tret = trace_set_options(tr, buf);\n\tif (ret < 0)\n\t\treturn ret;\n\n\t*ppos += cnt;\n\n\treturn cnt;\n}\n\nstatic int tracing_trace_options_open(struct inode *inode, struct file *file)\n{\n\tstruct trace_array *tr = inode->i_private;\n\tint ret;\n\n\tif (tracing_disabled)\n\t\treturn -ENODEV;\n\n\tif (trace_array_get(tr) < 0)\n\t\treturn -ENODEV;\n\n\tret = single_open(file, tracing_trace_options_show, inode->i_private);\n\tif (ret < 0)\n\t\ttrace_array_put(tr);\n\n\treturn ret;\n}\n\nstatic const struct file_operations tracing_iter_fops = {\n\t.open\t\t= tracing_trace_options_open,\n\t.read\t\t= seq_read,\n\t.llseek\t\t= seq_lseek,\n\t.release\t= tracing_single_release_tr,\n\t.write\t\t= tracing_trace_options_write,\n};\n\nstatic const char readme_msg[] =\n\t\"", "1082": "\", 4)) {\n\t\t*brl_options = \"", "1083": "\", 4)) {\n\t\t*brl_options = *str + 4;\n\t\t*str = strchr(*brl_options, ',');\n\t\tif (!*str)\n\t\t\tpr_err(\"", "1084": "\", HRTIMER_MAX_CLOCK_BASES);\n\tSEQ_printf(m, \"", "1085": "\", NULL };\nconst char *pm_states[PM_SUSPEND_MAX];\n\nstatic const struct platform_suspend_ops *suspend_ops;\nstatic const struct platform_freeze_ops *freeze_ops;\nstatic DECLARE_WAIT_QUEUE_HEAD(suspend_freeze_wait_head);\n\nenum freeze_state __read_mostly suspend_freeze_state;\nstatic DEFINE_SPINLOCK(suspend_freeze_lock);\n\nvoid freeze_set_ops(const struct platform_freeze_ops *ops)\n{\n\tlock_system_sleep();\n\tfreeze_ops = ops;\n\tunlock_system_sleep();\n}\n\nstatic void freeze_begin(void)\n{\n\tsuspend_freeze_state = FREEZE_STATE_NONE;\n}\n\nstatic void freeze_enter(void)\n{\n\tspin_lock_irq(&suspend_freeze_lock);\n\tif (pm_wakeup_pending())\n\t\tgoto out;\n\n\tsuspend_freeze_state = FREEZE_STATE_ENTER;\n\tspin_unlock_irq(&suspend_freeze_lock);\n\n\tget_online_cpus();\n\tcpuidle_resume();\n\n\t\n\twake_up_all_idle_cpus();\n\tpr_debug(\"", "1086": "\", NULL);\n\tif (!rcudir)\n\t\tgoto free_out;\n\tretval = debugfs_create_file(\"", "1087": "\", NULL);\n\tput_filesystem(type);\n\tif (IS_ERR(mnt))\n\t\treturn NULL;\n\tmntget(mnt);\n\n\treturn mnt;\n}\n\n\nstruct dentry *tracing_init_dentry(void)\n{\n\tstruct trace_array *tr = &global_trace;\n\n\t\n\tif (tr->dir)\n\t\treturn NULL;\n\n\tif (WARN_ON(!debugfs_initialized()))\n\t\treturn ERR_PTR(-ENODEV);\n\n\t\n\ttr->dir = debugfs_create_automount(\"", "1088": "\", NULL,\n\t\t\t\t\t   trace_automount, NULL);\n\tif (!tr->dir) {\n\t\tpr_warn_once(\"", "1089": "\", PERF_TYPE_BREAKPOINT);\n\n\treturn register_die_notifier(&hw_breakpoint_exceptions_nb);\n\n err_alloc:\n\tfor_each_possible_cpu(err_cpu) {\n\t\tfor (i = 0; i < TYPE_MAX; i++)\n\t\t\tkfree(get_bp_info(err_cpu, i)->tsk_pinned);\n\t\tif (err_cpu == cpu)\n\t\t\tbreak;\n\t}\n\n\treturn -ENOMEM;\n}\n\n\n#include <linux/module.h>\n#include <linux/interrupt.h>\n#include <linux/device.h>\n#include <linux/gfp.h>\n\n\nstruct irq_devres {\n\tunsigned int irq;\n\tvoid *dev_id;\n};\n\nstatic void devm_irq_release(struct device *dev, void *res)\n{\n\tstruct irq_devres *this = res;\n\n\tfree_irq(this->irq, this->dev_id);\n}\n\nstatic int devm_irq_match(struct device *dev, void *res, void *data)\n{\n\tstruct irq_devres *this = res, *match = data;\n\n\treturn this->irq == match->irq && this->dev_id == match->dev_id;\n}\n\n\nint devm_request_threaded_irq(struct device *dev, unsigned int irq,\n\t\t\t      irq_handler_t handler, irq_handler_t thread_fn,\n\t\t\t      unsigned long irqflags, const char *devname,\n\t\t\t      void *dev_id)\n{\n\tstruct irq_devres *dr;\n\tint rc;\n\n\tdr = devres_alloc(devm_irq_release, sizeof(struct irq_devres),\n\t\t\t  GFP_KERNEL);\n\tif (!dr)\n\t\treturn -ENOMEM;\n\n\trc = request_threaded_irq(irq, handler, thread_fn, irqflags, devname,\n\t\t\t\t  dev_id);\n\tif (rc) {\n\t\tdevres_free(dr);\n\t\treturn rc;\n\t}\n\n\tdr->irq = irq;\n\tdr->dev_id = dev_id;\n\tdevres_add(dev, dr);\n\n\treturn 0;\n}\nEXPORT_SYMBOL(devm_request_threaded_irq);\n\n\nint devm_request_any_context_irq(struct device *dev, unsigned int irq,\n\t\t\t      irq_handler_t handler, unsigned long irqflags,\n\t\t\t      const char *devname, void *dev_id)\n{\n\tstruct irq_devres *dr;\n\tint rc;\n\n\tdr = devres_alloc(devm_irq_release, sizeof(struct irq_devres),\n\t\t\t  GFP_KERNEL);\n\tif (!dr)\n\t\treturn -ENOMEM;\n\n\trc = request_any_context_irq(irq, handler, irqflags, devname, dev_id);\n\tif (rc) {\n\t\tdevres_free(dr);\n\t\treturn rc;\n\t}\n\n\tdr->irq = irq;\n\tdr->dev_id = dev_id;\n\tdevres_add(dev, dr);\n\n\treturn 0;\n}\nEXPORT_SYMBOL(devm_request_any_context_irq);\n\n\nvoid devm_free_irq(struct device *dev, unsigned int irq, void *dev_id)\n{\n\tstruct irq_devres match_data = { irq, dev_id };\n\n\tWARN_ON(devres_destroy(dev, devm_irq_release, devm_irq_match,\n\t\t\t       &match_data));\n\tfree_irq(irq, dev_id);\n}\nEXPORT_SYMBOL(devm_free_irq);\n\n#include \"", "1090": "\", PERF_TYPE_SOFTWARE);\n\tperf_pmu_register(&perf_cpu_clock, NULL, -1);\n\tperf_pmu_register(&perf_task_clock, NULL, -1);\n\tperf_tp_register();\n\tperf_cpu_notifier(perf_cpu_notify);\n\tregister_reboot_notifier(&perf_reboot_notifier);\n\n\tret = init_hw_breakpoint();\n\tWARN(ret, \"", "1091": "\", PERF_TYPE_TRACEPOINT);\n}\n\nstatic int perf_event_set_filter(struct perf_event *event, void __user *arg)\n{\n\tchar *filter_str;\n\tint ret;\n\n\tif (event->attr.type != PERF_TYPE_TRACEPOINT)\n\t\treturn -EINVAL;\n\n\tfilter_str = strndup_user(arg, PAGE_SIZE);\n\tif (IS_ERR(filter_str))\n\t\treturn PTR_ERR(filter_str);\n\n\tret = ftrace_profile_set_filter(event, event->attr.config, filter_str);\n\n\tkfree(filter_str);\n\treturn ret;\n}\n\nstatic void perf_event_free_filter(struct perf_event *event)\n{\n\tftrace_profile_free_filter(event);\n}\n\nstatic int perf_event_set_bpf_prog(struct perf_event *event, u32 prog_fd)\n{\n\tstruct bpf_prog *prog;\n\n\tif (event->attr.type != PERF_TYPE_TRACEPOINT)\n\t\treturn -EINVAL;\n\n\tif (event->tp_event->prog)\n\t\treturn -EEXIST;\n\n\tif (!(event->tp_event->flags & TRACE_EVENT_FL_KPROBE))\n\t\t\n\t\treturn -EINVAL;\n\n\tprog = bpf_prog_get(prog_fd);\n\tif (IS_ERR(prog))\n\t\treturn PTR_ERR(prog);\n\n\tif (prog->type != BPF_PROG_TYPE_KPROBE) {\n\t\t\n\t\tbpf_prog_put(prog);\n\t\treturn -EINVAL;\n\t}\n\n\tevent->tp_event->prog = prog;\n\n\treturn 0;\n}\n\nstatic void perf_event_free_bpf_prog(struct perf_event *event)\n{\n\tstruct bpf_prog *prog;\n\n\tif (!event->tp_event)\n\t\treturn;\n\n\tprog = event->tp_event->prog;\n\tif (prog) {\n\t\tevent->tp_event->prog = NULL;\n\t\tbpf_prog_put(prog);\n\t}\n}\n\n#else\n\nstatic inline void perf_tp_register(void)\n{\n}\n\nstatic int perf_event_set_filter(struct perf_event *event, void __user *arg)\n{\n\treturn -ENOENT;\n}\n\nstatic void perf_event_free_filter(struct perf_event *event)\n{\n}\n\nstatic int perf_event_set_bpf_prog(struct perf_event *event, u32 prog_fd)\n{\n\treturn -ENOENT;\n}\n\nstatic void perf_event_free_bpf_prog(struct perf_event *event)\n{\n}\n#endif \n\n#ifdef CONFIG_HAVE_HW_BREAKPOINT\nvoid perf_bp_event(struct perf_event *bp, void *data)\n{\n\tstruct perf_sample_data sample;\n\tstruct pt_regs *regs = data;\n\n\tperf_sample_data_init(&sample, bp->attr.bp_addr, 0);\n\n\tif (!bp->hw.state && !perf_exclude_event(bp, regs))\n\t\tperf_swevent_event(bp, 1, &sample, regs);\n}\n#endif\n\n\n\nstatic enum hrtimer_restart perf_swevent_hrtimer(struct hrtimer *hrtimer)\n{\n\tenum hrtimer_restart ret = HRTIMER_RESTART;\n\tstruct perf_sample_data data;\n\tstruct pt_regs *regs;\n\tstruct perf_event *event;\n\tu64 period;\n\n\tevent = container_of(hrtimer, struct perf_event, hw.hrtimer);\n\n\tif (event->state != PERF_EVENT_STATE_ACTIVE)\n\t\treturn HRTIMER_NORESTART;\n\n\tevent->pmu->read(event);\n\n\tperf_sample_data_init(&data, 0, event->hw.last_period);\n\tregs = get_irq_regs();\n\n\tif (regs && !perf_exclude_event(event, regs)) {\n\t\tif (!(event->attr.exclude_idle && is_idle_task(current)))\n\t\t\tif (__perf_event_overflow(event, 1, &data, regs))\n\t\t\t\tret = HRTIMER_NORESTART;\n\t}\n\n\tperiod = max_t(u64, 10000, event->hw.sample_period);\n\thrtimer_forward_now(hrtimer, ns_to_ktime(period));\n\n\treturn ret;\n}\n\nstatic void perf_swevent_start_hrtimer(struct perf_event *event)\n{\n\tstruct hw_perf_event *hwc = &event->hw;\n\ts64 period;\n\n\tif (!is_sampling_event(event))\n\t\treturn;\n\n\tperiod = local64_read(&hwc->period_left);\n\tif (period) {\n\t\tif (period < 0)\n\t\t\tperiod = 10000;\n\n\t\tlocal64_set(&hwc->period_left, 0);\n\t} else {\n\t\tperiod = max_t(u64, 10000, hwc->sample_period);\n\t}\n\t__hrtimer_start_range_ns(&hwc->hrtimer,\n\t\t\t\tns_to_ktime(period), 0,\n\t\t\t\tHRTIMER_MODE_REL_PINNED, 0);\n}\n\nstatic void perf_swevent_cancel_hrtimer(struct perf_event *event)\n{\n\tstruct hw_perf_event *hwc = &event->hw;\n\n\tif (is_sampling_event(event)) {\n\t\tktime_t remaining = hrtimer_get_remaining(&hwc->hrtimer);\n\t\tlocal64_set(&hwc->period_left, ktime_to_ns(remaining));\n\n\t\thrtimer_cancel(&hwc->hrtimer);\n\t}\n}\n\nstatic void perf_swevent_init_hrtimer(struct perf_event *event)\n{\n\tstruct hw_perf_event *hwc = &event->hw;\n\n\tif (!is_sampling_event(event))\n\t\treturn;\n\n\thrtimer_init(&hwc->hrtimer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);\n\thwc->hrtimer.function = perf_swevent_hrtimer;\n\n\t\n\tif (event->attr.freq) {\n\t\tlong freq = event->attr.sample_freq;\n\n\t\tevent->attr.sample_period = NSEC_PER_SEC / freq;\n\t\thwc->sample_period = event->attr.sample_period;\n\t\tlocal64_set(&hwc->period_left, hwc->sample_period);\n\t\thwc->last_period = hwc->sample_period;\n\t\tevent->attr.freq = 0;\n\t}\n}\n\n\n\nstatic void cpu_clock_event_update(struct perf_event *event)\n{\n\ts64 prev;\n\tu64 now;\n\n\tnow = local_clock();\n\tprev = local64_xchg(&event->hw.prev_count, now);\n\tlocal64_add(now - prev, &event->count);\n}\n\nstatic void cpu_clock_event_start(struct perf_event *event, int flags)\n{\n\tlocal64_set(&event->hw.prev_count, local_clock());\n\tperf_swevent_start_hrtimer(event);\n}\n\nstatic void cpu_clock_event_stop(struct perf_event *event, int flags)\n{\n\tperf_swevent_cancel_hrtimer(event);\n\tcpu_clock_event_update(event);\n}\n\nstatic int cpu_clock_event_add(struct perf_event *event, int flags)\n{\n\tif (flags & PERF_EF_START)\n\t\tcpu_clock_event_start(event, flags);\n\tperf_event_update_userpage(event);\n\n\treturn 0;\n}\n\nstatic void cpu_clock_event_del(struct perf_event *event, int flags)\n{\n\tcpu_clock_event_stop(event, flags);\n}\n\nstatic void cpu_clock_event_read(struct perf_event *event)\n{\n\tcpu_clock_event_update(event);\n}\n\nstatic int cpu_clock_event_init(struct perf_event *event)\n{\n\tif (event->attr.type != PERF_TYPE_SOFTWARE)\n\t\treturn -ENOENT;\n\n\tif (event->attr.config != PERF_COUNT_SW_CPU_CLOCK)\n\t\treturn -ENOENT;\n\n\t\n\tif (has_branch_stack(event))\n\t\treturn -EOPNOTSUPP;\n\n\tperf_swevent_init_hrtimer(event);\n\n\treturn 0;\n}\n\nstatic struct pmu perf_cpu_clock = {\n\t.task_ctx_nr\t= perf_sw_context,\n\n\t.capabilities\t= PERF_PMU_CAP_NO_NMI,\n\n\t.event_init\t= cpu_clock_event_init,\n\t.add\t\t= cpu_clock_event_add,\n\t.del\t\t= cpu_clock_event_del,\n\t.start\t\t= cpu_clock_event_start,\n\t.stop\t\t= cpu_clock_event_stop,\n\t.read\t\t= cpu_clock_event_read,\n};\n\n\n\nstatic void task_clock_event_update(struct perf_event *event, u64 now)\n{\n\tu64 prev;\n\ts64 delta;\n\n\tprev = local64_xchg(&event->hw.prev_count, now);\n\tdelta = now - prev;\n\tlocal64_add(delta, &event->count);\n}\n\nstatic void task_clock_event_start(struct perf_event *event, int flags)\n{\n\tlocal64_set(&event->hw.prev_count, event->ctx->time);\n\tperf_swevent_start_hrtimer(event);\n}\n\nstatic void task_clock_event_stop(struct perf_event *event, int flags)\n{\n\tperf_swevent_cancel_hrtimer(event);\n\ttask_clock_event_update(event, event->ctx->time);\n}\n\nstatic int task_clock_event_add(struct perf_event *event, int flags)\n{\n\tif (flags & PERF_EF_START)\n\t\ttask_clock_event_start(event, flags);\n\tperf_event_update_userpage(event);\n\n\treturn 0;\n}\n\nstatic void task_clock_event_del(struct perf_event *event, int flags)\n{\n\ttask_clock_event_stop(event, PERF_EF_UPDATE);\n}\n\nstatic void task_clock_event_read(struct perf_event *event)\n{\n\tu64 now = perf_clock();\n\tu64 delta = now - event->ctx->timestamp;\n\tu64 time = event->ctx->time + delta;\n\n\ttask_clock_event_update(event, time);\n}\n\nstatic int task_clock_event_init(struct perf_event *event)\n{\n\tif (event->attr.type != PERF_TYPE_SOFTWARE)\n\t\treturn -ENOENT;\n\n\tif (event->attr.config != PERF_COUNT_SW_TASK_CLOCK)\n\t\treturn -ENOENT;\n\n\t\n\tif (has_branch_stack(event))\n\t\treturn -EOPNOTSUPP;\n\n\tperf_swevent_init_hrtimer(event);\n\n\treturn 0;\n}\n\nstatic struct pmu perf_task_clock = {\n\t.task_ctx_nr\t= perf_sw_context,\n\n\t.capabilities\t= PERF_PMU_CAP_NO_NMI,\n\n\t.event_init\t= task_clock_event_init,\n\t.add\t\t= task_clock_event_add,\n\t.del\t\t= task_clock_event_del,\n\t.start\t\t= task_clock_event_start,\n\t.stop\t\t= task_clock_event_stop,\n\t.read\t\t= task_clock_event_read,\n};\n\nstatic void perf_pmu_nop_void(struct pmu *pmu)\n{\n}\n\nstatic int perf_pmu_nop_int(struct pmu *pmu)\n{\n\treturn 0;\n}\n\nstatic void perf_pmu_start_txn(struct pmu *pmu)\n{\n\tperf_pmu_disable(pmu);\n}\n\nstatic int perf_pmu_commit_txn(struct pmu *pmu)\n{\n\tperf_pmu_enable(pmu);\n\treturn 0;\n}\n\nstatic void perf_pmu_cancel_txn(struct pmu *pmu)\n{\n\tperf_pmu_enable(pmu);\n}\n\nstatic int perf_event_idx_default(struct perf_event *event)\n{\n\treturn 0;\n}\n\n\nstatic struct perf_cpu_context __percpu *find_pmu_context(int ctxn)\n{\n\tstruct pmu *pmu;\n\n\tif (ctxn < 0)\n\t\treturn NULL;\n\n\tlist_for_each_entry(pmu, &pmus, entry) {\n\t\tif (pmu->task_ctx_nr == ctxn)\n\t\t\treturn pmu->pmu_cpu_context;\n\t}\n\n\treturn NULL;\n}\n\nstatic void update_pmu_context(struct pmu *pmu, struct pmu *old_pmu)\n{\n\tint cpu;\n\n\tfor_each_possible_cpu(cpu) {\n\t\tstruct perf_cpu_context *cpuctx;\n\n\t\tcpuctx = per_cpu_ptr(pmu->pmu_cpu_context, cpu);\n\n\t\tif (cpuctx->unique_pmu == old_pmu)\n\t\t\tcpuctx->unique_pmu = pmu;\n\t}\n}\n\nstatic void free_pmu_context(struct pmu *pmu)\n{\n\tstruct pmu *i;\n\n\tmutex_lock(&pmus_lock);\n\t\n\tlist_for_each_entry(i, &pmus, entry) {\n\t\tif (i->pmu_cpu_context == pmu->pmu_cpu_context) {\n\t\t\tupdate_pmu_context(i, pmu);\n\t\t\tgoto out;\n\t\t}\n\t}\n\n\tfree_percpu(pmu->pmu_cpu_context);\nout:\n\tmutex_unlock(&pmus_lock);\n}\nstatic struct idr pmu_idr;\n\nstatic ssize_t\ntype_show(struct device *dev, struct device_attribute *attr, char *page)\n{\n\tstruct pmu *pmu = dev_get_drvdata(dev);\n\n\treturn snprintf(page, PAGE_SIZE-1, \"", "1092": "\", REC->%s\"", "1093": "\", S_IRUGO, NULL,\n\t\t\t\t NULL, &virq_debug_fops) == NULL)\n\t\treturn -ENOMEM;\n\n\treturn 0;\n}\n__initcall(irq_debugfs_init);\n#endif \n\n\nint irq_domain_xlate_onecell(struct irq_domain *d, struct device_node *ctrlr,\n\t\t\t     const u32 *intspec, unsigned int intsize,\n\t\t\t     unsigned long *out_hwirq, unsigned int *out_type)\n{\n\tif (WARN_ON(intsize < 1))\n\t\treturn -EINVAL;\n\t*out_hwirq = intspec[0];\n\t*out_type = IRQ_TYPE_NONE;\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(irq_domain_xlate_onecell);\n\n\nint irq_domain_xlate_twocell(struct irq_domain *d, struct device_node *ctrlr,\n\t\t\tconst u32 *intspec, unsigned int intsize,\n\t\t\tirq_hw_number_t *out_hwirq, unsigned int *out_type)\n{\n\tif (WARN_ON(intsize < 2))\n\t\treturn -EINVAL;\n\t*out_hwirq = intspec[0];\n\t*out_type = intspec[1] & IRQ_TYPE_SENSE_MASK;\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(irq_domain_xlate_twocell);\n\n\nint irq_domain_xlate_onetwocell(struct irq_domain *d,\n\t\t\t\tstruct device_node *ctrlr,\n\t\t\t\tconst u32 *intspec, unsigned int intsize,\n\t\t\t\tunsigned long *out_hwirq, unsigned int *out_type)\n{\n\tif (WARN_ON(intsize < 1))\n\t\treturn -EINVAL;\n\t*out_hwirq = intspec[0];\n\t*out_type = (intsize > 1) ? intspec[1] : IRQ_TYPE_NONE;\n\treturn 0;\n}\nEXPORT_SYMBOL_GPL(irq_domain_xlate_onetwocell);\n\nconst struct irq_domain_ops irq_domain_simple_ops = {\n\t.xlate = irq_domain_xlate_onetwocell,\n};\nEXPORT_SYMBOL_GPL(irq_domain_simple_ops);\n\nstatic int irq_domain_alloc_descs(int virq, unsigned int cnt,\n\t\t\t\t  irq_hw_number_t hwirq, int node)\n{\n\tunsigned int hint;\n\n\tif (virq >= 0) {\n\t\tvirq = irq_alloc_descs(virq, virq, cnt, node);\n\t} else {\n\t\thint = hwirq % nr_irqs;\n\t\tif (hint == 0)\n\t\t\thint++;\n\t\tvirq = irq_alloc_descs_from(hint, cnt, node);\n\t\tif (virq <= 0 && hint > 1)\n\t\t\tvirq = irq_alloc_descs_from(1, cnt, node);\n\t}\n\n\treturn virq;\n}\n\n#ifdef\tCONFIG_IRQ_DOMAIN_HIERARCHY\n\nstruct irq_domain *irq_domain_add_hierarchy(struct irq_domain *parent,\n\t\t\t\t\t    unsigned int flags,\n\t\t\t\t\t    unsigned int size,\n\t\t\t\t\t    struct device_node *node,\n\t\t\t\t\t    const struct irq_domain_ops *ops,\n\t\t\t\t\t    void *host_data)\n{\n\tstruct irq_domain *domain;\n\n\tif (size)\n\t\tdomain = irq_domain_add_linear(node, size, ops, host_data);\n\telse\n\t\tdomain = irq_domain_add_tree(node, ops, host_data);\n\tif (domain) {\n\t\tdomain->parent = parent;\n\t\tdomain->flags |= flags;\n\t}\n\n\treturn domain;\n}\n\nstatic void irq_domain_insert_irq(int virq)\n{\n\tstruct irq_data *data;\n\n\tfor (data = irq_get_irq_data(virq); data; data = data->parent_data) {\n\t\tstruct irq_domain *domain = data->domain;\n\t\tirq_hw_number_t hwirq = data->hwirq;\n\n\t\tif (hwirq < domain->revmap_size) {\n\t\t\tdomain->linear_revmap[hwirq] = virq;\n\t\t} else {\n\t\t\tmutex_lock(&revmap_trees_mutex);\n\t\t\tradix_tree_insert(&domain->revmap_tree, hwirq, data);\n\t\t\tmutex_unlock(&revmap_trees_mutex);\n\t\t}\n\n\t\t\n\t\tif (!domain->name && data->chip)\n\t\t\tdomain->name = data->chip->name;\n\t}\n\n\tirq_clear_status_flags(virq, IRQ_NOREQUEST);\n}\n\nstatic void irq_domain_remove_irq(int virq)\n{\n\tstruct irq_data *data;\n\n\tirq_set_status_flags(virq, IRQ_NOREQUEST);\n\tirq_set_chip_and_handler(virq, NULL, NULL);\n\tsynchronize_irq(virq);\n\tsmp_mb();\n\n\tfor (data = irq_get_irq_data(virq); data; data = data->parent_data) {\n\t\tstruct irq_domain *domain = data->domain;\n\t\tirq_hw_number_t hwirq = data->hwirq;\n\n\t\tif (hwirq < domain->revmap_size) {\n\t\t\tdomain->linear_revmap[hwirq] = 0;\n\t\t} else {\n\t\t\tmutex_lock(&revmap_trees_mutex);\n\t\t\tradix_tree_delete(&domain->revmap_tree, hwirq);\n\t\t\tmutex_unlock(&revmap_trees_mutex);\n\t\t}\n\t}\n}\n\nstatic struct irq_data *irq_domain_insert_irq_data(struct irq_domain *domain,\n\t\t\t\t\t\t   struct irq_data *child)\n{\n\tstruct irq_data *irq_data;\n\n\tirq_data = kzalloc_node(sizeof(*irq_data), GFP_KERNEL, child->node);\n\tif (irq_data) {\n\t\tchild->parent_data = irq_data;\n\t\tirq_data->irq = child->irq;\n\t\tirq_data->node = child->node;\n\t\tirq_data->domain = domain;\n\t}\n\n\treturn irq_data;\n}\n\nstatic void irq_domain_free_irq_data(unsigned int virq, unsigned int nr_irqs)\n{\n\tstruct irq_data *irq_data, *tmp;\n\tint i;\n\n\tfor (i = 0; i < nr_irqs; i++) {\n\t\tirq_data = irq_get_irq_data(virq + i);\n\t\ttmp = irq_data->parent_data;\n\t\tirq_data->parent_data = NULL;\n\t\tirq_data->domain = NULL;\n\n\t\twhile (tmp) {\n\t\t\tirq_data = tmp;\n\t\t\ttmp = tmp->parent_data;\n\t\t\tkfree(irq_data);\n\t\t}\n\t}\n}\n\nstatic int irq_domain_alloc_irq_data(struct irq_domain *domain,\n\t\t\t\t     unsigned int virq, unsigned int nr_irqs)\n{\n\tstruct irq_data *irq_data;\n\tstruct irq_domain *parent;\n\tint i;\n\n\t\n\tfor (i = 0; i < nr_irqs; i++) {\n\t\tirq_data = irq_get_irq_data(virq + i);\n\t\tirq_data->domain = domain;\n\n\t\tfor (parent = domain->parent; parent; parent = parent->parent) {\n\t\t\tirq_data = irq_domain_insert_irq_data(parent, irq_data);\n\t\t\tif (!irq_data) {\n\t\t\t\tirq_domain_free_irq_data(virq, i + 1);\n\t\t\t\treturn -ENOMEM;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n\nstruct irq_data *irq_domain_get_irq_data(struct irq_domain *domain,\n\t\t\t\t\t unsigned int virq)\n{\n\tstruct irq_data *irq_data;\n\n\tfor (irq_data = irq_get_irq_data(virq); irq_data;\n\t     irq_data = irq_data->parent_data)\n\t\tif (irq_data->domain == domain)\n\t\t\treturn irq_data;\n\n\treturn NULL;\n}\n\n\nint irq_domain_set_hwirq_and_chip(struct irq_domain *domain, unsigned int virq,\n\t\t\t\t  irq_hw_number_t hwirq, struct irq_chip *chip,\n\t\t\t\t  void *chip_data)\n{\n\tstruct irq_data *irq_data = irq_domain_get_irq_data(domain, virq);\n\n\tif (!irq_data)\n\t\treturn -ENOENT;\n\n\tirq_data->hwirq = hwirq;\n\tirq_data->chip = chip ? chip : &no_irq_chip;\n\tirq_data->chip_data = chip_data;\n\n\treturn 0;\n}\n\n\nvoid irq_domain_set_info(struct irq_domain *domain, unsigned int virq,\n\t\t\t irq_hw_number_t hwirq, struct irq_chip *chip,\n\t\t\t void *chip_data, irq_flow_handler_t handler,\n\t\t\t void *handler_data, const char *handler_name)\n{\n\tirq_domain_set_hwirq_and_chip(domain, virq, hwirq, chip, chip_data);\n\t__irq_set_handler(virq, handler, 0, handler_name);\n\tirq_set_handler_data(virq, handler_data);\n}\n\n\nvoid irq_domain_reset_irq_data(struct irq_data *irq_data)\n{\n\tirq_data->hwirq = 0;\n\tirq_data->chip = &no_irq_chip;\n\tirq_data->chip_data = NULL;\n}\n\n\nvoid irq_domain_free_irqs_common(struct irq_domain *domain, unsigned int virq,\n\t\t\t\t unsigned int nr_irqs)\n{\n\tstruct irq_data *irq_data;\n\tint i;\n\n\tfor (i = 0; i < nr_irqs; i++) {\n\t\tirq_data = irq_domain_get_irq_data(domain, virq + i);\n\t\tif (irq_data)\n\t\t\tirq_domain_reset_irq_data(irq_data);\n\t}\n\tirq_domain_free_irqs_parent(domain, virq, nr_irqs);\n}\n\n\nvoid irq_domain_free_irqs_top(struct irq_domain *domain, unsigned int virq,\n\t\t\t      unsigned int nr_irqs)\n{\n\tint i;\n\n\tfor (i = 0; i < nr_irqs; i++) {\n\t\tirq_set_handler_data(virq + i, NULL);\n\t\tirq_set_handler(virq + i, NULL);\n\t}\n\tirq_domain_free_irqs_common(domain, virq, nr_irqs);\n}\n\nstatic bool irq_domain_is_auto_recursive(struct irq_domain *domain)\n{\n\treturn domain->flags & IRQ_DOMAIN_FLAG_AUTO_RECURSIVE;\n}\n\nstatic void irq_domain_free_irqs_recursive(struct irq_domain *domain,\n\t\t\t\t\t   unsigned int irq_base,\n\t\t\t\t\t   unsigned int nr_irqs)\n{\n\tdomain->ops->free(domain, irq_base, nr_irqs);\n\tif (irq_domain_is_auto_recursive(domain)) {\n\t\tBUG_ON(!domain->parent);\n\t\tirq_domain_free_irqs_recursive(domain->parent, irq_base,\n\t\t\t\t\t       nr_irqs);\n\t}\n}\n\nstatic int irq_domain_alloc_irqs_recursive(struct irq_domain *domain,\n\t\t\t\t\t   unsigned int irq_base,\n\t\t\t\t\t   unsigned int nr_irqs, void *arg)\n{\n\tint ret = 0;\n\tstruct irq_domain *parent = domain->parent;\n\tbool recursive = irq_domain_is_auto_recursive(domain);\n\n\tBUG_ON(recursive && !parent);\n\tif (recursive)\n\t\tret = irq_domain_alloc_irqs_recursive(parent, irq_base,\n\t\t\t\t\t\t      nr_irqs, arg);\n\tif (ret >= 0)\n\t\tret = domain->ops->alloc(domain, irq_base, nr_irqs, arg);\n\tif (ret < 0 && recursive)\n\t\tirq_domain_free_irqs_recursive(parent, irq_base, nr_irqs);\n\n\treturn ret;\n}\n\n\nint __irq_domain_alloc_irqs(struct irq_domain *domain, int irq_base,\n\t\t\t    unsigned int nr_irqs, int node, void *arg,\n\t\t\t    bool realloc)\n{\n\tint i, ret, virq;\n\n\tif (domain == NULL) {\n\t\tdomain = irq_default_domain;\n\t\tif (WARN(!domain, \"", "1094": "\", T: %p, R: %p\\n\"", "1095": "\", __LOG_BUF_LEN);\n\n\tlog_buf_len_update(cpu_extra + __LOG_BUF_LEN);\n}\n#else \nstatic inline void log_buf_add_cpu(void) {}\n#endif \n\nvoid __init setup_log_buf(int early)\n{\n\tunsigned long flags;\n\tchar *new_log_buf;\n\tint free;\n\n\tif (log_buf != __log_buf)\n\t\treturn;\n\n\tif (!early && !new_log_buf_len)\n\t\tlog_buf_add_cpu();\n\n\tif (!new_log_buf_len)\n\t\treturn;\n\n\tif (early) {\n\t\tnew_log_buf =\n\t\t\tmemblock_virt_alloc(new_log_buf_len, LOG_ALIGN);\n\t} else {\n\t\tnew_log_buf = memblock_virt_alloc_nopanic(new_log_buf_len,\n\t\t\t\t\t\t\t  LOG_ALIGN);\n\t}\n\n\tif (unlikely(!new_log_buf)) {\n\t\tpr_err(\"", "1096": "\", __func__);\n\t\t\tbreak;\n\t\t}\n\n\t\tentry = get_lock_parent(entry);\n\t\tdepth--;\n\t} while (entry && (depth >= 0));\n\n\treturn;\n}\n\nstatic void\nprint_irq_lock_scenario(struct lock_list *safe_entry,\n\t\t\tstruct lock_list *unsafe_entry,\n\t\t\tstruct lock_class *prev_class,\n\t\t\tstruct lock_class *next_class)\n{\n\tstruct lock_class *safe_class = safe_entry->class;\n\tstruct lock_class *unsafe_class = unsafe_entry->class;\n\tstruct lock_class *middle_class = prev_class;\n\n\tif (middle_class == safe_class)\n\t\tmiddle_class = next_class;\n\n\t\n\tif (middle_class != unsafe_class) {\n\t\tprintk(\"", "1097": "\", __func__);\n\t\n\t\n\ttfm = crypto_alloc_shash(hash_algo_name[hash], 0, 0);\n\tif (IS_ERR(tfm))\n\t\treturn (PTR_ERR(tfm) == -ENOENT) ? ERR_PTR(-ENOPKG) : ERR_CAST(tfm);\n\n\tdesc_size = crypto_shash_descsize(tfm) + sizeof(*desc);\n\tdigest_size = crypto_shash_digestsize(tfm);\n\n\t\n\tret = -ENOMEM;\n\tpks = kzalloc(digest_size + sizeof(*pks) + desc_size, GFP_KERNEL);\n\tif (!pks)\n\t\tgoto error_no_pks;\n\n\tpks->pkey_hash_algo\t= hash;\n\tpks->digest\t\t= (u8 *)pks + sizeof(*pks) + desc_size;\n\tpks->digest_size\t= digest_size;\n\n\tdesc = (void *)pks + sizeof(*pks);\n\tdesc->tfm   = tfm;\n\tdesc->flags = CRYPTO_TFM_REQ_MAY_SLEEP;\n\n\tret = crypto_shash_init(desc);\n\tif (ret < 0)\n\t\tgoto error;\n\n\tret = crypto_shash_finup(desc, mod, modlen, pks->digest);\n\tif (ret < 0)\n\t\tgoto error;\n\n\tcrypto_free_shash(tfm);\n\tpr_devel(\"", "1098": "\", __get_str(%s)\"", "1099": "\", argv[1], argv[2]);\n\n\tep[varlen+vallen+1] = '\\0';\n\n\tfor (i = 0; i < __nenv; i++) {\n\t\tif (__env[i]\n\t\t && ((strncmp(__env[i], argv[1], varlen) == 0)\n\t\t   && ((__env[i][varlen] == '\\0')\n\t\t    || (__env[i][varlen] == '=')))) {\n\t\t\t__env[i] = ep;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t\n\tfor (i = 0; i < __nenv-1; i++) {\n\t\tif (__env[i] == (char *)0) {\n\t\t\t__env[i] = ep;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn KDB_ENVFULL;\n}\n\nstatic int kdb_check_regs(void)\n{\n\tif (!kdb_current_regs) {\n\t\tkdb_printf(\"", "1100": "\", at: \"", "1101": "\", atomic_read(&overflow_count));\n\tseq_printf(m, \"", "1102": "\", base);\n\tSEQ_printf(m, \"", "1103": "\", best->name);\n\t\tcurr_clocksource = best;\n\t}\n}\n\n\nstatic void clocksource_select(void)\n{\n\treturn __clocksource_select(false);\n}\n\nstatic void clocksource_select_fallback(void)\n{\n\treturn __clocksource_select(true);\n}\n\n#else \n\nstatic inline void clocksource_select(void) { }\nstatic inline void clocksource_select_fallback(void) { }\n\n#endif\n\n\nstatic int __init clocksource_done_booting(void)\n{\n\tmutex_lock(&clocksource_mutex);\n\tcurr_clocksource = clocksource_default_clock();\n\tfinished_booting = 1;\n\t\n\t__clocksource_watchdog_kthread();\n\tclocksource_select();\n\tmutex_unlock(&clocksource_mutex);\n\treturn 0;\n}\nfs_initcall(clocksource_done_booting);\n\n\nstatic void clocksource_enqueue(struct clocksource *cs)\n{\n\tstruct list_head *entry = &clocksource_list;\n\tstruct clocksource *tmp;\n\n\tlist_for_each_entry(tmp, &clocksource_list, list)\n\t\t\n\t\tif (tmp->rating >= cs->rating)\n\t\t\tentry = &tmp->list;\n\tlist_add(&cs->list, entry);\n}\n\n\nvoid __clocksource_update_freq_scale(struct clocksource *cs, u32 scale, u32 freq)\n{\n\tu64 sec;\n\n\t\n\tif (freq) {\n\t\t\n\t\tsec = cs->mask;\n\t\tdo_div(sec, freq);\n\t\tdo_div(sec, scale);\n\t\tif (!sec)\n\t\t\tsec = 1;\n\t\telse if (sec > 600 && cs->mask > UINT_MAX)\n\t\t\tsec = 600;\n\n\t\tclocks_calc_mult_shift(&cs->mult, &cs->shift, freq,\n\t\t\t\t       NSEC_PER_SEC / scale, sec * scale);\n\t}\n\t\n\tcs->maxadj = clocksource_max_adjustment(cs);\n\twhile (freq && ((cs->mult + cs->maxadj < cs->mult)\n\t\t|| (cs->mult - cs->maxadj > cs->mult))) {\n\t\tcs->mult >>= 1;\n\t\tcs->shift--;\n\t\tcs->maxadj = clocksource_max_adjustment(cs);\n\t}\n\n\t\n\tWARN_ONCE(cs->mult + cs->maxadj < cs->mult,\n\t\t\"", "1104": "\", boot_delay_setup);\n\nstatic void boot_delay_msec(int level)\n{\n\tunsigned long long k;\n\tunsigned long timeout;\n\n\tif ((boot_delay == 0 || system_state != SYSTEM_BOOTING)\n\t\t|| (level >= console_loglevel && !ignore_loglevel)) {\n\t\treturn;\n\t}\n\n\tk = (unsigned long long)loops_per_msec * boot_delay;\n\n\ttimeout = jiffies + msecs_to_jiffies(boot_delay);\n\twhile (k) {\n\t\tk--;\n\t\tcpu_relax();\n\t\t\n\t\tif (time_after(jiffies, timeout))\n\t\t\tbreak;\n\t\ttouch_nmi_watchdog();\n\t}\n}\n#else\nstatic inline void boot_delay_msec(int level)\n{\n}\n#endif\n\nstatic bool printk_time = IS_ENABLED(CONFIG_PRINTK_TIME);\nmodule_param_named(time, printk_time, bool, S_IRUGO | S_IWUSR);\n\nstatic size_t print_time(u64 ts, char *buf)\n{\n\tunsigned long rem_nsec;\n\n\tif (!printk_time)\n\t\treturn 0;\n\n\trem_nsec = do_div(ts, 1000000000);\n\n\tif (!buf)\n\t\treturn snprintf(NULL, 0, \"", "1105": "\", boot_override_clock);\n\n\n#include <linux/module.h>\n#include <linux/types.h>\n#include <linux/ctype.h>\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/kdev_t.h>\n#include <linux/console.h>\n#include <linux/string.h>\n#include <linux/sched.h>\n#include <linux/smp.h>\n#include <linux/nmi.h>\n#include <linux/delay.h>\n#include <linux/kgdb.h>\n#include <linux/kdb.h>\n#include <linux/kallsyms.h>\n#include \"", "1106": "\", boot_override_clocksource);\n\n\nstatic int __init boot_override_clock(char* str)\n{\n\tif (!strcmp(str, \"", "1107": "\", buffer);\n\t\t\t\t*cp = tmp;\n\t\t\t} else {\n\t\t\t\t*++lastchar = '\\0';\n\t\t\t\t*cp++ = key;\n\t\t\t\t\n\t\t\t\tif (!KDB_STATE(KGDB_TRANS)) {\n\t\t\t\t\tif (kgdb_transition_check(buffer))\n\t\t\t\t\t\treturn buffer;\n\t\t\t\t} else {\n\t\t\t\t\tkdb_printf(\"", "1108": "\", buffer);\n\t\t\t*cp = tmp;\n\t\t}\n\t\tbreak;\n\tcase 13: \n\t\t*lastchar++ = '\\n';\n\t\t*lastchar++ = '\\0';\n\t\tif (!KDB_STATE(KGDB_TRANS)) {\n\t\t\tKDB_STATE_SET(KGDB_TRANS);\n\t\t\tkdb_printf(\"", "1109": "\", buffer);\n\t\t\t*cp = tmp;\n\t\t}\n\t\tbreak;\n\tcase 1: \n\t\tif (cp > buffer) {\n\t\t\tkdb_printf(\"", "1110": "\", buffer);\n\t\t}\n\t\tkdb_printf(\"", "1111": "\", buffer);\n\t\t} else if (tab != 2 && count > 0) {\n\t\t\tlen_tmp = strlen(p_tmp);\n\t\t\tstrncpy(p_tmp+len_tmp, cp, lastchar-cp+1);\n\t\t\tlen_tmp = strlen(p_tmp);\n\t\t\tstrncpy(cp, p_tmp+len, len_tmp-len + 1);\n\t\t\tlen = len_tmp - len;\n\t\t\tkdb_printf(\"", "1112": "\", buffer);\n\t} else {\n\t\tint slen = strlen(buffer);\n\t\tif (slen > 3 && buffer[slen - 3] == '#') {\n\t\t\tkdb_gdb_state_pass(buffer);\n\t\t\tstrcpy(buffer, \"", "1113": "\", buffer);\npoll_again:\n\tkey = kdb_read_get_key(buffer, bufsize);\n\tif (key == -1)\n\t\treturn buffer;\n\tif (key != 9)\n\t\ttab = 0;\n\tswitch (key) {\n\tcase 8: \n\t\tif (cp > buffer) {\n\t\t\tif (cp < lastchar) {\n\t\t\t\tmemcpy(tmpbuffer, cp, lastchar - cp);\n\t\t\t\tmemcpy(cp-1, tmpbuffer, lastchar - cp);\n\t\t\t}\n\t\t\t*(--lastchar) = '\\0';\n\t\t\t--cp;\n\t\t\tkdb_printf(\"", "1114": "\", c);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tuser->buf[len++] = c;\n\t\t}\n\t\tuser->buf[len++] = '\\n';\n\t}\n\n\tuser->idx = log_next(user->idx);\n\tuser->seq++;\n\traw_spin_unlock_irq(&logbuf_lock);\n\n\tif (len > count) {\n\t\tret = -EINVAL;\n\t\tgoto out;\n\t}\n\n\tif (copy_to_user(buf, user->buf, len)) {\n\t\tret = -EFAULT;\n\t\tgoto out;\n\t}\n\tret = len;\nout:\n\tmutex_unlock(&user->lock);\n\treturn ret;\n}\n\nstatic loff_t devkmsg_llseek(struct file *file, loff_t offset, int whence)\n{\n\tstruct devkmsg_user *user = file->private_data;\n\tloff_t ret = 0;\n\n\tif (!user)\n\t\treturn -EBADF;\n\tif (offset)\n\t\treturn -ESPIPE;\n\n\traw_spin_lock_irq(&logbuf_lock);\n\tswitch (whence) {\n\tcase SEEK_SET:\n\t\t\n\t\tuser->idx = log_first_idx;\n\t\tuser->seq = log_first_seq;\n\t\tbreak;\n\tcase SEEK_DATA:\n\t\t\n\t\tuser->idx = clear_idx;\n\t\tuser->seq = clear_seq;\n\t\tbreak;\n\tcase SEEK_END:\n\t\t\n\t\tuser->idx = log_next_idx;\n\t\tuser->seq = log_next_seq;\n\t\tbreak;\n\tdefault:\n\t\tret = -EINVAL;\n\t}\n\traw_spin_unlock_irq(&logbuf_lock);\n\treturn ret;\n}\n\nstatic unsigned int devkmsg_poll(struct file *file, poll_table *wait)\n{\n\tstruct devkmsg_user *user = file->private_data;\n\tint ret = 0;\n\n\tif (!user)\n\t\treturn POLLERR|POLLNVAL;\n\n\tpoll_wait(file, &log_wait, wait);\n\n\traw_spin_lock_irq(&logbuf_lock);\n\tif (user->seq < log_next_seq) {\n\t\t\n\t\tif (user->seq < log_first_seq)\n\t\t\tret = POLLIN|POLLRDNORM|POLLERR|POLLPRI;\n\t\telse\n\t\t\tret = POLLIN|POLLRDNORM;\n\t}\n\traw_spin_unlock_irq(&logbuf_lock);\n\n\treturn ret;\n}\n\nstatic int devkmsg_open(struct inode *inode, struct file *file)\n{\n\tstruct devkmsg_user *user;\n\tint err;\n\n\t\n\tif ((file->f_flags & O_ACCMODE) == O_WRONLY)\n\t\treturn 0;\n\n\terr = check_syslog_permissions(SYSLOG_ACTION_READ_ALL,\n\t\t\t\t       SYSLOG_FROM_READER);\n\tif (err)\n\t\treturn err;\n\n\tuser = kmalloc(sizeof(struct devkmsg_user), GFP_KERNEL);\n\tif (!user)\n\t\treturn -ENOMEM;\n\n\tmutex_init(&user->lock);\n\n\traw_spin_lock_irq(&logbuf_lock);\n\tuser->idx = log_first_idx;\n\tuser->seq = log_first_seq;\n\traw_spin_unlock_irq(&logbuf_lock);\n\n\tfile->private_data = user;\n\treturn 0;\n}\n\nstatic int devkmsg_release(struct inode *inode, struct file *file)\n{\n\tstruct devkmsg_user *user = file->private_data;\n\n\tif (!user)\n\t\treturn 0;\n\n\tmutex_destroy(&user->lock);\n\tkfree(user);\n\treturn 0;\n}\n\nconst struct file_operations kmsg_fops = {\n\t.open = devkmsg_open,\n\t.read = devkmsg_read,\n\t.write_iter = devkmsg_write,\n\t.llseek = devkmsg_llseek,\n\t.poll = devkmsg_poll,\n\t.release = devkmsg_release,\n};\n\n#ifdef CONFIG_KEXEC\n\nvoid log_buf_kexec_setup(void)\n{\n\tVMCOREINFO_SYMBOL(log_buf);\n\tVMCOREINFO_SYMBOL(log_buf_len);\n\tVMCOREINFO_SYMBOL(log_first_idx);\n\tVMCOREINFO_SYMBOL(log_next_idx);\n\t\n\tVMCOREINFO_STRUCT_SIZE(printk_log);\n\tVMCOREINFO_OFFSET(printk_log, ts_nsec);\n\tVMCOREINFO_OFFSET(printk_log, len);\n\tVMCOREINFO_OFFSET(printk_log, text_len);\n\tVMCOREINFO_OFFSET(printk_log, dict_len);\n}\n#endif\n\n\nstatic unsigned long __initdata new_log_buf_len;\n\n\nstatic void __init log_buf_len_update(unsigned size)\n{\n\tif (size)\n\t\tsize = roundup_pow_of_two(size);\n\tif (size > log_buf_len)\n\t\tnew_log_buf_len = size;\n}\n\n\nstatic int __init log_buf_len_setup(char *str)\n{\n\tunsigned size = memparse(str, &str);\n\n\tlog_buf_len_update(size);\n\n\treturn 0;\n}\nearly_param(\"", "1115": "\", c);\n\t\telse\n\t\t\tuser->buf[len++] = c;\n\t}\n\tuser->buf[len++] = '\\n';\n\n\tif (msg->dict_len) {\n\t\tbool line = true;\n\n\t\tfor (i = 0; i < msg->dict_len; i++) {\n\t\t\tunsigned char c = log_dict(msg)[i];\n\n\t\t\tif (line) {\n\t\t\t\tuser->buf[len++] = ' ';\n\t\t\t\tline = false;\n\t\t\t}\n\n\t\t\tif (c == '\\0') {\n\t\t\t\tuser->buf[len++] = '\\n';\n\t\t\t\tline = true;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (c < ' ' || c >= 127 || c == '\\\\') {\n\t\t\t\tlen += sprintf(user->buf + len, \"", "1116": "\", chan->base_filename, cpu);\n\n\t\n\tdentry = chan->cb->create_buf_file(tmpname, chan->parent,\n\t\t\t\t\t   S_IRUSR, buf,\n\t\t\t\t\t   &chan->is_global);\n\n\tkfree(tmpname);\n\n\treturn dentry;\n}\n\n\nstatic struct rchan_buf *relay_open_buf(struct rchan *chan, unsigned int cpu)\n{\n \tstruct rchan_buf *buf = NULL;\n\tstruct dentry *dentry;\n\n \tif (chan->is_global)\n\t\treturn chan->buf[0];\n\n\tbuf = relay_create_buf(chan);\n\tif (!buf)\n\t\treturn NULL;\n\n\tif (chan->has_base_filename) {\n\t\tdentry = relay_create_buf_file(chan, buf, cpu);\n\t\tif (!dentry)\n\t\t\tgoto free_buf;\n\t\trelay_set_buf_dentry(buf, dentry);\n\t}\n\n \tbuf->cpu = cpu;\n \t__relay_reset(buf, 1);\n\n \tif(chan->is_global) {\n \t\tchan->buf[0] = buf;\n \t\tbuf->cpu = 0;\n  \t}\n\n\treturn buf;\n\nfree_buf:\n \trelay_destroy_buf(buf);\n\treturn NULL;\n}\n\n\nstatic void relay_close_buf(struct rchan_buf *buf)\n{\n\tbuf->finalized = 1;\n\tdel_timer_sync(&buf->timer);\n\tbuf->chan->cb->remove_buf_file(buf->dentry);\n\tkref_put(&buf->kref, relay_remove_buf);\n}\n\nstatic void setup_callbacks(struct rchan *chan,\n\t\t\t\t   struct rchan_callbacks *cb)\n{\n\tif (!cb) {\n\t\tchan->cb = &default_channel_callbacks;\n\t\treturn;\n\t}\n\n\tif (!cb->subbuf_start)\n\t\tcb->subbuf_start = subbuf_start_default_callback;\n\tif (!cb->buf_mapped)\n\t\tcb->buf_mapped = buf_mapped_default_callback;\n\tif (!cb->buf_unmapped)\n\t\tcb->buf_unmapped = buf_unmapped_default_callback;\n\tif (!cb->create_buf_file)\n\t\tcb->create_buf_file = create_buf_file_default_callback;\n\tif (!cb->remove_buf_file)\n\t\tcb->remove_buf_file = remove_buf_file_default_callback;\n\tchan->cb = cb;\n}\n\n\nstatic int relay_hotcpu_callback(struct notifier_block *nb,\n\t\t\t\tunsigned long action,\n\t\t\t\tvoid *hcpu)\n{\n\tunsigned int hotcpu = (unsigned long)hcpu;\n\tstruct rchan *chan;\n\n\tswitch(action) {\n\tcase CPU_UP_PREPARE:\n\tcase CPU_UP_PREPARE_FROZEN:\n\t\tmutex_lock(&relay_channels_mutex);\n\t\tlist_for_each_entry(chan, &relay_channels, list) {\n\t\t\tif (chan->buf[hotcpu])\n\t\t\t\tcontinue;\n\t\t\tchan->buf[hotcpu] = relay_open_buf(chan, hotcpu);\n\t\t\tif(!chan->buf[hotcpu]) {\n\t\t\t\tprintk(KERN_ERR\n\t\t\t\t\t\"", "1117": "\", class->ops);\n\tprintk(\"", "1118": "\", cnt);\n\n\tcnt = ring_buffer_bytes_cpu(trace_buf->buffer, cpu);\n\ttrace_seq_printf(s, \"", "1119": "\", cnt);\n\n\tcnt = ring_buffer_commit_overrun_cpu(trace_buf->buffer, cpu);\n\ttrace_seq_printf(s, \"", "1120": "\", cnt);\n\n\tcnt = ring_buffer_overrun_cpu(trace_buf->buffer, cpu);\n\ttrace_seq_printf(s, \"", "1121": "\", cnt);\n\n\tcnt = ring_buffer_read_events_cpu(trace_buf->buffer, cpu);\n\ttrace_seq_printf(s, \"", "1122": "\", cnt);\n\n\tcount = simple_read_from_buffer(ubuf, count, ppos,\n\t\t\t\t\ts->buffer, trace_seq_used(s));\n\n\tkfree(s);\n\n\treturn count;\n}\n\nstatic const struct file_operations tracing_stats_fops = {\n\t.open\t\t= tracing_open_generic_tr,\n\t.read\t\t= tracing_stats_read,\n\t.llseek\t\t= generic_file_llseek,\n\t.release\t= tracing_release_generic_tr,\n};\n\n#ifdef CONFIG_DYNAMIC_FTRACE\n\nint __weak ftrace_arch_read_dyn_info(char *buf, int size)\n{\n\treturn 0;\n}\n\nstatic ssize_t\ntracing_read_dyn_info(struct file *filp, char __user *ubuf,\n\t\t  size_t cnt, loff_t *ppos)\n{\n\tstatic char ftrace_dyn_info_buffer[1024];\n\tstatic DEFINE_MUTEX(dyn_info_mutex);\n\tunsigned long *p = filp->private_data;\n\tchar *buf = ftrace_dyn_info_buffer;\n\tint size = ARRAY_SIZE(ftrace_dyn_info_buffer);\n\tint r;\n\n\tmutex_lock(&dyn_info_mutex);\n\tr = sprintf(buf, \"", "1123": "\", cnt);\n\n\tif (trace_clocks[tr->clock_id].in_ns) {\n\t\t\n\t\tt = ns2usecs(ring_buffer_oldest_event_ts(trace_buf->buffer, cpu));\n\t\tusec_rem = do_div(t, USEC_PER_SEC);\n\t\ttrace_seq_printf(s, \"", "1124": "\", console_setup);\n\n\nint add_preferred_console(char *name, int idx, char *options)\n{\n\treturn __add_preferred_console(name, idx, options, NULL);\n}\n\nbool console_suspend_enabled = true;\nEXPORT_SYMBOL(console_suspend_enabled);\n\nstatic int __init console_suspend_disable(char *str)\n{\n\tconsole_suspend_enabled = false;\n\treturn 1;\n}\n__setup(\"", "1125": "\", console_suspend_disable);\nmodule_param_named(console_suspend, console_suspend_enabled,\n\t\tbool, S_IRUGO | S_IWUSR);\nMODULE_PARM_DESC(console_suspend, \"", "1126": "\", count);\n\t\t\tif (count > dtab_count) {\n\t\t\t\tcount = dtab_count;\n\t\t\t\tkdb_printf(\"", "1127": "\", count);\n\n\treturn 0;\n}\n\nstatic struct ftrace_probe_ops snapshot_probe_ops = {\n\t.func\t\t\t= ftrace_snapshot,\n\t.print\t\t\t= ftrace_snapshot_print,\n};\n\nstatic struct ftrace_probe_ops snapshot_count_probe_ops = {\n\t.func\t\t\t= ftrace_count_snapshot,\n\t.print\t\t\t= ftrace_snapshot_print,\n};\n\nstatic int\nftrace_trace_snapshot_callback(struct ftrace_hash *hash,\n\t\t\t       char *glob, char *cmd, char *param, int enable)\n{\n\tstruct ftrace_probe_ops *ops;\n\tvoid *count = (void *)-1;\n\tchar *number;\n\tint ret;\n\n\t\n\tif (!enable)\n\t\treturn -EINVAL;\n\n\tops = param ? &snapshot_count_probe_ops :  &snapshot_probe_ops;\n\n\tif (glob[0] == '!') {\n\t\tunregister_ftrace_function_probe_func(glob+1, ops);\n\t\treturn 0;\n\t}\n\n\tif (!param)\n\t\tgoto out_reg;\n\n\tnumber = strsep(&param, \"", "1128": "\", cp);\n\t\t\t\t++cp;\n\t\t\t\ttmp = *cp;\n\t\t\t\t*cp = '\\0';\n\t\t\t\tkdb_printf(kdb_prompt_str);\n\t\t\t\tkdb_printf(\"", "1129": "\", cp);\n\t\t\tcp += len;\n\t\t\tlastchar += len;\n\t\t}\n\t\tkdb_nextline = 1; \n\t\tbreak;\n\tdefault:\n\t\tif (key >= 32 && lastchar < bufend) {\n\t\t\tif (cp < lastchar) {\n\t\t\t\tmemcpy(tmpbuffer, cp, lastchar - cp);\n\t\t\t\tmemcpy(cp+1, tmpbuffer, lastchar - cp);\n\t\t\t\t*++lastchar = '\\0';\n\t\t\t\t*cp = key;\n\t\t\t\tkdb_printf(\"", "1130": "\", cp);\n\t\t\tcp = lastchar;\n\t\t}\n\t\tbreak;\n\tcase 2: \n\t\tif (cp > buffer) {\n\t\t\tkdb_printf(\"", "1131": "\", cp);\n\t\t\ttmp = *cp;\n\t\t\t*cp = '\\0';\n\t\t\tkdb_printf(kdb_prompt_str);\n\t\t\tkdb_printf(\"", "1132": "\", cpu);\n\t\treturn 0;\n\t}\n\tbase->hres_active = 1;\n\tfor (i = 0; i < HRTIMER_MAX_CLOCK_BASES; i++)\n\t\tbase->clock_base[i].resolution = KTIME_HIGH_RES;\n\n\ttick_setup_sched_timer();\n\t\n\tretrigger_next_event(NULL);\n\tlocal_irq_restore(flags);\n\treturn 1;\n}\n\nstatic void clock_was_set_work(struct work_struct *work)\n{\n\tclock_was_set();\n}\n\nstatic DECLARE_WORK(hrtimer_work, clock_was_set_work);\n\n\nvoid clock_was_set_delayed(void)\n{\n\tschedule_work(&hrtimer_work);\n}\n\n#else\n\nstatic inline int hrtimer_hres_active(void) { return 0; }\nstatic inline int hrtimer_is_hres_enabled(void) { return 0; }\nstatic inline int hrtimer_switch_to_hres(void) { return 0; }\nstatic inline void\nhrtimer_force_reprogram(struct hrtimer_cpu_base *base, int skip_equal) { }\nstatic inline int hrtimer_reprogram(struct hrtimer *timer,\n\t\t\t\t    struct hrtimer_clock_base *base)\n{\n\treturn 0;\n}\nstatic inline void hrtimer_init_hres(struct hrtimer_cpu_base *base) { }\nstatic inline void retrigger_next_event(void *arg) { }\n\n#endif \n\n\nvoid clock_was_set(void)\n{\n#ifdef CONFIG_HIGH_RES_TIMERS\n\t\n\ton_each_cpu(retrigger_next_event, NULL, 1);\n#endif\n\ttimerfd_clock_was_set();\n}\n\n\nvoid hrtimers_resume(void)\n{\n\tWARN_ONCE(!irqs_disabled(),\n\t\t  KERN_INFO \"", "1133": "\", cpu);\n\td_cpu = tracefs_create_dir(cpu_dir, d_percpu);\n\tif (!d_cpu) {\n\t\tpr_warning(\"", "1134": "\", cpu);\n\tfor (i = 0; i < HRTIMER_MAX_CLOCK_BASES; i++) {\n\t\tSEQ_printf(m, \"", "1135": "\", cpu);\n\n\treturn tr->percpu_dir;\n}\n\nstatic struct dentry *\ntrace_create_cpu_file(const char *name, umode_t mode, struct dentry *parent,\n\t\t      void *data, long cpu, const struct file_operations *fops)\n{\n\tstruct dentry *ret = trace_create_file(name, mode, parent, data, fops);\n\n\tif (ret) \n\t\td_inode(ret)->i_cdev = (void *)(cpu + 1);\n\treturn ret;\n}\n\nstatic void\ntracing_init_tracefs_percpu(struct trace_array *tr, long cpu)\n{\n\tstruct dentry *d_percpu = tracing_dentry_percpu(tr, cpu);\n\tstruct dentry *d_cpu;\n\tchar cpu_dir[30]; \n\n\tif (!d_percpu)\n\t\treturn;\n\n\tsnprintf(cpu_dir, 30, \"", "1136": "\", cpu_dir);\n\t\treturn;\n\t}\n\n\t\n\ttrace_create_cpu_file(\"", "1137": "\", cs->name);\n\t\t\toverride_name[0] = 0;\n\t\t} else\n\t\t\t\n\t\t\tbest = cs;\n\t\tbreak;\n\t}\n\n\tif (curr_clocksource != best && !timekeeping_notify(best)) {\n\t\tpr_info(\"", "1138": "\", cs->name);\n\t\t\tpr_warn(\"", "1139": "\", curr_clocksource->name);\n\tmutex_unlock(&clocksource_mutex);\n\n\treturn count;\n}\n\nssize_t sysfs_get_uname(const char *buf, char *dst, size_t cnt)\n{\n\tsize_t ret = cnt;\n\n\t\n\tif (!cnt || cnt >= CS_NAME_LEN)\n\t\treturn -EINVAL;\n\n\t\n\tif (buf[cnt-1] == '\\n')\n\t\tcnt--;\n\tif (cnt > 0)\n\t\tmemcpy(dst, buf, cnt);\n\tdst[cnt] = 0;\n\treturn ret;\n}\n\n\nstatic ssize_t sysfs_override_clocksource(struct device *dev,\n\t\t\t\t\t  struct device_attribute *attr,\n\t\t\t\t\t  const char *buf, size_t count)\n{\n\tssize_t ret;\n\n\tmutex_lock(&clocksource_mutex);\n\n\tret = sysfs_get_uname(buf, override_name, count);\n\tif (ret >= 0)\n\t\tclocksource_select();\n\n\tmutex_unlock(&clocksource_mutex);\n\n\treturn ret;\n}\n\n\nstatic ssize_t sysfs_unbind_clocksource(struct device *dev,\n\t\t\t\t\tstruct device_attribute *attr,\n\t\t\t\t\tconst char *buf, size_t count)\n{\n\tstruct clocksource *cs;\n\tchar name[CS_NAME_LEN];\n\tssize_t ret;\n\n\tret = sysfs_get_uname(buf, name, count);\n\tif (ret < 0)\n\t\treturn ret;\n\n\tret = -ENODEV;\n\tmutex_lock(&clocksource_mutex);\n\tlist_for_each_entry(cs, &clocksource_list, list) {\n\t\tif (strcmp(cs->name, name))\n\t\t\tcontinue;\n\t\tret = clocksource_unbind(cs);\n\t\tbreak;\n\t}\n\tmutex_unlock(&clocksource_mutex);\n\n\treturn ret ? ret : count;\n}\n\n\nstatic ssize_t\nsysfs_show_available_clocksources(struct device *dev,\n\t\t\t\t  struct device_attribute *attr,\n\t\t\t\t  char *buf)\n{\n\tstruct clocksource *src;\n\tssize_t count = 0;\n\n\tmutex_lock(&clocksource_mutex);\n\tlist_for_each_entry(src, &clocksource_list, list) {\n\t\t\n\t\tif (!tick_oneshot_mode_active() ||\n\t\t    (src->flags & CLOCK_SOURCE_VALID_FOR_HRES))\n\t\t\tcount += snprintf(buf + count,\n\t\t\t\t  max((ssize_t)PAGE_SIZE - count, (ssize_t)0),\n\t\t\t\t  \"", "1140": "\", current);\n\tBUG();\n}\nEXPORT_SYMBOL(__invalid_creds);\n\n\nvoid __validate_process_creds(struct task_struct *tsk,\n\t\t\t      const char *file, unsigned line)\n{\n\tif (tsk->cred == tsk->real_cred) {\n\t\tif (unlikely(read_cred_subscribers(tsk->cred) < 2 ||\n\t\t\t     creds_are_invalid(tsk->cred)))\n\t\t\tgoto invalid_creds;\n\t} else {\n\t\tif (unlikely(read_cred_subscribers(tsk->real_cred) < 1 ||\n\t\t\t     read_cred_subscribers(tsk->cred) < 1 ||\n\t\t\t     creds_are_invalid(tsk->real_cred) ||\n\t\t\t     creds_are_invalid(tsk->cred)))\n\t\t\tgoto invalid_creds;\n\t}\n\treturn;\n\ninvalid_creds:\n\tprintk(KERN_ERR \"", "1141": "\", d_tracer);\n\tif (!tr->options) {\n\t\tpr_warning(\"", "1142": "\", d_tracer);\n\n\tWARN_ONCE(!tr->percpu_dir,\n\t\t  \"", "1143": "\", d_tracer,\n\t\t\t\t\t\t\t instance_mkdir,\n\t\t\t\t\t\t\t instance_rmdir);\n\tif (WARN_ON(!trace_instance_dir))\n\t\treturn;\n}\n\nstatic void\ninit_tracer_tracefs(struct trace_array *tr, struct dentry *d_tracer)\n{\n\tint cpu;\n\n\ttrace_create_file(\"", "1144": "\", data);\n\n\t\t\tseq_printf(m, \"", "1145": "\", depth);\n\tprint_lock_name(target->class);\n\tprintk(\"", "1146": "\", depth, \"", "1147": "\", desc->irq_data.domain->name);\n\t\t}\n\n\t\traw_spin_unlock_irqrestore(&desc->lock, flags);\n\t}\n\n\treturn 0;\n}\n\nstatic int virq_debug_open(struct inode *inode, struct file *file)\n{\n\treturn single_open(file, virq_debug_show, inode->i_private);\n}\n\nstatic const struct file_operations virq_debug_fops = {\n\t.open = virq_debug_open,\n\t.read = seq_read,\n\t.llseek = seq_lseek,\n\t.release = single_release,\n};\n\nstatic int __init irq_debugfs_init(void)\n{\n\tif (debugfs_create_file(\"", "1148": "\", dev->mode);\n\tSEQ_printf(m, \"", "1149": "\", dev->mult);\n\tSEQ_printf(m, \"", "1150": "\", dev->name);\n\tSEQ_printf(m, \"", "1151": "\", dev->retries);\n\tSEQ_printf(m, \"", "1152": "\", dev->shift);\n\tSEQ_printf(m, \"", "1153": "\", diag);\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < __nkdb_err; i++) {\n\t\tif (kdbmsgs[i].km_diag == diag) {\n\t\t\tkdb_printf(\"", "1154": "\", diag, kdbmsgs[i].km_msg);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tkdb_printf(\"", "1155": "\", entry->type);\n\n\treturn trace_handle_return(s);\n}\n\nstatic enum print_line_t print_hex_fmt(struct trace_iterator *iter)\n{\n\tstruct trace_seq *s = &iter->seq;\n\tunsigned char newline = '\\n';\n\tstruct trace_entry *entry;\n\tstruct trace_event *event;\n\n\tentry = iter->ent;\n\n\tif (trace_flags & TRACE_ITER_CONTEXT_INFO) {\n\t\tSEQ_PUT_HEX_FIELD(s, entry->pid);\n\t\tSEQ_PUT_HEX_FIELD(s, iter->cpu);\n\t\tSEQ_PUT_HEX_FIELD(s, iter->ts);\n\t\tif (trace_seq_has_overflowed(s))\n\t\t\treturn TRACE_TYPE_PARTIAL_LINE;\n\t}\n\n\tevent = ftrace_find_event(entry->type);\n\tif (event) {\n\t\tenum print_line_t ret = event->funcs->hex(iter, 0, event);\n\t\tif (ret != TRACE_TYPE_HANDLED)\n\t\t\treturn ret;\n\t}\n\n\tSEQ_PUT_FIELD(s, newline);\n\n\treturn trace_handle_return(s);\n}\n\nstatic enum print_line_t print_bin_fmt(struct trace_iterator *iter)\n{\n\tstruct trace_seq *s = &iter->seq;\n\tstruct trace_entry *entry;\n\tstruct trace_event *event;\n\n\tentry = iter->ent;\n\n\tif (trace_flags & TRACE_ITER_CONTEXT_INFO) {\n\t\tSEQ_PUT_FIELD(s, entry->pid);\n\t\tSEQ_PUT_FIELD(s, iter->cpu);\n\t\tSEQ_PUT_FIELD(s, iter->ts);\n\t\tif (trace_seq_has_overflowed(s))\n\t\t\treturn TRACE_TYPE_PARTIAL_LINE;\n\t}\n\n\tevent = ftrace_find_event(entry->type);\n\treturn event ? event->funcs->binary(iter, 0, event) :\n\t\tTRACE_TYPE_HANDLED;\n}\n\nint trace_empty(struct trace_iterator *iter)\n{\n\tstruct ring_buffer_iter *buf_iter;\n\tint cpu;\n\n\t\n\tif (iter->cpu_file != RING_BUFFER_ALL_CPUS) {\n\t\tcpu = iter->cpu_file;\n\t\tbuf_iter = trace_buffer_iter(iter, cpu);\n\t\tif (buf_iter) {\n\t\t\tif (!ring_buffer_iter_empty(buf_iter))\n\t\t\t\treturn 0;\n\t\t} else {\n\t\t\tif (!ring_buffer_empty_cpu(iter->trace_buffer->buffer, cpu))\n\t\t\t\treturn 0;\n\t\t}\n\t\treturn 1;\n\t}\n\n\tfor_each_tracing_cpu(cpu) {\n\t\tbuf_iter = trace_buffer_iter(iter, cpu);\n\t\tif (buf_iter) {\n\t\t\tif (!ring_buffer_iter_empty(buf_iter))\n\t\t\t\treturn 0;\n\t\t} else {\n\t\t\tif (!ring_buffer_empty_cpu(iter->trace_buffer->buffer, cpu))\n\t\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn 1;\n}\n\n\nenum print_line_t print_trace_line(struct trace_iterator *iter)\n{\n\tenum print_line_t ret;\n\n\tif (iter->lost_events) {\n\t\ttrace_seq_printf(&iter->seq, \"", "1156": "\", entry->type);\n\n\treturn trace_handle_return(s);\n}\n\nstatic enum print_line_t print_raw_fmt(struct trace_iterator *iter)\n{\n\tstruct trace_seq *s = &iter->seq;\n\tstruct trace_entry *entry;\n\tstruct trace_event *event;\n\n\tentry = iter->ent;\n\n\tif (trace_flags & TRACE_ITER_CONTEXT_INFO)\n\t\ttrace_seq_printf(s, \"", "1157": "\", events);\n\n\tmutex_unlock(&show_mutex);\n\n\treturn 0;\n}\n\n\nstatic void sync_access(void)\n{\n\tunsigned long flags;\n\tint cpu;\n\n\tfor_each_online_cpu(cpu) {\n\t\traw_spinlock_t *lock = &per_cpu(tstats_lookup_lock, cpu);\n\n\t\traw_spin_lock_irqsave(lock, flags);\n\t\t\n\t\traw_spin_unlock_irqrestore(lock, flags);\n\t}\n}\n\nstatic ssize_t tstats_write(struct file *file, const char __user *buf,\n\t\t\t    size_t count, loff_t *offs)\n{\n\tchar ctl[2];\n\n\tif (count != 2 || *offs)\n\t\treturn -EINVAL;\n\n\tif (copy_from_user(ctl, buf, count))\n\t\treturn -EFAULT;\n\n\tmutex_lock(&show_mutex);\n\tswitch (ctl[0]) {\n\tcase '0':\n\t\tif (timer_stats_active) {\n\t\t\ttimer_stats_active = 0;\n\t\t\ttime_stop = ktime_get();\n\t\t\tsync_access();\n\t\t}\n\t\tbreak;\n\tcase '1':\n\t\tif (!timer_stats_active) {\n\t\t\treset_entries();\n\t\t\ttime_start = ktime_get();\n\t\t\tsmp_mb();\n\t\t\ttimer_stats_active = 1;\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tcount = -EINVAL;\n\t}\n\tmutex_unlock(&show_mutex);\n\n\treturn count;\n}\n\nstatic int tstats_open(struct inode *inode, struct file *filp)\n{\n\treturn single_open(filp, tstats_show, NULL);\n}\n\nstatic const struct file_operations tstats_fops = {\n\t.open\t\t= tstats_open,\n\t.read\t\t= seq_read,\n\t.write\t\t= tstats_write,\n\t.llseek\t\t= seq_lseek,\n\t.release\t= single_release,\n};\n\nvoid __init init_timer_stats(void)\n{\n\tint cpu;\n\n\tfor_each_possible_cpu(cpu)\n\t\traw_spin_lock_init(&per_cpu(tstats_lookup_lock, cpu));\n}\n\nstatic int __init init_tstats_procfs(void)\n{\n\tstruct proc_dir_entry *pe;\n\n\tpe = proc_create(\"", "1158": "\", field->buf);\n\n\treturn trace_handle_return(s);\n}\n\nstatic enum print_line_t trace_print_raw(struct trace_iterator *iter, int flags,\n\t\t\t\t\t struct trace_event *event)\n{\n\tstruct print_entry *field;\n\n\ttrace_assign_type(field, iter->ent);\n\n\ttrace_seq_printf(&iter->seq, \"", "1159": "\", field->ip);\n\ttrace_seq_bprintf(s, field->fmt, field->buf);\n\n\treturn trace_handle_return(s);\n}\n\nstatic struct trace_event_functions trace_bprint_funcs = {\n\t.trace\t\t= trace_bprint_print,\n\t.raw\t\t= trace_bprint_raw,\n};\n\nstatic struct trace_event trace_bprint_event = {\n\t.type\t\t= TRACE_BPRINT,\n\t.funcs\t\t= &trace_bprint_funcs,\n};\n\n\nstatic enum print_line_t trace_print_print(struct trace_iterator *iter,\n\t\t\t\t\t   int flags, struct trace_event *event)\n{\n\tstruct print_entry *field;\n\tstruct trace_seq *s = &iter->seq;\n\n\ttrace_assign_type(field, iter->ent);\n\n\tseq_print_ip_sym(s, field->ip, flags);\n\ttrace_seq_printf(s, \"", "1160": "\", field->ip);\n\ttrace_seq_puts(s, field->str);\n\n\treturn trace_handle_return(s);\n}\n\nstatic struct trace_event_functions trace_bputs_funcs = {\n\t.trace\t\t= trace_bputs_print,\n\t.raw\t\t= trace_bputs_raw,\n};\n\nstatic struct trace_event trace_bputs_event = {\n\t.type\t\t= TRACE_BPUTS,\n\t.funcs\t\t= &trace_bputs_funcs,\n};\n\n\nstatic enum print_line_t\ntrace_bprint_print(struct trace_iterator *iter, int flags,\n\t\t   struct trace_event *event)\n{\n\tstruct trace_entry *entry = iter->ent;\n\tstruct trace_seq *s = &iter->seq;\n\tstruct bprint_entry *field;\n\n\ttrace_assign_type(field, entry);\n\n\tseq_print_ip_sym(s, field->ip, flags);\n\ttrace_seq_puts(s, \"", "1161": "\", field->ip, field->buf);\n\n\treturn trace_handle_return(&iter->seq);\n}\n\nstatic struct trace_event_functions trace_print_funcs = {\n\t.trace\t\t= trace_print_print,\n\t.raw\t\t= trace_print_raw,\n};\n\nstatic struct trace_event trace_print_event = {\n\t.type\t \t= TRACE_PRINT,\n\t.funcs\t\t= &trace_print_funcs,\n};\n\n\nstatic struct trace_event *events[] __initdata = {\n\t&trace_fn_event,\n\t&trace_ctx_event,\n\t&trace_wake_event,\n\t&trace_stack_event,\n\t&trace_user_stack_event,\n\t&trace_bputs_event,\n\t&trace_bprint_event,\n\t&trace_print_event,\n\tNULL\n};\n\n__init static int init_events(void)\n{\n\tstruct trace_event *event;\n\tint i, ret;\n\n\tfor (i = 0; events[i]; i++) {\n\t\tevent = events[i];\n\n\t\tret = register_ftrace_event(event);\n\t\tif (!ret) {\n\t\t\tprintk(KERN_WARNING \"", "1162": "\", file, line);\n\tdump_invalid_creds(cred, \"", "1163": "\", file, line);\n\n\tdump_invalid_creds(tsk->real_cred, \"", "1164": "\", func);\n\t}\n}\n#endif \n\nvoid __init\nftrace_set_early_filter(struct ftrace_ops *ops, char *buf, int enable)\n{\n\tchar *func;\n\n\tftrace_ops_init(ops);\n\n\twhile (buf) {\n\t\tfunc = strsep(&buf, \"", "1165": "\", hotcpu);\n\t\t\t\tmutex_unlock(&relay_channels_mutex);\n\t\t\t\treturn notifier_from_errno(-ENOMEM);\n\t\t\t}\n\t\t}\n\t\tmutex_unlock(&relay_channels_mutex);\n\t\tbreak;\n\tcase CPU_DEAD:\n\tcase CPU_DEAD_FROZEN:\n\t\t\n\t\tbreak;\n\t}\n\treturn NOTIFY_OK;\n}\n\n\nstruct rchan *relay_open(const char *base_filename,\n\t\t\t struct dentry *parent,\n\t\t\t size_t subbuf_size,\n\t\t\t size_t n_subbufs,\n\t\t\t struct rchan_callbacks *cb,\n\t\t\t void *private_data)\n{\n\tunsigned int i;\n\tstruct rchan *chan;\n\n\tif (!(subbuf_size && n_subbufs))\n\t\treturn NULL;\n\tif (subbuf_size > UINT_MAX / n_subbufs)\n\t\treturn NULL;\n\n\tchan = kzalloc(sizeof(struct rchan), GFP_KERNEL);\n\tif (!chan)\n\t\treturn NULL;\n\n\tchan->version = RELAYFS_CHANNEL_VERSION;\n\tchan->n_subbufs = n_subbufs;\n\tchan->subbuf_size = subbuf_size;\n\tchan->alloc_size = PAGE_ALIGN(subbuf_size * n_subbufs);\n\tchan->parent = parent;\n\tchan->private_data = private_data;\n\tif (base_filename) {\n\t\tchan->has_base_filename = 1;\n\t\tstrlcpy(chan->base_filename, base_filename, NAME_MAX);\n\t}\n\tsetup_callbacks(chan, cb);\n\tkref_init(&chan->kref);\n\n\tmutex_lock(&relay_channels_mutex);\n\tfor_each_online_cpu(i) {\n\t\tchan->buf[i] = relay_open_buf(chan, i);\n\t\tif (!chan->buf[i])\n\t\t\tgoto free_bufs;\n\t}\n\tlist_add(&chan->list, &relay_channels);\n\tmutex_unlock(&relay_channels_mutex);\n\n\treturn chan;\n\nfree_bufs:\n\tfor_each_possible_cpu(i) {\n\t\tif (chan->buf[i])\n\t\t\trelay_close_buf(chan->buf[i]);\n\t}\n\n\tkref_put(&chan->kref, relay_destroy_channel);\n\tmutex_unlock(&relay_channels_mutex);\n\treturn NULL;\n}\nEXPORT_SYMBOL_GPL(relay_open);\n\nstruct rchan_percpu_buf_dispatcher {\n\tstruct rchan_buf *buf;\n\tstruct dentry *dentry;\n};\n\n\nstatic void __relay_set_buf_dentry(void *info)\n{\n\tstruct rchan_percpu_buf_dispatcher *p = info;\n\n\trelay_set_buf_dentry(p->buf, p->dentry);\n}\n\n\nint relay_late_setup_files(struct rchan *chan,\n\t\t\t   const char *base_filename,\n\t\t\t   struct dentry *parent)\n{\n\tint err = 0;\n\tunsigned int i, curr_cpu;\n\tunsigned long flags;\n\tstruct dentry *dentry;\n\tstruct rchan_percpu_buf_dispatcher disp;\n\n\tif (!chan || !base_filename)\n\t\treturn -EINVAL;\n\n\tstrlcpy(chan->base_filename, base_filename, NAME_MAX);\n\n\tmutex_lock(&relay_channels_mutex);\n\t\n\tif (unlikely(chan->has_base_filename)) {\n\t\tmutex_unlock(&relay_channels_mutex);\n\t\treturn -EEXIST;\n\t}\n\tchan->has_base_filename = 1;\n\tchan->parent = parent;\n\tcurr_cpu = get_cpu();\n\t\n\tfor_each_online_cpu(i) {\n\t\tif (unlikely(!chan->buf[i])) {\n\t\t\tWARN_ONCE(1, KERN_ERR \"", "1166": "\", hwirq);\n\n\t\t\tchip = irq_desc_get_chip(desc);\n\t\t\tseq_printf(m, \"", "1167": "\", i ? \"", "1168": "\", i);\n\t\t\tseq_printf(m, \"", "1169": "\", i, funcs[i].func);\n}\n\nstatic struct tracepoint_func *func_add(struct tracepoint_func **funcs,\n\t\tstruct tracepoint_func *tp_func)\n{\n\tint nr_probes = 0;\n\tstruct tracepoint_func *old, *new;\n\n\tif (WARN_ON(!tp_func->func))\n\t\treturn ERR_PTR(-EINVAL);\n\n\tdebug_print_probes(*funcs);\n\told = *funcs;\n\tif (old) {\n\t\t\n\t\tfor (nr_probes = 0; old[nr_probes].func; nr_probes++)\n\t\t\tif (old[nr_probes].func == tp_func->func &&\n\t\t\t    old[nr_probes].data == tp_func->data)\n\t\t\t\treturn ERR_PTR(-EEXIST);\n\t}\n\t\n\tnew = allocate_probes(nr_probes + 2);\n\tif (new == NULL)\n\t\treturn ERR_PTR(-ENOMEM);\n\tif (old)\n\t\tmemcpy(new, old, nr_probes * sizeof(struct tracepoint_func));\n\tnew[nr_probes] = *tp_func;\n\tnew[nr_probes + 1].func = NULL;\n\t*funcs = new;\n\tdebug_print_probes(*funcs);\n\treturn old;\n}\n\nstatic void *func_remove(struct tracepoint_func **funcs,\n\t\tstruct tracepoint_func *tp_func)\n{\n\tint nr_probes = 0, nr_del = 0, i;\n\tstruct tracepoint_func *old, *new;\n\n\told = *funcs;\n\n\tif (!old)\n\t\treturn ERR_PTR(-ENOENT);\n\n\tdebug_print_probes(*funcs);\n\t\n\tif (tp_func->func) {\n\t\tfor (nr_probes = 0; old[nr_probes].func; nr_probes++) {\n\t\t\tif (old[nr_probes].func == tp_func->func &&\n\t\t\t     old[nr_probes].data == tp_func->data)\n\t\t\t\tnr_del++;\n\t\t}\n\t}\n\n\t\n\tif (nr_probes - nr_del == 0) {\n\t\t\n\t\t*funcs = NULL;\n\t\tdebug_print_probes(*funcs);\n\t\treturn old;\n\t} else {\n\t\tint j = 0;\n\t\t\n\t\t\n\t\tnew = allocate_probes(nr_probes - nr_del + 1);\n\t\tif (new == NULL)\n\t\t\treturn ERR_PTR(-ENOMEM);\n\t\tfor (i = 0; old[i].func; i++)\n\t\t\tif (old[i].func != tp_func->func\n\t\t\t\t\t|| old[i].data != tp_func->data)\n\t\t\t\tnew[j++] = old[i];\n\t\tnew[nr_probes - nr_del].func = NULL;\n\t\t*funcs = new;\n\t}\n\tdebug_print_probes(*funcs);\n\treturn old;\n}\n\n\nstatic int tracepoint_add_func(struct tracepoint *tp,\n\t\tstruct tracepoint_func *func)\n{\n\tstruct tracepoint_func *old, *tp_funcs;\n\n\tif (tp->regfunc && !static_key_enabled(&tp->key))\n\t\ttp->regfunc();\n\n\ttp_funcs = rcu_dereference_protected(tp->funcs,\n\t\t\tlockdep_is_held(&tracepoints_mutex));\n\told = func_add(&tp_funcs, func);\n\tif (IS_ERR(old)) {\n\t\tWARN_ON_ONCE(1);\n\t\treturn PTR_ERR(old);\n\t}\n\n\t\n\trcu_assign_pointer(tp->funcs, tp_funcs);\n\tif (!static_key_enabled(&tp->key))\n\t\tstatic_key_slow_inc(&tp->key);\n\trelease_probes(old);\n\treturn 0;\n}\n\n\nstatic int tracepoint_remove_func(struct tracepoint *tp,\n\t\tstruct tracepoint_func *func)\n{\n\tstruct tracepoint_func *old, *tp_funcs;\n\n\ttp_funcs = rcu_dereference_protected(tp->funcs,\n\t\t\tlockdep_is_held(&tracepoints_mutex));\n\told = func_remove(&tp_funcs, func);\n\tif (IS_ERR(old)) {\n\t\tWARN_ON_ONCE(1);\n\t\treturn PTR_ERR(old);\n\t}\n\n\tif (!tp_funcs) {\n\t\t\n\t\tif (tp->unregfunc && static_key_enabled(&tp->key))\n\t\t\ttp->unregfunc();\n\n\t\tif (static_key_enabled(&tp->key))\n\t\t\tstatic_key_slow_dec(&tp->key);\n\t}\n\trcu_assign_pointer(tp->funcs, tp_funcs);\n\trelease_probes(old);\n\treturn 0;\n}\n\n\nint tracepoint_probe_register(struct tracepoint *tp, void *probe, void *data)\n{\n\tstruct tracepoint_func tp_func;\n\tint ret;\n\n\tmutex_lock(&tracepoints_mutex);\n\ttp_func.func = probe;\n\ttp_func.data = data;\n\tret = tracepoint_add_func(tp, &tp_func);\n\tmutex_unlock(&tracepoints_mutex);\n\treturn ret;\n}\nEXPORT_SYMBOL_GPL(tracepoint_probe_register);\n\n\nint tracepoint_probe_unregister(struct tracepoint *tp, void *probe, void *data)\n{\n\tstruct tracepoint_func tp_func;\n\tint ret;\n\n\tmutex_lock(&tracepoints_mutex);\n\ttp_func.func = probe;\n\ttp_func.data = data;\n\tret = tracepoint_remove_func(tp, &tp_func);\n\tmutex_unlock(&tracepoints_mutex);\n\treturn ret;\n}\nEXPORT_SYMBOL_GPL(tracepoint_probe_unregister);\n\n#ifdef CONFIG_MODULES\nbool trace_module_has_bad_taint(struct module *mod)\n{\n\treturn mod->taints & ~((1 << TAINT_OOT_MODULE) | (1 << TAINT_CRAP) |\n\t\t\t       (1 << TAINT_UNSIGNED_MODULE));\n}\n\nstatic BLOCKING_NOTIFIER_HEAD(tracepoint_notify_list);\n\n\nint register_tracepoint_module_notifier(struct notifier_block *nb)\n{\n\tstruct tp_module *tp_mod;\n\tint ret;\n\n\tmutex_lock(&tracepoint_module_list_mutex);\n\tret = blocking_notifier_chain_register(&tracepoint_notify_list, nb);\n\tif (ret)\n\t\tgoto end;\n\tlist_for_each_entry(tp_mod, &tracepoint_module_list, list)\n\t\t(void) nb->notifier_call(nb, MODULE_STATE_COMING, tp_mod);\nend:\n\tmutex_unlock(&tracepoint_module_list_mutex);\n\treturn ret;\n}\nEXPORT_SYMBOL_GPL(register_tracepoint_module_notifier);\n\n\nint unregister_tracepoint_module_notifier(struct notifier_block *nb)\n{\n\tstruct tp_module *tp_mod;\n\tint ret;\n\n\tmutex_lock(&tracepoint_module_list_mutex);\n\tret = blocking_notifier_chain_unregister(&tracepoint_notify_list, nb);\n\tif (ret)\n\t\tgoto end;\n\tlist_for_each_entry(tp_mod, &tracepoint_module_list, list)\n\t\t(void) nb->notifier_call(nb, MODULE_STATE_GOING, tp_mod);\nend:\n\tmutex_unlock(&tracepoint_module_list_mutex);\n\treturn ret;\n\n}\nEXPORT_SYMBOL_GPL(unregister_tracepoint_module_notifier);\n\n\nstatic void tp_module_going_check_quiescent(struct tracepoint * const *begin,\n\t\tstruct tracepoint * const *end)\n{\n\tstruct tracepoint * const *iter;\n\n\tif (!begin)\n\t\treturn;\n\tfor (iter = begin; iter < end; iter++)\n\t\tWARN_ON_ONCE((*iter)->funcs);\n}\n\nstatic int tracepoint_module_coming(struct module *mod)\n{\n\tstruct tp_module *tp_mod;\n\tint ret = 0;\n\n\tif (!mod->num_tracepoints)\n\t\treturn 0;\n\n\t\n\tif (trace_module_has_bad_taint(mod))\n\t\treturn 0;\n\tmutex_lock(&tracepoint_module_list_mutex);\n\ttp_mod = kmalloc(sizeof(struct tp_module), GFP_KERNEL);\n\tif (!tp_mod) {\n\t\tret = -ENOMEM;\n\t\tgoto end;\n\t}\n\ttp_mod->mod = mod;\n\tlist_add_tail(&tp_mod->list, &tracepoint_module_list);\n\tblocking_notifier_call_chain(&tracepoint_notify_list,\n\t\t\tMODULE_STATE_COMING, tp_mod);\nend:\n\tmutex_unlock(&tracepoint_module_list_mutex);\n\treturn ret;\n}\n\nstatic void tracepoint_module_going(struct module *mod)\n{\n\tstruct tp_module *tp_mod;\n\n\tif (!mod->num_tracepoints)\n\t\treturn;\n\n\tmutex_lock(&tracepoint_module_list_mutex);\n\tlist_for_each_entry(tp_mod, &tracepoint_module_list, list) {\n\t\tif (tp_mod->mod == mod) {\n\t\t\tblocking_notifier_call_chain(&tracepoint_notify_list,\n\t\t\t\t\tMODULE_STATE_GOING, tp_mod);\n\t\t\tlist_del(&tp_mod->list);\n\t\t\tkfree(tp_mod);\n\t\t\t\n\t\t\ttp_module_going_check_quiescent(mod->tracepoints_ptrs,\n\t\t\t\tmod->tracepoints_ptrs + mod->num_tracepoints);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tmutex_unlock(&tracepoint_module_list_mutex);\n}\n\nstatic int tracepoint_module_notify(struct notifier_block *self,\n\t\tunsigned long val, void *data)\n{\n\tstruct module *mod = data;\n\tint ret = 0;\n\n\tswitch (val) {\n\tcase MODULE_STATE_COMING:\n\t\tret = tracepoint_module_coming(mod);\n\t\tbreak;\n\tcase MODULE_STATE_LIVE:\n\t\tbreak;\n\tcase MODULE_STATE_GOING:\n\t\ttracepoint_module_going(mod);\n\t\tbreak;\n\tcase MODULE_STATE_UNFORMED:\n\t\tbreak;\n\t}\n\treturn ret;\n}\n\nstatic struct notifier_block tracepoint_module_nb = {\n\t.notifier_call = tracepoint_module_notify,\n\t.priority = 0,\n};\n\nstatic __init int init_tracepoints(void)\n{\n\tint ret;\n\n\tret = register_module_notifier(&tracepoint_module_nb);\n\tif (ret)\n\t\tpr_warning(\"", "1170": "\", idx);\n\tprint_name_offset(m, taddr);\n\tSEQ_printf(m, \"", "1171": "\", ignore_loglevel_setup);\nmodule_param(ignore_loglevel, bool, S_IRUGO | S_IWUSR);\nMODULE_PARM_DESC(ignore_loglevel,\n\t\t \"", "1172": "\", irqclass);\n\tif (!save_trace(&next_root->trace))\n\t\treturn 0;\n\tprint_shortest_lock_dependencies(forwards_entry, next_root);\n\n\tprintk(\"", "1173": "\", irqclass);\n\tprint_lock_name(forwards_entry->class);\n\tprintk(\"", "1174": "\", irqclass);\n\tprintk(\"", "1175": "\", irqclass);\n\n\tprint_stack_trace(backwards_entry->class->usage_traces + bit1, 1);\n\n\tprintk(\"", "1176": "\", iter->trace->name);\n\t\t\tseq_puts(m, \"", "1177": "\", kdb_buffer);\n\t\telse\n\t\t\tpr_info(\"", "1178": "\", kdb_buffer);\n\t}\n\n\tif (KDB_STATE(PAGER)) {\n\t\t\n\t\tint got = 0;\n\t\tlen = retlen;\n\t\twhile (len--) {\n\t\t\tif (kdb_buffer[len] == '\\n') {\n\t\t\t\tkdb_nextline++;\n\t\t\t\tgot = 0;\n\t\t\t} else if (kdb_buffer[len] == '\\r') {\n\t\t\t\tgot = 0;\n\t\t\t} else {\n\t\t\t\tgot++;\n\t\t\t}\n\t\t}\n\t\tkdb_nextline += got / (colcount + 1);\n\t}\n\n\t\n\tif (kdb_nextline >= linecount) {\n\t\tchar buf1[16] = \"", "1179": "\", keep_bootcon_setup);\n\n\nvoid register_console(struct console *newcon)\n{\n\tint i;\n\tunsigned long flags;\n\tstruct console *bcon = NULL;\n\tstruct console_cmdline *c;\n\n\tif (console_drivers)\n\t\tfor_each_console(bcon)\n\t\t\tif (WARN(bcon == newcon,\n\t\t\t\t\t\"", "1180": "\", key);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (lastchar - buffer >= 5 &&\n\t\t\t    strcmp(lastchar - 5, \"", "1181": "\", line);\n\tkfree(buf);\n\treturn ret;\n}\n\nstatic ssize_t devkmsg_read(struct file *file, char __user *buf,\n\t\t\t    size_t count, loff_t *ppos)\n{\n\tstruct devkmsg_user *user = file->private_data;\n\tstruct printk_log *msg;\n\tu64 ts_usec;\n\tsize_t i;\n\tchar cont = '-';\n\tsize_t len;\n\tssize_t ret;\n\n\tif (!user)\n\t\treturn -EBADF;\n\n\tret = mutex_lock_interruptible(&user->lock);\n\tif (ret)\n\t\treturn ret;\n\traw_spin_lock_irq(&logbuf_lock);\n\twhile (user->seq == log_next_seq) {\n\t\tif (file->f_flags & O_NONBLOCK) {\n\t\t\tret = -EAGAIN;\n\t\t\traw_spin_unlock_irq(&logbuf_lock);\n\t\t\tgoto out;\n\t\t}\n\n\t\traw_spin_unlock_irq(&logbuf_lock);\n\t\tret = wait_event_interruptible(log_wait,\n\t\t\t\t\t       user->seq != log_next_seq);\n\t\tif (ret)\n\t\t\tgoto out;\n\t\traw_spin_lock_irq(&logbuf_lock);\n\t}\n\n\tif (user->seq < log_first_seq) {\n\t\t\n\t\tuser->idx = log_first_idx;\n\t\tuser->seq = log_first_seq;\n\t\tret = -EPIPE;\n\t\traw_spin_unlock_irq(&logbuf_lock);\n\t\tgoto out;\n\t}\n\n\tmsg = log_from_idx(user->idx);\n\tts_usec = msg->ts_nsec;\n\tdo_div(ts_usec, 1000);\n\n\t\n\tif (msg->flags & LOG_CONT && !(user->prev & LOG_CONT))\n\t\tcont = 'c';\n\telse if ((msg->flags & LOG_CONT) ||\n\t\t ((user->prev & LOG_CONT) && !(msg->flags & LOG_PREFIX)))\n\t\tcont = '+';\n\n\tlen = sprintf(user->buf, \"", "1182": "\", log_buf_len);\n\tpr_info(\"", "1183": "\", log_buf_len_setup);\n\n#ifdef CONFIG_SMP\n#define __LOG_CPU_MAX_BUF_LEN (1 << CONFIG_LOG_CPU_MAX_BUF_SHIFT)\n\nstatic void __init log_buf_add_cpu(void)\n{\n\tunsigned int cpu_extra;\n\n\t\n\tif (num_possible_cpus() == 1)\n\t\treturn;\n\n\tcpu_extra = (num_possible_cpus() - 1) * __LOG_CPU_MAX_BUF_LEN;\n\n\t\n\tif (cpu_extra <= __LOG_BUF_LEN / 2)\n\t\treturn;\n\n\tpr_info(\"", "1184": "\", max_lock_depth,\n\t\t\t       top_task->comm, task_pid_nr(top_task));\n\t\t}\n\t\tput_task_struct(task);\n\n\t\treturn -EDEADLK;\n\t}\n\n\t\n retry:\n\t\n\traw_spin_lock_irqsave(&task->pi_lock, flags);\n\n\t\n\twaiter = task->pi_blocked_on;\n\n\t\n\n\t\n\tif (!waiter)\n\t\tgoto out_unlock_pi;\n\n\t\n\tif (orig_waiter && !rt_mutex_owner(orig_lock))\n\t\tgoto out_unlock_pi;\n\n\t\n\tif (next_lock != waiter->lock)\n\t\tgoto out_unlock_pi;\n\n\t\n\tif (top_waiter) {\n\t\tif (!task_has_pi_waiters(task))\n\t\t\tgoto out_unlock_pi;\n\t\t\n\t\tif (top_waiter != task_top_pi_waiter(task)) {\n\t\t\tif (!detect_deadlock)\n\t\t\t\tgoto out_unlock_pi;\n\t\t\telse\n\t\t\t\trequeue = false;\n\t\t}\n\t}\n\n\t\n\tif (waiter->prio == task->prio) {\n\t\tif (!detect_deadlock)\n\t\t\tgoto out_unlock_pi;\n\t\telse\n\t\t\trequeue = false;\n\t}\n\n\t\n\tlock = waiter->lock;\n\t\n\tif (!raw_spin_trylock(&lock->wait_lock)) {\n\t\traw_spin_unlock_irqrestore(&task->pi_lock, flags);\n\t\tcpu_relax();\n\t\tgoto retry;\n\t}\n\n\t\n\tif (lock == orig_lock || rt_mutex_owner(lock) == top_task) {\n\t\tdebug_rt_mutex_deadlock(chwalk, orig_waiter, lock);\n\t\traw_spin_unlock(&lock->wait_lock);\n\t\tret = -EDEADLK;\n\t\tgoto out_unlock_pi;\n\t}\n\n\t\n\tif (!requeue) {\n\t\t\n\t\traw_spin_unlock_irqrestore(&task->pi_lock, flags);\n\t\tput_task_struct(task);\n\n\t\t\n\t\tif (!rt_mutex_owner(lock)) {\n\t\t\traw_spin_unlock(&lock->wait_lock);\n\t\t\treturn 0;\n\t\t}\n\n\t\t\n\t\ttask = rt_mutex_owner(lock);\n\t\tget_task_struct(task);\n\t\traw_spin_lock_irqsave(&task->pi_lock, flags);\n\n\t\t\n\t\tnext_lock = task_blocked_on_lock(task);\n\t\t\n\t\ttop_waiter = rt_mutex_top_waiter(lock);\n\n\t\t\n\t\traw_spin_unlock_irqrestore(&task->pi_lock, flags);\n\t\traw_spin_unlock(&lock->wait_lock);\n\n\t\t\n\t\tif (!next_lock)\n\t\t\tgoto out_put_task;\n\t\tgoto again;\n\t}\n\n\t\n\tprerequeue_top_waiter = rt_mutex_top_waiter(lock);\n\n\t\n\trt_mutex_dequeue(lock, waiter);\n\twaiter->prio = task->prio;\n\trt_mutex_enqueue(lock, waiter);\n\n\t\n\traw_spin_unlock_irqrestore(&task->pi_lock, flags);\n\tput_task_struct(task);\n\n\t\n\tif (!rt_mutex_owner(lock)) {\n\t\t\n\t\tif (prerequeue_top_waiter != rt_mutex_top_waiter(lock))\n\t\t\twake_up_process(rt_mutex_top_waiter(lock)->task);\n\t\traw_spin_unlock(&lock->wait_lock);\n\t\treturn 0;\n\t}\n\n\t\n\ttask = rt_mutex_owner(lock);\n\tget_task_struct(task);\n\traw_spin_lock_irqsave(&task->pi_lock, flags);\n\n\t\n\tif (waiter == rt_mutex_top_waiter(lock)) {\n\t\t\n\t\trt_mutex_dequeue_pi(task, prerequeue_top_waiter);\n\t\trt_mutex_enqueue_pi(task, waiter);\n\t\t__rt_mutex_adjust_prio(task);\n\n\t} else if (prerequeue_top_waiter == waiter) {\n\t\t\n\t\trt_mutex_dequeue_pi(task, waiter);\n\t\twaiter = rt_mutex_top_waiter(lock);\n\t\trt_mutex_enqueue_pi(task, waiter);\n\t\t__rt_mutex_adjust_prio(task);\n\t} else {\n\t\t\n\t}\n\n\t\n\tnext_lock = task_blocked_on_lock(task);\n\t\n\ttop_waiter = rt_mutex_top_waiter(lock);\n\n\t\n\traw_spin_unlock_irqrestore(&task->pi_lock, flags);\n\traw_spin_unlock(&lock->wait_lock);\n\n\t\n\tif (!next_lock)\n\t\tgoto out_put_task;\n\n\t\n\tif (!detect_deadlock && waiter != top_waiter)\n\t\tgoto out_put_task;\n\n\tgoto again;\n\n out_unlock_pi:\n\traw_spin_unlock_irqrestore(&task->pi_lock, flags);\n out_put_task:\n\tput_task_struct(task);\n\n\treturn ret;\n}\n\n\nstatic int try_to_take_rt_mutex(struct rt_mutex *lock, struct task_struct *task,\n\t\t\t\tstruct rt_mutex_waiter *waiter)\n{\n\tunsigned long flags;\n\n\t\n\tmark_rt_mutex_waiters(lock);\n\n\t\n\tif (rt_mutex_owner(lock))\n\t\treturn 0;\n\n\t\n\tif (waiter) {\n\t\t\n\t\tif (waiter != rt_mutex_top_waiter(lock))\n\t\t\treturn 0;\n\n\t\t\n\t\trt_mutex_dequeue(lock, waiter);\n\n\t} else {\n\t\t\n\t\tif (rt_mutex_has_waiters(lock)) {\n\t\t\t\n\t\t\tif (task->prio >= rt_mutex_top_waiter(lock)->prio)\n\t\t\t\treturn 0;\n\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tgoto takeit;\n\t\t}\n\t}\n\n\t\n\traw_spin_lock_irqsave(&task->pi_lock, flags);\n\ttask->pi_blocked_on = NULL;\n\t\n\tif (rt_mutex_has_waiters(lock))\n\t\trt_mutex_enqueue_pi(task, rt_mutex_top_waiter(lock));\n\traw_spin_unlock_irqrestore(&task->pi_lock, flags);\n\ntakeit:\n\t\n\tdebug_rt_mutex_lock(lock);\n\n\t\n\trt_mutex_set_owner(lock, task);\n\n\trt_mutex_deadlock_account_lock(lock, task);\n\n\treturn 1;\n}\n\n\nstatic int task_blocks_on_rt_mutex(struct rt_mutex *lock,\n\t\t\t\t   struct rt_mutex_waiter *waiter,\n\t\t\t\t   struct task_struct *task,\n\t\t\t\t   enum rtmutex_chainwalk chwalk)\n{\n\tstruct task_struct *owner = rt_mutex_owner(lock);\n\tstruct rt_mutex_waiter *top_waiter = waiter;\n\tstruct rt_mutex *next_lock;\n\tint chain_walk = 0, res;\n\tunsigned long flags;\n\n\t\n\tif (owner == task)\n\t\treturn -EDEADLK;\n\n\traw_spin_lock_irqsave(&task->pi_lock, flags);\n\t__rt_mutex_adjust_prio(task);\n\twaiter->task = task;\n\twaiter->lock = lock;\n\twaiter->prio = task->prio;\n\n\t\n\tif (rt_mutex_has_waiters(lock))\n\t\ttop_waiter = rt_mutex_top_waiter(lock);\n\trt_mutex_enqueue(lock, waiter);\n\n\ttask->pi_blocked_on = waiter;\n\n\traw_spin_unlock_irqrestore(&task->pi_lock, flags);\n\n\tif (!owner)\n\t\treturn 0;\n\n\traw_spin_lock_irqsave(&owner->pi_lock, flags);\n\tif (waiter == rt_mutex_top_waiter(lock)) {\n\t\trt_mutex_dequeue_pi(owner, top_waiter);\n\t\trt_mutex_enqueue_pi(owner, waiter);\n\n\t\t__rt_mutex_adjust_prio(owner);\n\t\tif (owner->pi_blocked_on)\n\t\t\tchain_walk = 1;\n\t} else if (rt_mutex_cond_detect_deadlock(waiter, chwalk)) {\n\t\tchain_walk = 1;\n\t}\n\n\t\n\tnext_lock = task_blocked_on_lock(owner);\n\n\traw_spin_unlock_irqrestore(&owner->pi_lock, flags);\n\t\n\tif (!chain_walk || !next_lock)\n\t\treturn 0;\n\n\t\n\tget_task_struct(owner);\n\n\traw_spin_unlock(&lock->wait_lock);\n\n\tres = rt_mutex_adjust_prio_chain(owner, chwalk, lock,\n\t\t\t\t\t next_lock, waiter, task);\n\n\traw_spin_lock(&lock->wait_lock);\n\n\treturn res;\n}\n\n\nstatic void wakeup_next_waiter(struct rt_mutex *lock)\n{\n\tstruct rt_mutex_waiter *waiter;\n\tunsigned long flags;\n\n\traw_spin_lock_irqsave(&current->pi_lock, flags);\n\n\twaiter = rt_mutex_top_waiter(lock);\n\n\t\n\trt_mutex_dequeue_pi(current, waiter);\n\n\t\n\tlock->owner = (void *) RT_MUTEX_HAS_WAITERS;\n\n\traw_spin_unlock_irqrestore(&current->pi_lock, flags);\n\n\t\n\twake_up_process(waiter->task);\n}\n\n\nstatic void remove_waiter(struct rt_mutex *lock,\n\t\t\t  struct rt_mutex_waiter *waiter)\n{\n\tbool is_top_waiter = (waiter == rt_mutex_top_waiter(lock));\n\tstruct task_struct *owner = rt_mutex_owner(lock);\n\tstruct rt_mutex *next_lock;\n\tunsigned long flags;\n\n\traw_spin_lock_irqsave(&current->pi_lock, flags);\n\trt_mutex_dequeue(lock, waiter);\n\tcurrent->pi_blocked_on = NULL;\n\traw_spin_unlock_irqrestore(&current->pi_lock, flags);\n\n\t\n\tif (!owner || !is_top_waiter)\n\t\treturn;\n\n\traw_spin_lock_irqsave(&owner->pi_lock, flags);\n\n\trt_mutex_dequeue_pi(owner, waiter);\n\n\tif (rt_mutex_has_waiters(lock))\n\t\trt_mutex_enqueue_pi(owner, rt_mutex_top_waiter(lock));\n\n\t__rt_mutex_adjust_prio(owner);\n\n\t\n\tnext_lock = task_blocked_on_lock(owner);\n\n\traw_spin_unlock_irqrestore(&owner->pi_lock, flags);\n\n\t\n\tif (!next_lock)\n\t\treturn;\n\n\t\n\tget_task_struct(owner);\n\n\traw_spin_unlock(&lock->wait_lock);\n\n\trt_mutex_adjust_prio_chain(owner, RT_MUTEX_MIN_CHAINWALK, lock,\n\t\t\t\t   next_lock, NULL, current);\n\n\traw_spin_lock(&lock->wait_lock);\n}\n\n\nvoid rt_mutex_adjust_pi(struct task_struct *task)\n{\n\tstruct rt_mutex_waiter *waiter;\n\tstruct rt_mutex *next_lock;\n\tunsigned long flags;\n\n\traw_spin_lock_irqsave(&task->pi_lock, flags);\n\n\twaiter = task->pi_blocked_on;\n\tif (!waiter || (waiter->prio == task->prio &&\n\t\t\t!dl_prio(task->prio))) {\n\t\traw_spin_unlock_irqrestore(&task->pi_lock, flags);\n\t\treturn;\n\t}\n\tnext_lock = waiter->lock;\n\traw_spin_unlock_irqrestore(&task->pi_lock, flags);\n\n\t\n\tget_task_struct(task);\n\n\trt_mutex_adjust_prio_chain(task, RT_MUTEX_MIN_CHAINWALK, NULL,\n\t\t\t\t   next_lock, NULL, task);\n}\n\n\nstatic int __sched\n__rt_mutex_slowlock(struct rt_mutex *lock, int state,\n\t\t    struct hrtimer_sleeper *timeout,\n\t\t    struct rt_mutex_waiter *waiter)\n{\n\tint ret = 0;\n\n\tfor (;;) {\n\t\t\n\t\tif (try_to_take_rt_mutex(lock, current, waiter))\n\t\t\tbreak;\n\n\t\t\n\t\tif (unlikely(state == TASK_INTERRUPTIBLE)) {\n\t\t\t\n\t\t\tif (signal_pending(current))\n\t\t\t\tret = -EINTR;\n\t\t\tif (timeout && !timeout->task)\n\t\t\t\tret = -ETIMEDOUT;\n\t\t\tif (ret)\n\t\t\t\tbreak;\n\t\t}\n\n\t\traw_spin_unlock(&lock->wait_lock);\n\n\t\tdebug_rt_mutex_print_deadlock(waiter);\n\n\t\tschedule_rt_mutex(lock);\n\n\t\traw_spin_lock(&lock->wait_lock);\n\t\tset_current_state(state);\n\t}\n\n\t__set_current_state(TASK_RUNNING);\n\treturn ret;\n}\n\nstatic void rt_mutex_handle_deadlock(int res, int detect_deadlock,\n\t\t\t\t     struct rt_mutex_waiter *w)\n{\n\t\n\tif (res != -EDEADLOCK || detect_deadlock)\n\t\treturn;\n\n\t\n\trt_mutex_print_deadlock(w);\n\twhile (1) {\n\t\tset_current_state(TASK_INTERRUPTIBLE);\n\t\tschedule();\n\t}\n}\n\n\nstatic int __sched\nrt_mutex_slowlock(struct rt_mutex *lock, int state,\n\t\t  struct hrtimer_sleeper *timeout,\n\t\t  enum rtmutex_chainwalk chwalk)\n{\n\tstruct rt_mutex_waiter waiter;\n\tint ret = 0;\n\n\tdebug_rt_mutex_init_waiter(&waiter);\n\tRB_CLEAR_NODE(&waiter.pi_tree_entry);\n\tRB_CLEAR_NODE(&waiter.tree_entry);\n\n\traw_spin_lock(&lock->wait_lock);\n\n\t\n\tif (try_to_take_rt_mutex(lock, current, NULL)) {\n\t\traw_spin_unlock(&lock->wait_lock);\n\t\treturn 0;\n\t}\n\n\tset_current_state(state);\n\n\t\n\tif (unlikely(timeout)) {\n\t\thrtimer_start_expires(&timeout->timer, HRTIMER_MODE_ABS);\n\t\tif (!hrtimer_active(&timeout->timer))\n\t\t\ttimeout->task = NULL;\n\t}\n\n\tret = task_blocks_on_rt_mutex(lock, &waiter, current, chwalk);\n\n\tif (likely(!ret))\n\t\t\n\t\tret = __rt_mutex_slowlock(lock, state, timeout, &waiter);\n\n\tif (unlikely(ret)) {\n\t\t__set_current_state(TASK_RUNNING);\n\t\tif (rt_mutex_has_waiters(lock))\n\t\t\tremove_waiter(lock, &waiter);\n\t\trt_mutex_handle_deadlock(ret, chwalk, &waiter);\n\t}\n\n\t\n\tfixup_rt_mutex_waiters(lock);\n\n\traw_spin_unlock(&lock->wait_lock);\n\n\t\n\tif (unlikely(timeout))\n\t\thrtimer_cancel(&timeout->timer);\n\n\tdebug_rt_mutex_free_waiter(&waiter);\n\n\treturn ret;\n}\n\n\nstatic inline int rt_mutex_slowtrylock(struct rt_mutex *lock)\n{\n\tint ret;\n\n\t\n\tif (rt_mutex_owner(lock))\n\t\treturn 0;\n\n\t\n\traw_spin_lock(&lock->wait_lock);\n\n\tret = try_to_take_rt_mutex(lock, current, NULL);\n\n\t\n\tfixup_rt_mutex_waiters(lock);\n\n\traw_spin_unlock(&lock->wait_lock);\n\n\treturn ret;\n}\n\n\nstatic void __sched\nrt_mutex_slowunlock(struct rt_mutex *lock)\n{\n\traw_spin_lock(&lock->wait_lock);\n\n\tdebug_rt_mutex_unlock(lock);\n\n\trt_mutex_deadlock_account_unlock(current);\n\n\t\n\twhile (!rt_mutex_has_waiters(lock)) {\n\t\t\n\t\tif (unlock_rt_mutex_safe(lock) == true)\n\t\t\treturn;\n\t\t\n\t\traw_spin_lock(&lock->wait_lock);\n\t}\n\n\t\n\twakeup_next_waiter(lock);\n\n\traw_spin_unlock(&lock->wait_lock);\n\n\t\n\trt_mutex_adjust_prio(current);\n}\n\n\nstatic inline int\nrt_mutex_fastlock(struct rt_mutex *lock, int state,\n\t\t  int (*slowfn)(struct rt_mutex *lock, int state,\n\t\t\t\tstruct hrtimer_sleeper *timeout,\n\t\t\t\tenum rtmutex_chainwalk chwalk))\n{\n\tif (likely(rt_mutex_cmpxchg(lock, NULL, current))) {\n\t\trt_mutex_deadlock_account_lock(lock, current);\n\t\treturn 0;\n\t} else\n\t\treturn slowfn(lock, state, NULL, RT_MUTEX_MIN_CHAINWALK);\n}\n\nstatic inline int\nrt_mutex_timed_fastlock(struct rt_mutex *lock, int state,\n\t\t\tstruct hrtimer_sleeper *timeout,\n\t\t\tenum rtmutex_chainwalk chwalk,\n\t\t\tint (*slowfn)(struct rt_mutex *lock, int state,\n\t\t\t\t      struct hrtimer_sleeper *timeout,\n\t\t\t\t      enum rtmutex_chainwalk chwalk))\n{\n\tif (chwalk == RT_MUTEX_MIN_CHAINWALK &&\n\t    likely(rt_mutex_cmpxchg(lock, NULL, current))) {\n\t\trt_mutex_deadlock_account_lock(lock, current);\n\t\treturn 0;\n\t} else\n\t\treturn slowfn(lock, state, timeout, chwalk);\n}\n\nstatic inline int\nrt_mutex_fasttrylock(struct rt_mutex *lock,\n\t\t     int (*slowfn)(struct rt_mutex *lock))\n{\n\tif (likely(rt_mutex_cmpxchg(lock, NULL, current))) {\n\t\trt_mutex_deadlock_account_lock(lock, current);\n\t\treturn 1;\n\t}\n\treturn slowfn(lock);\n}\n\nstatic inline void\nrt_mutex_fastunlock(struct rt_mutex *lock,\n\t\t    void (*slowfn)(struct rt_mutex *lock))\n{\n\tif (likely(rt_mutex_cmpxchg(lock, current, NULL)))\n\t\trt_mutex_deadlock_account_unlock(current);\n\telse\n\t\tslowfn(lock);\n}\n\n\nvoid __sched rt_mutex_lock(struct rt_mutex *lock)\n{\n\tmight_sleep();\n\n\trt_mutex_fastlock(lock, TASK_UNINTERRUPTIBLE, rt_mutex_slowlock);\n}\nEXPORT_SYMBOL_GPL(rt_mutex_lock);\n\n\nint __sched rt_mutex_lock_interruptible(struct rt_mutex *lock)\n{\n\tmight_sleep();\n\n\treturn rt_mutex_fastlock(lock, TASK_INTERRUPTIBLE, rt_mutex_slowlock);\n}\nEXPORT_SYMBOL_GPL(rt_mutex_lock_interruptible);\n\n\nint rt_mutex_timed_futex_lock(struct rt_mutex *lock,\n\t\t\t      struct hrtimer_sleeper *timeout)\n{\n\tmight_sleep();\n\n\treturn rt_mutex_timed_fastlock(lock, TASK_INTERRUPTIBLE, timeout,\n\t\t\t\t       RT_MUTEX_FULL_CHAINWALK,\n\t\t\t\t       rt_mutex_slowlock);\n}\n\n\nint\nrt_mutex_timed_lock(struct rt_mutex *lock, struct hrtimer_sleeper *timeout)\n{\n\tmight_sleep();\n\n\treturn rt_mutex_timed_fastlock(lock, TASK_INTERRUPTIBLE, timeout,\n\t\t\t\t       RT_MUTEX_MIN_CHAINWALK,\n\t\t\t\t       rt_mutex_slowlock);\n}\nEXPORT_SYMBOL_GPL(rt_mutex_timed_lock);\n\n\nint __sched rt_mutex_trylock(struct rt_mutex *lock)\n{\n\treturn rt_mutex_fasttrylock(lock, rt_mutex_slowtrylock);\n}\nEXPORT_SYMBOL_GPL(rt_mutex_trylock);\n\n\nvoid __sched rt_mutex_unlock(struct rt_mutex *lock)\n{\n\trt_mutex_fastunlock(lock, rt_mutex_slowunlock);\n}\nEXPORT_SYMBOL_GPL(rt_mutex_unlock);\n\n\nvoid rt_mutex_destroy(struct rt_mutex *lock)\n{\n\tWARN_ON(rt_mutex_is_locked(lock));\n#ifdef CONFIG_DEBUG_RT_MUTEXES\n\tlock->magic = NULL;\n#endif\n}\n\nEXPORT_SYMBOL_GPL(rt_mutex_destroy);\n\n\nvoid __rt_mutex_init(struct rt_mutex *lock, const char *name)\n{\n\tlock->owner = NULL;\n\traw_spin_lock_init(&lock->wait_lock);\n\tlock->waiters = RB_ROOT;\n\tlock->waiters_leftmost = NULL;\n\n\tdebug_rt_mutex_init(lock, name);\n}\nEXPORT_SYMBOL_GPL(__rt_mutex_init);\n\n\nvoid rt_mutex_init_proxy_locked(struct rt_mutex *lock,\n\t\t\t\tstruct task_struct *proxy_owner)\n{\n\t__rt_mutex_init(lock, NULL);\n\tdebug_rt_mutex_proxy_lock(lock, proxy_owner);\n\trt_mutex_set_owner(lock, proxy_owner);\n\trt_mutex_deadlock_account_lock(lock, proxy_owner);\n}\n\n\nvoid rt_mutex_proxy_unlock(struct rt_mutex *lock,\n\t\t\t   struct task_struct *proxy_owner)\n{\n\tdebug_rt_mutex_proxy_unlock(lock);\n\trt_mutex_set_owner(lock, NULL);\n\trt_mutex_deadlock_account_unlock(proxy_owner);\n}\n\n\nint rt_mutex_start_proxy_lock(struct rt_mutex *lock,\n\t\t\t      struct rt_mutex_waiter *waiter,\n\t\t\t      struct task_struct *task)\n{\n\tint ret;\n\n\traw_spin_lock(&lock->wait_lock);\n\n\tif (try_to_take_rt_mutex(lock, task, NULL)) {\n\t\traw_spin_unlock(&lock->wait_lock);\n\t\treturn 1;\n\t}\n\n\t\n\tret = task_blocks_on_rt_mutex(lock, waiter, task,\n\t\t\t\t      RT_MUTEX_FULL_CHAINWALK);\n\n\tif (ret && !rt_mutex_owner(lock)) {\n\t\t\n\t\tret = 0;\n\t}\n\n\tif (unlikely(ret))\n\t\tremove_waiter(lock, waiter);\n\n\traw_spin_unlock(&lock->wait_lock);\n\n\tdebug_rt_mutex_print_deadlock(waiter);\n\n\treturn ret;\n}\n\n\nstruct task_struct *rt_mutex_next_owner(struct rt_mutex *lock)\n{\n\tif (!rt_mutex_has_waiters(lock))\n\t\treturn NULL;\n\n\treturn rt_mutex_top_waiter(lock)->task;\n}\n\n\nint rt_mutex_finish_proxy_lock(struct rt_mutex *lock,\n\t\t\t       struct hrtimer_sleeper *to,\n\t\t\t       struct rt_mutex_waiter *waiter)\n{\n\tint ret;\n\n\traw_spin_lock(&lock->wait_lock);\n\n\tset_current_state(TASK_INTERRUPTIBLE);\n\n\t\n\tret = __rt_mutex_slowlock(lock, TASK_INTERRUPTIBLE, to, waiter);\n\n\tif (unlikely(ret))\n\t\tremove_waiter(lock, waiter);\n\n\t\n\tfixup_rt_mutex_waiters(lock);\n\n\traw_spin_unlock(&lock->wait_lock);\n\n\treturn ret;\n}\n\n#include <linux/clocksource.h>\n#include <linux/init.h>\n#include <linux/jiffies.h>\n#include <linux/ktime.h>\n#include <linux/kernel.h>\n#include <linux/moduleparam.h>\n#include <linux/sched.h>\n#include <linux/syscore_ops.h>\n#include <linux/hrtimer.h>\n#include <linux/sched_clock.h>\n#include <linux/seqlock.h>\n#include <linux/bitops.h>\n\n\nstruct clock_read_data {\n\tu64 epoch_ns;\n\tu64 epoch_cyc;\n\tu64 sched_clock_mask;\n\tu64 (*read_sched_clock)(void);\n\tu32 mult;\n\tu32 shift;\n};\n\n\nstruct clock_data {\n\tseqcount_t\t\tseq;\n\tstruct clock_read_data\tread_data[2];\n\tktime_t\t\t\twrap_kt;\n\tunsigned long\t\trate;\n\n\tu64 (*actual_read_sched_clock)(void);\n};\n\nstatic struct hrtimer sched_clock_timer;\nstatic int irqtime = -1;\n\ncore_param(irqtime, irqtime, int, 0400);\n\nstatic u64 notrace jiffy_sched_clock_read(void)\n{\n\t\n\treturn (u64)(jiffies - INITIAL_JIFFIES);\n}\n\nstatic struct clock_data cd ____cacheline_aligned = {\n\t.read_data[0] = { .mult = NSEC_PER_SEC / HZ,\n\t\t\t  .read_sched_clock = jiffy_sched_clock_read, },\n\t.actual_read_sched_clock = jiffy_sched_clock_read,\n};\n\nstatic inline u64 notrace cyc_to_ns(u64 cyc, u32 mult, u32 shift)\n{\n\treturn (cyc * mult) >> shift;\n}\n\nunsigned long long notrace sched_clock(void)\n{\n\tu64 cyc, res;\n\tunsigned long seq;\n\tstruct clock_read_data *rd;\n\n\tdo {\n\t\tseq = raw_read_seqcount(&cd.seq);\n\t\trd = cd.read_data + (seq & 1);\n\n\t\tcyc = (rd->read_sched_clock() - rd->epoch_cyc) &\n\t\t      rd->sched_clock_mask;\n\t\tres = rd->epoch_ns + cyc_to_ns(cyc, rd->mult, rd->shift);\n\t} while (read_seqcount_retry(&cd.seq, seq));\n\n\treturn res;\n}\n\n\nstatic void update_clock_read_data(struct clock_read_data *rd)\n{\n\t\n\tcd.read_data[1] = *rd;\n\n\t\n\traw_write_seqcount_latch(&cd.seq);\n\n\t\n\tcd.read_data[0] = *rd;\n\n\t\n\traw_write_seqcount_latch(&cd.seq);\n}\n\n\nstatic void update_sched_clock(void)\n{\n\tu64 cyc;\n\tu64 ns;\n\tstruct clock_read_data rd;\n\n\trd = cd.read_data[0];\n\n\tcyc = cd.actual_read_sched_clock();\n\tns = rd.epoch_ns + cyc_to_ns((cyc - rd.epoch_cyc) & rd.sched_clock_mask, rd.mult, rd.shift);\n\n\trd.epoch_ns = ns;\n\trd.epoch_cyc = cyc;\n\n\tupdate_clock_read_data(&rd);\n}\n\nstatic enum hrtimer_restart sched_clock_poll(struct hrtimer *hrt)\n{\n\tupdate_sched_clock();\n\thrtimer_forward_now(hrt, cd.wrap_kt);\n\n\treturn HRTIMER_RESTART;\n}\n\nvoid __init\nsched_clock_register(u64 (*read)(void), int bits, unsigned long rate)\n{\n\tu64 res, wrap, new_mask, new_epoch, cyc, ns;\n\tu32 new_mult, new_shift;\n\tunsigned long r;\n\tchar r_unit;\n\tstruct clock_read_data rd;\n\n\tif (cd.rate > rate)\n\t\treturn;\n\n\tWARN_ON(!irqs_disabled());\n\n\t\n\tclocks_calc_mult_shift(&new_mult, &new_shift, rate, NSEC_PER_SEC, 3600);\n\n\tnew_mask = CLOCKSOURCE_MASK(bits);\n\tcd.rate = rate;\n\n\t\n\twrap = clocks_calc_max_nsecs(new_mult, new_shift, 0, new_mask, NULL);\n\tcd.wrap_kt = ns_to_ktime(wrap);\n\n\trd = cd.read_data[0];\n\n\t\n\tnew_epoch = read();\n\tcyc = cd.actual_read_sched_clock();\n\tns = rd.epoch_ns + cyc_to_ns((cyc - rd.epoch_cyc) & rd.sched_clock_mask, rd.mult, rd.shift);\n\tcd.actual_read_sched_clock = read;\n\n\trd.read_sched_clock\t= read;\n\trd.sched_clock_mask\t= new_mask;\n\trd.mult\t\t\t= new_mult;\n\trd.shift\t\t= new_shift;\n\trd.epoch_cyc\t\t= new_epoch;\n\trd.epoch_ns\t\t= ns;\n\n\tupdate_clock_read_data(&rd);\n\n\tr = rate;\n\tif (r >= 4000000) {\n\t\tr /= 1000000;\n\t\tr_unit = 'M';\n\t} else {\n\t\tif (r >= 1000) {\n\t\t\tr /= 1000;\n\t\t\tr_unit = 'k';\n\t\t} else {\n\t\t\tr_unit = ' ';\n\t\t}\n\t}\n\n\t\n\tres = cyc_to_ns(1ULL, new_mult, new_shift);\n\n\tpr_info(\"", "1185": "\", moreprompt);\n\n\t\tkdb_read(buf1, 2); \n\t\tkdb_nextline = 1;\t\n\n\t\t\n\t\tkdb_buffer[0] = '\\0';\n\t\tnext_avail = kdb_buffer;\n\t\tsize_avail = sizeof(kdb_buffer);\n\t\tif ((buf1[0] == 'q') || (buf1[0] == 'Q')) {\n\t\t\t\n\t\t\tKDB_FLAG_SET(CMD_INTERRUPT); \n\t\t\tKDB_STATE_CLEAR(PAGER);\n\t\t\t\n\t\t\tkdb_grepping_flag = 0;\n\t\t\tkdb_printf(\"", "1186": "\", name);\n\n\treturn ret;\n}\n\n\nstatic struct dentry *trace_options_init_dentry(struct trace_array *tr)\n{\n\tstruct dentry *d_tracer;\n\n\tif (tr->options)\n\t\treturn tr->options;\n\n\td_tracer = tracing_get_dentry(tr);\n\tif (IS_ERR(d_tracer))\n\t\treturn NULL;\n\n\ttr->options = tracefs_create_dir(\"", "1187": "\", num_online_cpus());\n#else\n\tseq_puts(m, \"", "1188": "\", p_tmp);\n\t\t\t\t*(p_tmp + len) = '\\0';\n\t\t\t}\n\t\t\tif (i >= dtab_count)\n\t\t\t\tkdb_printf(\"", "1189": "\", per_cpu_ptr(tr->trace_buffer.data, cpu)->entries >> 10);\n\n\tmutex_unlock(&trace_types_lock);\n\n\tret = simple_read_from_buffer(ubuf, cnt, ppos, buf, r);\n\treturn ret;\n}\n\nstatic ssize_t\ntracing_entries_write(struct file *filp, const char __user *ubuf,\n\t\t      size_t cnt, loff_t *ppos)\n{\n\tstruct inode *inode = file_inode(filp);\n\tstruct trace_array *tr = inode->i_private;\n\tunsigned long val;\n\tint ret;\n\n\tret = kstrtoul_from_user(ubuf, cnt, 10, &val);\n\tif (ret)\n\t\treturn ret;\n\n\t\n\tif (!val)\n\t\treturn -EINVAL;\n\n\t\n\tval <<= 10;\n\tret = tracing_resize_ring_buffer(tr, val, tracing_get_cpu(inode));\n\tif (ret < 0)\n\t\treturn ret;\n\n\t*ppos += cnt;\n\n\treturn cnt;\n}\n\nstatic ssize_t\ntracing_total_entries_read(struct file *filp, char __user *ubuf,\n\t\t\t\tsize_t cnt, loff_t *ppos)\n{\n\tstruct trace_array *tr = filp->private_data;\n\tchar buf[64];\n\tint r, cpu;\n\tunsigned long size = 0, expanded_size = 0;\n\n\tmutex_lock(&trace_types_lock);\n\tfor_each_tracing_cpu(cpu) {\n\t\tsize += per_cpu_ptr(tr->trace_buffer.data, cpu)->entries >> 10;\n\t\tif (!ring_buffer_expanded)\n\t\t\texpanded_size += trace_buf_size >> 10;\n\t}\n\tif (ring_buffer_expanded)\n\t\tr = sprintf(buf, \"", "1190": "\", period.tv_sec, ms);\n\tif (atomic_read(&overflow_count))\n\t\tseq_printf(m, \"", "1191": "\", pm_states[state]);\n\terror = suspend_prepare(state);\n\tif (error)\n\t\tgoto Unlock;\n\n\tif (suspend_test(TEST_FREEZER))\n\t\tgoto Finish;\n\n\ttrace_suspend_resume(TPS(\"", "1192": "\", pm_states[state]);\n\tpm_restrict_gfp_mask();\n\terror = suspend_devices_and_enter(state);\n\tpm_restore_gfp_mask();\n\n Finish:\n\tpr_debug(\"", "1193": "\", pmu->hrtimer_interval_ms);\n}\n\nstatic ssize_t\nperf_event_mux_interval_ms_store(struct device *dev,\n\t\t\t\t struct device_attribute *attr,\n\t\t\t\t const char *buf, size_t count)\n{\n\tstruct pmu *pmu = dev_get_drvdata(dev);\n\tint timer, cpu, ret;\n\n\tret = kstrtoint(buf, 0, &timer);\n\tif (ret)\n\t\treturn ret;\n\n\tif (timer < 1)\n\t\treturn -EINVAL;\n\n\t\n\tif (timer == pmu->hrtimer_interval_ms)\n\t\treturn count;\n\n\tpmu->hrtimer_interval_ms = timer;\n\n\t\n\tfor_each_possible_cpu(cpu) {\n\t\tstruct perf_cpu_context *cpuctx;\n\t\tcpuctx = per_cpu_ptr(pmu->pmu_cpu_context, cpu);\n\t\tcpuctx->hrtimer_interval = ns_to_ktime(NSEC_PER_MSEC * timer);\n\n\t\tif (hrtimer_active(&cpuctx->hrtimer))\n\t\t\thrtimer_forward_now(&cpuctx->hrtimer, cpuctx->hrtimer_interval);\n\t}\n\n\treturn count;\n}\nstatic DEVICE_ATTR_RW(perf_event_mux_interval_ms);\n\nstatic struct attribute *pmu_dev_attrs[] = {\n\t&dev_attr_type.attr,\n\t&dev_attr_perf_event_mux_interval_ms.attr,\n\tNULL,\n};\nATTRIBUTE_GROUPS(pmu_dev);\n\nstatic int pmu_bus_running;\nstatic struct bus_type pmu_bus = {\n\t.name\t\t= \"", "1194": "\", pmu->name);\n\tif (ret)\n\t\tgoto free_dev;\n\n\tdev_set_drvdata(pmu->dev, pmu);\n\tpmu->dev->bus = &pmu_bus;\n\tpmu->dev->release = pmu_dev_release;\n\tret = device_add(pmu->dev);\n\tif (ret)\n\t\tgoto free_dev;\n\nout:\n\treturn ret;\n\nfree_dev:\n\tput_device(pmu->dev);\n\tgoto out;\n}\n\nstatic struct lock_class_key cpuctx_mutex;\nstatic struct lock_class_key cpuctx_lock;\n\nint perf_pmu_register(struct pmu *pmu, const char *name, int type)\n{\n\tint cpu, ret;\n\n\tmutex_lock(&pmus_lock);\n\tret = -ENOMEM;\n\tpmu->pmu_disable_count = alloc_percpu(int);\n\tif (!pmu->pmu_disable_count)\n\t\tgoto unlock;\n\n\tpmu->type = -1;\n\tif (!name)\n\t\tgoto skip_type;\n\tpmu->name = name;\n\n\tif (type < 0) {\n\t\ttype = idr_alloc(&pmu_idr, pmu, PERF_TYPE_MAX, 0, GFP_KERNEL);\n\t\tif (type < 0) {\n\t\t\tret = type;\n\t\t\tgoto free_pdc;\n\t\t}\n\t}\n\tpmu->type = type;\n\n\tif (pmu_bus_running) {\n\t\tret = pmu_dev_alloc(pmu);\n\t\tif (ret)\n\t\t\tgoto free_idr;\n\t}\n\nskip_type:\n\tpmu->pmu_cpu_context = find_pmu_context(pmu->task_ctx_nr);\n\tif (pmu->pmu_cpu_context)\n\t\tgoto got_cpu_context;\n\n\tret = -ENOMEM;\n\tpmu->pmu_cpu_context = alloc_percpu(struct perf_cpu_context);\n\tif (!pmu->pmu_cpu_context)\n\t\tgoto free_dev;\n\n\tfor_each_possible_cpu(cpu) {\n\t\tstruct perf_cpu_context *cpuctx;\n\n\t\tcpuctx = per_cpu_ptr(pmu->pmu_cpu_context, cpu);\n\t\t__perf_event_init_context(&cpuctx->ctx);\n\t\tlockdep_set_class(&cpuctx->ctx.mutex, &cpuctx_mutex);\n\t\tlockdep_set_class(&cpuctx->ctx.lock, &cpuctx_lock);\n\t\tcpuctx->ctx.pmu = pmu;\n\n\t\t__perf_cpu_hrtimer_init(cpuctx, cpu);\n\n\t\tcpuctx->unique_pmu = pmu;\n\t}\n\ngot_cpu_context:\n\tif (!pmu->start_txn) {\n\t\tif (pmu->pmu_enable) {\n\t\t\t\n\t\t\tpmu->start_txn  = perf_pmu_start_txn;\n\t\t\tpmu->commit_txn = perf_pmu_commit_txn;\n\t\t\tpmu->cancel_txn = perf_pmu_cancel_txn;\n\t\t} else {\n\t\t\tpmu->start_txn  = perf_pmu_nop_void;\n\t\t\tpmu->commit_txn = perf_pmu_nop_int;\n\t\t\tpmu->cancel_txn = perf_pmu_nop_void;\n\t\t}\n\t}\n\n\tif (!pmu->pmu_enable) {\n\t\tpmu->pmu_enable  = perf_pmu_nop_void;\n\t\tpmu->pmu_disable = perf_pmu_nop_void;\n\t}\n\n\tif (!pmu->event_idx)\n\t\tpmu->event_idx = perf_event_idx_default;\n\n\tlist_add_rcu(&pmu->entry, &pmus);\n\tatomic_set(&pmu->exclusive_cnt, 0);\n\tret = 0;\nunlock:\n\tmutex_unlock(&pmus_lock);\n\n\treturn ret;\n\nfree_dev:\n\tdevice_del(pmu->dev);\n\tput_device(pmu->dev);\n\nfree_idr:\n\tif (pmu->type >= PERF_TYPE_MAX)\n\t\tidr_remove(&pmu_idr, pmu->type);\n\nfree_pdc:\n\tfree_percpu(pmu->pmu_disable_count);\n\tgoto unlock;\n}\nEXPORT_SYMBOL_GPL(perf_pmu_register);\n\nvoid perf_pmu_unregister(struct pmu *pmu)\n{\n\tmutex_lock(&pmus_lock);\n\tlist_del_rcu(&pmu->entry);\n\tmutex_unlock(&pmus_lock);\n\n\t\n\tsynchronize_srcu(&pmus_srcu);\n\tsynchronize_rcu();\n\n\tfree_percpu(pmu->pmu_disable_count);\n\tif (pmu->type >= PERF_TYPE_MAX)\n\t\tidr_remove(&pmu_idr, pmu->type);\n\tdevice_del(pmu->dev);\n\tput_device(pmu->dev);\n\tfree_pmu_context(pmu);\n}\nEXPORT_SYMBOL_GPL(perf_pmu_unregister);\n\nstatic int perf_try_init_event(struct pmu *pmu, struct perf_event *event)\n{\n\tstruct perf_event_context *ctx = NULL;\n\tint ret;\n\n\tif (!try_module_get(pmu->module))\n\t\treturn -ENODEV;\n\n\tif (event->group_leader != event) {\n\t\tctx = perf_event_ctx_lock(event->group_leader);\n\t\tBUG_ON(!ctx);\n\t}\n\n\tevent->pmu = pmu;\n\tret = pmu->event_init(event);\n\n\tif (ctx)\n\t\tperf_event_ctx_unlock(event->group_leader, ctx);\n\n\tif (ret)\n\t\tmodule_put(pmu->module);\n\n\treturn ret;\n}\n\nstruct pmu *perf_init_event(struct perf_event *event)\n{\n\tstruct pmu *pmu = NULL;\n\tint idx;\n\tint ret;\n\n\tidx = srcu_read_lock(&pmus_srcu);\n\n\trcu_read_lock();\n\tpmu = idr_find(&pmu_idr, event->attr.type);\n\trcu_read_unlock();\n\tif (pmu) {\n\t\tret = perf_try_init_event(pmu, event);\n\t\tif (ret)\n\t\t\tpmu = ERR_PTR(ret);\n\t\tgoto unlock;\n\t}\n\n\tlist_for_each_entry_rcu(pmu, &pmus, entry) {\n\t\tret = perf_try_init_event(pmu, event);\n\t\tif (!ret)\n\t\t\tgoto unlock;\n\n\t\tif (ret != -ENOENT) {\n\t\t\tpmu = ERR_PTR(ret);\n\t\t\tgoto unlock;\n\t\t}\n\t}\n\tpmu = ERR_PTR(-ENOENT);\nunlock:\n\tsrcu_read_unlock(&pmus_srcu, idx);\n\n\treturn pmu;\n}\n\nstatic void account_event_cpu(struct perf_event *event, int cpu)\n{\n\tif (event->parent)\n\t\treturn;\n\n\tif (is_cgroup_event(event))\n\t\tatomic_inc(&per_cpu(perf_cgroup_events, cpu));\n}\n\nstatic void account_event(struct perf_event *event)\n{\n\tif (event->parent)\n\t\treturn;\n\n\tif (event->attach_state & PERF_ATTACH_TASK)\n\t\tstatic_key_slow_inc(&perf_sched_events.key);\n\tif (event->attr.mmap || event->attr.mmap_data)\n\t\tatomic_inc(&nr_mmap_events);\n\tif (event->attr.comm)\n\t\tatomic_inc(&nr_comm_events);\n\tif (event->attr.task)\n\t\tatomic_inc(&nr_task_events);\n\tif (event->attr.freq) {\n\t\tif (atomic_inc_return(&nr_freq_events) == 1)\n\t\t\ttick_nohz_full_kick_all();\n\t}\n\tif (has_branch_stack(event))\n\t\tstatic_key_slow_inc(&perf_sched_events.key);\n\tif (is_cgroup_event(event))\n\t\tstatic_key_slow_inc(&perf_sched_events.key);\n\n\taccount_event_cpu(event, event->cpu);\n}\n\n\nstatic struct perf_event *\nperf_event_alloc(struct perf_event_attr *attr, int cpu,\n\t\t struct task_struct *task,\n\t\t struct perf_event *group_leader,\n\t\t struct perf_event *parent_event,\n\t\t perf_overflow_handler_t overflow_handler,\n\t\t void *context, int cgroup_fd)\n{\n\tstruct pmu *pmu;\n\tstruct perf_event *event;\n\tstruct hw_perf_event *hwc;\n\tlong err = -EINVAL;\n\n\tif ((unsigned)cpu >= nr_cpu_ids) {\n\t\tif (!task || cpu != -1)\n\t\t\treturn ERR_PTR(-EINVAL);\n\t}\n\n\tevent = kzalloc(sizeof(*event), GFP_KERNEL);\n\tif (!event)\n\t\treturn ERR_PTR(-ENOMEM);\n\n\t\n\tif (!group_leader)\n\t\tgroup_leader = event;\n\n\tmutex_init(&event->child_mutex);\n\tINIT_LIST_HEAD(&event->child_list);\n\n\tINIT_LIST_HEAD(&event->group_entry);\n\tINIT_LIST_HEAD(&event->event_entry);\n\tINIT_LIST_HEAD(&event->sibling_list);\n\tINIT_LIST_HEAD(&event->rb_entry);\n\tINIT_LIST_HEAD(&event->active_entry);\n\tINIT_HLIST_NODE(&event->hlist_entry);\n\n\n\tinit_waitqueue_head(&event->waitq);\n\tinit_irq_work(&event->pending, perf_pending_event);\n\n\tmutex_init(&event->mmap_mutex);\n\n\tatomic_long_set(&event->refcount, 1);\n\tevent->cpu\t\t= cpu;\n\tevent->attr\t\t= *attr;\n\tevent->group_leader\t= group_leader;\n\tevent->pmu\t\t= NULL;\n\tevent->oncpu\t\t= -1;\n\n\tevent->parent\t\t= parent_event;\n\n\tevent->ns\t\t= get_pid_ns(task_active_pid_ns(current));\n\tevent->id\t\t= atomic64_inc_return(&perf_event_id);\n\n\tevent->state\t\t= PERF_EVENT_STATE_INACTIVE;\n\n\tif (task) {\n\t\tevent->attach_state = PERF_ATTACH_TASK;\n\t\t\n\t\tevent->hw.target = task;\n\t}\n\n\tevent->clock = &local_clock;\n\tif (parent_event)\n\t\tevent->clock = parent_event->clock;\n\n\tif (!overflow_handler && parent_event) {\n\t\toverflow_handler = parent_event->overflow_handler;\n\t\tcontext = parent_event->overflow_handler_context;\n\t}\n\n\tevent->overflow_handler\t= overflow_handler;\n\tevent->overflow_handler_context = context;\n\n\tperf_event__state_init(event);\n\n\tpmu = NULL;\n\n\thwc = &event->hw;\n\thwc->sample_period = attr->sample_period;\n\tif (attr->freq && attr->sample_freq)\n\t\thwc->sample_period = 1;\n\thwc->last_period = hwc->sample_period;\n\n\tlocal64_set(&hwc->period_left, hwc->sample_period);\n\n\t\n\tif (attr->inherit && (attr->read_format & PERF_FORMAT_GROUP))\n\t\tgoto err_ns;\n\n\tif (!has_branch_stack(event))\n\t\tevent->attr.branch_sample_type = 0;\n\n\tif (cgroup_fd != -1) {\n\t\terr = perf_cgroup_connect(cgroup_fd, event, attr, group_leader);\n\t\tif (err)\n\t\t\tgoto err_ns;\n\t}\n\n\tpmu = perf_init_event(event);\n\tif (!pmu)\n\t\tgoto err_ns;\n\telse if (IS_ERR(pmu)) {\n\t\terr = PTR_ERR(pmu);\n\t\tgoto err_ns;\n\t}\n\n\terr = exclusive_event_init(event);\n\tif (err)\n\t\tgoto err_pmu;\n\n\tif (!event->parent) {\n\t\tif (event->attr.sample_type & PERF_SAMPLE_CALLCHAIN) {\n\t\t\terr = get_callchain_buffers();\n\t\t\tif (err)\n\t\t\t\tgoto err_per_task;\n\t\t}\n\t}\n\n\treturn event;\n\nerr_per_task:\n\texclusive_event_destroy(event);\n\nerr_pmu:\n\tif (event->destroy)\n\t\tevent->destroy(event);\n\tmodule_put(pmu->module);\nerr_ns:\n\tif (is_cgroup_event(event))\n\t\tperf_detach_cgroup(event);\n\tif (event->ns)\n\t\tput_pid_ns(event->ns);\n\tkfree(event);\n\n\treturn ERR_PTR(err);\n}\n\nstatic int perf_copy_attr(struct perf_event_attr __user *uattr,\n\t\t\t  struct perf_event_attr *attr)\n{\n\tu32 size;\n\tint ret;\n\n\tif (!access_ok(VERIFY_WRITE, uattr, PERF_ATTR_SIZE_VER0))\n\t\treturn -EFAULT;\n\n\t\n\tmemset(attr, 0, sizeof(*attr));\n\n\tret = get_user(size, &uattr->size);\n\tif (ret)\n\t\treturn ret;\n\n\tif (size > PAGE_SIZE)\t\n\t\tgoto err_size;\n\n\tif (!size)\t\t\n\t\tsize = PERF_ATTR_SIZE_VER0;\n\n\tif (size < PERF_ATTR_SIZE_VER0)\n\t\tgoto err_size;\n\n\t\n\tif (size > sizeof(*attr)) {\n\t\tunsigned char __user *addr;\n\t\tunsigned char __user *end;\n\t\tunsigned char val;\n\n\t\taddr = (void __user *)uattr + sizeof(*attr);\n\t\tend  = (void __user *)uattr + size;\n\n\t\tfor (; addr < end; addr++) {\n\t\t\tret = get_user(val, addr);\n\t\t\tif (ret)\n\t\t\t\treturn ret;\n\t\t\tif (val)\n\t\t\t\tgoto err_size;\n\t\t}\n\t\tsize = sizeof(*attr);\n\t}\n\n\tret = copy_from_user(attr, uattr, size);\n\tif (ret)\n\t\treturn -EFAULT;\n\n\tif (attr->__reserved_1)\n\t\treturn -EINVAL;\n\n\tif (attr->sample_type & ~(PERF_SAMPLE_MAX-1))\n\t\treturn -EINVAL;\n\n\tif (attr->read_format & ~(PERF_FORMAT_MAX-1))\n\t\treturn -EINVAL;\n\n\tif (attr->sample_type & PERF_SAMPLE_BRANCH_STACK) {\n\t\tu64 mask = attr->branch_sample_type;\n\n\t\t\n\t\tif (mask & ~(PERF_SAMPLE_BRANCH_MAX-1))\n\t\t\treturn -EINVAL;\n\n\t\t\n\t\tif (!(mask & ~PERF_SAMPLE_BRANCH_PLM_ALL))\n\t\t\treturn -EINVAL;\n\n\t\t\n\t\tif (!(mask & PERF_SAMPLE_BRANCH_PLM_ALL)) {\n\n\t\t\t\n\t\t\tif (!attr->exclude_kernel)\n\t\t\t\tmask |= PERF_SAMPLE_BRANCH_KERNEL;\n\n\t\t\tif (!attr->exclude_user)\n\t\t\t\tmask |= PERF_SAMPLE_BRANCH_USER;\n\n\t\t\tif (!attr->exclude_hv)\n\t\t\t\tmask |= PERF_SAMPLE_BRANCH_HV;\n\t\t\t\n\t\t\tattr->branch_sample_type = mask;\n\t\t}\n\t\t\n\t\tif ((mask & PERF_SAMPLE_BRANCH_PERM_PLM)\n\t\t    && perf_paranoid_kernel() && !capable(CAP_SYS_ADMIN))\n\t\t\treturn -EACCES;\n\t}\n\n\tif (attr->sample_type & PERF_SAMPLE_REGS_USER) {\n\t\tret = perf_reg_validate(attr->sample_regs_user);\n\t\tif (ret)\n\t\t\treturn ret;\n\t}\n\n\tif (attr->sample_type & PERF_SAMPLE_STACK_USER) {\n\t\tif (!arch_perf_have_user_stack_dump())\n\t\t\treturn -ENOSYS;\n\n\t\t\n\t\tif (attr->sample_stack_user >= USHRT_MAX)\n\t\t\tret = -EINVAL;\n\t\telse if (!IS_ALIGNED(attr->sample_stack_user, sizeof(u64)))\n\t\t\tret = -EINVAL;\n\t}\n\n\tif (attr->sample_type & PERF_SAMPLE_REGS_INTR)\n\t\tret = perf_reg_validate(attr->sample_regs_intr);\nout:\n\treturn ret;\n\nerr_size:\n\tput_user(sizeof(*attr), &uattr->size);\n\tret = -E2BIG;\n\tgoto out;\n}\n\nstatic int\nperf_event_set_output(struct perf_event *event, struct perf_event *output_event)\n{\n\tstruct ring_buffer *rb = NULL;\n\tint ret = -EINVAL;\n\n\tif (!output_event)\n\t\tgoto set;\n\n\t\n\tif (event == output_event)\n\t\tgoto out;\n\n\t\n\tif (output_event->cpu != event->cpu)\n\t\tgoto out;\n\n\t\n\tif (output_event->cpu == -1 && output_event->ctx != event->ctx)\n\t\tgoto out;\n\n\t\n\tif (output_event->clock != event->clock)\n\t\tgoto out;\n\n\t\n\tif (has_aux(event) && has_aux(output_event) &&\n\t    event->pmu != output_event->pmu)\n\t\tgoto out;\n\nset:\n\tmutex_lock(&event->mmap_mutex);\n\t\n\tif (atomic_read(&event->mmap_count))\n\t\tgoto unlock;\n\n\tif (output_event) {\n\t\t\n\t\trb = ring_buffer_get(output_event);\n\t\tif (!rb)\n\t\t\tgoto unlock;\n\t}\n\n\tring_buffer_attach(event, rb);\n\n\tret = 0;\nunlock:\n\tmutex_unlock(&event->mmap_mutex);\n\nout:\n\treturn ret;\n}\n\nstatic void mutex_lock_double(struct mutex *a, struct mutex *b)\n{\n\tif (b < a)\n\t\tswap(a, b);\n\n\tmutex_lock(a);\n\tmutex_lock_nested(b, SINGLE_DEPTH_NESTING);\n}\n\nstatic int perf_event_set_clock(struct perf_event *event, clockid_t clk_id)\n{\n\tbool nmi_safe = false;\n\n\tswitch (clk_id) {\n\tcase CLOCK_MONOTONIC:\n\t\tevent->clock = &ktime_get_mono_fast_ns;\n\t\tnmi_safe = true;\n\t\tbreak;\n\n\tcase CLOCK_MONOTONIC_RAW:\n\t\tevent->clock = &ktime_get_raw_fast_ns;\n\t\tnmi_safe = true;\n\t\tbreak;\n\n\tcase CLOCK_REALTIME:\n\t\tevent->clock = &ktime_get_real_ns;\n\t\tbreak;\n\n\tcase CLOCK_BOOTTIME:\n\t\tevent->clock = &ktime_get_boot_ns;\n\t\tbreak;\n\n\tcase CLOCK_TAI:\n\t\tevent->clock = &ktime_get_tai_ns;\n\t\tbreak;\n\n\tdefault:\n\t\treturn -EINVAL;\n\t}\n\n\tif (!nmi_safe && !(event->pmu->capabilities & PERF_PMU_CAP_NO_NMI))\n\t\treturn -EINVAL;\n\n\treturn 0;\n}\n\n\nSYSCALL_DEFINE5(perf_event_open,\n\t\tstruct perf_event_attr __user *, attr_uptr,\n\t\tpid_t, pid, int, cpu, int, group_fd, unsigned long, flags)\n{\n\tstruct perf_event *group_leader = NULL, *output_event = NULL;\n\tstruct perf_event *event, *sibling;\n\tstruct perf_event_attr attr;\n\tstruct perf_event_context *ctx, *uninitialized_var(gctx);\n\tstruct file *event_file = NULL;\n\tstruct fd group = {NULL, 0};\n\tstruct task_struct *task = NULL;\n\tstruct pmu *pmu;\n\tint event_fd;\n\tint move_group = 0;\n\tint err;\n\tint f_flags = O_RDWR;\n\tint cgroup_fd = -1;\n\n\t\n\tif (flags & ~PERF_FLAG_ALL)\n\t\treturn -EINVAL;\n\n\terr = perf_copy_attr(attr_uptr, &attr);\n\tif (err)\n\t\treturn err;\n\n\tif (!attr.exclude_kernel) {\n\t\tif (perf_paranoid_kernel() && !capable(CAP_SYS_ADMIN))\n\t\t\treturn -EACCES;\n\t}\n\n\tif (attr.freq) {\n\t\tif (attr.sample_freq > sysctl_perf_event_sample_rate)\n\t\t\treturn -EINVAL;\n\t} else {\n\t\tif (attr.sample_period & (1ULL << 63))\n\t\t\treturn -EINVAL;\n\t}\n\n\t\n\tif ((flags & PERF_FLAG_PID_CGROUP) && (pid == -1 || cpu == -1))\n\t\treturn -EINVAL;\n\n\tif (flags & PERF_FLAG_FD_CLOEXEC)\n\t\tf_flags |= O_CLOEXEC;\n\n\tevent_fd = get_unused_fd_flags(f_flags);\n\tif (event_fd < 0)\n\t\treturn event_fd;\n\n\tif (group_fd != -1) {\n\t\terr = perf_fget_light(group_fd, &group);\n\t\tif (err)\n\t\t\tgoto err_fd;\n\t\tgroup_leader = group.file->private_data;\n\t\tif (flags & PERF_FLAG_FD_OUTPUT)\n\t\t\toutput_event = group_leader;\n\t\tif (flags & PERF_FLAG_FD_NO_GROUP)\n\t\t\tgroup_leader = NULL;\n\t}\n\n\tif (pid != -1 && !(flags & PERF_FLAG_PID_CGROUP)) {\n\t\ttask = find_lively_task_by_vpid(pid);\n\t\tif (IS_ERR(task)) {\n\t\t\terr = PTR_ERR(task);\n\t\t\tgoto err_group_fd;\n\t\t}\n\t}\n\n\tif (task && group_leader &&\n\t    group_leader->attr.inherit != attr.inherit) {\n\t\terr = -EINVAL;\n\t\tgoto err_task;\n\t}\n\n\tget_online_cpus();\n\n\tif (flags & PERF_FLAG_PID_CGROUP)\n\t\tcgroup_fd = pid;\n\n\tevent = perf_event_alloc(&attr, cpu, task, group_leader, NULL,\n\t\t\t\t NULL, NULL, cgroup_fd);\n\tif (IS_ERR(event)) {\n\t\terr = PTR_ERR(event);\n\t\tgoto err_cpus;\n\t}\n\n\tif (is_sampling_event(event)) {\n\t\tif (event->pmu->capabilities & PERF_PMU_CAP_NO_INTERRUPT) {\n\t\t\terr = -ENOTSUPP;\n\t\t\tgoto err_alloc;\n\t\t}\n\t}\n\n\taccount_event(event);\n\n\t\n\tpmu = event->pmu;\n\n\tif (attr.use_clockid) {\n\t\terr = perf_event_set_clock(event, attr.clockid);\n\t\tif (err)\n\t\t\tgoto err_alloc;\n\t}\n\n\tif (group_leader &&\n\t    (is_software_event(event) != is_software_event(group_leader))) {\n\t\tif (is_software_event(event)) {\n\t\t\t\n\t\t\tpmu = group_leader->pmu;\n\t\t} else if (is_software_event(group_leader) &&\n\t\t\t   (group_leader->group_flags & PERF_GROUP_SOFTWARE)) {\n\t\t\t\n\t\t\tmove_group = 1;\n\t\t}\n\t}\n\n\t\n\tctx = find_get_context(pmu, task, event);\n\tif (IS_ERR(ctx)) {\n\t\terr = PTR_ERR(ctx);\n\t\tgoto err_alloc;\n\t}\n\n\tif ((pmu->capabilities & PERF_PMU_CAP_EXCLUSIVE) && group_leader) {\n\t\terr = -EBUSY;\n\t\tgoto err_context;\n\t}\n\n\tif (task) {\n\t\tput_task_struct(task);\n\t\ttask = NULL;\n\t}\n\n\t\n\tif (group_leader) {\n\t\terr = -EINVAL;\n\n\t\t\n\t\tif (group_leader->group_leader != group_leader)\n\t\t\tgoto err_context;\n\n\t\t\n\t\tif (group_leader->clock != event->clock)\n\t\t\tgoto err_context;\n\n\t\t\n\t\tif (move_group) {\n\t\t\t\n\t\t\tif (group_leader->ctx->task != ctx->task)\n\t\t\t\tgoto err_context;\n\n\t\t\t\n\t\t\tif (group_leader->cpu != event->cpu)\n\t\t\t\tgoto err_context;\n\t\t} else {\n\t\t\tif (group_leader->ctx != ctx)\n\t\t\t\tgoto err_context;\n\t\t}\n\n\t\t\n\t\tif (attr.exclusive || attr.pinned)\n\t\t\tgoto err_context;\n\t}\n\n\tif (output_event) {\n\t\terr = perf_event_set_output(event, output_event);\n\t\tif (err)\n\t\t\tgoto err_context;\n\t}\n\n\tevent_file = anon_inode_getfile(\"", "1195": "\", pmu->name, ret);\n\t}\n\tpmu_bus_running = 1;\n\tret = 0;\n\nunlock:\n\tmutex_unlock(&pmus_lock);\n\n\treturn ret;\n}\ndevice_initcall(perf_event_sysfs_init);\n\n#ifdef CONFIG_CGROUP_PERF\nstatic struct cgroup_subsys_state *\nperf_cgroup_css_alloc(struct cgroup_subsys_state *parent_css)\n{\n\tstruct perf_cgroup *jc;\n\n\tjc = kzalloc(sizeof(*jc), GFP_KERNEL);\n\tif (!jc)\n\t\treturn ERR_PTR(-ENOMEM);\n\n\tjc->info = alloc_percpu(struct perf_cgroup_info);\n\tif (!jc->info) {\n\t\tkfree(jc);\n\t\treturn ERR_PTR(-ENOMEM);\n\t}\n\n\treturn &jc->css;\n}\n\nstatic void perf_cgroup_css_free(struct cgroup_subsys_state *css)\n{\n\tstruct perf_cgroup *jc = container_of(css, struct perf_cgroup, css);\n\n\tfree_percpu(jc->info);\n\tkfree(jc);\n}\n\nstatic int __perf_cgroup_move(void *info)\n{\n\tstruct task_struct *task = info;\n\tperf_cgroup_switch(task, PERF_CGROUP_SWOUT | PERF_CGROUP_SWIN);\n\treturn 0;\n}\n\nstatic void perf_cgroup_attach(struct cgroup_subsys_state *css,\n\t\t\t       struct cgroup_taskset *tset)\n{\n\tstruct task_struct *task;\n\n\tcgroup_taskset_for_each(task, tset)\n\t\ttask_function_call(task, __perf_cgroup_move, task);\n}\n\nstatic void perf_cgroup_exit(struct cgroup_subsys_state *css,\n\t\t\t     struct cgroup_subsys_state *old_css,\n\t\t\t     struct task_struct *task)\n{\n\t\n\tif (!(task->flags & PF_EXITING))\n\t\treturn;\n\n\ttask_function_call(task, __perf_cgroup_move, task);\n}\n\nstruct cgroup_subsys perf_event_cgrp_subsys = {\n\t.css_alloc\t= perf_cgroup_css_alloc,\n\t.css_free\t= perf_cgroup_css_free,\n\t.exit\t\t= perf_cgroup_exit,\n\t.attach\t\t= perf_cgroup_attach,\n};\n#endif \n\n#include <linux/slab.h>\n#include <linux/poll.h>\n#include <linux/fs.h>\n#include <linux/file.h>\n#include <linux/jhash.h>\n#include <linux/init.h>\n#include <linux/futex.h>\n#include <linux/mount.h>\n#include <linux/pagemap.h>\n#include <linux/syscalls.h>\n#include <linux/signal.h>\n#include <linux/export.h>\n#include <linux/magic.h>\n#include <linux/pid.h>\n#include <linux/nsproxy.h>\n#include <linux/ptrace.h>\n#include <linux/sched/rt.h>\n#include <linux/hugetlb.h>\n#include <linux/freezer.h>\n#include <linux/bootmem.h>\n\n#include <asm/futex.h>\n\n#include \"", "1196": "\", pmu->type);\n}\nstatic DEVICE_ATTR_RO(type);\n\nstatic ssize_t\nperf_event_mux_interval_ms_show(struct device *dev,\n\t\t\t\tstruct device_attribute *attr,\n\t\t\t\tchar *page)\n{\n\tstruct pmu *pmu = dev_get_drvdata(dev);\n\n\treturn snprintf(page, PAGE_SIZE-1, \"", "1197": "\", pmu_attr->event_str);\n\n\treturn 0;\n}\n\nstatic int __init perf_event_sysfs_init(void)\n{\n\tstruct pmu *pmu;\n\tint ret;\n\n\tmutex_lock(&pmus_lock);\n\n\tret = bus_register(&pmu_bus);\n\tif (ret)\n\t\tgoto unlock;\n\n\tlist_for_each_entry(pmu, &pmus, entry) {\n\t\tif (!pmu->name || pmu->type < 0)\n\t\t\tcontinue;\n\n\t\tret = pmu_dev_alloc(pmu);\n\t\tWARN(ret, \"", "1198": "\", prefix);\n\t\t} else {\n\t\t\tlen += 3;\n\t\t\tif (prefix > 999)\n\t\t\t\tlen += 3;\n\t\t\telse if (prefix > 99)\n\t\t\t\tlen += 2;\n\t\t\telse if (prefix > 9)\n\t\t\t\tlen++;\n\t\t}\n\t}\n\n\tlen += print_time(msg->ts_nsec, buf ? buf + len : NULL);\n\treturn len;\n}\n\nstatic size_t msg_print_text(const struct printk_log *msg, enum log_flags prev,\n\t\t\t     bool syslog, char *buf, size_t size)\n{\n\tconst char *text = log_text(msg);\n\tsize_t text_size = msg->text_len;\n\tbool prefix = true;\n\tbool newline = true;\n\tsize_t len = 0;\n\n\tif ((prev & LOG_CONT) && !(msg->flags & LOG_PREFIX))\n\t\tprefix = false;\n\n\tif (msg->flags & LOG_CONT) {\n\t\tif ((prev & LOG_CONT) && !(prev & LOG_NEWLINE))\n\t\t\tprefix = false;\n\n\t\tif (!(msg->flags & LOG_NEWLINE))\n\t\t\tnewline = false;\n\t}\n\n\tdo {\n\t\tconst char *next = memchr(text, '\\n', text_size);\n\t\tsize_t text_len;\n\n\t\tif (next) {\n\t\t\ttext_len = next - text;\n\t\t\tnext++;\n\t\t\ttext_size -= next - text;\n\t\t} else {\n\t\t\ttext_len = text_size;\n\t\t}\n\n\t\tif (buf) {\n\t\t\tif (print_prefix(msg, syslog, NULL) +\n\t\t\t    text_len + 1 >= size - len)\n\t\t\t\tbreak;\n\n\t\t\tif (prefix)\n\t\t\t\tlen += print_prefix(msg, syslog, buf + len);\n\t\t\tmemcpy(buf + len, text, text_len);\n\t\t\tlen += text_len;\n\t\t\tif (next || newline)\n\t\t\t\tbuf[len++] = '\\n';\n\t\t} else {\n\t\t\t\n\t\t\tif (prefix)\n\t\t\t\tlen += print_prefix(msg, syslog, NULL);\n\t\t\tlen += text_len;\n\t\t\tif (next || newline)\n\t\t\t\tlen++;\n\t\t}\n\n\t\tprefix = true;\n\t\ttext = next;\n\t} while (text);\n\n\treturn len;\n}\n\nstatic int syslog_print(char __user *buf, int size)\n{\n\tchar *text;\n\tstruct printk_log *msg;\n\tint len = 0;\n\n\ttext = kmalloc(LOG_LINE_MAX + PREFIX_MAX, GFP_KERNEL);\n\tif (!text)\n\t\treturn -ENOMEM;\n\n\twhile (size > 0) {\n\t\tsize_t n;\n\t\tsize_t skip;\n\n\t\traw_spin_lock_irq(&logbuf_lock);\n\t\tif (syslog_seq < log_first_seq) {\n\t\t\t\n\t\t\tsyslog_seq = log_first_seq;\n\t\t\tsyslog_idx = log_first_idx;\n\t\t\tsyslog_prev = 0;\n\t\t\tsyslog_partial = 0;\n\t\t}\n\t\tif (syslog_seq == log_next_seq) {\n\t\t\traw_spin_unlock_irq(&logbuf_lock);\n\t\t\tbreak;\n\t\t}\n\n\t\tskip = syslog_partial;\n\t\tmsg = log_from_idx(syslog_idx);\n\t\tn = msg_print_text(msg, syslog_prev, true, text,\n\t\t\t\t   LOG_LINE_MAX + PREFIX_MAX);\n\t\tif (n - syslog_partial <= size) {\n\t\t\t\n\t\t\tsyslog_idx = log_next(syslog_idx);\n\t\t\tsyslog_seq++;\n\t\t\tsyslog_prev = msg->flags;\n\t\t\tn -= syslog_partial;\n\t\t\tsyslog_partial = 0;\n\t\t} else if (!len){\n\t\t\t\n\t\t\tn = size;\n\t\t\tsyslog_partial += n;\n\t\t} else\n\t\t\tn = 0;\n\t\traw_spin_unlock_irq(&logbuf_lock);\n\n\t\tif (!n)\n\t\t\tbreak;\n\n\t\tif (copy_to_user(buf, text + skip, n)) {\n\t\t\tif (!len)\n\t\t\t\tlen = -EFAULT;\n\t\t\tbreak;\n\t\t}\n\n\t\tlen += n;\n\t\tsize -= n;\n\t\tbuf += n;\n\t}\n\n\tkfree(text);\n\treturn len;\n}\n\nstatic int syslog_print_all(char __user *buf, int size, bool clear)\n{\n\tchar *text;\n\tint len = 0;\n\n\ttext = kmalloc(LOG_LINE_MAX + PREFIX_MAX, GFP_KERNEL);\n\tif (!text)\n\t\treturn -ENOMEM;\n\n\traw_spin_lock_irq(&logbuf_lock);\n\tif (buf) {\n\t\tu64 next_seq;\n\t\tu64 seq;\n\t\tu32 idx;\n\t\tenum log_flags prev;\n\n\t\tif (clear_seq < log_first_seq) {\n\t\t\t\n\t\t\tclear_seq = log_first_seq;\n\t\t\tclear_idx = log_first_idx;\n\t\t}\n\n\t\t\n\t\tseq = clear_seq;\n\t\tidx = clear_idx;\n\t\tprev = 0;\n\t\twhile (seq < log_next_seq) {\n\t\t\tstruct printk_log *msg = log_from_idx(idx);\n\n\t\t\tlen += msg_print_text(msg, prev, true, NULL, 0);\n\t\t\tprev = msg->flags;\n\t\t\tidx = log_next(idx);\n\t\t\tseq++;\n\t\t}\n\n\t\t\n\t\tseq = clear_seq;\n\t\tidx = clear_idx;\n\t\tprev = 0;\n\t\twhile (len > size && seq < log_next_seq) {\n\t\t\tstruct printk_log *msg = log_from_idx(idx);\n\n\t\t\tlen -= msg_print_text(msg, prev, true, NULL, 0);\n\t\t\tprev = msg->flags;\n\t\t\tidx = log_next(idx);\n\t\t\tseq++;\n\t\t}\n\n\t\t\n\t\tnext_seq = log_next_seq;\n\n\t\tlen = 0;\n\t\twhile (len >= 0 && seq < next_seq) {\n\t\t\tstruct printk_log *msg = log_from_idx(idx);\n\t\t\tint textlen;\n\n\t\t\ttextlen = msg_print_text(msg, prev, true, text,\n\t\t\t\t\t\t LOG_LINE_MAX + PREFIX_MAX);\n\t\t\tif (textlen < 0) {\n\t\t\t\tlen = textlen;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tidx = log_next(idx);\n\t\t\tseq++;\n\t\t\tprev = msg->flags;\n\n\t\t\traw_spin_unlock_irq(&logbuf_lock);\n\t\t\tif (copy_to_user(buf + len, text, textlen))\n\t\t\t\tlen = -EFAULT;\n\t\t\telse\n\t\t\t\tlen += textlen;\n\t\t\traw_spin_lock_irq(&logbuf_lock);\n\n\t\t\tif (seq < log_first_seq) {\n\t\t\t\t\n\t\t\t\tseq = log_first_seq;\n\t\t\t\tidx = log_first_idx;\n\t\t\t\tprev = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (clear) {\n\t\tclear_seq = log_next_seq;\n\t\tclear_idx = log_next_idx;\n\t}\n\traw_spin_unlock_irq(&logbuf_lock);\n\n\tkfree(text);\n\treturn len;\n}\n\nint do_syslog(int type, char __user *buf, int len, bool from_file)\n{\n\tbool clear = false;\n\tstatic int saved_console_loglevel = LOGLEVEL_DEFAULT;\n\tint error;\n\n\terror = check_syslog_permissions(type, from_file);\n\tif (error)\n\t\tgoto out;\n\n\terror = security_syslog(type);\n\tif (error)\n\t\treturn error;\n\n\tswitch (type) {\n\tcase SYSLOG_ACTION_CLOSE:\t\n\t\tbreak;\n\tcase SYSLOG_ACTION_OPEN:\t\n\t\tbreak;\n\tcase SYSLOG_ACTION_READ:\t\n\t\terror = -EINVAL;\n\t\tif (!buf || len < 0)\n\t\t\tgoto out;\n\t\terror = 0;\n\t\tif (!len)\n\t\t\tgoto out;\n\t\tif (!access_ok(VERIFY_WRITE, buf, len)) {\n\t\t\terror = -EFAULT;\n\t\t\tgoto out;\n\t\t}\n\t\terror = wait_event_interruptible(log_wait,\n\t\t\t\t\t\t syslog_seq != log_next_seq);\n\t\tif (error)\n\t\t\tgoto out;\n\t\terror = syslog_print(buf, len);\n\t\tbreak;\n\t\n\tcase SYSLOG_ACTION_READ_CLEAR:\n\t\tclear = true;\n\t\t\n\t\n\tcase SYSLOG_ACTION_READ_ALL:\n\t\terror = -EINVAL;\n\t\tif (!buf || len < 0)\n\t\t\tgoto out;\n\t\terror = 0;\n\t\tif (!len)\n\t\t\tgoto out;\n\t\tif (!access_ok(VERIFY_WRITE, buf, len)) {\n\t\t\terror = -EFAULT;\n\t\t\tgoto out;\n\t\t}\n\t\terror = syslog_print_all(buf, len, clear);\n\t\tbreak;\n\t\n\tcase SYSLOG_ACTION_CLEAR:\n\t\tsyslog_print_all(NULL, 0, true);\n\t\tbreak;\n\t\n\tcase SYSLOG_ACTION_CONSOLE_OFF:\n\t\tif (saved_console_loglevel == LOGLEVEL_DEFAULT)\n\t\t\tsaved_console_loglevel = console_loglevel;\n\t\tconsole_loglevel = minimum_console_loglevel;\n\t\tbreak;\n\t\n\tcase SYSLOG_ACTION_CONSOLE_ON:\n\t\tif (saved_console_loglevel != LOGLEVEL_DEFAULT) {\n\t\t\tconsole_loglevel = saved_console_loglevel;\n\t\t\tsaved_console_loglevel = LOGLEVEL_DEFAULT;\n\t\t}\n\t\tbreak;\n\t\n\tcase SYSLOG_ACTION_CONSOLE_LEVEL:\n\t\terror = -EINVAL;\n\t\tif (len < 1 || len > 8)\n\t\t\tgoto out;\n\t\tif (len < minimum_console_loglevel)\n\t\t\tlen = minimum_console_loglevel;\n\t\tconsole_loglevel = len;\n\t\t\n\t\tsaved_console_loglevel = LOGLEVEL_DEFAULT;\n\t\terror = 0;\n\t\tbreak;\n\t\n\tcase SYSLOG_ACTION_SIZE_UNREAD:\n\t\traw_spin_lock_irq(&logbuf_lock);\n\t\tif (syslog_seq < log_first_seq) {\n\t\t\t\n\t\t\tsyslog_seq = log_first_seq;\n\t\t\tsyslog_idx = log_first_idx;\n\t\t\tsyslog_prev = 0;\n\t\t\tsyslog_partial = 0;\n\t\t}\n\t\tif (from_file) {\n\t\t\t\n\t\t\terror = log_next_seq - syslog_seq;\n\t\t} else {\n\t\t\tu64 seq = syslog_seq;\n\t\t\tu32 idx = syslog_idx;\n\t\t\tenum log_flags prev = syslog_prev;\n\n\t\t\terror = 0;\n\t\t\twhile (seq < log_next_seq) {\n\t\t\t\tstruct printk_log *msg = log_from_idx(idx);\n\n\t\t\t\terror += msg_print_text(msg, prev, true, NULL, 0);\n\t\t\t\tidx = log_next(idx);\n\t\t\t\tseq++;\n\t\t\t\tprev = msg->flags;\n\t\t\t}\n\t\t\terror -= syslog_partial;\n\t\t}\n\t\traw_spin_unlock_irq(&logbuf_lock);\n\t\tbreak;\n\t\n\tcase SYSLOG_ACTION_SIZE_BUFFER:\n\t\terror = log_buf_len;\n\t\tbreak;\n\tdefault:\n\t\terror = -EINVAL;\n\t\tbreak;\n\t}\nout:\n\treturn error;\n}\n\nSYSCALL_DEFINE3(syslog, int, type, char __user *, buf, int, len)\n{\n\treturn do_syslog(type, buf, len, SYSLOG_FROM_READER);\n}\n\n\nstatic void call_console_drivers(int level, const char *text, size_t len)\n{\n\tstruct console *con;\n\n\ttrace_console(text, len);\n\n\tif (level >= console_loglevel && !ignore_loglevel)\n\t\treturn;\n\tif (!console_drivers)\n\t\treturn;\n\n\tfor_each_console(con) {\n\t\tif (exclusive_console && con != exclusive_console)\n\t\t\tcontinue;\n\t\tif (!(con->flags & CON_ENABLED))\n\t\t\tcontinue;\n\t\tif (!con->write)\n\t\t\tcontinue;\n\t\tif (!cpu_online(smp_processor_id()) &&\n\t\t    !(con->flags & CON_ANYTIME))\n\t\t\tcontinue;\n\t\tcon->write(con, text, len);\n\t}\n}\n\n\nstatic void zap_locks(void)\n{\n\tstatic unsigned long oops_timestamp;\n\n\tif (time_after_eq(jiffies, oops_timestamp) &&\n\t    !time_after(jiffies, oops_timestamp + 30 * HZ))\n\t\treturn;\n\n\toops_timestamp = jiffies;\n\n\tdebug_locks_off();\n\t\n\traw_spin_lock_init(&logbuf_lock);\n\t\n\tsema_init(&console_sem, 1);\n}\n\n\nstatic int have_callable_console(void)\n{\n\tstruct console *con;\n\n\tfor_each_console(con)\n\t\tif (con->flags & CON_ANYTIME)\n\t\t\treturn 1;\n\n\treturn 0;\n}\n\n\nstatic inline int can_use_console(unsigned int cpu)\n{\n\treturn cpu_online(cpu) || have_callable_console();\n}\n\n\nstatic int console_trylock_for_printk(void)\n{\n\tunsigned int cpu = smp_processor_id();\n\n\tif (!console_trylock())\n\t\treturn 0;\n\t\n\tif (!can_use_console(cpu)) {\n\t\tconsole_locked = 0;\n\t\tup_console_sem();\n\t\treturn 0;\n\t}\n\treturn 1;\n}\n\nint printk_delay_msec __read_mostly;\n\nstatic inline void printk_delay(void)\n{\n\tif (unlikely(printk_delay_msec)) {\n\t\tint m = printk_delay_msec;\n\n\t\twhile (m--) {\n\t\t\tmdelay(1);\n\t\t\ttouch_nmi_watchdog();\n\t\t}\n\t}\n}\n\n\nstatic struct cont {\n\tchar buf[LOG_LINE_MAX];\n\tsize_t len;\t\t\t\n\tsize_t cons;\t\t\t\n\tstruct task_struct *owner;\t\n\tu64 ts_nsec;\t\t\t\n\tu8 level;\t\t\t\n\tu8 facility;\t\t\t\n\tenum log_flags flags;\t\t\n\tbool flushed:1;\t\t\t\n} cont;\n\nstatic void cont_flush(enum log_flags flags)\n{\n\tif (cont.flushed)\n\t\treturn;\n\tif (cont.len == 0)\n\t\treturn;\n\n\tif (cont.cons) {\n\t\t\n\t\tlog_store(cont.facility, cont.level, flags | LOG_NOCONS,\n\t\t\t  cont.ts_nsec, NULL, 0, cont.buf, cont.len);\n\t\tcont.flags = flags;\n\t\tcont.flushed = true;\n\t} else {\n\t\t\n\t\tlog_store(cont.facility, cont.level, flags, 0,\n\t\t\t  NULL, 0, cont.buf, cont.len);\n\t\tcont.len = 0;\n\t}\n}\n\nstatic bool cont_add(int facility, int level, const char *text, size_t len)\n{\n\tif (cont.len && cont.flushed)\n\t\treturn false;\n\n\tif (cont.len + len > sizeof(cont.buf)) {\n\t\t\n\t\tcont_flush(LOG_CONT);\n\t\treturn false;\n\t}\n\n\tif (!cont.len) {\n\t\tcont.facility = facility;\n\t\tcont.level = level;\n\t\tcont.owner = current;\n\t\tcont.ts_nsec = local_clock();\n\t\tcont.flags = 0;\n\t\tcont.cons = 0;\n\t\tcont.flushed = false;\n\t}\n\n\tmemcpy(cont.buf + cont.len, text, len);\n\tcont.len += len;\n\n\tif (cont.len > (sizeof(cont.buf) * 80) / 100)\n\t\tcont_flush(LOG_CONT);\n\n\treturn true;\n}\n\nstatic size_t cont_print_text(char *text, size_t size)\n{\n\tsize_t textlen = 0;\n\tsize_t len;\n\n\tif (cont.cons == 0 && (console_prev & LOG_NEWLINE)) {\n\t\ttextlen += print_time(cont.ts_nsec, text);\n\t\tsize -= textlen;\n\t}\n\n\tlen = cont.len - cont.cons;\n\tif (len > 0) {\n\t\tif (len+1 > size)\n\t\t\tlen = size-1;\n\t\tmemcpy(text + textlen, cont.buf + cont.cons, len);\n\t\ttextlen += len;\n\t\tcont.cons = cont.len;\n\t}\n\n\tif (cont.flushed) {\n\t\tif (cont.flags & LOG_NEWLINE)\n\t\t\ttext[textlen++] = '\\n';\n\t\t\n\t\tcont.len = 0;\n\t}\n\treturn textlen;\n}\n\nasmlinkage int vprintk_emit(int facility, int level,\n\t\t\t    const char *dict, size_t dictlen,\n\t\t\t    const char *fmt, va_list args)\n{\n\tstatic int recursion_bug;\n\tstatic char textbuf[LOG_LINE_MAX];\n\tchar *text = textbuf;\n\tsize_t text_len = 0;\n\tenum log_flags lflags = 0;\n\tunsigned long flags;\n\tint this_cpu;\n\tint printed_len = 0;\n\tbool in_sched = false;\n\t\n\tstatic unsigned int logbuf_cpu = UINT_MAX;\n\n\tif (level == LOGLEVEL_SCHED) {\n\t\tlevel = LOGLEVEL_DEFAULT;\n\t\tin_sched = true;\n\t}\n\n\tboot_delay_msec(level);\n\tprintk_delay();\n\n\t\n\tlocal_irq_save(flags);\n\tthis_cpu = smp_processor_id();\n\n\t\n\tif (unlikely(logbuf_cpu == this_cpu)) {\n\t\t\n\t\tif (!oops_in_progress && !lockdep_recursing(current)) {\n\t\t\trecursion_bug = 1;\n\t\t\tlocal_irq_restore(flags);\n\t\t\treturn 0;\n\t\t}\n\t\tzap_locks();\n\t}\n\n\tlockdep_off();\n\traw_spin_lock(&logbuf_lock);\n\tlogbuf_cpu = this_cpu;\n\n\tif (unlikely(recursion_bug)) {\n\t\tstatic const char recursion_msg[] =\n\t\t\t\"", "1199": "\", ptr);\n}\n\nstatic int t_show(struct seq_file *m, void *v)\n{\n\tstruct ftrace_iterator *iter = m->private;\n\tstruct dyn_ftrace *rec;\n\n\tif (iter->flags & FTRACE_ITER_HASH)\n\t\treturn t_hash_show(m, iter);\n\n\tif (iter->flags & FTRACE_ITER_PRINTALL) {\n\t\tif (iter->flags & FTRACE_ITER_NOTRACE)\n\t\t\tseq_puts(m, \"", "1200": "\", r);\n\n\treturn simple_read_from_buffer(ubuf, cnt, ppos, buf, r);\n}\n\nstatic ssize_t\nrb_simple_write(struct file *filp, const char __user *ubuf,\n\t\tsize_t cnt, loff_t *ppos)\n{\n\tstruct trace_array *tr = filp->private_data;\n\tstruct ring_buffer *buffer = tr->trace_buffer.buffer;\n\tunsigned long val;\n\tint ret;\n\n\tret = kstrtoul_from_user(ubuf, cnt, 10, &val);\n\tif (ret)\n\t\treturn ret;\n\n\tif (buffer) {\n\t\tmutex_lock(&trace_types_lock);\n\t\tif (val) {\n\t\t\ttracer_tracing_on(tr);\n\t\t\tif (tr->current_trace->start)\n\t\t\t\ttr->current_trace->start(tr);\n\t\t} else {\n\t\t\ttracer_tracing_off(tr);\n\t\t\tif (tr->current_trace->stop)\n\t\t\t\ttr->current_trace->stop(tr);\n\t\t}\n\t\tmutex_unlock(&trace_types_lock);\n\t}\n\n\t(*ppos)++;\n\n\treturn cnt;\n}\n\nstatic const struct file_operations rb_simple_fops = {\n\t.open\t\t= tracing_open_generic_tr,\n\t.read\t\t= rb_simple_read,\n\t.write\t\t= rb_simple_write,\n\t.release\t= tracing_release_generic_tr,\n\t.llseek\t\t= default_llseek,\n};\n\nstruct dentry *trace_instance_dir;\n\nstatic void\ninit_tracer_tracefs(struct trace_array *tr, struct dentry *d_tracer);\n\nstatic int\nallocate_trace_buffer(struct trace_array *tr, struct trace_buffer *buf, int size)\n{\n\tenum ring_buffer_flags rb_flags;\n\n\trb_flags = trace_flags & TRACE_ITER_OVERWRITE ? RB_FL_OVERWRITE : 0;\n\n\tbuf->tr = tr;\n\n\tbuf->buffer = ring_buffer_alloc(size, rb_flags);\n\tif (!buf->buffer)\n\t\treturn -ENOMEM;\n\n\tbuf->data = alloc_percpu(struct trace_array_cpu);\n\tif (!buf->data) {\n\t\tring_buffer_free(buf->buffer);\n\t\treturn -ENOMEM;\n\t}\n\n\t\n\tset_buffer_entries(&tr->trace_buffer,\n\t\t\t   ring_buffer_size(tr->trace_buffer.buffer, 0));\n\n\treturn 0;\n}\n\nstatic int allocate_trace_buffers(struct trace_array *tr, int size)\n{\n\tint ret;\n\n\tret = allocate_trace_buffer(tr, &tr->trace_buffer, size);\n\tif (ret)\n\t\treturn ret;\n\n#ifdef CONFIG_TRACER_MAX_TRACE\n\tret = allocate_trace_buffer(tr, &tr->max_buffer,\n\t\t\t\t    allocate_snapshot ? size : 1);\n\tif (WARN_ON(ret)) {\n\t\tring_buffer_free(tr->trace_buffer.buffer);\n\t\tfree_percpu(tr->trace_buffer.data);\n\t\treturn -ENOMEM;\n\t}\n\ttr->allocated_snapshot = allocate_snapshot;\n\n\t\n\tallocate_snapshot = false;\n#endif\n\treturn 0;\n}\n\nstatic void free_trace_buffer(struct trace_buffer *buf)\n{\n\tif (buf->buffer) {\n\t\tring_buffer_free(buf->buffer);\n\t\tbuf->buffer = NULL;\n\t\tfree_percpu(buf->data);\n\t\tbuf->data = NULL;\n\t}\n}\n\nstatic void free_trace_buffers(struct trace_array *tr)\n{\n\tif (!tr)\n\t\treturn;\n\n\tfree_trace_buffer(&tr->trace_buffer);\n\n#ifdef CONFIG_TRACER_MAX_TRACE\n\tfree_trace_buffer(&tr->max_buffer);\n#endif\n}\n\nstatic int instance_mkdir(const char *name)\n{\n\tstruct trace_array *tr;\n\tint ret;\n\n\tmutex_lock(&trace_types_lock);\n\n\tret = -EEXIST;\n\tlist_for_each_entry(tr, &ftrace_trace_arrays, list) {\n\t\tif (tr->name && strcmp(tr->name, name) == 0)\n\t\t\tgoto out_unlock;\n\t}\n\n\tret = -ENOMEM;\n\ttr = kzalloc(sizeof(*tr), GFP_KERNEL);\n\tif (!tr)\n\t\tgoto out_unlock;\n\n\ttr->name = kstrdup(name, GFP_KERNEL);\n\tif (!tr->name)\n\t\tgoto out_free_tr;\n\n\tif (!alloc_cpumask_var(&tr->tracing_cpumask, GFP_KERNEL))\n\t\tgoto out_free_tr;\n\n\tcpumask_copy(tr->tracing_cpumask, cpu_all_mask);\n\n\traw_spin_lock_init(&tr->start_lock);\n\n\ttr->max_lock = (arch_spinlock_t)__ARCH_SPIN_LOCK_UNLOCKED;\n\n\ttr->current_trace = &nop_trace;\n\n\tINIT_LIST_HEAD(&tr->systems);\n\tINIT_LIST_HEAD(&tr->events);\n\n\tif (allocate_trace_buffers(tr, trace_buf_size) < 0)\n\t\tgoto out_free_tr;\n\n\ttr->dir = tracefs_create_dir(name, trace_instance_dir);\n\tif (!tr->dir)\n\t\tgoto out_free_tr;\n\n\tret = event_trace_add_tracer(tr->dir, tr);\n\tif (ret) {\n\t\ttracefs_remove_recursive(tr->dir);\n\t\tgoto out_free_tr;\n\t}\n\n\tinit_tracer_tracefs(tr, tr->dir);\n\n\tlist_add(&tr->list, &ftrace_trace_arrays);\n\n\tmutex_unlock(&trace_types_lock);\n\n\treturn 0;\n\n out_free_tr:\n\tfree_trace_buffers(tr);\n\tfree_cpumask_var(tr->tracing_cpumask);\n\tkfree(tr->name);\n\tkfree(tr);\n\n out_unlock:\n\tmutex_unlock(&trace_types_lock);\n\n\treturn ret;\n\n}\n\nstatic int instance_rmdir(const char *name)\n{\n\tstruct trace_array *tr;\n\tint found = 0;\n\tint ret;\n\n\tmutex_lock(&trace_types_lock);\n\n\tret = -ENODEV;\n\tlist_for_each_entry(tr, &ftrace_trace_arrays, list) {\n\t\tif (tr->name && strcmp(tr->name, name) == 0) {\n\t\t\tfound = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!found)\n\t\tgoto out_unlock;\n\n\tret = -EBUSY;\n\tif (tr->ref || (tr->current_trace && tr->current_trace->ref))\n\t\tgoto out_unlock;\n\n\tlist_del(&tr->list);\n\n\ttracing_set_nop(tr);\n\tevent_trace_del_tracer(tr);\n\tftrace_destroy_function_files(tr);\n\tdebugfs_remove_recursive(tr->dir);\n\tfree_trace_buffers(tr);\n\n\tkfree(tr->name);\n\tkfree(tr);\n\n\tret = 0;\n\n out_unlock:\n\tmutex_unlock(&trace_types_lock);\n\n\treturn ret;\n}\n\nstatic __init void create_trace_instances(struct dentry *d_tracer)\n{\n\ttrace_instance_dir = tracefs_create_instance_dir(\"", "1201": "\", rcu_bh_ctrlblk.qlen);\n\treturn 0;\n}\n\nstatic int show_tiny_stats_open(struct inode *inode, struct file *file)\n{\n\treturn single_open(file, show_tiny_stats, NULL);\n}\n\nstatic const struct file_operations show_tiny_stats_fops = {\n\t.owner = THIS_MODULE,\n\t.open = show_tiny_stats_open,\n\t.read = seq_read,\n\t.llseek = seq_lseek,\n\t.release = single_release,\n};\n\nstatic struct dentry *rcudir;\n\nstatic int __init rcutiny_trace_init(void)\n{\n\tstruct dentry *retval;\n\n\trcudir = debugfs_create_dir(\"", "1202": "\", rcu_sched_ctrlblk.qlen);\n\tseq_printf(m, \"", "1203": "\", read);\n}\n\nvoid __init sched_clock_postinit(void)\n{\n\t\n\tif (cd.actual_read_sched_clock == jiffy_sched_clock_read)\n\t\tsched_clock_register(jiffy_sched_clock_read, BITS_PER_LONG, HZ);\n\n\tupdate_sched_clock();\n\n\t\n\thrtimer_init(&sched_clock_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);\n\tsched_clock_timer.function = sched_clock_poll;\n\thrtimer_start(&sched_clock_timer, cd.wrap_kt, HRTIMER_MODE_REL);\n}\n\n\nstatic u64 notrace suspended_sched_clock_read(void)\n{\n\tunsigned long seq = raw_read_seqcount(&cd.seq);\n\n\treturn cd.read_data[seq & 1].epoch_cyc;\n}\n\nstatic int sched_clock_suspend(void)\n{\n\tstruct clock_read_data *rd = &cd.read_data[0];\n\n\tupdate_sched_clock();\n\thrtimer_cancel(&sched_clock_timer);\n\trd->read_sched_clock = suspended_sched_clock_read;\n\n\treturn 0;\n}\n\nstatic void sched_clock_resume(void)\n{\n\tstruct clock_read_data *rd = &cd.read_data[0];\n\n\trd->epoch_cyc = cd.actual_read_sched_clock();\n\thrtimer_start(&sched_clock_timer, cd.wrap_kt, HRTIMER_MODE_REL);\n\trd->read_sched_clock = cd.actual_read_sched_clock;\n}\n\nstatic struct syscore_ops sched_clock_ops = {\n\t.suspend\t= sched_clock_suspend,\n\t.resume\t\t= sched_clock_resume,\n};\n\nstatic int __init sched_clock_syscore_init(void)\n{\n\tregister_syscore_ops(&sched_clock_ops);\n\n\treturn 0;\n}\ndevice_initcall(sched_clock_syscore_init);\n#ifndef __TRACE_EVENTS_H\n#define __TRACE_EVENTS_H\n\n#include <linux/trace_seq.h>\n#include \"", "1204": "\", ret);\n\n\t\n\tjump_label_rate_limit(&perf_sched_events, HZ);\n\n\t\n\tBUILD_BUG_ON((offsetof(struct perf_event_mmap_page, data_head))\n\t\t     != 1024);\n}\n\nssize_t perf_event_sysfs_show(struct device *dev, struct device_attribute *attr,\n\t\t\t      char *page)\n{\n\tstruct perf_pmu_events_attr *pmu_attr =\n\t\tcontainer_of(attr, struct perf_pmu_events_attr, attr);\n\n\tif (pmu_attr->event_str)\n\t\treturn sprintf(page, \"", "1205": "\", ret);\n\n\treturn 0;\n}\n\nstatic int noop_count(struct lock_list *entry, void *data)\n{\n\t(*(unsigned long *)data)++;\n\treturn 0;\n}\n\nstatic unsigned long __lockdep_count_forward_deps(struct lock_list *this)\n{\n\tunsigned long  count = 0;\n\tstruct lock_list *uninitialized_var(target_entry);\n\n\t__bfs_forwards(this, (void *)&count, noop_count, &target_entry);\n\n\treturn count;\n}\nunsigned long lockdep_count_forward_deps(struct lock_class *class)\n{\n\tunsigned long ret, flags;\n\tstruct lock_list this;\n\n\tthis.parent = NULL;\n\tthis.class = class;\n\n\tlocal_irq_save(flags);\n\tarch_spin_lock(&lockdep_lock);\n\tret = __lockdep_count_forward_deps(&this);\n\tarch_spin_unlock(&lockdep_lock);\n\tlocal_irq_restore(flags);\n\n\treturn ret;\n}\n\nstatic unsigned long __lockdep_count_backward_deps(struct lock_list *this)\n{\n\tunsigned long  count = 0;\n\tstruct lock_list *uninitialized_var(target_entry);\n\n\t__bfs_backwards(this, (void *)&count, noop_count, &target_entry);\n\n\treturn count;\n}\n\nunsigned long lockdep_count_backward_deps(struct lock_class *class)\n{\n\tunsigned long ret, flags;\n\tstruct lock_list this;\n\n\tthis.parent = NULL;\n\tthis.class = class;\n\n\tlocal_irq_save(flags);\n\tarch_spin_lock(&lockdep_lock);\n\tret = __lockdep_count_backward_deps(&this);\n\tarch_spin_unlock(&lockdep_lock);\n\tlocal_irq_restore(flags);\n\n\treturn ret;\n}\n\n\nstatic noinline int\ncheck_noncircular(struct lock_list *root, struct lock_class *target,\n\t\tstruct lock_list **target_entry)\n{\n\tint result;\n\n\tdebug_atomic_inc(nr_cyclic_checks);\n\n\tresult = __bfs_forwards(root, target, class_equal, target_entry);\n\n\treturn result;\n}\n\n#if defined(CONFIG_TRACE_IRQFLAGS) && defined(CONFIG_PROVE_LOCKING)\n\n\nstatic inline int usage_match(struct lock_list *entry, void *bit)\n{\n\treturn entry->class->usage_mask & (1 << (enum lock_usage_bit)bit);\n}\n\n\n\n\nstatic int\nfind_usage_forwards(struct lock_list *root, enum lock_usage_bit bit,\n\t\t\tstruct lock_list **target_entry)\n{\n\tint result;\n\n\tdebug_atomic_inc(nr_find_usage_forwards_checks);\n\n\tresult = __bfs_forwards(root, (void *)bit, usage_match, target_entry);\n\n\treturn result;\n}\n\n\nstatic int\nfind_usage_backwards(struct lock_list *root, enum lock_usage_bit bit,\n\t\t\tstruct lock_list **target_entry)\n{\n\tint result;\n\n\tdebug_atomic_inc(nr_find_usage_backwards_checks);\n\n\tresult = __bfs_backwards(root, (void *)bit, usage_match, target_entry);\n\n\treturn result;\n}\n\nstatic void print_lock_class_header(struct lock_class *class, int depth)\n{\n\tint bit;\n\n\tprintk(\"", "1206": "\", ret,\n\t\t\t\tq->pi_state->pi_mutex.owner,\n\t\t\t\tq->pi_state->owner);\n\nout:\n\treturn ret ? ret : locked;\n}\n\n\nstatic void futex_wait_queue_me(struct futex_hash_bucket *hb, struct futex_q *q,\n\t\t\t\tstruct hrtimer_sleeper *timeout)\n{\n\t\n\tset_current_state(TASK_INTERRUPTIBLE);\n\tqueue_me(q, hb);\n\n\t\n\tif (timeout) {\n\t\thrtimer_start_expires(&timeout->timer, HRTIMER_MODE_ABS);\n\t\tif (!hrtimer_active(&timeout->timer))\n\t\t\ttimeout->task = NULL;\n\t}\n\n\t\n\tif (likely(!plist_node_empty(&q->list))) {\n\t\t\n\t\tif (!timeout || timeout->task)\n\t\t\tfreezable_schedule();\n\t}\n\t__set_current_state(TASK_RUNNING);\n}\n\n\nstatic int futex_wait_setup(u32 __user *uaddr, u32 val, unsigned int flags,\n\t\t\t   struct futex_q *q, struct futex_hash_bucket **hb)\n{\n\tu32 uval;\n\tint ret;\n\n\t\nretry:\n\tret = get_futex_key(uaddr, flags & FLAGS_SHARED, &q->key, VERIFY_READ);\n\tif (unlikely(ret != 0))\n\t\treturn ret;\n\nretry_private:\n\t*hb = queue_lock(q);\n\n\tret = get_futex_value_locked(&uval, uaddr);\n\n\tif (ret) {\n\t\tqueue_unlock(*hb);\n\n\t\tret = get_user(uval, uaddr);\n\t\tif (ret)\n\t\t\tgoto out;\n\n\t\tif (!(flags & FLAGS_SHARED))\n\t\t\tgoto retry_private;\n\n\t\tput_futex_key(&q->key);\n\t\tgoto retry;\n\t}\n\n\tif (uval != val) {\n\t\tqueue_unlock(*hb);\n\t\tret = -EWOULDBLOCK;\n\t}\n\nout:\n\tif (ret)\n\t\tput_futex_key(&q->key);\n\treturn ret;\n}\n\nstatic int futex_wait(u32 __user *uaddr, unsigned int flags, u32 val,\n\t\t      ktime_t *abs_time, u32 bitset)\n{\n\tstruct hrtimer_sleeper timeout, *to = NULL;\n\tstruct restart_block *restart;\n\tstruct futex_hash_bucket *hb;\n\tstruct futex_q q = futex_q_init;\n\tint ret;\n\n\tif (!bitset)\n\t\treturn -EINVAL;\n\tq.bitset = bitset;\n\n\tif (abs_time) {\n\t\tto = &timeout;\n\n\t\thrtimer_init_on_stack(&to->timer, (flags & FLAGS_CLOCKRT) ?\n\t\t\t\t      CLOCK_REALTIME : CLOCK_MONOTONIC,\n\t\t\t\t      HRTIMER_MODE_ABS);\n\t\thrtimer_init_sleeper(to, current);\n\t\thrtimer_set_expires_range_ns(&to->timer, *abs_time,\n\t\t\t\t\t     current->timer_slack_ns);\n\t}\n\nretry:\n\t\n\tret = futex_wait_setup(uaddr, val, flags, &q, &hb);\n\tif (ret)\n\t\tgoto out;\n\n\t\n\tfutex_wait_queue_me(hb, &q, to);\n\n\t\n\tret = 0;\n\t\n\tif (!unqueue_me(&q))\n\t\tgoto out;\n\tret = -ETIMEDOUT;\n\tif (to && !to->task)\n\t\tgoto out;\n\n\t\n\tif (!signal_pending(current))\n\t\tgoto retry;\n\n\tret = -ERESTARTSYS;\n\tif (!abs_time)\n\t\tgoto out;\n\n\trestart = &current->restart_block;\n\trestart->fn = futex_wait_restart;\n\trestart->futex.uaddr = uaddr;\n\trestart->futex.val = val;\n\trestart->futex.time = abs_time->tv64;\n\trestart->futex.bitset = bitset;\n\trestart->futex.flags = flags | FLAGS_HAS_TIMEOUT;\n\n\tret = -ERESTART_RESTARTBLOCK;\n\nout:\n\tif (to) {\n\t\thrtimer_cancel(&to->timer);\n\t\tdestroy_hrtimer_on_stack(&to->timer);\n\t}\n\treturn ret;\n}\n\n\nstatic long futex_wait_restart(struct restart_block *restart)\n{\n\tu32 __user *uaddr = restart->futex.uaddr;\n\tktime_t t, *tp = NULL;\n\n\tif (restart->futex.flags & FLAGS_HAS_TIMEOUT) {\n\t\tt.tv64 = restart->futex.time;\n\t\ttp = &t;\n\t}\n\trestart->fn = do_no_restart_syscall;\n\n\treturn (long)futex_wait(uaddr, restart->futex.flags,\n\t\t\t\trestart->futex.val, tp, restart->futex.bitset);\n}\n\n\n\nstatic int futex_lock_pi(u32 __user *uaddr, unsigned int flags,\n\t\t\t ktime_t *time, int trylock)\n{\n\tstruct hrtimer_sleeper timeout, *to = NULL;\n\tstruct futex_hash_bucket *hb;\n\tstruct futex_q q = futex_q_init;\n\tint res, ret;\n\n\tif (refill_pi_state_cache())\n\t\treturn -ENOMEM;\n\n\tif (time) {\n\t\tto = &timeout;\n\t\thrtimer_init_on_stack(&to->timer, CLOCK_REALTIME,\n\t\t\t\t      HRTIMER_MODE_ABS);\n\t\thrtimer_init_sleeper(to, current);\n\t\thrtimer_set_expires(&to->timer, *time);\n\t}\n\nretry:\n\tret = get_futex_key(uaddr, flags & FLAGS_SHARED, &q.key, VERIFY_WRITE);\n\tif (unlikely(ret != 0))\n\t\tgoto out;\n\nretry_private:\n\thb = queue_lock(&q);\n\n\tret = futex_lock_pi_atomic(uaddr, hb, &q.key, &q.pi_state, current, 0);\n\tif (unlikely(ret)) {\n\t\tswitch (ret) {\n\t\tcase 1:\n\t\t\t\n\t\t\tret = 0;\n\t\t\tgoto out_unlock_put_key;\n\t\tcase -EFAULT:\n\t\t\tgoto uaddr_faulted;\n\t\tcase -EAGAIN:\n\t\t\t\n\t\t\tqueue_unlock(hb);\n\t\t\tput_futex_key(&q.key);\n\t\t\tcond_resched();\n\t\t\tgoto retry;\n\t\tdefault:\n\t\t\tgoto out_unlock_put_key;\n\t\t}\n\t}\n\n\t\n\tqueue_me(&q, hb);\n\n\tWARN_ON(!q.pi_state);\n\t\n\tif (!trylock) {\n\t\tret = rt_mutex_timed_futex_lock(&q.pi_state->pi_mutex, to);\n\t} else {\n\t\tret = rt_mutex_trylock(&q.pi_state->pi_mutex);\n\t\t\n\t\tret = ret ? 0 : -EWOULDBLOCK;\n\t}\n\n\tspin_lock(q.lock_ptr);\n\t\n\tres = fixup_owner(uaddr, &q, !ret);\n\t\n\tif (res)\n\t\tret = (res < 0) ? res : 0;\n\n\t\n\tif (ret && (rt_mutex_owner(&q.pi_state->pi_mutex) == current))\n\t\trt_mutex_unlock(&q.pi_state->pi_mutex);\n\n\t\n\tunqueue_me_pi(&q);\n\n\tgoto out_put_key;\n\nout_unlock_put_key:\n\tqueue_unlock(hb);\n\nout_put_key:\n\tput_futex_key(&q.key);\nout:\n\tif (to)\n\t\tdestroy_hrtimer_on_stack(&to->timer);\n\treturn ret != -EINTR ? ret : -ERESTARTNOINTR;\n\nuaddr_faulted:\n\tqueue_unlock(hb);\n\n\tret = fault_in_user_writeable(uaddr);\n\tif (ret)\n\t\tgoto out_put_key;\n\n\tif (!(flags & FLAGS_SHARED))\n\t\tgoto retry_private;\n\n\tput_futex_key(&q.key);\n\tgoto retry;\n}\n\n\nstatic int futex_unlock_pi(u32 __user *uaddr, unsigned int flags)\n{\n\tu32 uninitialized_var(curval), uval, vpid = task_pid_vnr(current);\n\tunion futex_key key = FUTEX_KEY_INIT;\n\tstruct futex_hash_bucket *hb;\n\tstruct futex_q *match;\n\tint ret;\n\nretry:\n\tif (get_user(uval, uaddr))\n\t\treturn -EFAULT;\n\t\n\tif ((uval & FUTEX_TID_MASK) != vpid)\n\t\treturn -EPERM;\n\n\tret = get_futex_key(uaddr, flags & FLAGS_SHARED, &key, VERIFY_WRITE);\n\tif (ret)\n\t\treturn ret;\n\n\thb = hash_futex(&key);\n\tspin_lock(&hb->lock);\n\n\t\n\tmatch = futex_top_waiter(hb, &key);\n\tif (match) {\n\t\tret = wake_futex_pi(uaddr, uval, match);\n\t\t\n\t\tif (ret == -EFAULT)\n\t\t\tgoto pi_faulted;\n\t\tgoto out_unlock;\n\t}\n\n\t\n\tif (cmpxchg_futex_value_locked(&curval, uaddr, uval, 0))\n\t\tgoto pi_faulted;\n\n\t\n\tret = (curval == uval) ? 0 : -EAGAIN;\n\nout_unlock:\n\tspin_unlock(&hb->lock);\n\tput_futex_key(&key);\n\treturn ret;\n\npi_faulted:\n\tspin_unlock(&hb->lock);\n\tput_futex_key(&key);\n\n\tret = fault_in_user_writeable(uaddr);\n\tif (!ret)\n\t\tgoto retry;\n\n\treturn ret;\n}\n\n\nstatic inline\nint handle_early_requeue_pi_wakeup(struct futex_hash_bucket *hb,\n\t\t\t\t   struct futex_q *q, union futex_key *key2,\n\t\t\t\t   struct hrtimer_sleeper *timeout)\n{\n\tint ret = 0;\n\n\t\n\tif (!match_futex(&q->key, key2)) {\n\t\tWARN_ON(q->lock_ptr && (&hb->lock != q->lock_ptr));\n\t\t\n\t\tplist_del(&q->list, &hb->chain);\n\t\thb_waiters_dec(hb);\n\n\t\t\n\t\tret = -EWOULDBLOCK;\n\t\tif (timeout && !timeout->task)\n\t\t\tret = -ETIMEDOUT;\n\t\telse if (signal_pending(current))\n\t\t\tret = -ERESTARTNOINTR;\n\t}\n\treturn ret;\n}\n\n\nstatic int futex_wait_requeue_pi(u32 __user *uaddr, unsigned int flags,\n\t\t\t\t u32 val, ktime_t *abs_time, u32 bitset,\n\t\t\t\t u32 __user *uaddr2)\n{\n\tstruct hrtimer_sleeper timeout, *to = NULL;\n\tstruct rt_mutex_waiter rt_waiter;\n\tstruct rt_mutex *pi_mutex = NULL;\n\tstruct futex_hash_bucket *hb;\n\tunion futex_key key2 = FUTEX_KEY_INIT;\n\tstruct futex_q q = futex_q_init;\n\tint res, ret;\n\n\tif (uaddr == uaddr2)\n\t\treturn -EINVAL;\n\n\tif (!bitset)\n\t\treturn -EINVAL;\n\n\tif (abs_time) {\n\t\tto = &timeout;\n\t\thrtimer_init_on_stack(&to->timer, (flags & FLAGS_CLOCKRT) ?\n\t\t\t\t      CLOCK_REALTIME : CLOCK_MONOTONIC,\n\t\t\t\t      HRTIMER_MODE_ABS);\n\t\thrtimer_init_sleeper(to, current);\n\t\thrtimer_set_expires_range_ns(&to->timer, *abs_time,\n\t\t\t\t\t     current->timer_slack_ns);\n\t}\n\n\t\n\tdebug_rt_mutex_init_waiter(&rt_waiter);\n\tRB_CLEAR_NODE(&rt_waiter.pi_tree_entry);\n\tRB_CLEAR_NODE(&rt_waiter.tree_entry);\n\trt_waiter.task = NULL;\n\n\tret = get_futex_key(uaddr2, flags & FLAGS_SHARED, &key2, VERIFY_WRITE);\n\tif (unlikely(ret != 0))\n\t\tgoto out;\n\n\tq.bitset = bitset;\n\tq.rt_waiter = &rt_waiter;\n\tq.requeue_pi_key = &key2;\n\n\t\n\tret = futex_wait_setup(uaddr, val, flags, &q, &hb);\n\tif (ret)\n\t\tgoto out_key2;\n\n\t\n\tif (match_futex(&q.key, &key2)) {\n\t\tqueue_unlock(hb);\n\t\tret = -EINVAL;\n\t\tgoto out_put_keys;\n\t}\n\n\t\n\tfutex_wait_queue_me(hb, &q, to);\n\n\tspin_lock(&hb->lock);\n\tret = handle_early_requeue_pi_wakeup(hb, &q, &key2, to);\n\tspin_unlock(&hb->lock);\n\tif (ret)\n\t\tgoto out_put_keys;\n\n\t\n\n\t\n\tif (!q.rt_waiter) {\n\t\t\n\t\tif (q.pi_state && (q.pi_state->owner != current)) {\n\t\t\tspin_lock(q.lock_ptr);\n\t\t\tret = fixup_pi_state_owner(uaddr2, &q, current);\n\t\t\tspin_unlock(q.lock_ptr);\n\t\t}\n\t} else {\n\t\t\n\t\tWARN_ON(!q.pi_state);\n\t\tpi_mutex = &q.pi_state->pi_mutex;\n\t\tret = rt_mutex_finish_proxy_lock(pi_mutex, to, &rt_waiter);\n\t\tdebug_rt_mutex_free_waiter(&rt_waiter);\n\n\t\tspin_lock(q.lock_ptr);\n\t\t\n\t\tres = fixup_owner(uaddr2, &q, !ret);\n\t\t\n\t\tif (res)\n\t\t\tret = (res < 0) ? res : 0;\n\n\t\t\n\t\tunqueue_me_pi(&q);\n\t}\n\n\t\n\tif (ret == -EFAULT) {\n\t\tif (pi_mutex && rt_mutex_owner(pi_mutex) == current)\n\t\t\trt_mutex_unlock(pi_mutex);\n\t} else if (ret == -EINTR) {\n\t\t\n\t\tret = -EWOULDBLOCK;\n\t}\n\nout_put_keys:\n\tput_futex_key(&q.key);\nout_key2:\n\tput_futex_key(&key2);\n\nout:\n\tif (to) {\n\t\thrtimer_cancel(&to->timer);\n\t\tdestroy_hrtimer_on_stack(&to->timer);\n\t}\n\treturn ret;\n}\n\n\n\n\nSYSCALL_DEFINE2(set_robust_list, struct robust_list_head __user *, head,\n\t\tsize_t, len)\n{\n\tif (!futex_cmpxchg_enabled)\n\t\treturn -ENOSYS;\n\t\n\tif (unlikely(len != sizeof(*head)))\n\t\treturn -EINVAL;\n\n\tcurrent->robust_list = head;\n\n\treturn 0;\n}\n\n\nSYSCALL_DEFINE3(get_robust_list, int, pid,\n\t\tstruct robust_list_head __user * __user *, head_ptr,\n\t\tsize_t __user *, len_ptr)\n{\n\tstruct robust_list_head __user *head;\n\tunsigned long ret;\n\tstruct task_struct *p;\n\n\tif (!futex_cmpxchg_enabled)\n\t\treturn -ENOSYS;\n\n\trcu_read_lock();\n\n\tret = -ESRCH;\n\tif (!pid)\n\t\tp = current;\n\telse {\n\t\tp = find_task_by_vpid(pid);\n\t\tif (!p)\n\t\t\tgoto err_unlock;\n\t}\n\n\tret = -EPERM;\n\tif (!ptrace_may_access(p, PTRACE_MODE_READ))\n\t\tgoto err_unlock;\n\n\thead = p->robust_list;\n\trcu_read_unlock();\n\n\tif (put_user(sizeof(*head), len_ptr))\n\t\treturn -EFAULT;\n\treturn put_user(head, head_ptr);\n\nerr_unlock:\n\trcu_read_unlock();\n\n\treturn ret;\n}\n\n\nint handle_futex_death(u32 __user *uaddr, struct task_struct *curr, int pi)\n{\n\tu32 uval, uninitialized_var(nval), mval;\n\nretry:\n\tif (get_user(uval, uaddr))\n\t\treturn -1;\n\n\tif ((uval & FUTEX_TID_MASK) == task_pid_vnr(curr)) {\n\t\t\n\t\tmval = (uval & FUTEX_WAITERS) | FUTEX_OWNER_DIED;\n\t\t\n\t\tif (cmpxchg_futex_value_locked(&nval, uaddr, uval, mval)) {\n\t\t\tif (fault_in_user_writeable(uaddr))\n\t\t\t\treturn -1;\n\t\t\tgoto retry;\n\t\t}\n\t\tif (nval != uval)\n\t\t\tgoto retry;\n\n\t\t\n\t\tif (!pi && (uval & FUTEX_WAITERS))\n\t\t\tfutex_wake(uaddr, 1, 1, FUTEX_BITSET_MATCH_ANY);\n\t}\n\treturn 0;\n}\n\n\nstatic inline int fetch_robust_entry(struct robust_list __user **entry,\n\t\t\t\t     struct robust_list __user * __user *head,\n\t\t\t\t     unsigned int *pi)\n{\n\tunsigned long uentry;\n\n\tif (get_user(uentry, (unsigned long __user *)head))\n\t\treturn -EFAULT;\n\n\t*entry = (void __user *)(uentry & ~1UL);\n\t*pi = uentry & 1;\n\n\treturn 0;\n}\n\n\nvoid exit_robust_list(struct task_struct *curr)\n{\n\tstruct robust_list_head __user *head = curr->robust_list;\n\tstruct robust_list __user *entry, *next_entry, *pending;\n\tunsigned int limit = ROBUST_LIST_LIMIT, pi, pip;\n\tunsigned int uninitialized_var(next_pi);\n\tunsigned long futex_offset;\n\tint rc;\n\n\tif (!futex_cmpxchg_enabled)\n\t\treturn;\n\n\t\n\tif (fetch_robust_entry(&entry, &head->list.next, &pi))\n\t\treturn;\n\t\n\tif (get_user(futex_offset, &head->futex_offset))\n\t\treturn;\n\t\n\tif (fetch_robust_entry(&pending, &head->list_op_pending, &pip))\n\t\treturn;\n\n\tnext_entry = NULL;\t\n\twhile (entry != &head->list) {\n\t\t\n\t\trc = fetch_robust_entry(&next_entry, &entry->next, &next_pi);\n\t\t\n\t\tif (entry != pending)\n\t\t\tif (handle_futex_death((void __user *)entry + futex_offset,\n\t\t\t\t\t\tcurr, pi))\n\t\t\t\treturn;\n\t\tif (rc)\n\t\t\treturn;\n\t\tentry = next_entry;\n\t\tpi = next_pi;\n\t\t\n\t\tif (!--limit)\n\t\t\tbreak;\n\n\t\tcond_resched();\n\t}\n\n\tif (pending)\n\t\thandle_futex_death((void __user *)pending + futex_offset,\n\t\t\t\t   curr, pip);\n}\n\nlong do_futex(u32 __user *uaddr, int op, u32 val, ktime_t *timeout,\n\t\tu32 __user *uaddr2, u32 val2, u32 val3)\n{\n\tint cmd = op & FUTEX_CMD_MASK;\n\tunsigned int flags = 0;\n\n\tif (!(op & FUTEX_PRIVATE_FLAG))\n\t\tflags |= FLAGS_SHARED;\n\n\tif (op & FUTEX_CLOCK_REALTIME) {\n\t\tflags |= FLAGS_CLOCKRT;\n\t\tif (cmd != FUTEX_WAIT_BITSET && cmd != FUTEX_WAIT_REQUEUE_PI)\n\t\t\treturn -ENOSYS;\n\t}\n\n\tswitch (cmd) {\n\tcase FUTEX_LOCK_PI:\n\tcase FUTEX_UNLOCK_PI:\n\tcase FUTEX_TRYLOCK_PI:\n\tcase FUTEX_WAIT_REQUEUE_PI:\n\tcase FUTEX_CMP_REQUEUE_PI:\n\t\tif (!futex_cmpxchg_enabled)\n\t\t\treturn -ENOSYS;\n\t}\n\n\tswitch (cmd) {\n\tcase FUTEX_WAIT:\n\t\tval3 = FUTEX_BITSET_MATCH_ANY;\n\tcase FUTEX_WAIT_BITSET:\n\t\treturn futex_wait(uaddr, flags, val, timeout, val3);\n\tcase FUTEX_WAKE:\n\t\tval3 = FUTEX_BITSET_MATCH_ANY;\n\tcase FUTEX_WAKE_BITSET:\n\t\treturn futex_wake(uaddr, flags, val, val3);\n\tcase FUTEX_REQUEUE:\n\t\treturn futex_requeue(uaddr, flags, uaddr2, val, val2, NULL, 0);\n\tcase FUTEX_CMP_REQUEUE:\n\t\treturn futex_requeue(uaddr, flags, uaddr2, val, val2, &val3, 0);\n\tcase FUTEX_WAKE_OP:\n\t\treturn futex_wake_op(uaddr, flags, uaddr2, val, val2, val3);\n\tcase FUTEX_LOCK_PI:\n\t\treturn futex_lock_pi(uaddr, flags, timeout, 0);\n\tcase FUTEX_UNLOCK_PI:\n\t\treturn futex_unlock_pi(uaddr, flags);\n\tcase FUTEX_TRYLOCK_PI:\n\t\treturn futex_lock_pi(uaddr, flags, NULL, 1);\n\tcase FUTEX_WAIT_REQUEUE_PI:\n\t\tval3 = FUTEX_BITSET_MATCH_ANY;\n\t\treturn futex_wait_requeue_pi(uaddr, flags, val, timeout, val3,\n\t\t\t\t\t     uaddr2);\n\tcase FUTEX_CMP_REQUEUE_PI:\n\t\treturn futex_requeue(uaddr, flags, uaddr2, val, val2, &val3, 1);\n\t}\n\treturn -ENOSYS;\n}\n\n\nSYSCALL_DEFINE6(futex, u32 __user *, uaddr, int, op, u32, val,\n\t\tstruct timespec __user *, utime, u32 __user *, uaddr2,\n\t\tu32, val3)\n{\n\tstruct timespec ts;\n\tktime_t t, *tp = NULL;\n\tu32 val2 = 0;\n\tint cmd = op & FUTEX_CMD_MASK;\n\n\tif (utime && (cmd == FUTEX_WAIT || cmd == FUTEX_LOCK_PI ||\n\t\t      cmd == FUTEX_WAIT_BITSET ||\n\t\t      cmd == FUTEX_WAIT_REQUEUE_PI)) {\n\t\tif (copy_from_user(&ts, utime, sizeof(ts)) != 0)\n\t\t\treturn -EFAULT;\n\t\tif (!timespec_valid(&ts))\n\t\t\treturn -EINVAL;\n\n\t\tt = timespec_to_ktime(ts);\n\t\tif (cmd == FUTEX_WAIT)\n\t\t\tt = ktime_add_safe(ktime_get(), t);\n\t\ttp = &t;\n\t}\n\t\n\tif (cmd == FUTEX_REQUEUE || cmd == FUTEX_CMP_REQUEUE ||\n\t    cmd == FUTEX_CMP_REQUEUE_PI || cmd == FUTEX_WAKE_OP)\n\t\tval2 = (u32) (unsigned long) utime;\n\n\treturn do_futex(uaddr, op, val, tp, uaddr2, val2, val3);\n}\n\nstatic void __init futex_detect_cmpxchg(void)\n{\n#ifndef CONFIG_HAVE_FUTEX_CMPXCHG\n\tu32 curval;\n\n\t\n\tif (cmpxchg_futex_value_locked(&curval, NULL, 0, 0) == -EFAULT)\n\t\tfutex_cmpxchg_enabled = 1;\n#endif\n}\n\nstatic int __init futex_init(void)\n{\n\tunsigned int futex_shift;\n\tunsigned long i;\n\n#if CONFIG_BASE_SMALL\n\tfutex_hashsize = 16;\n#else\n\tfutex_hashsize = roundup_pow_of_two(256 * num_possible_cpus());\n#endif\n\n\tfutex_queues = alloc_large_system_hash(\"", "1207": "\", s->buffer);\n\n\ttrace_seq_init(s);\n}\n\nvoid trace_init_global_iter(struct trace_iterator *iter)\n{\n\titer->tr = &global_trace;\n\titer->trace = iter->tr->current_trace;\n\titer->cpu_file = RING_BUFFER_ALL_CPUS;\n\titer->trace_buffer = &global_trace.trace_buffer;\n\n\tif (iter->trace && iter->trace->open)\n\t\titer->trace->open(iter);\n\n\t\n\tif (ring_buffer_overruns(iter->trace_buffer->buffer))\n\t\titer->iter_flags |= TRACE_FILE_ANNOTATE;\n\n\t\n\tif (trace_clocks[iter->tr->clock_id].in_ns)\n\t\titer->iter_flags |= TRACE_FILE_TIME_IN_NS;\n}\n\nvoid ftrace_dump(enum ftrace_dump_mode oops_dump_mode)\n{\n\t\n\tstatic struct trace_iterator iter;\n\tstatic atomic_t dump_running;\n\tunsigned int old_userobj;\n\tunsigned long flags;\n\tint cnt = 0, cpu;\n\n\t\n\tif (atomic_inc_return(&dump_running) != 1) {\n\t\tatomic_dec(&dump_running);\n\t\treturn;\n\t}\n\n\t\n\ttracing_off();\n\n\tlocal_irq_save(flags);\n\n\t\n\ttrace_init_global_iter(&iter);\n\n\tfor_each_tracing_cpu(cpu) {\n\t\tatomic_inc(&per_cpu_ptr(iter.tr->trace_buffer.data, cpu)->disabled);\n\t}\n\n\told_userobj = trace_flags & TRACE_ITER_SYM_USEROBJ;\n\n\t\n\ttrace_flags &= ~TRACE_ITER_SYM_USEROBJ;\n\n\tswitch (oops_dump_mode) {\n\tcase DUMP_ALL:\n\t\titer.cpu_file = RING_BUFFER_ALL_CPUS;\n\t\tbreak;\n\tcase DUMP_ORIG:\n\t\titer.cpu_file = raw_smp_processor_id();\n\t\tbreak;\n\tcase DUMP_NONE:\n\t\tgoto out_enable;\n\tdefault:\n\t\tprintk(KERN_TRACE \"", "1208": "\", savedcmd->cmdline_num);\n\tarch_spin_unlock(&trace_cmdline_lock);\n\n\treturn simple_read_from_buffer(ubuf, cnt, ppos, buf, r);\n}\n\nstatic void free_saved_cmdlines_buffer(struct saved_cmdlines_buffer *s)\n{\n\tkfree(s->saved_cmdlines);\n\tkfree(s->map_cmdline_to_pid);\n\tkfree(s);\n}\n\nstatic int tracing_resize_saved_cmdlines(unsigned int val)\n{\n\tstruct saved_cmdlines_buffer *s, *savedcmd_temp;\n\n\ts = kmalloc(sizeof(*s), GFP_KERNEL);\n\tif (!s)\n\t\treturn -ENOMEM;\n\n\tif (allocate_cmdlines_buffer(val, s) < 0) {\n\t\tkfree(s);\n\t\treturn -ENOMEM;\n\t}\n\n\tarch_spin_lock(&trace_cmdline_lock);\n\tsavedcmd_temp = savedcmd;\n\tsavedcmd = s;\n\tarch_spin_unlock(&trace_cmdline_lock);\n\tfree_saved_cmdlines_buffer(savedcmd_temp);\n\n\treturn 0;\n}\n\nstatic ssize_t\ntracing_saved_cmdlines_size_write(struct file *filp, const char __user *ubuf,\n\t\t\t\t  size_t cnt, loff_t *ppos)\n{\n\tunsigned long val;\n\tint ret;\n\n\tret = kstrtoul_from_user(ubuf, cnt, 10, &val);\n\tif (ret)\n\t\treturn ret;\n\n\t\n\tif (!val || val > PID_MAX_DEFAULT)\n\t\treturn -EINVAL;\n\n\tret = tracing_resize_saved_cmdlines((unsigned int)val);\n\tif (ret < 0)\n\t\treturn ret;\n\n\t*ppos += cnt;\n\n\treturn cnt;\n}\n\nstatic const struct file_operations tracing_saved_cmdlines_size_fops = {\n\t.open\t\t= tracing_open_generic,\n\t.read\t\t= tracing_saved_cmdlines_size_read,\n\t.write\t\t= tracing_saved_cmdlines_size_write,\n};\n\n#ifdef CONFIG_TRACE_ENUM_MAP_FILE\nstatic union trace_enum_map_item *\nupdate_enum_map(union trace_enum_map_item *ptr)\n{\n\tif (!ptr->map.enum_string) {\n\t\tif (ptr->tail.next) {\n\t\t\tptr = ptr->tail.next;\n\t\t\t\n\t\t\tptr++;\n\t\t} else\n\t\t\treturn NULL;\n\t}\n\treturn ptr;\n}\n\nstatic void *enum_map_next(struct seq_file *m, void *v, loff_t *pos)\n{\n\tunion trace_enum_map_item *ptr = v;\n\n\t\n\tptr = update_enum_map(ptr);\n\tif (WARN_ON_ONCE(!ptr))\n\t\treturn NULL;\n\n\tptr++;\n\n\t(*pos)++;\n\n\tptr = update_enum_map(ptr);\n\n\treturn ptr;\n}\n\nstatic void *enum_map_start(struct seq_file *m, loff_t *pos)\n{\n\tunion trace_enum_map_item *v;\n\tloff_t l = 0;\n\n\tmutex_lock(&trace_enum_mutex);\n\n\tv = trace_enum_maps;\n\tif (v)\n\t\tv++;\n\n\twhile (v && l < *pos) {\n\t\tv = enum_map_next(m, v, &l);\n\t}\n\n\treturn v;\n}\n\nstatic void enum_map_stop(struct seq_file *m, void *v)\n{\n\tmutex_unlock(&trace_enum_mutex);\n}\n\nstatic int enum_map_show(struct seq_file *m, void *v)\n{\n\tunion trace_enum_map_item *ptr = v;\n\n\tseq_printf(m, \"", "1209": "\", scancode);\n\t}\n\tkeychar &= 0x0fff;\n\tif (keychar == '\\t')\n\t\tkeychar = ' ';\n\tswitch (KTYP(keychar)) {\n\tcase KT_LETTER:\n\tcase KT_LATIN:\n\t\tif (isprint(keychar))\n\t\t\tbreak;\t\t\n\t\t\n\tcase KT_SPEC:\n\t\tif (keychar == K_ENTER)\n\t\t\tbreak;\n\t\t\n\tdefault:\n\t\treturn -1;\t\n\t}\n\n\tif (scancode == 0x1c) {\n\t\tkbd_last_ret = 1;\n\t\treturn 13;\n\t}\n\n\treturn keychar & 0xff;\n}\nEXPORT_SYMBOL_GPL(kdb_get_kbd_char);\n\n\nvoid kdb_kbd_cleanup_state(void)\n{\n\tint scancode, scanstatus;\n\n\t\n\tif (!kbd_last_ret)\n\t\treturn;\n\n\tkbd_last_ret = 0;\n\t\n\n\twhile (1) {\n\t\twhile ((inb(KBD_STATUS_REG) & KBD_STAT_OBF) == 0)\n\t\t\tcpu_relax();\n\n\t\t\n\t\tscancode = inb(KBD_DATA_REG);\n\t\tscanstatus = inb(KBD_STATUS_REG);\n\n\t\t\n\t\tif (scanstatus & KBD_STAT_MOUSE_OBF)\n\t\t\tcontinue;\n\n\t\t\n\t\tif (scancode != 0x9c)\n\t\t\tcontinue;\n\n\t\treturn;\n\t}\n}\n\n\n#include <linux/string.h>\n#include <linux/delay.h>\n#include <linux/errno.h>\n#include <linux/init.h>\n#include <linux/console.h>\n#include <linux/cpu.h>\n#include <linux/cpuidle.h>\n#include <linux/syscalls.h>\n#include <linux/gfp.h>\n#include <linux/io.h>\n#include <linux/kernel.h>\n#include <linux/list.h>\n#include <linux/mm.h>\n#include <linux/slab.h>\n#include <linux/export.h>\n#include <linux/suspend.h>\n#include <linux/syscore_ops.h>\n#include <linux/ftrace.h>\n#include <trace/events/power.h>\n#include <linux/compiler.h>\n#include <linux/moduleparam.h>\n\n#include \"", "1210": "\", set_ftrace_filter);\n\n#ifdef CONFIG_FUNCTION_GRAPH_TRACER\nstatic char ftrace_graph_buf[FTRACE_FILTER_SIZE] __initdata;\nstatic char ftrace_graph_notrace_buf[FTRACE_FILTER_SIZE] __initdata;\nstatic int ftrace_set_func(unsigned long *array, int *idx, int size, char *buffer);\n\nstatic unsigned long save_global_trampoline;\nstatic unsigned long save_global_flags;\n\nstatic int __init set_graph_function(char *str)\n{\n\tstrlcpy(ftrace_graph_buf, str, FTRACE_FILTER_SIZE);\n\treturn 1;\n}\n__setup(\"", "1211": "\", set_ftrace_notrace);\n\nstatic int __init set_ftrace_filter(char *str)\n{\n\tftrace_filter_param = true;\n\tstrlcpy(ftrace_filter_buf, str, FTRACE_FILTER_SIZE);\n\treturn 1;\n}\n__setup(\"", "1212": "\", set_graph_function);\n\nstatic int __init set_graph_notrace_function(char *str)\n{\n\tstrlcpy(ftrace_graph_notrace_buf, str, FTRACE_FILTER_SIZE);\n\treturn 1;\n}\n__setup(\"", "1213": "\", set_graph_notrace_function);\n\nstatic void __init set_ftrace_early_graph(char *buf, int enable)\n{\n\tint ret;\n\tchar *func;\n\tunsigned long *table = ftrace_graph_funcs;\n\tint *count = &ftrace_graph_count;\n\n\tif (!enable) {\n\t\ttable = ftrace_graph_notrace_funcs;\n\t\tcount = &ftrace_graph_notrace_count;\n\t}\n\n\twhile (buf) {\n\t\tfunc = strsep(&buf, \"", "1214": "\", setup_hrtimer_hres);\n\n\nstatic inline int hrtimer_is_hres_enabled(void)\n{\n\treturn hrtimer_hres_enabled;\n}\n\n\nstatic inline int hrtimer_hres_active(void)\n{\n\treturn __this_cpu_read(hrtimer_bases.hres_active);\n}\n\n\nstatic void\nhrtimer_force_reprogram(struct hrtimer_cpu_base *cpu_base, int skip_equal)\n{\n\tktime_t expires_next = __hrtimer_get_next_event(cpu_base);\n\n\tif (skip_equal && expires_next.tv64 == cpu_base->expires_next.tv64)\n\t\treturn;\n\n\tcpu_base->expires_next.tv64 = expires_next.tv64;\n\n\t\n\tif (cpu_base->hang_detected)\n\t\treturn;\n\n\tif (cpu_base->expires_next.tv64 != KTIME_MAX)\n\t\ttick_program_event(cpu_base->expires_next, 1);\n}\n\n\nstatic int hrtimer_reprogram(struct hrtimer *timer,\n\t\t\t     struct hrtimer_clock_base *base)\n{\n\tstruct hrtimer_cpu_base *cpu_base = this_cpu_ptr(&hrtimer_bases);\n\tktime_t expires = ktime_sub(hrtimer_get_expires(timer), base->offset);\n\tint res;\n\n\tWARN_ON_ONCE(hrtimer_get_expires_tv64(timer) < 0);\n\n\t\n\tif (hrtimer_callback_running(timer))\n\t\treturn 0;\n\n\t\n\tif (expires.tv64 < 0)\n\t\treturn -ETIME;\n\n\tif (expires.tv64 >= cpu_base->expires_next.tv64)\n\t\treturn 0;\n\n\t\n\tif (cpu_base->in_hrtirq)\n\t\treturn 0;\n\n\t\n\tif (cpu_base->hang_detected)\n\t\treturn 0;\n\n\t\n\tres = tick_program_event(expires, 0);\n\tif (!IS_ERR_VALUE(res))\n\t\tcpu_base->expires_next = expires;\n\treturn res;\n}\n\n\nstatic inline void hrtimer_init_hres(struct hrtimer_cpu_base *base)\n{\n\tbase->expires_next.tv64 = KTIME_MAX;\n\tbase->hres_active = 0;\n}\n\nstatic inline ktime_t hrtimer_update_base(struct hrtimer_cpu_base *base)\n{\n\tktime_t *offs_real = &base->clock_base[HRTIMER_BASE_REALTIME].offset;\n\tktime_t *offs_boot = &base->clock_base[HRTIMER_BASE_BOOTTIME].offset;\n\tktime_t *offs_tai = &base->clock_base[HRTIMER_BASE_TAI].offset;\n\n\treturn ktime_get_update_offsets_now(offs_real, offs_boot, offs_tai);\n}\n\n\nstatic void retrigger_next_event(void *arg)\n{\n\tstruct hrtimer_cpu_base *base = this_cpu_ptr(&hrtimer_bases);\n\n\tif (!hrtimer_hres_active())\n\t\treturn;\n\n\traw_spin_lock(&base->lock);\n\thrtimer_update_base(base);\n\thrtimer_force_reprogram(base, 0);\n\traw_spin_unlock(&base->lock);\n}\n\n\nstatic int hrtimer_switch_to_hres(void)\n{\n\tint i, cpu = smp_processor_id();\n\tstruct hrtimer_cpu_base *base = &per_cpu(hrtimer_bases, cpu);\n\tunsigned long flags;\n\n\tif (base->hres_active)\n\t\treturn 1;\n\n\tlocal_irq_save(flags);\n\n\tif (tick_init_highres()) {\n\t\tlocal_irq_restore(flags);\n\t\tprintk(KERN_WARNING \"", "1215": "\", size >> 10);\n\t\t} else\n\t\t\tr = sprintf(buf, \"", "1216": "\", size);\n\telse\n\t\tr = sprintf(buf, \"", "1217": "\", size, expanded_size);\n\tmutex_unlock(&trace_types_lock);\n\n\treturn simple_read_from_buffer(ubuf, cnt, ppos, buf, r);\n}\n\nstatic ssize_t\ntracing_free_buffer_write(struct file *filp, const char __user *ubuf,\n\t\t\t  size_t cnt, loff_t *ppos)\n{\n\t\n\n\t*ppos += cnt;\n\n\treturn cnt;\n}\n\nstatic int\ntracing_free_buffer_release(struct inode *inode, struct file *filp)\n{\n\tstruct trace_array *tr = inode->i_private;\n\n\t\n\tif (trace_flags & TRACE_ITER_STOP_ON_FREE)\n\t\ttracer_tracing_off(tr);\n\t\n\ttracing_resize_ring_buffer(tr, 0, RING_BUFFER_ALL_CPUS);\n\n\ttrace_array_put(tr);\n\n\treturn 0;\n}\n\nstatic ssize_t\ntracing_mark_write(struct file *filp, const char __user *ubuf,\n\t\t\t\t\tsize_t cnt, loff_t *fpos)\n{\n\tunsigned long addr = (unsigned long)ubuf;\n\tstruct trace_array *tr = filp->private_data;\n\tstruct ring_buffer_event *event;\n\tstruct ring_buffer *buffer;\n\tstruct print_entry *entry;\n\tunsigned long irq_flags;\n\tstruct page *pages[2];\n\tvoid *map_page[2];\n\tint nr_pages = 1;\n\tssize_t written;\n\tint offset;\n\tint size;\n\tint len;\n\tint ret;\n\tint i;\n\n\tif (tracing_disabled)\n\t\treturn -EINVAL;\n\n\tif (!(trace_flags & TRACE_ITER_MARKERS))\n\t\treturn -EINVAL;\n\n\tif (cnt > TRACE_BUF_SIZE)\n\t\tcnt = TRACE_BUF_SIZE;\n\n\t\n\tBUILD_BUG_ON(TRACE_BUF_SIZE >= PAGE_SIZE);\n\n\t\n\tif ((addr & PAGE_MASK) != ((addr + cnt) & PAGE_MASK))\n\t\tnr_pages = 2;\n\n\toffset = addr & (PAGE_SIZE - 1);\n\taddr &= PAGE_MASK;\n\n\tret = get_user_pages_fast(addr, nr_pages, 0, pages);\n\tif (ret < nr_pages) {\n\t\twhile (--ret >= 0)\n\t\t\tput_page(pages[ret]);\n\t\twritten = -EFAULT;\n\t\tgoto out;\n\t}\n\n\tfor (i = 0; i < nr_pages; i++)\n\t\tmap_page[i] = kmap_atomic(pages[i]);\n\n\tlocal_save_flags(irq_flags);\n\tsize = sizeof(*entry) + cnt + 2; \n\tbuffer = tr->trace_buffer.buffer;\n\tevent = trace_buffer_lock_reserve(buffer, TRACE_PRINT, size,\n\t\t\t\t\t  irq_flags, preempt_count());\n\tif (!event) {\n\t\t\n\t\twritten = -EBADF;\n\t\tgoto out_unlock;\n\t}\n\n\tentry = ring_buffer_event_data(event);\n\tentry->ip = _THIS_IP_;\n\n\tif (nr_pages == 2) {\n\t\tlen = PAGE_SIZE - offset;\n\t\tmemcpy(&entry->buf, map_page[0] + offset, len);\n\t\tmemcpy(&entry->buf[len], map_page[1], cnt - len);\n\t} else\n\t\tmemcpy(&entry->buf, map_page[0] + offset, cnt);\n\n\tif (entry->buf[cnt - 1] != '\\n') {\n\t\tentry->buf[cnt] = '\\n';\n\t\tentry->buf[cnt + 1] = '\\0';\n\t} else\n\t\tentry->buf[cnt] = '\\0';\n\n\t__buffer_unlock_commit(buffer, event);\n\n\twritten = cnt;\n\n\t*fpos += written;\n\n out_unlock:\n\tfor (i = nr_pages - 1; i >= 0; i--) {\n\t\tkunmap_atomic(map_page[i]);\n\t\tput_page(pages[i]);\n\t}\n out:\n\treturn written;\n}\n\nstatic int tracing_clock_show(struct seq_file *m, void *v)\n{\n\tstruct trace_array *tr = m->private;\n\tint i;\n\n\tfor (i = 0; i < ARRAY_SIZE(trace_clocks); i++)\n\t\tseq_printf(m,\n\t\t\t\"", "1218": "\", sleep_states_setup);\n\n\nvoid suspend_set_ops(const struct platform_suspend_ops *ops)\n{\n\tsuspend_state_t i;\n\tint j = 0;\n\n\tlock_system_sleep();\n\n\tsuspend_ops = ops;\n\tfor (i = PM_SUSPEND_MEM; i >= PM_SUSPEND_STANDBY; i--)\n\t\tif (valid_state(i)) {\n\t\t\tpm_states[i] = pm_labels[j++];\n\t\t} else if (!relative_states) {\n\t\t\tpm_states[i] = NULL;\n\t\t\tj++;\n\t\t}\n\n\tpm_states[PM_SUSPEND_FREEZE] = pm_labels[j];\n\n\tunlock_system_sleep();\n}\nEXPORT_SYMBOL_GPL(suspend_set_ops);\n\n\nint suspend_valid_only_mem(suspend_state_t state)\n{\n\treturn state == PM_SUSPEND_MEM;\n}\nEXPORT_SYMBOL_GPL(suspend_valid_only_mem);\n\nstatic bool sleep_state_supported(suspend_state_t state)\n{\n\treturn state == PM_SUSPEND_FREEZE || (suspend_ops && suspend_ops->enter);\n}\n\nstatic int platform_suspend_prepare(suspend_state_t state)\n{\n\treturn state != PM_SUSPEND_FREEZE && suspend_ops->prepare ?\n\t\tsuspend_ops->prepare() : 0;\n}\n\nstatic int platform_suspend_prepare_late(suspend_state_t state)\n{\n\treturn state == PM_SUSPEND_FREEZE && freeze_ops && freeze_ops->prepare ?\n\t\tfreeze_ops->prepare() : 0;\n}\n\nstatic int platform_suspend_prepare_noirq(suspend_state_t state)\n{\n\treturn state != PM_SUSPEND_FREEZE && suspend_ops->prepare_late ?\n\t\tsuspend_ops->prepare_late() : 0;\n}\n\nstatic void platform_resume_noirq(suspend_state_t state)\n{\n\tif (state != PM_SUSPEND_FREEZE && suspend_ops->wake)\n\t\tsuspend_ops->wake();\n}\n\nstatic void platform_resume_early(suspend_state_t state)\n{\n\tif (state == PM_SUSPEND_FREEZE && freeze_ops && freeze_ops->restore)\n\t\tfreeze_ops->restore();\n}\n\nstatic void platform_resume_finish(suspend_state_t state)\n{\n\tif (state != PM_SUSPEND_FREEZE && suspend_ops->finish)\n\t\tsuspend_ops->finish();\n}\n\nstatic int platform_suspend_begin(suspend_state_t state)\n{\n\tif (state == PM_SUSPEND_FREEZE && freeze_ops && freeze_ops->begin)\n\t\treturn freeze_ops->begin();\n\telse if (suspend_ops->begin)\n\t\treturn suspend_ops->begin(state);\n\telse\n\t\treturn 0;\n}\n\nstatic void platform_resume_end(suspend_state_t state)\n{\n\tif (state == PM_SUSPEND_FREEZE && freeze_ops && freeze_ops->end)\n\t\tfreeze_ops->end();\n\telse if (suspend_ops->end)\n\t\tsuspend_ops->end();\n}\n\nstatic void platform_recover(suspend_state_t state)\n{\n\tif (state != PM_SUSPEND_FREEZE && suspend_ops->recover)\n\t\tsuspend_ops->recover();\n}\n\nstatic bool platform_suspend_again(suspend_state_t state)\n{\n\treturn state != PM_SUSPEND_FREEZE && suspend_ops->suspend_again ?\n\t\tsuspend_ops->suspend_again() : false;\n}\n\n#ifdef CONFIG_PM_DEBUG\nstatic unsigned int pm_test_delay = 5;\nmodule_param(pm_test_delay, uint, 0644);\nMODULE_PARM_DESC(pm_test_delay,\n\t\t \"", "1219": "\", src->name);\n\t}\n\tmutex_unlock(&clocksource_mutex);\n\n\tcount += snprintf(buf + count,\n\t\t\t  max((ssize_t)PAGE_SIZE - count, (ssize_t)0), \"", "1220": "\", sym);\n\telse\n\t\tSEQ_printf(m, \"", "1221": "\", symname);\n}\n\nstatic int tstats_show(struct seq_file *m, void *v)\n{\n\tstruct timespec period;\n\tstruct entry *entry;\n\tunsigned long ms;\n\tlong events = 0;\n\tktime_t time;\n\tint i;\n\n\tmutex_lock(&show_mutex);\n\t\n\tif (timer_stats_active)\n\t\ttime_stop = ktime_get();\n\n\ttime = ktime_sub(time_stop, time_start);\n\n\tperiod = ktime_to_timespec(time);\n\tms = period.tv_nsec / 1000000;\n\n\tseq_puts(m, \"", "1222": "\", symname);\n}\n\nstatic void\nprint_timer(struct seq_file *m, struct hrtimer *taddr, struct hrtimer *timer,\n\t    int idx, u64 now)\n{\n#ifdef CONFIG_TIMER_STATS\n\tchar tmp[TASK_COMM_LEN + 1];\n#endif\n\tSEQ_printf(m, \"", "1223": "\", t, usec_rem);\n\t} else {\n\t\t\n\t\ttrace_seq_printf(s, \"", "1224": "\", timer->state);\n#ifdef CONFIG_TIMER_STATS\n\tSEQ_printf(m, \"", "1225": "\", timer_stats_active ? \"", "1226": "\", tmp, timer->start_pid);\n#endif\n\tSEQ_printf(m, \"", "1227": "\", tmpbuffer);\n\t\t*lastchar = (char)key;\n\t\t*(lastchar+1) = '\\0';\n\t\treturn lastchar;\n\tcase 6: \n\t\tif (cp < lastchar) {\n\t\t\tkdb_printf(\"", "1228": "\", tmpbuffer);\n\t\t*lastchar = (char)key;\n\t\t*(lastchar+1) = '\\0';\n\t\treturn lastchar;\n\tcase 9: \n\t\tif (tab < 2)\n\t\t\t++tab;\n\t\tp_tmp = buffer;\n\t\twhile (*p_tmp == ' ')\n\t\t\tp_tmp++;\n\t\tif (p_tmp > cp)\n\t\t\tbreak;\n\t\tmemcpy(tmpbuffer, p_tmp, cp-p_tmp);\n\t\t*(tmpbuffer + (cp-p_tmp)) = '\\0';\n\t\tp_tmp = strrchr(tmpbuffer, ' ');\n\t\tif (p_tmp)\n\t\t\t++p_tmp;\n\t\telse\n\t\t\tp_tmp = tmpbuffer;\n\t\tlen = strlen(p_tmp);\n\t\tcount = kallsyms_symbol_complete(p_tmp,\n\t\t\t\t\t\t sizeof(tmpbuffer) -\n\t\t\t\t\t\t (p_tmp - tmpbuffer));\n\t\tif (tab == 2 && count > 0) {\n\t\t\tkdb_printf(\"", "1229": "\", tr->current_trace->name);\n\tmutex_unlock(&trace_types_lock);\n\n\treturn simple_read_from_buffer(ubuf, cnt, ppos, buf, r);\n}\n\nint tracer_init(struct tracer *t, struct trace_array *tr)\n{\n\ttracing_reset_online_cpus(&tr->trace_buffer);\n\treturn t->init(tr);\n}\n\nstatic void set_buffer_entries(struct trace_buffer *buf, unsigned long val)\n{\n\tint cpu;\n\n\tfor_each_tracing_cpu(cpu)\n\t\tper_cpu_ptr(buf->data, cpu)->entries = val;\n}\n\n#ifdef CONFIG_TRACER_MAX_TRACE\n\nstatic int resize_buffer_duplicate_size(struct trace_buffer *trace_buf,\n\t\t\t\t\tstruct trace_buffer *size_buf, int cpu_id)\n{\n\tint cpu, ret = 0;\n\n\tif (cpu_id == RING_BUFFER_ALL_CPUS) {\n\t\tfor_each_tracing_cpu(cpu) {\n\t\t\tret = ring_buffer_resize(trace_buf->buffer,\n\t\t\t\t per_cpu_ptr(size_buf->data, cpu)->entries, cpu);\n\t\t\tif (ret < 0)\n\t\t\t\tbreak;\n\t\t\tper_cpu_ptr(trace_buf->data, cpu)->entries =\n\t\t\t\tper_cpu_ptr(size_buf->data, cpu)->entries;\n\t\t}\n\t} else {\n\t\tret = ring_buffer_resize(trace_buf->buffer,\n\t\t\t\t per_cpu_ptr(size_buf->data, cpu_id)->entries, cpu_id);\n\t\tif (ret == 0)\n\t\t\tper_cpu_ptr(trace_buf->data, cpu_id)->entries =\n\t\t\t\tper_cpu_ptr(size_buf->data, cpu_id)->entries;\n\t}\n\n\treturn ret;\n}\n#endif \n\nstatic int __tracing_resize_ring_buffer(struct trace_array *tr,\n\t\t\t\t\tunsigned long size, int cpu)\n{\n\tint ret;\n\n\t\n\tring_buffer_expanded = true;\n\n\t\n\tif (!tr->trace_buffer.buffer)\n\t\treturn 0;\n\n\tret = ring_buffer_resize(tr->trace_buffer.buffer, size, cpu);\n\tif (ret < 0)\n\t\treturn ret;\n\n#ifdef CONFIG_TRACER_MAX_TRACE\n\tif (!(tr->flags & TRACE_ARRAY_FL_GLOBAL) ||\n\t    !tr->current_trace->use_max_tr)\n\t\tgoto out;\n\n\tret = ring_buffer_resize(tr->max_buffer.buffer, size, cpu);\n\tif (ret < 0) {\n\t\tint r = resize_buffer_duplicate_size(&tr->trace_buffer,\n\t\t\t\t\t\t     &tr->trace_buffer, cpu);\n\t\tif (r < 0) {\n\t\t\t\n\t\t\tWARN_ON(1);\n\t\t\ttracing_disabled = 1;\n\t\t}\n\t\treturn ret;\n\t}\n\n\tif (cpu == RING_BUFFER_ALL_CPUS)\n\t\tset_buffer_entries(&tr->max_buffer, size);\n\telse\n\t\tper_cpu_ptr(tr->max_buffer.data, cpu)->entries = size;\n\n out:\n#endif \n\n\tif (cpu == RING_BUFFER_ALL_CPUS)\n\t\tset_buffer_entries(&tr->trace_buffer, size);\n\telse\n\t\tper_cpu_ptr(tr->trace_buffer.data, cpu)->entries = size;\n\n\treturn ret;\n}\n\nstatic ssize_t tracing_resize_ring_buffer(struct trace_array *tr,\n\t\t\t\t\t  unsigned long size, int cpu_id)\n{\n\tint ret = size;\n\n\tmutex_lock(&trace_types_lock);\n\n\tif (cpu_id != RING_BUFFER_ALL_CPUS) {\n\t\t\n\t\tif (!cpumask_test_cpu(cpu_id, tracing_buffer_mask)) {\n\t\t\tret = -EINVAL;\n\t\t\tgoto out;\n\t\t}\n\t}\n\n\tret = __tracing_resize_ring_buffer(tr, size, cpu_id);\n\tif (ret < 0)\n\t\tret = -ENOMEM;\n\nout:\n\tmutex_unlock(&trace_types_lock);\n\n\treturn ret;\n}\n\n\n\nint tracing_update_buffers(void)\n{\n\tint ret = 0;\n\n\tmutex_lock(&trace_types_lock);\n\tif (!ring_buffer_expanded)\n\t\tret = __tracing_resize_ring_buffer(&global_trace, trace_buf_size,\n\t\t\t\t\t\tRING_BUFFER_ALL_CPUS);\n\tmutex_unlock(&trace_types_lock);\n\n\treturn ret;\n}\n\nstruct trace_option_dentry;\n\nstatic struct trace_option_dentry *\ncreate_trace_option_files(struct trace_array *tr, struct tracer *tracer);\n\nstatic void\ndestroy_trace_option_files(struct trace_option_dentry *topts);\n\n\nstatic void tracing_set_nop(struct trace_array *tr)\n{\n\tif (tr->current_trace == &nop_trace)\n\t\treturn;\n\t\n\ttr->current_trace->enabled--;\n\n\tif (tr->current_trace->reset)\n\t\ttr->current_trace->reset(tr);\n\n\ttr->current_trace = &nop_trace;\n}\n\nstatic void update_tracer_options(struct trace_array *tr, struct tracer *t)\n{\n\tstatic struct trace_option_dentry *topts;\n\n\t\n\tif (!tr->dir)\n\t\treturn;\n\n\t\n\tif (!(tr->flags & TRACE_ARRAY_FL_GLOBAL))\n\t\treturn;\n\n\tdestroy_trace_option_files(topts);\n\ttopts = create_trace_option_files(tr, t);\n}\n\nstatic int tracing_set_tracer(struct trace_array *tr, const char *buf)\n{\n\tstruct tracer *t;\n#ifdef CONFIG_TRACER_MAX_TRACE\n\tbool had_max_tr;\n#endif\n\tint ret = 0;\n\n\tmutex_lock(&trace_types_lock);\n\n\tif (!ring_buffer_expanded) {\n\t\tret = __tracing_resize_ring_buffer(tr, trace_buf_size,\n\t\t\t\t\t\tRING_BUFFER_ALL_CPUS);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t\tret = 0;\n\t}\n\n\tfor (t = trace_types; t; t = t->next) {\n\t\tif (strcmp(t->name, buf) == 0)\n\t\t\tbreak;\n\t}\n\tif (!t) {\n\t\tret = -EINVAL;\n\t\tgoto out;\n\t}\n\tif (t == tr->current_trace)\n\t\tgoto out;\n\n\t\n\tif (!trace_ok_for_array(t, tr)) {\n\t\tret = -EINVAL;\n\t\tgoto out;\n\t}\n\n\t\n\tif (tr->current_trace->ref) {\n\t\tret = -EBUSY;\n\t\tgoto out;\n\t}\n\n\ttrace_branch_disable();\n\n\ttr->current_trace->enabled--;\n\n\tif (tr->current_trace->reset)\n\t\ttr->current_trace->reset(tr);\n\n\t\n\ttr->current_trace = &nop_trace;\n\n#ifdef CONFIG_TRACER_MAX_TRACE\n\thad_max_tr = tr->allocated_snapshot;\n\n\tif (had_max_tr && !t->use_max_tr) {\n\t\t\n\t\tsynchronize_sched();\n\t\tfree_snapshot(tr);\n\t}\n#endif\n\tupdate_tracer_options(tr, t);\n\n#ifdef CONFIG_TRACER_MAX_TRACE\n\tif (t->use_max_tr && !had_max_tr) {\n\t\tret = alloc_snapshot(tr);\n\t\tif (ret < 0)\n\t\t\tgoto out;\n\t}\n#endif\n\n\tif (t->init) {\n\t\tret = tracer_init(t, tr);\n\t\tif (ret)\n\t\t\tgoto out;\n\t}\n\n\ttr->current_trace = t;\n\ttr->current_trace->enabled++;\n\ttrace_branch_enable(tr);\n out:\n\tmutex_unlock(&trace_types_lock);\n\n\treturn ret;\n}\n\nstatic ssize_t\ntracing_set_trace_write(struct file *filp, const char __user *ubuf,\n\t\t\tsize_t cnt, loff_t *ppos)\n{\n\tstruct trace_array *tr = filp->private_data;\n\tchar buf[MAX_TRACER_SIZE+1];\n\tint i;\n\tsize_t ret;\n\tint err;\n\n\tret = cnt;\n\n\tif (cnt > MAX_TRACER_SIZE)\n\t\tcnt = MAX_TRACER_SIZE;\n\n\tif (copy_from_user(&buf, ubuf, cnt))\n\t\treturn -EFAULT;\n\n\tbuf[cnt] = 0;\n\n\t\n\tfor (i = cnt - 1; i > 0 && isspace(buf[i]); i--)\n\t\tbuf[i] = 0;\n\n\terr = tracing_set_tracer(tr, buf);\n\tif (err)\n\t\treturn err;\n\n\t*ppos += ret;\n\n\treturn ret;\n}\n\nstatic ssize_t\ntracing_nsecs_read(unsigned long *ptr, char __user *ubuf,\n\t\t   size_t cnt, loff_t *ppos)\n{\n\tchar buf[64];\n\tint r;\n\n\tr = snprintf(buf, sizeof(buf), \"", "1230": "\", trace_clocks[i].name,\n\t\t\ti == tr->clock_id ? \"", "1231": "\", trace_options[i]);\n\t\telse\n\t\t\tseq_printf(m, \"", "1232": "\", trace_options[i]);\n\t}\n\n\tfor (i = 0; trace_opts[i].name; i++) {\n\t\tif (tracer_flags & trace_opts[i].bit)\n\t\t\tseq_printf(m, \"", "1233": "\", trace_opts[i].name);\n\t\telse\n\t\t\tseq_printf(m, \"", "1234": "\", trace_opts[i].name);\n\t}\n\tmutex_unlock(&trace_types_lock);\n\n\treturn 0;\n}\n\nstatic int __set_tracer_option(struct trace_array *tr,\n\t\t\t       struct tracer_flags *tracer_flags,\n\t\t\t       struct tracer_opt *opts, int neg)\n{\n\tstruct tracer *trace = tr->current_trace;\n\tint ret;\n\n\tret = trace->set_flag(tr, tracer_flags->val, opts->bit, !neg);\n\tif (ret)\n\t\treturn ret;\n\n\tif (neg)\n\t\ttracer_flags->val &= ~opts->bit;\n\telse\n\t\ttracer_flags->val |= opts->bit;\n\treturn 0;\n}\n\n\nstatic int set_tracer_option(struct trace_array *tr, char *cmp, int neg)\n{\n\tstruct tracer *trace = tr->current_trace;\n\tstruct tracer_flags *tracer_flags = trace->flags;\n\tstruct tracer_opt *opts = NULL;\n\tint i;\n\n\tfor (i = 0; tracer_flags->opts[i].name; i++) {\n\t\topts = &tracer_flags->opts[i];\n\n\t\tif (strcmp(cmp, opts->name) == 0)\n\t\t\treturn __set_tracer_option(tr, trace->flags, opts, neg);\n\t}\n\n\treturn -EINVAL;\n}\n\n\nint trace_keep_overwrite(struct tracer *tracer, u32 mask, int set)\n{\n\tif (tracer->enabled && (mask & TRACE_ITER_OVERWRITE) && !set)\n\t\treturn -1;\n\n\treturn 0;\n}\n\nint set_tracer_flag(struct trace_array *tr, unsigned int mask, int enabled)\n{\n\t\n\tif (!!(trace_flags & mask) == !!enabled)\n\t\treturn 0;\n\n\t\n\tif (tr->current_trace->flag_changed)\n\t\tif (tr->current_trace->flag_changed(tr, mask, !!enabled))\n\t\t\treturn -EINVAL;\n\n\tif (enabled)\n\t\ttrace_flags |= mask;\n\telse\n\t\ttrace_flags &= ~mask;\n\n\tif (mask == TRACE_ITER_RECORD_CMD)\n\t\ttrace_event_enable_cmd_record(enabled);\n\n\tif (mask == TRACE_ITER_OVERWRITE) {\n\t\tring_buffer_change_overwrite(tr->trace_buffer.buffer, enabled);\n#ifdef CONFIG_TRACER_MAX_TRACE\n\t\tring_buffer_change_overwrite(tr->max_buffer.buffer, enabled);\n#endif\n\t}\n\n\tif (mask == TRACE_ITER_PRINTK)\n\t\ttrace_printk_start_stop_comm(enabled);\n\n\treturn 0;\n}\n\nstatic int trace_set_options(struct trace_array *tr, char *option)\n{\n\tchar *cmp;\n\tint neg = 0;\n\tint ret = -ENODEV;\n\tint i;\n\n\tcmp = strstrip(option);\n\n\tif (strncmp(cmp, \"", "1235": "\", tsk);\n\telse\n\t\tprintk(KERN_ERR \"", "1236": "\", tsk);\n\tif (tsk->cred != tsk->real_cred)\n\t\tdump_invalid_creds(tsk->cred, \"", "1237": "\", usage_str[bit]);\n\t\t\tlen += printk(\"", "1238": "\", virq);\n\t\tret = -ENOMEM;\n\t\tgoto out_free_desc;\n\t}\n\n\tmutex_lock(&irq_domain_mutex);\n\tret = irq_domain_alloc_irqs_recursive(domain, virq, nr_irqs, arg);\n\tif (ret < 0) {\n\t\tmutex_unlock(&irq_domain_mutex);\n\t\tgoto out_free_irq_data;\n\t}\n\tfor (i = 0; i < nr_irqs; i++)\n\t\tirq_domain_insert_irq(virq + i);\n\tmutex_unlock(&irq_domain_mutex);\n\n\treturn virq;\n\nout_free_irq_data:\n\tirq_domain_free_irq_data(virq, nr_irqs);\nout_free_desc:\n\tirq_free_descs(virq, nr_irqs);\n\treturn ret;\n}\n\n\nvoid irq_domain_free_irqs(unsigned int virq, unsigned int nr_irqs)\n{\n\tstruct irq_data *data = irq_get_irq_data(virq);\n\tint i;\n\n\tif (WARN(!data || !data->domain || !data->domain->ops->free,\n\t\t \"", "1239": "\",\"", "1240": "\",clone_children\"", "1241": "\",depth,\"", "1242": "\",high\"", "1243": "\",low\"", "1244": "\",name=%s\"", "1245": "\",noprefix\"", "1246": "\",release_agent=%s\"", "1247": "\",xattr\"", "1248": "\"-\"", "1249": "\"-%-8s\"", "1250": "\"--\"", "1251": "\"---    ----            ---             ---\\n\"", "1252": "\"--- %s%s: nwriters_stress=%d nreaders_stress=%d stat_interval=%d verbose=%d shuffle_interval=%d stutter=%d shutdown_secs=%d onoff_interval=%d onoff_holdoff=%d\\n\"", "1253": "\"--- %s: nreaders=%d nfakewriters=%d \"", "1254": "\"-----------------------------\"", "1255": "\"------------------------------------------------------\"", "1256": "\"---------------------------------------------------------\"", "1257": "\"----------------------------------------------------\\n\"", "1258": "\"------------------------------------------------\\n\"", "1259": "\"---------------------------------------------\\n\"", "1260": "\"--------------------------------------------\\n\"", "1261": "\"-------------------------------------\\n\"", "1262": "\"----------------------------------\\n\"", "1263": "\"---------------------------------\\n\"", "1264": "\"-------------------------------\\n\"", "1265": "\"------------------------------\\n\"", "1266": "\"-----------------------------\\n\"", "1267": "\"----------\\n\"", "1268": "\"---[ end Kernel panic - not syncing: %s\\n\"", "1269": "\"--=\"", "1270": "\"--> %lx (%d)\"", "1271": "\"-:testprobe\"", "1272": "\"-:testprobe2\"", "1273": "\"-=\"", "1274": "\"-> existing mapping on virq %d\\n\"", "1275": "\"-> using domain @%p\\n\"", "1276": "\"->action(): %p\\n\"", "1277": "\"->action->handler(): %p, \"", "1278": "\"->handle_irq():  %p, \"", "1279": "\"->irq_data.chip(): %p, \"", "1280": "\"->rcu_read_unlock_special: %#x (b: %d, nq: %d)\\n\"", "1281": "\"-ON-R\"", "1282": "\"-ON-W\"", "1283": "\"-R\"", "1284": "\"-W\"", "1285": "\"-q\"", "1286": "\".\"", "1287": "\".-_\"", "1288": "\".. ->owner: %p\\n\"", "1289": "\".. bad ring buffer \"", "1290": "\".. corrupted trace buffer .. \"", "1291": "\".. filter did not filter .. \"", "1292": "\".. filter failed count=%ld ..\"", "1293": "\".. held by:  \"", "1294": "\".. invalid entry %d \"", "1295": "\".. no entries found ..\"", "1296": "\"..\"", "1297": "\"../../mm/internal.h\"", "1298": "\"../debug_core.h\"", "1299": "\"../fs/xfs/xfs_sysctl.h\"", "1300": "\"../locking/rtmutex_common.h\"", "1301": "\"../smpboot.h\"", "1302": "\"../time/tick-internal.h\"", "1303": "\"../workqueue_internal.h\"", "1304": "\".D\"", "1305": "\".E\"", "1306": "\".G\"", "1307": "\".I\"", "1308": "\".N\"", "1309": "\".R\"", "1310": "\".T\"", "1311": "\".W\"", "1312": "\".ctors\"", "1313": "\".data..percpu\"", "1314": "\".debug\"", "1315": "\".exit\"", "1316": "\".gnu.linkonce.this_module\"", "1317": "\".init\"", "1318": "\".init_array\"", "1319": "\".modinfo\"", "1320": "\".owner_cpu: %d\\n\"", "1321": "\".rodata\"", "1322": "\".system_keyring\"", "1323": "\".tmp_\"", "1324": "\"/\"", "1325": "\"/%d\"", "1326": "\"/0x%lx\"", "1327": "\"/=\"", "1328": "\"/autogroup\"", "1329": "\"/autogroup-%ld nice %d\\n\"", "1330": "\"/sbin/modprobe\"", "1331": "\"0\"", "1332": "\"0-0\\tLinux           \\t[kernel]\\n\"", "1333": "\"0\\n\"", "1334": "\"0x%Lx\"", "1335": "\"0x%llx\"", "1336": "\"0x%lx\"", "1337": "\"0x%lx\\n\"", "1338": "\"0x%p %8d %8d  %d %4d   %c  0x%p %c%s\\n\"", "1339": "\"0x%p-0x%p\\t%ps\\n\"", "1340": "\"0x%pK\\n\"", "1341": "\"0x%x\"", "1342": "\"1\"", "1343": "\"2.6.%u%s\"", "1344": "\": \"", "1345": "\": \\t\"", "1346": "\":\"", "1347": "\":%p\"", "1348": "\":%s/%s\"", "1349": "\":count=%ld\"", "1350": "\":count=%ld\\n\"", "1351": "\":unlimited\"", "1352": "\":unlimited\\n\"", "1353": "\";\n\t\t*str += 4;\n\t} else if (!memcmp(str, \"", "1354": "\";\n\t\t}\n\t}\n\treturn NULL;\n}\n\n\nstatic char *kdballocenv(size_t bytes)\n{\n#define\tKDB_ENVBUFSIZE\t512\n\tstatic char envbuffer[KDB_ENVBUFSIZE];\n\tstatic int envbufsize;\n\tchar *ep = NULL;\n\n\tif ((KDB_ENVBUFSIZE - envbufsize) >= bytes) {\n\t\tep = &envbuffer[envbufsize];\n\t\tenvbufsize += bytes;\n\t}\n\treturn ep;\n}\n\n\nstatic int kdbgetulenv(const char *match, unsigned long *value)\n{\n\tchar *ep;\n\n\tep = kdbgetenv(match);\n\tif (!ep)\n\t\treturn KDB_NOTENV;\n\tif (strlen(ep) == 0)\n\t\treturn KDB_NOENVVALUE;\n\n\t*value = simple_strtoul(ep, NULL, 0);\n\n\treturn 0;\n}\n\n\nint kdbgetintenv(const char *match, int *value)\n{\n\tunsigned long val;\n\tint diag;\n\n\tdiag = kdbgetulenv(match, &val);\n\tif (!diag)\n\t\t*value = (int) val;\n\treturn diag;\n}\n\n\nint kdbgetularg(const char *arg, unsigned long *value)\n{\n\tchar *endp;\n\tunsigned long val;\n\n\tval = simple_strtoul(arg, &endp, 0);\n\n\tif (endp == arg) {\n\t\t\n\t\tval = simple_strtoul(arg, &endp, 16);\n\t\tif (endp == arg)\n\t\t\treturn KDB_BADINT;\n\t}\n\n\t*value = val;\n\n\treturn 0;\n}\n\nint kdbgetu64arg(const char *arg, u64 *value)\n{\n\tchar *endp;\n\tu64 val;\n\n\tval = simple_strtoull(arg, &endp, 0);\n\n\tif (endp == arg) {\n\n\t\tval = simple_strtoull(arg, &endp, 16);\n\t\tif (endp == arg)\n\t\t\treturn KDB_BADINT;\n\t}\n\n\t*value = val;\n\n\treturn 0;\n}\n\n\nint kdb_set(int argc, const char **argv)\n{\n\tint i;\n\tchar *ep;\n\tsize_t varlen, vallen;\n\n\t\n\tif (argc == 3) {\n\t\targv[2] = argv[3];\n\t\targc--;\n\t}\n\n\tif (argc != 2)\n\t\treturn KDB_ARGCOUNT;\n\n\t\n\tif (strcmp(argv[1], \"", "1355": "\";\n\telse\n\t\tbuf = \"", "1356": "\";\n\tstruct console *c = console_drivers;\n\tstatic DEFINE_SPINLOCK(kdb_printf_lock);\n\tunsigned long uninitialized_var(flags);\n\n\tpreempt_disable();\n\tsaved_trap_printk = kdb_trap_printk;\n\tkdb_trap_printk = 0;\n\n\t\n\tif (!KDB_STATE(PRINTF_LOCK)) {\n\t\tKDB_STATE_SET(PRINTF_LOCK);\n\t\tspin_lock_irqsave(&kdb_printf_lock, flags);\n\t\tgot_printf_lock = 1;\n\t\tatomic_inc(&kdb_event);\n\t} else {\n\t\t__acquire(kdb_printf_lock);\n\t}\n\n\tdiag = kdbgetintenv(\"", "1357": "\";\n\n\t\t\n\t\tkdb_nextline = 1;\t\n\n\t\t\n\t\tmoreprompt = kdbgetenv(\"", "1358": "\";\n\n\t\tkdb_input_flush();\n\t\tc = console_drivers;\n\n\t\tif (dbg_io_ops && !dbg_io_ops->is_console) {\n\t\t\tlen = strlen(moreprompt);\n\t\t\tcp = moreprompt;\n\t\t\twhile (len--) {\n\t\t\t\tdbg_io_ops->write_char(*cp);\n\t\t\t\tcp++;\n\t\t\t}\n\t\t}\n\t\twhile (c) {\n\t\t\tc->write(c, moreprompt, strlen(moreprompt));\n\t\t\ttouch_nmi_watchdog();\n\t\t\tc = c->next;\n\t\t}\n\n\t\tif (logging)\n\t\t\tprintk(\"", "1359": "\";\n\n\t\trecursion_bug = 0;\n\t\t\n\t\tprinted_len += log_store(0, 2, LOG_PREFIX|LOG_NEWLINE, 0,\n\t\t\t\t\t NULL, 0, recursion_msg,\n\t\t\t\t\t strlen(recursion_msg));\n\t}\n\n\t\n\ttext_len = vscnprintf(text, sizeof(textbuf), fmt, args);\n\n\t\n\tif (text_len && text[text_len-1] == '\\n') {\n\t\ttext_len--;\n\t\tlflags |= LOG_NEWLINE;\n\t}\n\n\t\n\tif (facility == 0) {\n\t\tint kern_level = printk_get_level(text);\n\n\t\tif (kern_level) {\n\t\t\tconst char *end_of_header = printk_skip_level(text);\n\t\t\tswitch (kern_level) {\n\t\t\tcase '0' ... '7':\n\t\t\t\tif (level == LOGLEVEL_DEFAULT)\n\t\t\t\t\tlevel = kern_level - '0';\n\t\t\t\t\n\t\t\tcase 'd':\t\n\t\t\t\tlflags |= LOG_PREFIX;\n\t\t\t}\n\t\t\t\n\t\t\ttext_len -= end_of_header - text;\n\t\t\ttext = (char *)end_of_header;\n\t\t}\n\t}\n\n\tif (level == LOGLEVEL_DEFAULT)\n\t\tlevel = default_message_loglevel;\n\n\tif (dict)\n\t\tlflags |= LOG_PREFIX|LOG_NEWLINE;\n\n\tif (!(lflags & LOG_NEWLINE)) {\n\t\t\n\t\tif (cont.len && (lflags & LOG_PREFIX || cont.owner != current))\n\t\t\tcont_flush(LOG_NEWLINE);\n\n\t\t\n\t\tif (cont_add(facility, level, text, text_len))\n\t\t\tprinted_len += text_len;\n\t\telse\n\t\t\tprinted_len += log_store(facility, level,\n\t\t\t\t\t\t lflags | LOG_CONT, 0,\n\t\t\t\t\t\t dict, dictlen, text, text_len);\n\t} else {\n\t\tbool stored = false;\n\n\t\t\n\t\tif (cont.len) {\n\t\t\tif (cont.owner == current && !(lflags & LOG_PREFIX))\n\t\t\t\tstored = cont_add(facility, level, text,\n\t\t\t\t\t\t  text_len);\n\t\t\tcont_flush(LOG_NEWLINE);\n\t\t}\n\n\t\tif (stored)\n\t\t\tprinted_len += text_len;\n\t\telse\n\t\t\tprinted_len += log_store(facility, level, lflags, 0,\n\t\t\t\t\t\t dict, dictlen, text, text_len);\n\t}\n\n\tlogbuf_cpu = UINT_MAX;\n\traw_spin_unlock(&logbuf_lock);\n\tlockdep_on();\n\tlocal_irq_restore(flags);\n\n\t\n\tif (!in_sched) {\n\t\tlockdep_off();\n\t\t\n\t\tpreempt_disable();\n\n\t\t\n\t\tif (console_trylock_for_printk())\n\t\t\tconsole_unlock();\n\t\tpreempt_enable();\n\t\tlockdep_on();\n\t}\n\n\treturn printed_len;\n}\nEXPORT_SYMBOL(vprintk_emit);\n\nasmlinkage int vprintk(const char *fmt, va_list args)\n{\n\treturn vprintk_emit(0, LOGLEVEL_DEFAULT, NULL, 0, fmt, args);\n}\nEXPORT_SYMBOL(vprintk);\n\nasmlinkage int printk_emit(int facility, int level,\n\t\t\t   const char *dict, size_t dictlen,\n\t\t\t   const char *fmt, ...)\n{\n\tva_list args;\n\tint r;\n\n\tva_start(args, fmt);\n\tr = vprintk_emit(facility, level, dict, dictlen, fmt, args);\n\tva_end(args);\n\n\treturn r;\n}\nEXPORT_SYMBOL(printk_emit);\n\nint vprintk_default(const char *fmt, va_list args)\n{\n\tint r;\n\n#ifdef CONFIG_KGDB_KDB\n\tif (unlikely(kdb_trap_printk)) {\n\t\tr = vkdb_printf(KDB_MSGSRC_PRINTK, fmt, args);\n\t\treturn r;\n\t}\n#endif\n\tr = vprintk_emit(0, LOGLEVEL_DEFAULT, NULL, 0, fmt, args);\n\n\treturn r;\n}\nEXPORT_SYMBOL_GPL(vprintk_default);\n\n\nDEFINE_PER_CPU(printk_func_t, printk_func) = vprintk_default;\n\n\nasmlinkage __visible int printk(const char *fmt, ...)\n{\n\tprintk_func_t vprintk_func;\n\tva_list args;\n\tint r;\n\n\tva_start(args, fmt);\n\n\t\n\tvprintk_func = this_cpu_read(printk_func);\n\tr = vprintk_func(fmt, args);\n\n\tva_end(args);\n\n\treturn r;\n}\nEXPORT_SYMBOL(printk);\n\n#else \n\n#define LOG_LINE_MAX\t\t0\n#define PREFIX_MAX\t\t0\n\nstatic u64 syslog_seq;\nstatic u32 syslog_idx;\nstatic u64 console_seq;\nstatic u32 console_idx;\nstatic enum log_flags syslog_prev;\nstatic u64 log_first_seq;\nstatic u32 log_first_idx;\nstatic u64 log_next_seq;\nstatic enum log_flags console_prev;\nstatic struct cont {\n\tsize_t len;\n\tsize_t cons;\n\tu8 level;\n\tbool flushed:1;\n} cont;\nstatic struct printk_log *log_from_idx(u32 idx) { return NULL; }\nstatic u32 log_next(u32 idx) { return 0; }\nstatic void call_console_drivers(int level, const char *text, size_t len) {}\nstatic size_t msg_print_text(const struct printk_log *msg, enum log_flags prev,\n\t\t\t     bool syslog, char *buf, size_t size) { return 0; }\nstatic size_t cont_print_text(char *text, size_t size) { return 0; }\n\n\nDEFINE_PER_CPU(printk_func_t, printk_func);\n\n#endif \n\n#ifdef CONFIG_EARLY_PRINTK\nstruct console *early_console;\n\nasmlinkage __visible void early_printk(const char *fmt, ...)\n{\n\tva_list ap;\n\tchar buf[512];\n\tint n;\n\n\tif (!early_console)\n\t\treturn;\n\n\tva_start(ap, fmt);\n\tn = vscnprintf(buf, sizeof(buf), fmt, ap);\n\tva_end(ap);\n\n\tearly_console->write(early_console, buf, n);\n}\n#endif\n\nstatic int __add_preferred_console(char *name, int idx, char *options,\n\t\t\t\t   char *brl_options)\n{\n\tstruct console_cmdline *c;\n\tint i;\n\n\t\n\tfor (i = 0, c = console_cmdline;\n\t     i < MAX_CMDLINECONSOLES && c->name[0];\n\t     i++, c++) {\n\t\tif (strcmp(c->name, name) == 0 && c->index == idx) {\n\t\t\tif (!brl_options)\n\t\t\t\tselected_console = i;\n\t\t\treturn 0;\n\t\t}\n\t}\n\tif (i == MAX_CMDLINECONSOLES)\n\t\treturn -E2BIG;\n\tif (!brl_options)\n\t\tselected_console = i;\n\tstrlcpy(c->name, name, sizeof(c->name));\n\tc->options = options;\n\tbraille_set_options(c, brl_options);\n\n\tc->index = idx;\n\treturn 0;\n}\n\nstatic int __init console_setup(char *str)\n{\n\tchar buf[sizeof(console_cmdline[0].name) + 4]; \n\tchar *s, *options, *brl_options = NULL;\n\tint idx;\n\n\tif (_braille_console_setup(&str, &brl_options))\n\t\treturn 1;\n\n\t\n\tif (str[0] >= '0' && str[0] <= '9') {\n\t\tstrcpy(buf, \"", "1360": "\";\n\n\tname = type->name;\n\n\tget_total_entries(buf, &total, &entries);\n\n\tseq_printf(m, \"", "1361": "\";\n\n\treturn simple_read_from_buffer(ubuf, cnt, ppos, buf, 2);\n}\n\nstatic ssize_t\ntrace_options_core_write(struct file *filp, const char __user *ubuf, size_t cnt,\n\t\t\t loff_t *ppos)\n{\n\tstruct trace_array *tr = &global_trace;\n\tlong index = (long)filp->private_data;\n\tunsigned long val;\n\tint ret;\n\n\tret = kstrtoul_from_user(ubuf, cnt, 10, &val);\n\tif (ret)\n\t\treturn ret;\n\n\tif (val != 0 && val != 1)\n\t\treturn -EINVAL;\n\n\tmutex_lock(&trace_types_lock);\n\tret = set_tracer_flag(tr, 1 << index, val);\n\tmutex_unlock(&trace_types_lock);\n\n\tif (ret < 0)\n\t\treturn ret;\n\n\t*ppos += cnt;\n\n\treturn cnt;\n}\n\nstatic const struct file_operations trace_options_core_fops = {\n\t.open = tracing_open_generic,\n\t.read = trace_options_core_read,\n\t.write = trace_options_core_write,\n\t.llseek = generic_file_llseek,\n};\n\nstruct dentry *trace_create_file(const char *name,\n\t\t\t\t umode_t mode,\n\t\t\t\t struct dentry *parent,\n\t\t\t\t void *data,\n\t\t\t\t const struct file_operations *fops)\n{\n\tstruct dentry *ret;\n\n\tret = tracefs_create_file(name, mode, parent, data, fops);\n\tif (!ret)\n\t\tpr_warning(\"", "1362": "\";\n\n\treturn simple_read_from_buffer(ubuf, cnt, ppos, buf, 2);\n}\n\nstatic ssize_t\ntrace_options_write(struct file *filp, const char __user *ubuf, size_t cnt,\n\t\t\t loff_t *ppos)\n{\n\tstruct trace_option_dentry *topt = filp->private_data;\n\tunsigned long val;\n\tint ret;\n\n\tret = kstrtoul_from_user(ubuf, cnt, 10, &val);\n\tif (ret)\n\t\treturn ret;\n\n\tif (val != 0 && val != 1)\n\t\treturn -EINVAL;\n\n\tif (!!(topt->flags->val & topt->opt->bit) != val) {\n\t\tmutex_lock(&trace_types_lock);\n\t\tret = __set_tracer_option(topt->tr, topt->flags,\n\t\t\t\t\t  topt->opt, !val);\n\t\tmutex_unlock(&trace_types_lock);\n\t\tif (ret)\n\t\t\treturn ret;\n\t}\n\n\t*ppos += cnt;\n\n\treturn cnt;\n}\n\n\nstatic const struct file_operations trace_options_fops = {\n\t.open = tracing_open_generic,\n\t.read = trace_options_read,\n\t.write = trace_options_write,\n\t.llseek\t= generic_file_llseek,\n};\n\nstatic ssize_t\ntrace_options_core_read(struct file *filp, char __user *ubuf, size_t cnt,\n\t\t\tloff_t *ppos)\n{\n\tlong index = (long)filp->private_data;\n\tchar *buf;\n\n\tif (trace_flags & (1 << index))\n\t\tbuf = \"", "1363": "\";\n\nstatic u32 truncate_msg(u16 *text_len, u16 *trunc_msg_len,\n\t\t\tu16 *dict_len, u32 *pad_len)\n{\n\t\n\tu32 max_text_len = log_buf_len / MAX_LOG_TAKE_PART;\n\tif (*text_len > max_text_len)\n\t\t*text_len = max_text_len;\n\t\n\t*trunc_msg_len = strlen(trunc_msg);\n\t\n\t*dict_len = 0;\n\t\n\treturn msg_used_size(*text_len + *trunc_msg_len, 0, pad_len);\n}\n\n\nstatic int log_store(int facility, int level,\n\t\t     enum log_flags flags, u64 ts_nsec,\n\t\t     const char *dict, u16 dict_len,\n\t\t     const char *text, u16 text_len)\n{\n\tstruct printk_log *msg;\n\tu32 size, pad_len;\n\tu16 trunc_msg_len = 0;\n\n\t\n\tsize = msg_used_size(text_len, dict_len, &pad_len);\n\n\tif (log_make_free_space(size)) {\n\t\t\n\t\tsize = truncate_msg(&text_len, &trunc_msg_len,\n\t\t\t\t    &dict_len, &pad_len);\n\t\t\n\t\tif (log_make_free_space(size))\n\t\t\treturn 0;\n\t}\n\n\tif (log_next_idx + size + sizeof(struct printk_log) > log_buf_len) {\n\t\t\n\t\tmemset(log_buf + log_next_idx, 0, sizeof(struct printk_log));\n\t\tlog_next_idx = 0;\n\t}\n\n\t\n\tmsg = (struct printk_log *)(log_buf + log_next_idx);\n\tmemcpy(log_text(msg), text, text_len);\n\tmsg->text_len = text_len;\n\tif (trunc_msg_len) {\n\t\tmemcpy(log_text(msg) + text_len, trunc_msg, trunc_msg_len);\n\t\tmsg->text_len += trunc_msg_len;\n\t}\n\tmemcpy(log_dict(msg), dict, dict_len);\n\tmsg->dict_len = dict_len;\n\tmsg->facility = facility;\n\tmsg->level = level & 7;\n\tmsg->flags = flags & 0x1f;\n\tif (ts_nsec > 0)\n\t\tmsg->ts_nsec = ts_nsec;\n\telse\n\t\tmsg->ts_nsec = local_clock();\n\tmemset(log_dict(msg) + dict_len, 0, pad_len);\n\tmsg->len = size;\n\n\t\n\tlog_next_idx += msg->len;\n\tlog_next_seq++;\n\n\treturn msg->text_len;\n}\n\nint dmesg_restrict = IS_ENABLED(CONFIG_SECURITY_DMESG_RESTRICT);\n\nstatic int syslog_action_restricted(int type)\n{\n\tif (dmesg_restrict)\n\t\treturn 1;\n\t\n\treturn type != SYSLOG_ACTION_READ_ALL &&\n\t       type != SYSLOG_ACTION_SIZE_BUFFER;\n}\n\nint check_syslog_permissions(int type, bool from_file)\n{\n\t\n\tif (from_file && type != SYSLOG_ACTION_OPEN)\n\t\treturn 0;\n\n\tif (syslog_action_restricted(type)) {\n\t\tif (capable(CAP_SYSLOG))\n\t\t\treturn 0;\n\t\t\n\t\tif (capable(CAP_SYS_ADMIN)) {\n\t\t\tpr_warn_once(\"", "1364": "\";\n}\n\nstatic inline u64 perf_clock(void)\n{\n\treturn local_clock();\n}\n\nstatic inline u64 perf_event_clock(struct perf_event *event)\n{\n\treturn event->clock();\n}\n\nstatic inline struct perf_cpu_context *\n__get_cpu_context(struct perf_event_context *ctx)\n{\n\treturn this_cpu_ptr(ctx->pmu->pmu_cpu_context);\n}\n\nstatic void perf_ctx_lock(struct perf_cpu_context *cpuctx,\n\t\t\t  struct perf_event_context *ctx)\n{\n\traw_spin_lock(&cpuctx->ctx.lock);\n\tif (ctx)\n\t\traw_spin_lock(&ctx->lock);\n}\n\nstatic void perf_ctx_unlock(struct perf_cpu_context *cpuctx,\n\t\t\t    struct perf_event_context *ctx)\n{\n\tif (ctx)\n\t\traw_spin_unlock(&ctx->lock);\n\traw_spin_unlock(&cpuctx->ctx.lock);\n}\n\n#ifdef CONFIG_CGROUP_PERF\n\nstatic inline bool\nperf_cgroup_match(struct perf_event *event)\n{\n\tstruct perf_event_context *ctx = event->ctx;\n\tstruct perf_cpu_context *cpuctx = __get_cpu_context(ctx);\n\n\t\n\tif (!event->cgrp)\n\t\treturn true;\n\n\t\n\tif (!cpuctx->cgrp)\n\t\treturn false;\n\n\t\n\treturn cgroup_is_descendant(cpuctx->cgrp->css.cgroup,\n\t\t\t\t    event->cgrp->css.cgroup);\n}\n\nstatic inline void perf_detach_cgroup(struct perf_event *event)\n{\n\tcss_put(&event->cgrp->css);\n\tevent->cgrp = NULL;\n}\n\nstatic inline int is_cgroup_event(struct perf_event *event)\n{\n\treturn event->cgrp != NULL;\n}\n\nstatic inline u64 perf_cgroup_event_time(struct perf_event *event)\n{\n\tstruct perf_cgroup_info *t;\n\n\tt = per_cpu_ptr(event->cgrp->info, event->cpu);\n\treturn t->time;\n}\n\nstatic inline void __update_cgrp_time(struct perf_cgroup *cgrp)\n{\n\tstruct perf_cgroup_info *info;\n\tu64 now;\n\n\tnow = perf_clock();\n\n\tinfo = this_cpu_ptr(cgrp->info);\n\n\tinfo->time += now - info->timestamp;\n\tinfo->timestamp = now;\n}\n\nstatic inline void update_cgrp_time_from_cpuctx(struct perf_cpu_context *cpuctx)\n{\n\tstruct perf_cgroup *cgrp_out = cpuctx->cgrp;\n\tif (cgrp_out)\n\t\t__update_cgrp_time(cgrp_out);\n}\n\nstatic inline void update_cgrp_time_from_event(struct perf_event *event)\n{\n\tstruct perf_cgroup *cgrp;\n\n\t\n\tif (!is_cgroup_event(event))\n\t\treturn;\n\n\tcgrp = perf_cgroup_from_task(current);\n\t\n\tif (cgrp == event->cgrp)\n\t\t__update_cgrp_time(event->cgrp);\n}\n\nstatic inline void\nperf_cgroup_set_timestamp(struct task_struct *task,\n\t\t\t  struct perf_event_context *ctx)\n{\n\tstruct perf_cgroup *cgrp;\n\tstruct perf_cgroup_info *info;\n\n\t\n\tif (!task || !ctx->nr_cgroups)\n\t\treturn;\n\n\tcgrp = perf_cgroup_from_task(task);\n\tinfo = this_cpu_ptr(cgrp->info);\n\tinfo->timestamp = ctx->timestamp;\n}\n\n#define PERF_CGROUP_SWOUT\t0x1 \n#define PERF_CGROUP_SWIN\t0x2 \n\n\nvoid perf_cgroup_switch(struct task_struct *task, int mode)\n{\n\tstruct perf_cpu_context *cpuctx;\n\tstruct pmu *pmu;\n\tunsigned long flags;\n\n\t\n\tlocal_irq_save(flags);\n\n\t\n\trcu_read_lock();\n\n\tlist_for_each_entry_rcu(pmu, &pmus, entry) {\n\t\tcpuctx = this_cpu_ptr(pmu->pmu_cpu_context);\n\t\tif (cpuctx->unique_pmu != pmu)\n\t\t\tcontinue; \n\n\t\t\n\t\tif (cpuctx->ctx.nr_cgroups > 0) {\n\t\t\tperf_ctx_lock(cpuctx, cpuctx->task_ctx);\n\t\t\tperf_pmu_disable(cpuctx->ctx.pmu);\n\n\t\t\tif (mode & PERF_CGROUP_SWOUT) {\n\t\t\t\tcpu_ctx_sched_out(cpuctx, EVENT_ALL);\n\t\t\t\t\n\t\t\t\tcpuctx->cgrp = NULL;\n\t\t\t}\n\n\t\t\tif (mode & PERF_CGROUP_SWIN) {\n\t\t\t\tWARN_ON_ONCE(cpuctx->cgrp);\n\t\t\t\t\n\t\t\t\tcpuctx->cgrp = perf_cgroup_from_task(task);\n\t\t\t\tcpu_ctx_sched_in(cpuctx, EVENT_ALL, task);\n\t\t\t}\n\t\t\tperf_pmu_enable(cpuctx->ctx.pmu);\n\t\t\tperf_ctx_unlock(cpuctx, cpuctx->task_ctx);\n\t\t}\n\t}\n\n\trcu_read_unlock();\n\n\tlocal_irq_restore(flags);\n}\n\nstatic inline void perf_cgroup_sched_out(struct task_struct *task,\n\t\t\t\t\t struct task_struct *next)\n{\n\tstruct perf_cgroup *cgrp1;\n\tstruct perf_cgroup *cgrp2 = NULL;\n\n\t\n\tcgrp1 = perf_cgroup_from_task(task);\n\n\t\n\tif (next)\n\t\tcgrp2 = perf_cgroup_from_task(next);\n\n\t\n\tif (cgrp1 != cgrp2)\n\t\tperf_cgroup_switch(task, PERF_CGROUP_SWOUT);\n}\n\nstatic inline void perf_cgroup_sched_in(struct task_struct *prev,\n\t\t\t\t\tstruct task_struct *task)\n{\n\tstruct perf_cgroup *cgrp1;\n\tstruct perf_cgroup *cgrp2 = NULL;\n\n\t\n\tcgrp1 = perf_cgroup_from_task(task);\n\n\t\n\tcgrp2 = perf_cgroup_from_task(prev);\n\n\t\n\tif (cgrp1 != cgrp2)\n\t\tperf_cgroup_switch(task, PERF_CGROUP_SWIN);\n}\n\nstatic inline int perf_cgroup_connect(int fd, struct perf_event *event,\n\t\t\t\t      struct perf_event_attr *attr,\n\t\t\t\t      struct perf_event *group_leader)\n{\n\tstruct perf_cgroup *cgrp;\n\tstruct cgroup_subsys_state *css;\n\tstruct fd f = fdget(fd);\n\tint ret = 0;\n\n\tif (!f.file)\n\t\treturn -EBADF;\n\n\tcss = css_tryget_online_from_dir(f.file->f_path.dentry,\n\t\t\t\t\t &perf_event_cgrp_subsys);\n\tif (IS_ERR(css)) {\n\t\tret = PTR_ERR(css);\n\t\tgoto out;\n\t}\n\n\tcgrp = container_of(css, struct perf_cgroup, css);\n\tevent->cgrp = cgrp;\n\n\t\n\tif (group_leader && group_leader->cgrp != cgrp) {\n\t\tperf_detach_cgroup(event);\n\t\tret = -EINVAL;\n\t}\nout:\n\tfdput(f);\n\treturn ret;\n}\n\nstatic inline void\nperf_cgroup_set_shadow_time(struct perf_event *event, u64 now)\n{\n\tstruct perf_cgroup_info *t;\n\tt = per_cpu_ptr(event->cgrp->info, event->cpu);\n\tevent->shadow_ctx_time = now - t->timestamp;\n}\n\nstatic inline void\nperf_cgroup_defer_enabled(struct perf_event *event)\n{\n\t\n\tif (is_cgroup_event(event) && !perf_cgroup_match(event))\n\t\tevent->cgrp_defer_enabled = 1;\n}\n\nstatic inline void\nperf_cgroup_mark_enabled(struct perf_event *event,\n\t\t\t struct perf_event_context *ctx)\n{\n\tstruct perf_event *sub;\n\tu64 tstamp = perf_event_time(event);\n\n\tif (!event->cgrp_defer_enabled)\n\t\treturn;\n\n\tevent->cgrp_defer_enabled = 0;\n\n\tevent->tstamp_enabled = tstamp - event->total_time_enabled;\n\tlist_for_each_entry(sub, &event->sibling_list, group_entry) {\n\t\tif (sub->state >= PERF_EVENT_STATE_INACTIVE) {\n\t\t\tsub->tstamp_enabled = tstamp - sub->total_time_enabled;\n\t\t\tsub->cgrp_defer_enabled = 0;\n\t\t}\n\t}\n}\n#else \n\nstatic inline bool\nperf_cgroup_match(struct perf_event *event)\n{\n\treturn true;\n}\n\nstatic inline void perf_detach_cgroup(struct perf_event *event)\n{}\n\nstatic inline int is_cgroup_event(struct perf_event *event)\n{\n\treturn 0;\n}\n\nstatic inline u64 perf_cgroup_event_cgrp_time(struct perf_event *event)\n{\n\treturn 0;\n}\n\nstatic inline void update_cgrp_time_from_event(struct perf_event *event)\n{\n}\n\nstatic inline void update_cgrp_time_from_cpuctx(struct perf_cpu_context *cpuctx)\n{\n}\n\nstatic inline void perf_cgroup_sched_out(struct task_struct *task,\n\t\t\t\t\t struct task_struct *next)\n{\n}\n\nstatic inline void perf_cgroup_sched_in(struct task_struct *prev,\n\t\t\t\t\tstruct task_struct *task)\n{\n}\n\nstatic inline int perf_cgroup_connect(pid_t pid, struct perf_event *event,\n\t\t\t\t      struct perf_event_attr *attr,\n\t\t\t\t      struct perf_event *group_leader)\n{\n\treturn -EINVAL;\n}\n\nstatic inline void\nperf_cgroup_set_timestamp(struct task_struct *task,\n\t\t\t  struct perf_event_context *ctx)\n{\n}\n\nvoid\nperf_cgroup_switch(struct task_struct *task, struct task_struct *next)\n{\n}\n\nstatic inline void\nperf_cgroup_set_shadow_time(struct perf_event *event, u64 now)\n{\n}\n\nstatic inline u64 perf_cgroup_event_time(struct perf_event *event)\n{\n\treturn 0;\n}\n\nstatic inline void\nperf_cgroup_defer_enabled(struct perf_event *event)\n{\n}\n\nstatic inline void\nperf_cgroup_mark_enabled(struct perf_event *event,\n\t\t\t struct perf_event_context *ctx)\n{\n}\n#endif\n\n\n#define PERF_CPU_HRTIMER (1000 / HZ)\n\nstatic enum hrtimer_restart perf_cpu_hrtimer_handler(struct hrtimer *hr)\n{\n\tstruct perf_cpu_context *cpuctx;\n\tenum hrtimer_restart ret = HRTIMER_NORESTART;\n\tint rotations = 0;\n\n\tWARN_ON(!irqs_disabled());\n\n\tcpuctx = container_of(hr, struct perf_cpu_context, hrtimer);\n\n\trotations = perf_rotate_context(cpuctx);\n\n\t\n\tif (rotations) {\n\t\thrtimer_forward_now(hr, cpuctx->hrtimer_interval);\n\t\tret = HRTIMER_RESTART;\n\t}\n\n\treturn ret;\n}\n\n\nvoid perf_cpu_hrtimer_cancel(int cpu)\n{\n\tstruct perf_cpu_context *cpuctx;\n\tstruct pmu *pmu;\n\tunsigned long flags;\n\n\tif (WARN_ON(cpu != smp_processor_id()))\n\t\treturn;\n\n\tlocal_irq_save(flags);\n\n\trcu_read_lock();\n\n\tlist_for_each_entry_rcu(pmu, &pmus, entry) {\n\t\tcpuctx = this_cpu_ptr(pmu->pmu_cpu_context);\n\n\t\tif (pmu->task_ctx_nr == perf_sw_context)\n\t\t\tcontinue;\n\n\t\thrtimer_cancel(&cpuctx->hrtimer);\n\t}\n\n\trcu_read_unlock();\n\n\tlocal_irq_restore(flags);\n}\n\nstatic void __perf_cpu_hrtimer_init(struct perf_cpu_context *cpuctx, int cpu)\n{\n\tstruct hrtimer *hr = &cpuctx->hrtimer;\n\tstruct pmu *pmu = cpuctx->ctx.pmu;\n\tint timer;\n\n\t\n\tif (pmu->task_ctx_nr == perf_sw_context)\n\t\treturn;\n\n\t\n\ttimer = pmu->hrtimer_interval_ms;\n\tif (timer < 1)\n\t\ttimer = pmu->hrtimer_interval_ms = PERF_CPU_HRTIMER;\n\n\tcpuctx->hrtimer_interval = ns_to_ktime(NSEC_PER_MSEC * timer);\n\n\thrtimer_init(hr, CLOCK_MONOTONIC, HRTIMER_MODE_REL_PINNED);\n\thr->function = perf_cpu_hrtimer_handler;\n}\n\nstatic void perf_cpu_hrtimer_restart(struct perf_cpu_context *cpuctx)\n{\n\tstruct hrtimer *hr = &cpuctx->hrtimer;\n\tstruct pmu *pmu = cpuctx->ctx.pmu;\n\n\t\n\tif (pmu->task_ctx_nr == perf_sw_context)\n\t\treturn;\n\n\tif (hrtimer_active(hr))\n\t\treturn;\n\n\tif (!hrtimer_callback_running(hr))\n\t\t__hrtimer_start_range_ns(hr, cpuctx->hrtimer_interval,\n\t\t\t\t\t 0, HRTIMER_MODE_REL_PINNED, 0);\n}\n\nvoid perf_pmu_disable(struct pmu *pmu)\n{\n\tint *count = this_cpu_ptr(pmu->pmu_disable_count);\n\tif (!(*count)++)\n\t\tpmu->pmu_disable(pmu);\n}\n\nvoid perf_pmu_enable(struct pmu *pmu)\n{\n\tint *count = this_cpu_ptr(pmu->pmu_disable_count);\n\tif (!--(*count))\n\t\tpmu->pmu_enable(pmu);\n}\n\nstatic DEFINE_PER_CPU(struct list_head, active_ctx_list);\n\n\nstatic void perf_event_ctx_activate(struct perf_event_context *ctx)\n{\n\tstruct list_head *head = this_cpu_ptr(&active_ctx_list);\n\n\tWARN_ON(!irqs_disabled());\n\n\tWARN_ON(!list_empty(&ctx->active_ctx_list));\n\n\tlist_add(&ctx->active_ctx_list, head);\n}\n\nstatic void perf_event_ctx_deactivate(struct perf_event_context *ctx)\n{\n\tWARN_ON(!irqs_disabled());\n\n\tWARN_ON(list_empty(&ctx->active_ctx_list));\n\n\tlist_del_init(&ctx->active_ctx_list);\n}\n\nstatic void get_ctx(struct perf_event_context *ctx)\n{\n\tWARN_ON(!atomic_inc_not_zero(&ctx->refcount));\n}\n\nstatic void free_ctx(struct rcu_head *head)\n{\n\tstruct perf_event_context *ctx;\n\n\tctx = container_of(head, struct perf_event_context, rcu_head);\n\tkfree(ctx->task_ctx_data);\n\tkfree(ctx);\n}\n\nstatic void put_ctx(struct perf_event_context *ctx)\n{\n\tif (atomic_dec_and_test(&ctx->refcount)) {\n\t\tif (ctx->parent_ctx)\n\t\t\tput_ctx(ctx->parent_ctx);\n\t\tif (ctx->task)\n\t\t\tput_task_struct(ctx->task);\n\t\tcall_rcu(&ctx->rcu_head, free_ctx);\n\t}\n}\n\n\nstatic struct perf_event_context *\nperf_event_ctx_lock_nested(struct perf_event *event, int nesting)\n{\n\tstruct perf_event_context *ctx;\n\nagain:\n\trcu_read_lock();\n\tctx = ACCESS_ONCE(event->ctx);\n\tif (!atomic_inc_not_zero(&ctx->refcount)) {\n\t\trcu_read_unlock();\n\t\tgoto again;\n\t}\n\trcu_read_unlock();\n\n\tmutex_lock_nested(&ctx->mutex, nesting);\n\tif (event->ctx != ctx) {\n\t\tmutex_unlock(&ctx->mutex);\n\t\tput_ctx(ctx);\n\t\tgoto again;\n\t}\n\n\treturn ctx;\n}\n\nstatic inline struct perf_event_context *\nperf_event_ctx_lock(struct perf_event *event)\n{\n\treturn perf_event_ctx_lock_nested(event, 0);\n}\n\nstatic void perf_event_ctx_unlock(struct perf_event *event,\n\t\t\t\t  struct perf_event_context *ctx)\n{\n\tmutex_unlock(&ctx->mutex);\n\tput_ctx(ctx);\n}\n\n\nstatic __must_check struct perf_event_context *\nunclone_ctx(struct perf_event_context *ctx)\n{\n\tstruct perf_event_context *parent_ctx = ctx->parent_ctx;\n\n\tlockdep_assert_held(&ctx->lock);\n\n\tif (parent_ctx)\n\t\tctx->parent_ctx = NULL;\n\tctx->generation++;\n\n\treturn parent_ctx;\n}\n\nstatic u32 perf_event_pid(struct perf_event *event, struct task_struct *p)\n{\n\t\n\tif (event->parent)\n\t\tevent = event->parent;\n\n\treturn task_tgid_nr_ns(p, event->ns);\n}\n\nstatic u32 perf_event_tid(struct perf_event *event, struct task_struct *p)\n{\n\t\n\tif (event->parent)\n\t\tevent = event->parent;\n\n\treturn task_pid_nr_ns(p, event->ns);\n}\n\n\nstatic u64 primary_event_id(struct perf_event *event)\n{\n\tu64 id = event->id;\n\n\tif (event->parent)\n\t\tid = event->parent->id;\n\n\treturn id;\n}\n\n\nstatic struct perf_event_context *\nperf_lock_task_context(struct task_struct *task, int ctxn, unsigned long *flags)\n{\n\tstruct perf_event_context *ctx;\n\nretry:\n\t\n\tpreempt_disable();\n\trcu_read_lock();\n\tctx = rcu_dereference(task->perf_event_ctxp[ctxn]);\n\tif (ctx) {\n\t\t\n\t\traw_spin_lock_irqsave(&ctx->lock, *flags);\n\t\tif (ctx != rcu_dereference(task->perf_event_ctxp[ctxn])) {\n\t\t\traw_spin_unlock_irqrestore(&ctx->lock, *flags);\n\t\t\trcu_read_unlock();\n\t\t\tpreempt_enable();\n\t\t\tgoto retry;\n\t\t}\n\n\t\tif (!atomic_inc_not_zero(&ctx->refcount)) {\n\t\t\traw_spin_unlock_irqrestore(&ctx->lock, *flags);\n\t\t\tctx = NULL;\n\t\t}\n\t}\n\trcu_read_unlock();\n\tpreempt_enable();\n\treturn ctx;\n}\n\n\nstatic struct perf_event_context *\nperf_pin_task_context(struct task_struct *task, int ctxn)\n{\n\tstruct perf_event_context *ctx;\n\tunsigned long flags;\n\n\tctx = perf_lock_task_context(task, ctxn, &flags);\n\tif (ctx) {\n\t\t++ctx->pin_count;\n\t\traw_spin_unlock_irqrestore(&ctx->lock, flags);\n\t}\n\treturn ctx;\n}\n\nstatic void perf_unpin_context(struct perf_event_context *ctx)\n{\n\tunsigned long flags;\n\n\traw_spin_lock_irqsave(&ctx->lock, flags);\n\t--ctx->pin_count;\n\traw_spin_unlock_irqrestore(&ctx->lock, flags);\n}\n\n\nstatic void update_context_time(struct perf_event_context *ctx)\n{\n\tu64 now = perf_clock();\n\n\tctx->time += now - ctx->timestamp;\n\tctx->timestamp = now;\n}\n\nstatic u64 perf_event_time(struct perf_event *event)\n{\n\tstruct perf_event_context *ctx = event->ctx;\n\n\tif (is_cgroup_event(event))\n\t\treturn perf_cgroup_event_time(event);\n\n\treturn ctx ? ctx->time : 0;\n}\n\n\nstatic void update_event_times(struct perf_event *event)\n{\n\tstruct perf_event_context *ctx = event->ctx;\n\tu64 run_end;\n\n\tif (event->state < PERF_EVENT_STATE_INACTIVE ||\n\t    event->group_leader->state < PERF_EVENT_STATE_INACTIVE)\n\t\treturn;\n\t\n\tif (is_cgroup_event(event))\n\t\trun_end = perf_cgroup_event_time(event);\n\telse if (ctx->is_active)\n\t\trun_end = ctx->time;\n\telse\n\t\trun_end = event->tstamp_stopped;\n\n\tevent->total_time_enabled = run_end - event->tstamp_enabled;\n\n\tif (event->state == PERF_EVENT_STATE_INACTIVE)\n\t\trun_end = event->tstamp_stopped;\n\telse\n\t\trun_end = perf_event_time(event);\n\n\tevent->total_time_running = run_end - event->tstamp_running;\n\n}\n\n\nstatic void update_group_times(struct perf_event *leader)\n{\n\tstruct perf_event *event;\n\n\tupdate_event_times(leader);\n\tlist_for_each_entry(event, &leader->sibling_list, group_entry)\n\t\tupdate_event_times(event);\n}\n\nstatic struct list_head *\nctx_group_list(struct perf_event *event, struct perf_event_context *ctx)\n{\n\tif (event->attr.pinned)\n\t\treturn &ctx->pinned_groups;\n\telse\n\t\treturn &ctx->flexible_groups;\n}\n\n\nstatic void\nlist_add_event(struct perf_event *event, struct perf_event_context *ctx)\n{\n\tWARN_ON_ONCE(event->attach_state & PERF_ATTACH_CONTEXT);\n\tevent->attach_state |= PERF_ATTACH_CONTEXT;\n\n\t\n\tif (event->group_leader == event) {\n\t\tstruct list_head *list;\n\n\t\tif (is_software_event(event))\n\t\t\tevent->group_flags |= PERF_GROUP_SOFTWARE;\n\n\t\tlist = ctx_group_list(event, ctx);\n\t\tlist_add_tail(&event->group_entry, list);\n\t}\n\n\tif (is_cgroup_event(event))\n\t\tctx->nr_cgroups++;\n\n\tlist_add_rcu(&event->event_entry, &ctx->event_list);\n\tctx->nr_events++;\n\tif (event->attr.inherit_stat)\n\t\tctx->nr_stat++;\n\n\tctx->generation++;\n}\n\n\nstatic inline void perf_event__state_init(struct perf_event *event)\n{\n\tevent->state = event->attr.disabled ? PERF_EVENT_STATE_OFF :\n\t\t\t\t\t      PERF_EVENT_STATE_INACTIVE;\n}\n\n\nstatic void perf_event__read_size(struct perf_event *event)\n{\n\tint entry = sizeof(u64); \n\tint size = 0;\n\tint nr = 1;\n\n\tif (event->attr.read_format & PERF_FORMAT_TOTAL_TIME_ENABLED)\n\t\tsize += sizeof(u64);\n\n\tif (event->attr.read_format & PERF_FORMAT_TOTAL_TIME_RUNNING)\n\t\tsize += sizeof(u64);\n\n\tif (event->attr.read_format & PERF_FORMAT_ID)\n\t\tentry += sizeof(u64);\n\n\tif (event->attr.read_format & PERF_FORMAT_GROUP) {\n\t\tnr += event->group_leader->nr_siblings;\n\t\tsize += sizeof(u64);\n\t}\n\n\tsize += entry * nr;\n\tevent->read_size = size;\n}\n\nstatic void perf_event__header_size(struct perf_event *event)\n{\n\tstruct perf_sample_data *data;\n\tu64 sample_type = event->attr.sample_type;\n\tu16 size = 0;\n\n\tperf_event__read_size(event);\n\n\tif (sample_type & PERF_SAMPLE_IP)\n\t\tsize += sizeof(data->ip);\n\n\tif (sample_type & PERF_SAMPLE_ADDR)\n\t\tsize += sizeof(data->addr);\n\n\tif (sample_type & PERF_SAMPLE_PERIOD)\n\t\tsize += sizeof(data->period);\n\n\tif (sample_type & PERF_SAMPLE_WEIGHT)\n\t\tsize += sizeof(data->weight);\n\n\tif (sample_type & PERF_SAMPLE_READ)\n\t\tsize += event->read_size;\n\n\tif (sample_type & PERF_SAMPLE_DATA_SRC)\n\t\tsize += sizeof(data->data_src.val);\n\n\tif (sample_type & PERF_SAMPLE_TRANSACTION)\n\t\tsize += sizeof(data->txn);\n\n\tevent->header_size = size;\n}\n\nstatic void perf_event__id_header_size(struct perf_event *event)\n{\n\tstruct perf_sample_data *data;\n\tu64 sample_type = event->attr.sample_type;\n\tu16 size = 0;\n\n\tif (sample_type & PERF_SAMPLE_TID)\n\t\tsize += sizeof(data->tid_entry);\n\n\tif (sample_type & PERF_SAMPLE_TIME)\n\t\tsize += sizeof(data->time);\n\n\tif (sample_type & PERF_SAMPLE_IDENTIFIER)\n\t\tsize += sizeof(data->id);\n\n\tif (sample_type & PERF_SAMPLE_ID)\n\t\tsize += sizeof(data->id);\n\n\tif (sample_type & PERF_SAMPLE_STREAM_ID)\n\t\tsize += sizeof(data->stream_id);\n\n\tif (sample_type & PERF_SAMPLE_CPU)\n\t\tsize += sizeof(data->cpu_entry);\n\n\tevent->id_header_size = size;\n}\n\nstatic void perf_group_attach(struct perf_event *event)\n{\n\tstruct perf_event *group_leader = event->group_leader, *pos;\n\n\t\n\tif (event->attach_state & PERF_ATTACH_GROUP)\n\t\treturn;\n\n\tevent->attach_state |= PERF_ATTACH_GROUP;\n\n\tif (group_leader == event)\n\t\treturn;\n\n\tWARN_ON_ONCE(group_leader->ctx != event->ctx);\n\n\tif (group_leader->group_flags & PERF_GROUP_SOFTWARE &&\n\t\t\t!is_software_event(event))\n\t\tgroup_leader->group_flags &= ~PERF_GROUP_SOFTWARE;\n\n\tlist_add_tail(&event->group_entry, &group_leader->sibling_list);\n\tgroup_leader->nr_siblings++;\n\n\tperf_event__header_size(group_leader);\n\n\tlist_for_each_entry(pos, &group_leader->sibling_list, group_entry)\n\t\tperf_event__header_size(pos);\n}\n\n\nstatic void\nlist_del_event(struct perf_event *event, struct perf_event_context *ctx)\n{\n\tstruct perf_cpu_context *cpuctx;\n\n\tWARN_ON_ONCE(event->ctx != ctx);\n\tlockdep_assert_held(&ctx->lock);\n\n\t\n\tif (!(event->attach_state & PERF_ATTACH_CONTEXT))\n\t\treturn;\n\n\tevent->attach_state &= ~PERF_ATTACH_CONTEXT;\n\n\tif (is_cgroup_event(event)) {\n\t\tctx->nr_cgroups--;\n\t\tcpuctx = __get_cpu_context(ctx);\n\t\t\n\t\tif (!ctx->nr_cgroups)\n\t\t\tcpuctx->cgrp = NULL;\n\t}\n\n\tctx->nr_events--;\n\tif (event->attr.inherit_stat)\n\t\tctx->nr_stat--;\n\n\tlist_del_rcu(&event->event_entry);\n\n\tif (event->group_leader == event)\n\t\tlist_del_init(&event->group_entry);\n\n\tupdate_group_times(event);\n\n\t\n\tif (event->state > PERF_EVENT_STATE_OFF)\n\t\tevent->state = PERF_EVENT_STATE_OFF;\n\n\tctx->generation++;\n}\n\nstatic void perf_group_detach(struct perf_event *event)\n{\n\tstruct perf_event *sibling, *tmp;\n\tstruct list_head *list = NULL;\n\n\t\n\tif (!(event->attach_state & PERF_ATTACH_GROUP))\n\t\treturn;\n\n\tevent->attach_state &= ~PERF_ATTACH_GROUP;\n\n\t\n\tif (event->group_leader != event) {\n\t\tlist_del_init(&event->group_entry);\n\t\tevent->group_leader->nr_siblings--;\n\t\tgoto out;\n\t}\n\n\tif (!list_empty(&event->group_entry))\n\t\tlist = &event->group_entry;\n\n\t\n\tlist_for_each_entry_safe(sibling, tmp, &event->sibling_list, group_entry) {\n\t\tif (list)\n\t\t\tlist_move_tail(&sibling->group_entry, list);\n\t\tsibling->group_leader = sibling;\n\n\t\t\n\t\tsibling->group_flags = event->group_flags;\n\n\t\tWARN_ON_ONCE(sibling->ctx != event->ctx);\n\t}\n\nout:\n\tperf_event__header_size(event->group_leader);\n\n\tlist_for_each_entry(tmp, &event->group_leader->sibling_list, group_entry)\n\t\tperf_event__header_size(tmp);\n}\n\n\nstatic bool is_orphaned_event(struct perf_event *event)\n{\n\treturn event && !is_kernel_event(event) && !event->owner;\n}\n\n\nstatic bool is_orphaned_child(struct perf_event *event)\n{\n\treturn is_orphaned_event(event->parent);\n}\n\nstatic void orphans_remove_work(struct work_struct *work);\n\nstatic void schedule_orphans_remove(struct perf_event_context *ctx)\n{\n\tif (!ctx->task || ctx->orphans_remove_sched || !perf_wq)\n\t\treturn;\n\n\tif (queue_delayed_work(perf_wq, &ctx->orphans_remove, 1)) {\n\t\tget_ctx(ctx);\n\t\tctx->orphans_remove_sched = true;\n\t}\n}\n\nstatic int __init perf_workqueue_init(void)\n{\n\tperf_wq = create_singlethread_workqueue(\"", "1365": "\"<\"", "1366": "\"<%016llx-%016llx>\\n\"", "1367": "\"<-- %lx (%d) (start: %llx  end: %llx) over: %d\"", "1368": "\"<-signal> <pid>\"", "1369": "\"<<=\"", "1370": "\"<=\"", "1371": "\"<==%s() = %d\\n\"", "1372": "\"<==%s() = 0 [%x]\\n\"", "1373": "\"<==========\"", "1374": "\"<BAD>\"", "1375": "\"<RELEASED>\\n\"", "1376": "\"<bpnum>\"", "1377": "\"<cpunum>\"", "1378": "\"<idle>\"", "1379": "\"<key>\"", "1380": "\"<no_memory>\"", "1381": "\"<none>\"", "1382": "\"<paddr> <bytes>\"", "1383": "\"<pid>\"", "1384": "\"<pidnum>\"", "1385": "\"<reg> <contents>\"", "1386": "\"<stack trace>\\n\"", "1387": "\"<sym> [<bytes>] [<cpu>]\"", "1388": "\"<too_long>\"", "1389": "\"<vaddr> <bytes>\"", "1390": "\"<vaddr> <contents>\"", "1391": "\"<vaddr>\"", "1392": "\"=\"", "1393": "\"=0\"", "1394": "\"==\"", "1395": "\"================================================\\n\"", "1396": "\"=============================================\\n\"", "1397": "\"=============================================\\n\\n\"", "1398": "\"=====================================\\n\"", "1399": "\"==================================\\n\"", "1400": "\"=================================\\n\"", "1401": "\"===============================\\n\"", "1402": "\"==========>\"", "1403": "\"====[ backtrace testing ]===========\\n\"", "1404": "\"====[ end of backtrace testing ]====\\n\"", "1405": "\"==>\"", "1406": "\"==>%s(,%zu)\\n\"", "1407": "\"==>%s(,%zu,,%zu)\\n\"", "1408": "\"=off\"", "1409": "\">\"", "1410": "\">=\"", "1411": "\">>=\"", "1412": "\"?\"", "1413": "\"?+|:';\\\",.<>/?abcdefghijklmnopqrstuvwxyz1234567890\"", "1414": "\"??\"", "1415": "\"??? Writer stall state %d g%lu c%lu f%#x\\n\"", "1416": "\"???\"", "1417": "\"A\"", "1418": "\"ARG_CONST_STACK_SIZE cannot be first argument\\n\"", "1419": "\"AUDIT_POSSIBLE is deprecated\\n\"", "1420": "\"Absolute symbol: 0x%08lx\\n\"", "1421": "\"AccReadyCB\"", "1422": "\"AccWaitCB\"", "1423": "\"Active\"", "1424": "\"Added domain %s\\n\"", "1425": "\"Adding module '%s' to sysfs failed (%d), the system may be unstable.\\n\"", "1426": "\"Adjusting %s more than 11%% (%ld vs %ld)\\n\"", "1427": "\"All QSes seen, last %s kthread activity %ld (%ld-%ld), jiffies_till_next_fqs=%ld, root ->qsmask %#lx\\n\"", "1428": "\"Allocating new usage for %s.\\n\"", "1429": "\"Allow RCU readers from irq handlers\"", "1430": "\"Another I/O driver is already registered with KGDB\\n\"", "1431": "\"Argument is too long.: %s\\n\"", "1432": "\"Argument[%d] name '%s' conflicts with \"", "1433": "\"Arjan van de Ven <arjan@linux.intel.com>\"", "1434": "\"Attempt to kill tasklet from interrupt\\n\"", "1435": "\"B\"", "1436": "\"B.\"", "1437": "\"BLOCK\"", "1438": "\"BLOCK_IOPOLL\"", "1439": "\"BP #%d at \"", "1440": "\"BPF program is too complex\\n\"", "1441": "\"BPF program is too large. Proccessed %d insn\\n\"", "1442": "\"BPF_ALU uses reserved fields\\n\"", "1443": "\"BPF_CALL uses reserved fields\\n\"", "1444": "\"BPF_END uses reserved fields\\n\"", "1445": "\"BPF_EXIT uses reserved fields\\n\"", "1446": "\"BPF_JA uses reserved fields\\n\"", "1447": "\"BPF_JMP uses reserved fields\\n\"", "1448": "\"BPF_LDX uses reserved fields\\n\"", "1449": "\"BPF_LD_ABS uses reserved fields\\n\"", "1450": "\"BPF_LD_ABS|IND instructions not allowed for this program type\\n\"", "1451": "\"BPF_LD_IMM64 uses reserved fields\\n\"", "1452": "\"BPF_MOV uses reserved fields\\n\"", "1453": "\"BPF_NEG uses reserved fields\\n\"", "1454": "\"BPF_ST uses reserved fields\\n\"", "1455": "\"BPF_STX uses reserved fields\\n\"", "1456": "\"BPF_XADD uses reserved fields\\n\"", "1457": "\"BTAPROMPT\"", "1458": "\"BUG\"", "1459": "\"BUG: Bad rss-counter state \"", "1460": "\"BUG: Function graph tracer hang!\\n\"", "1461": "\"BUG: MAX_LOCKDEP_CHAINS too low!\"", "1462": "\"BUG: MAX_LOCKDEP_ENTRIES too low!\"", "1463": "\"BUG: MAX_LOCKDEP_KEYS too low!\"", "1464": "\"BUG: MAX_LOCK_DEPTH too low!\"", "1465": "\"BUG: MAX_STACK_TRACE_ENTRIES too low!\"", "1466": "\"BUG: arch topology borken\\n\"", "1467": "\"BUG: key %p not in .data!\\n\"", "1468": "\"BUG: looking up invalid subclass: %u\\n\"", "1469": "\"BUG: non-zero nr_pmds on freeing mm: %ld\\n\"", "1470": "\"BUG: non-zero nr_ptes on freeing mm: %ld\\n\"", "1471": "\"BUG: read-lock lockup on CPU#%d, \"", "1472": "\"BUG: rwlock %s on CPU#%d, %s/%d, %p\\n\"", "1473": "\"BUG: sleeping function called from invalid context at %s:%d\\n\"", "1474": "\"BUG: soft lockup - CPU#%d stuck for %us! [%s:%d]\\n\"", "1475": "\"BUG: spinlock %s on CPU#%d, %s/%d\\n\"", "1476": "\"BUG: workqueue leaked lock or atomic: %s/0x%08x/%d\\n\"", "1477": "\"BUG: write-lock lockup on CPU#%d, \"", "1478": "\"BUG_%02x\\n\"", "1479": "\"BUG_ld_%02x\\n\"", "1480": "\"BUG_ldx_%02x\\n\"", "1481": "\"BUG_st_%02x\\n\"", "1482": "\"Backtrace all processes matching state flag\"", "1483": "\"Backtrace current process on each cpu\"", "1484": "\"Backtrace process given its struct task address\"", "1485": "\"Bad frame pointer: expected %lx, received %lx\\n\"", "1486": "\"Bad trampoline accounting at: %p (%pS) (%lx)\\n\"", "1487": "\"Bad trampoline accounting at: %p (%pS)\\n\"", "1488": "\"Begin\"", "1489": "\"Breakpoint %d at \"", "1490": "\"Breakpoint\"", "1491": "\"C\"", "1492": "\"CB\"", "1493": "\"CE: %s increased min_delta_ns to %llu nsec\\n\"", "1494": "\"CE: Reprogramming failure. Giving up\\n\"", "1495": "\"CPU %d:\\n\"", "1496": "\"CPU%d attaching NULL sched-domain.\\n\"", "1497": "\"CPU%d attaching sched-domain:\\n\"", "1498": "\"CPU%d is up\\n\"", "1499": "\"CPU%d\\n\"", "1500": "\"CPU_OFF\"", "1501": "\"CPU_ON\"", "1502": "\"CREATE\"", "1503": "\"CRED: ->*gid = { %d,%d,%d,%d }\\n\"", "1504": "\"CRED: ->*uid = { %d,%d,%d,%d }\\n\"", "1505": "\"CRED: ->magic=%x, put_addr=%p\\n\"", "1506": "\"CRED: ->security is %p\\n\"", "1507": "\"CRED: ->usage=%d, subscr=%d\\n\"", "1508": "\"CRED: put_cred_rcu() sees %p with usage %d\\n\"", "1509": "\"CRED: put_cred_rcu() sees %p with\"", "1510": "\"Can't allocate system trusted keyring\\n\"", "1511": "\"Can't do kill command now.\\n\"", "1512": "\"Cannot convert secid to context\"", "1513": "\"Catastrophic error detected\\n\"", "1514": "\"Check\"", "1515": "\"Cleanup\"", "1516": "\"CleanupMore\"", "1517": "\"Clear Breakpoint\"", "1518": "\"Clockevents: \"", "1519": "\"Command only available during kdb_init()\\n\"", "1520": "\"Command\"", "1521": "\"Common symbol: %s\\n\"", "1522": "\"Component: %s, time: %u\\n\"", "1523": "\"Concurrent rmmod and shutdown illegal!\\n\"", "1524": "\"Continue Execution\"", "1525": "\"Core section allocation order:\\n\"", "1526": "\"Could not allocate control_code_buffer\\n\"", "1527": "\"Could not allocate memory for swsusp_header\\n\"", "1528": "\"Could not allocate new defcmd_set entry for %s\\n\"", "1529": "\"Could not allocate new kdb_command \"", "1530": "\"Could not allocate swap buffer\\n\"", "1531": "\"Could not create tracefs \"", "1532": "\"Could not create tracefs '%s' directory\\n\"", "1533": "\"Could not create tracefs '%s/filter' entry\\n\"", "1534": "\"Could not create tracefs 'available_events' entry\\n\"", "1535": "\"Could not create tracefs 'events' directory\\n\"", "1536": "\"Could not create tracefs 'set_event' entry\\n\"", "1537": "\"Could not insert probe at %s+%lu: %d\\n\"", "1538": "\"Could not register function stat for cpu %d\\n\"", "1539": "\"Couldn't find or set field in one of a subsystem's events\"", "1540": "\"Crash kernel\"", "1541": "\"Creating rcu_torture_boost task\"", "1542": "\"Critical breakpoint error, kernel memory destroyed at: %lx\\n\"", "1543": "\"Current pid: %d comm: %s / Idle pid: %d comm: %s\"", "1544": "\"D\"", "1545": "\"DEBUG\"", "1546": "\"DELETE\"", "1547": "\"Data Access\"", "1548": "\"Data Write\"", "1549": "\"Default domain set to @0x%p\\n\"", "1550": "\"Default\"", "1551": "\"DeferredWake\"", "1552": "\"Define a set of commands, down to endefcmd\"", "1553": "\"Delete command needs an event name.\\n\"", "1554": "\"Description\"", "1555": "\"Disable Breakpoint\"", "1556": "\"Disable NMI entry to KDB\"", "1557": "\"Disable irq lockup detection when true\"", "1558": "\"Disabling %s control group\"", "1559": "\"Disabling FTRACE selftests due to running tracer '%s'\\n\"", "1560": "\"Disabling IRQ #%d\\n\"", "1561": "\"Disabling lock debugging due to kernel taint\\n\"", "1562": "\"Disabling non-boot CPUs ...\\n\"", "1563": "\"Display Help Message\"", "1564": "\"Display Memory Contents, also mdWcN, e.g. md8c1\"", "1565": "\"Display Memory Symbolically\"", "1566": "\"Display Physical Memory\"", "1567": "\"Display Raw Memory\"", "1568": "\"Display Registers\"", "1569": "\"Display active task list\"", "1570": "\"Display breakpoints\"", "1571": "\"Display exception frame\"", "1572": "\"Display help on | grep\"", "1573": "\"Display per_cpu variables\"", "1574": "\"Display stack for process <pid>\"", "1575": "\"Display syslog buffer\"", "1576": "\"Dumping ftrace buffer:\\n\"", "1577": "\"Dumping kprobe:\\n\"", "1578": "\"Duplicate kdb command registered: \"", "1579": "\"Duration of each boost test, seconds.\"", "1580": "\"Duration of fqs bursts (us), 0 to disable\"", "1581": "\"E.\"", "1582": "\"E01\"", "1583": "\"ERROR: !SD_LOAD_BALANCE domain\"", "1584": "\"ERROR: %s\\n\\n\"", "1585": "\"ERROR: No KGDB I/O module available\\n\"", "1586": "\"ERROR: domain->groups does not contain\"", "1587": "\"ERROR: domain->span does not contain \"", "1588": "\"ERROR: empty group\\n\"", "1589": "\"ERROR: group is NULL\\n\"", "1590": "\"ERROR: groups don't span domain->span\\n\"", "1591": "\"ERROR: no free irqs available below %i maximum\\n\"", "1592": "\"ERROR: parent span is not a superset \"", "1593": "\"ERROR: repeated CPUs\\n\"", "1594": "\"EarlyExit\"", "1595": "\"Echo the kernel .config file used to build the kernel\"", "1596": "\"Edge\"", "1597": "\"Empty!\\n\"", "1598": "\"Enable Breakpoint\"", "1599": "\"Enable debug-object double call_rcu() testing\"", "1600": "\"Enable verbose debugging printk()s\"", "1601": "\"Enabled event during self test!\\n\"", "1602": "\"Enabling non-boot CPUs ...\\n\"", "1603": "\"End RCU core\"", "1604": "\"End boost kthread@notreached\"", "1605": "\"End boost kthread@rcu_wait\"", "1606": "\"End boost kthread@rcu_yield\"", "1607": "\"End context switch\"", "1608": "\"End of test: FAILURE\"", "1609": "\"End of test: RCU_HOTPLUG\"", "1610": "\"End of test: SUCCESS\"", "1611": "\"End scheduler-tick\"", "1612": "\"End\"", "1613": "\"EndWait\"", "1614": "\"Enter <q> to end, <cr> to continue:\"", "1615": "\"Enter kgdb mode\"", "1616": "\"Entering KGDB\\n\"", "1617": "\"Error on entry: not idle task\"", "1618": "\"Error on exit: not idle task\"", "1619": "\"Error taking CPU%d down: %d\\n\"", "1620": "\"Error taking CPU%d up: %d\\n\"", "1621": "\"Error: There should be no unused kprobe here.\\n\"", "1622": "\"Event %s/%s doesn't exist.\\n\"", "1623": "\"Event name is not specified\\n\"", "1624": "\"Executing a continue without signal passing\\n\"", "1625": "\"Expanded resource %s due to conflict with %s\\n\"", "1626": "\"F\"", "1627": "\"FAILED!\\n\"", "1628": "\"FAILED\\n\"", "1629": "\"FREEZING\"", "1630": "\"FROZEN\"", "1631": "\"Fail to deliver Signal %d to process %d.\\n\"", "1632": "\"Failed to alloc mask\"", "1633": "\"Failed to allocate argument[%d] name.\\n\"", "1634": "\"Failed to allocate filename.\\n\"", "1635": "\"Failed to allocate memory for command '%s'.\\n\"", "1636": "\"Failed to allocate trace_uprobe.(%d)\\n\"", "1637": "\"Failed to broadcast timer tick. Some CPUs may be unresponsive.\\n\"", "1638": "\"Failed to create ftrace wakeup test thread \"", "1639": "\"Failed to create system directory %s\\n\"", "1640": "\"Failed to create watchdog threads, disabled\\n\"", "1641": "\"Failed to enable trace event: %s\\n\"", "1642": "\"Failed to find symbol %s\\n\"", "1643": "\"Failed to get filter for '%s', err %d\\n\"", "1644": "\"Failed to init %s tracer, init returned %d\\n\"", "1645": "\"Failed to match filter '%s', expected %d\\n\"", "1646": "\"Failed to parse address or file.\\n\"", "1647": "\"Failed to re-register probe %s on\"", "1648": "\"Failed to register kprobe event: %s\\n\"", "1649": "\"Failed to register probe event(%d)\\n\"", "1650": "\"Failed to register trace events module notifier\\n\"", "1651": "\"Failed to register uprobe event: %s\\n\"", "1652": "\"Failed to request resources for %s (irq %d) on irqchip %s\\n\"", "1653": "\"Failed to swap buffers due to commit in progress\\n\"", "1654": "\"Failed, unwanted pred visited for filter %s\\n\"", "1655": "\"Field not found\"", "1656": "\"Flags mismatch irq %d. %08x (%s) vs. %08x (%s)\\n\"", "1657": "\"FollowerSleep\"", "1658": "\"Freezing remaining freezable tasks ... \"", "1659": "\"Freezing user space processes ... \"", "1660": "\"G\"", "1661": "\"GPL\"", "1662": "\"GPs behind\"", "1663": "\"Group name is not specified\\n\"", "1664": "\"HI\"", "1665": "\"HOME=/\"", "1666": "\"HRTIMER\"", "1667": "\"Hierarchical RCU implementation.\\n\"", "1668": "\"Hit    Time            Avg             s^2\\n\"", "1669": "\"Hmm, kdb_reboot did not reboot, spinning here\\n\"", "1670": "\"Holdoff between bursts (jiffies)\"", "1671": "\"Holdoff between floods (jiffies)\"", "1672": "\"Holdoff time within fqs bursts (us)\"", "1673": "\"I\"", "1674": "\"I/O\"", "1675": "\"ID: %d\\n\"", "1676": "\"IKCFG_ED\"", "1677": "\"IKCFG_ST\"", "1678": "\"IN-\"", "1679": "\"INFO: %s detected stalls on CPUs/tasks:\"", "1680": "\"INFO: %s self-detected stall on CPU\"", "1681": "\"INFO: Stall ended before state dump start\\n\"", "1682": "\"INFO: lockdep is turned off.\\n\"", "1683": "\"INFO: rcu_tasks detected stalls on tasks:\\n\"", "1684": "\"INFO: task %s:%d blocked for more than %ld seconds.\\n\"", "1685": "\"INFO: timekeeping: Cycle offset (%lld) is larger than the the '%s' clock's 50%% safety margin (%lld)\\n\"", "1686": "\"INFO: trying to register non-static key.\\n\"", "1687": "\"INITIAL USE\"", "1688": "\"IPI callback %pS sent to offline CPU\\n\"", "1689": "\"IPI on offline CPU %d\\n\"", "1690": "\"IRQ %d device %s returned IRQ_WAKE_THREAD \"", "1691": "\"IRQ lockup detection disabled\\n\"", "1692": "\"IRQ\"", "1693": "\"If you just came from a suspend/resume,\\n\"", "1694": "\"Illegal idle entry in RCU read-side critical section.\"", "1695": "\"Illegal idle entry in RCU-bh read-side critical section.\"", "1696": "\"Illegal idle entry in RCU-sched read-side critical section.\"", "1697": "\"Illegal integer value\"", "1698": "\"Illegal operation for field type\"", "1699": "\"Illegal synchronize_rcu() in RCU read-side critical section\"", "1700": "\"Illegal synchronize_sched() in RCU read-side critical section\"", "1701": "\"Illegal synchronize_srcu() in same-type SRCU (or RCU) read-side critical section\"", "1702": "\"Illegal use of '!'\"", "1703": "\"Inc1\"", "1704": "\"Inc2\"", "1705": "\"Incomplete 'defcmd' set, forcing endefcmd\\n\"", "1706": "\"Init section allocation order:\\n\"", "1707": "\"Initialise system trusted keyring\\n\"", "1708": "\"Initializing cgroup subsys %s\\n\"", "1709": "\"Instruction(Register)\"", "1710": "\"Instruction(i)\"", "1711": "\"Interval between boost tests, seconds.\"", "1712": "\"Invalid argument[%d] name: %s\\n\"", "1713": "\"Invalid notifier called!\"", "1714": "\"Invalid operator\"", "1715": "\"Invalid signal parameter.<-signal>\\n\"", "1716": "\"KDB current process is %s(pid=%d)\\n\"", "1717": "\"KGDB only knows signal 9 (pass)\"", "1718": "\"KGDB or $3#33 for KDB\\n\"", "1719": "\"Kernel panic - not syncing: %s\\n\"", "1720": "\"Kexec: Memory allocation for saving cpu register states failed\\n\"", "1721": "\"Kprobe smoke test: \"", "1722": "\"LastCB\"", "1723": "\"Latency Top version : v0.1\\n\"", "1724": "\"Level\"", "1725": "\"List loaded kernel modules\"", "1726": "\"Live\"", "1727": "\"Loaded X.509 cert '%s'\\n\"", "1728": "\"Loading compiled-in X.509 certificates\\n\"", "1729": "\"Loading segment %d: buf=0x%p bufsz=0x%zx mem=0x%lx memsz=0x%zx\\n\"", "1730": "\"Loading\"", "1731": "\"Look up: \\\"%s\\\"\\n\"", "1732": "\"M\"", "1733": "\"MAP %u.%06lu %d 0x%llx 0x%lx 0x%lx 0x%lx %d\\n\"", "1734": "\"MARK %u.%06lu %s\"", "1735": "\"MARK 0.000000 Lost %lu events.\\n\"", "1736": "\"MEMORY ERROR \"", "1737": "\"MIN_vruntime\"", "1738": "\"Magic SysRq key\"", "1739": "\"Maximum\"", "1740": "\"Meaningless filter expression\"", "1741": "\"Memory value expected after '@'\\n\"", "1742": "\"Mems_allowed:\\t%*pb\\n\"", "1743": "\"Mems_allowed_list:\\t%*pbl\\n\"", "1744": "\"Minimum\"", "1745": "\"Misrouted IRQ fixup and polling support \"", "1746": "\"Misrouted IRQ fixup support enabled.\\n\"", "1747": "\"Missing AUDIT_COMPARE define.  Report as a bug\\n\"", "1748": "\"Missing field name and/or value\"", "1749": "\"Modify Memory Contents\"", "1750": "\"Modify Registers\"", "1751": "\"Module len %lu truncated\\n\"", "1752": "\"Modules linked in:\"", "1753": "\"N.\"", "1754": "\"NET_RX\"", "1755": "\"NET_TX\"", "1756": "\"NG: Some tests are failed. Please check them.\\n\"", "1757": "\"NMI watchdog: \"", "1758": "\"NORMAL\"", "1759": "\"NOSECT\"", "1760": "\"NO_HZ FULL will not work with unstable sched clock\"", "1761": "\"NO_NUMA\"", "1762": "\"NR_IRQS:%d nr_irqs:%d %d\\n\"", "1763": "\"NR_IRQS:%d\\n\"", "1764": "\"NULL\"", "1765": "\"NUMA\"", "1766": "\"Name: %s\\nAddress: %p\\nOffset: %x\\n\"", "1767": "\"Need to add type to trace.h\\n\"", "1768": "\"No error\"", "1769": "\"No memory to create event subsystem %s\\n\"", "1770": "\"No module found in object\\n\"", "1771": "\"No process with pid == %ld found\\n\"", "1772": "\"No set_type function for IRQ %d (%s)\\n\"", "1773": "\"No task with pid=%d\\n\"", "1774": "\"No torture_shutdown_hook(), skipping.\"", "1775": "\"Non-boot CPUs are not disabled\\n\"", "1776": "\"None\"", "1777": "\"Not tainted\"", "1778": "\"Number of RCU fake writer threads\"", "1779": "\"Number of RCU reader threads\"", "1780": "\"Number of jiffies between shuffles, 0=disable\"", "1781": "\"Number of jiffies to run/halt test, 0=disable\"", "1782": "\"Number of read-locking stress-test threads\"", "1783": "\"Number of seconds between shuffles\"", "1784": "\"Number of seconds between stats printk()s\"", "1785": "\"Number of seconds to run/halt test\"", "1786": "\"Number of write-locking stress-test threads\"", "1787": "\"O: %4d, E:%8d, S: 0x%08lx, P: %4d, N: %4d, B: %p, M:\"", "1788": "\"OK\"", "1789": "\"OK\\n\"", "1790": "\"OP_NONE\"", "1791": "\"OfflineNoCB\"", "1792": "\"OnlineNQ\"", "1793": "\"OnlineNoCB\"", "1794": "\"OnlineQ\"", "1795": "\"Only 'ip' field is supported for function trace\"", "1796": "\"Oops: %s\\n\"", "1797": "\"Operand too long\"", "1798": "\"P\"", "1799": "\"PANIC: %s\\n\"", "1800": "\"PARENT\"", "1801": "\"PASSED\\n\"", "1802": "\"PATH=/sbin:/bin:/usr/sbin:/usr/bin\"", "1803": "\"PATH=/sbin:/usr/sbin:/bin:/usr/bin\"", "1804": "\"PCI IO\"", "1805": "\"PCI mem\"", "1806": "\"PCIDEV %02x%02x %04x%04x %x\"", "1807": "\"PID\"", "1808": "\"PM: %s %u kbytes in %u.%02u seconds (%u.%02u MB/s)\\n\"", "1809": "\"PM: %s took %d.%03d seconds\\n\"", "1810": "\"PM: Basic memory bitmaps created\\n\"", "1811": "\"PM: Basic memory bitmaps freed\\n\"", "1812": "\"PM: Cannot find swap device, try \"", "1813": "\"PM: Cannot find swsusp signature!\\n\"", "1814": "\"PM: Cannot get swap writer\\n\"", "1815": "\"PM: Cannot start CRC32 thread\\n\"", "1816": "\"PM: Checking hibernation image partition %s\\n\"", "1817": "\"PM: Compressing and saving image data (%u pages)...\\n\"", "1818": "\"PM: Creating hibernation image:\\n\"", "1819": "\"PM: Error %d creating hibernation image\\n\"", "1820": "\"PM: Error %d resuming\\n\"", "1821": "\"PM: Failed to allocate LZO data\\n\"", "1822": "\"PM: Failed to allocate LZO page\\n\"", "1823": "\"PM: Failed to load hibernation image, recovering.\\n\"", "1824": "\"PM: Hibernation image created (%d pages copied)\\n\"", "1825": "\"PM: Hibernation image not present or could not be loaded.\\n\"", "1826": "\"PM: Hibernation image partition %d:%d present\\n\"", "1827": "\"PM: Hibernation not available.\\n\"", "1828": "\"PM: Image device not initialised\\n\"", "1829": "\"PM: Image loading done.\\n\"", "1830": "\"PM: Image loading progress: %3d%%\\n\"", "1831": "\"PM: Image mismatch: %s\\n\"", "1832": "\"PM: Image not found (code %d)\\n\"", "1833": "\"PM: Image restored successfully.\\n\"", "1834": "\"PM: Image saving done.\\n\"", "1835": "\"PM: Image signature found, resuming\\n\"", "1836": "\"PM: Image successfully loaded\\n\"", "1837": "\"PM: Invalid LZO compressed length\\n\"", "1838": "\"PM: Invalid LZO uncompressed length\\n\"", "1839": "\"PM: Invalid image CRC32!\\n\"", "1840": "\"PM: Loading hibernation image.\\n\"", "1841": "\"PM: Loading image data pages (%u pages)...\\n\"", "1842": "\"PM: Looking for hibernation image.\\n\"", "1843": "\"PM: Memory allocation failed\\n\"", "1844": "\"PM: Need to copy %u pages\\n\"", "1845": "\"PM: Normal pages needed: %u + %u, available pages: %u\\n\"", "1846": "\"PM: Not enough free memory\\n\"", "1847": "\"PM: Not enough free swap\\n\"", "1848": "\"PM: Please power down manually\\n\"", "1849": "\"PM: Preparing processes for restore.\\n\"", "1850": "\"PM: Registered nosave memory: [mem %#010llx-%#010llx]\\n\"", "1851": "\"PM: S\"", "1852": "\"PM: Saving image data pages (%u pages)...\\n\"", "1853": "\"PM: Some devices failed to power down, \"", "1854": "\"PM: Some system devices failed to power down, \"", "1855": "\"PM: Swap header not found!\\n\"", "1856": "\"PM: Swap will be unusable! \"", "1857": "\"PM: Syncing filesystems ... \"", "1858": "\"PM: Using %u thread(s) for compression.\\n\"", "1859": "\"PM: can't read %s time, err %d\\n\"", "1860": "\"PM: can't set %s wakealarm, err %d\\n\"", "1861": "\"PM: can't test '%s' suspend state\\n\"", "1862": "\"PM: no wakealarm-capable RTC driver is ready\\n\"", "1863": "\"PM: suspend test failed, error %d\\n\"", "1864": "\"PM: test RTC wakeup from '%s' suspend\\n\"", "1865": "\"PM: writing image.\\n\"", "1866": "\"POSIX clock id %d lacks clock_get()\\n\"", "1867": "\"POSIX clock id %d lacks clock_getres()\\n\"", "1868": "\"POSIX clock register failed for clock_id %d\\n\"", "1869": "\"PROMPT\"", "1870": "\"Parse error at argument[%d]. (%d)\\n\"", "1871": "\"Paul E. McKenney <paulmck@us.ibm.com> and Josh Triplett <josh@joshtriplett.org>\"", "1872": "\"Paul E. McKenney <paulmck@us.ibm.com>\"", "1873": "\"Paul E. McKenney\"", "1874": "\"Please attach the output of /proc/lock_stat to the bug report\\n\"", "1875": "\"Please evaluate if this is the right api to use and \"", "1876": "\"Please report this trace. ]\\n\\n\"", "1877": "\"Poll\"", "1878": "\"Power Off\"", "1879": "\"Power down\\n\"", "1880": "\"Preemptible hierarchical RCU implementation.\\n\"", "1881": "\"Preemption disabled at:\"", "1882": "\"Press Stop-A (L1-A) to return to the boot prom\\n\"", "1883": "\"Prestartedroot\"", "1884": "\"Prestartleaf\"", "1885": "\"Primary handler called for nested irq %d\\n\"", "1886": "\"Probe definition must be started with 'p', 'r' or '-'.\\n\"", "1887": "\"Probe definition must be started with 'p', 'r' or\"", "1888": "\"Probing address(0x%p) is not an \"", "1889": "\"Problem loading in-kernel X.509 certificate (%ld)\\n\"", "1890": "\"Problem parsing in-kernel X.509 certificate list\\n\"", "1891": "\"Process accounting paused\\n\"", "1892": "\"Process accounting resumed\\n\"", "1893": "\"Process is not RUNNING, sending a signal from \"", "1894": "\"Q\"", "1895": "\"QC\"", "1896": "\"R %d %u.%06lu %d 0x%llx 0x%lx 0x%lx %d\\n\"", "1897": "\"R\"", "1898": "\"R%d !read_ok\\n\"", "1899": "\"R%d is invalid\\n\"", "1900": "\"R%d type=%s expected=%s\\n\"", "1901": "\"RCU test callback executed %d\\n\"", "1902": "\"RCU used illegally from extended quiescent state!\\n\"", "1903": "\"RCU used illegally from idle CPU!\\n\"", "1904": "\"RCU used illegally from offline CPU!\\n\"", "1905": "\"RCU\"", "1906": "\"RCU: Adjusting geometry for rcu_fanout_leaf=%d, nr_cpu_ids=%d\\n\"", "1907": "\"RCU: Never-onlined no-CBs CPU %d has CB %p\\n\"", "1908": "\"Randy Dunlap\"", "1909": "\"Read\"", "1910": "\"Read-Copy Update tracing for hierarchical implementation\"", "1911": "\"Reader Pipe: \"", "1912": "\"Reads \"", "1913": "\"Reboot the machine immediately\"", "1914": "\"Rebooting in %d seconds..\"", "1915": "\"Recursive entry to debugger\"", "1916": "\"Registered I/O driver %s\\n\"", "1917": "\"Reissue the kill command if you want to risk \"", "1918": "\"Removed domain %s\\n\"", "1919": "\"Request for unknown module key '%s' err %ld\\n\"", "1920": "\"Restarting kernel threads ... \"", "1921": "\"Restarting system with command '%s'\\n\"", "1922": "\"Restarting system\\n\"", "1923": "\"Restarting tasks ... \"", "1924": "\"ResumeWait\"", "1925": "\"Ring buffer PASSED!\\n\"", "1926": "\"Root %d group %s\\n\"", "1927": "\"Running RCU self tests\\n\"", "1928": "\"Running ring buffer tests...\\n\"", "1929": "\"Running tests on all trace events:\\n\"", "1930": "\"Running tests on trace event systems:\\n\"", "1931": "\"Running tests on trace events:\\n\"", "1932": "\"S\"", "1933": "\"S1SUSPEND\"", "1934": "\"SCHED\"", "1935": "\"SIGEV_THREAD_ID must not share bit with other SIGEV values!\"", "1936": "\"SMP: fork_idle() failed for CPU %u\\n\"", "1937": "\"SRWOY\"", "1938": "\"SS trap\"", "1939": "\"START\"", "1940": "\"SWAP-SPACE\"", "1941": "\"SWAPSPACE2\"", "1942": "\"Saved backtrace test skipped.\\n\"", "1943": "\"Sched Debug Version: v0.11, %s %.*s\\n\"", "1944": "\"Send a signal to a process\"", "1945": "\"Set environment variables\"", "1946": "\"Set/Display breakpoints\"", "1947": "\"Setting dangerous option %s - tainting kernel\\n\"", "1948": "\"Setting trigger mode %lu for irq %u failed (%pF)\\n\"", "1949": "\"Show environment variables\"", "1950": "\"Showing busy workqueues and worker pools:\\n\"", "1951": "\"Shutdown time (j), <= zero to disable.\"", "1952": "\"Shutdown time (s), <= zero to disable.\"", "1953": "\"Shutting down hard lockup detector on all cpus\\n\"", "1954": "\"Signal %d is sent to process %d.\\n\"", "1955": "\"Single Step\"", "1956": "\"Sleep\"", "1957": "\"Software breakpoints are unavailable.\\n\"", "1958": "\"Sorting __ex_table...\\n\"", "1959": "\"Stack traceback for pid %d\\n\"", "1960": "\"Stack traceback\"", "1961": "\"Stall duration (s), zero to disable.\"", "1962": "\"Start RCU core\"", "1963": "\"Start boost kthread@init\"", "1964": "\"Start boost kthread@rcu_wait\"", "1965": "\"Start boost kthread@rcu_yield\"", "1966": "\"Start context switch\"", "1967": "\"Start locktorture at module init\"", "1968": "\"Start rcutorture at boot\"", "1969": "\"Start scheduler-tick\"", "1970": "\"Start\"", "1971": "\"StartWait\"", "1972": "\"Startedleaf\"", "1973": "\"Startedleafroot\"", "1974": "\"Startedroot\"", "1975": "\"Starting new kernel\\n\"", "1976": "\"Starting tracer '%s'\\n\"", "1977": "\"Startleaf\"", "1978": "\"Steven Rostedt\"", "1979": "\"Stopping %s\"", "1980": "\"Stopping torture_shuffle task\"", "1981": "\"Stopping torture_shutdown task\"", "1982": "\"Stopping torture_stutter task\"", "1983": "\"Sum\"", "1984": "\"Summarize the system\"", "1985": "\"Switch to another task\"", "1986": "\"Switch to new cpu\"", "1987": "\"Symbol %s is being used by a non-GPL module, \"", "1988": "\"Symbol %s is marked as UNUSED, however this module is \"", "1989": "\"Symbol: %s has bad section index %d.\\n\"", "1990": "\"Syncing filesystems ... \"", "1991": "\"System RAM\"", "1992": "\"System halted\\n\"", "1993": "\"T.\"", "1994": "\"TASKLET\"", "1995": "\"TERM=linux\"", "1996": "\"THAWED\"", "1997": "\"TIMER\"", "1998": "\"TRACE_SYSTEM\"", "1999": "\"Tainted: \"", "2000": "\"Task %s (pid=%d) is on cpu %d (state=%ld, flags=%x)\\n\"", "2001": "\"Task Addr\"", "2002": "\"Task dump for CPU %d:\\n\"", "2003": "\"Test RCU prio boost: 0=no, 1=maybe, 2=yes.\"", "2004": "\"Test support for tickless idle CPUs\"", "2005": "\"Testing a backtrace from irq context.\\n\"", "2006": "\"Testing a backtrace from process context.\\n\"", "2007": "\"Testing a saved backtrace.\\n\"", "2008": "\"Testing all events: \"", "2009": "\"Testing dynamic ftrace ops #%d: \"", "2010": "\"Testing dynamic ftrace: \"", "2011": "\"Testing event %s: \"", "2012": "\"Testing event system %s: \"", "2013": "\"Testing ftrace filter: \"", "2014": "\"Testing ftrace recursion safe: \"", "2015": "\"Testing ftrace recursion: \"", "2016": "\"Testing ftrace regs%s: \"", "2017": "\"Testing kprobe tracing: \"", "2018": "\"Testing tracer %s: \"", "2019": "\"The following trace is a kernel self test and not a bug!\\n\"", "2020": "\"The sigmask lock is held somewhere else in \"", "2021": "\"The signal has _not_ been sent.\\n\"", "2022": "\"This may impact system performance.\\n\"", "2023": "\"This may significantly impact system \"", "2024": "\"This probe might be able to register after\"", "2025": "\"This symbol will go away in the future.\\n\"", "2026": "\"Thread overran stack, or stack corrupted\\n\"", "2027": "\"Thread\"", "2028": "\"ThreadExtraInfo,\"", "2029": "\"Threaded irq requested with handler=NULL and !ONESHOT for irq %d\\n\"", "2030": "\"Tick Device: mode:     %d\\n\"", "2031": "\"Time after boot before CPU hotplugs (s)\"", "2032": "\"Time between CPU hotplugs (s), 0=disable\"", "2033": "\"Time to wait before starting stall (s).\"", "2034": "\"Timed out waiting for secondary CPUs.\\n\"", "2035": "\"Too many operands\"", "2036": "\"Too many terms in predicate expression\"", "2037": "\"Tracer %s already registered\\n\"", "2038": "\"Tracer has a name longer than %d\\n\"", "2039": "\"Tracer must have a name\\n\"", "2040": "\"Try swapon -a.\\n\"", "2041": "\"Trying to free DMA%d\\n\"", "2042": "\"Trying to free IRQ %d from IRQ context!\\n\"", "2043": "\"Trying to free already-free IRQ %d\\n\"", "2044": "\"Trying to free free DMA%d\\n\"", "2045": "\"Trying to free nonexistent resource \"", "2046": "\"Type of RCU to torture (rcu, rcu_bh, ...)\"", "2047": "\"Type of lock to torture (spin_lock, spin_lock_irq, mutex_lock, ...)\"", "2048": "\"Type=%s, Value=%d, Requests: active=%d / total=%d\\n\"", "2049": "\"U\"", "2050": "\"UNKNOWN %u.%06lu %d 0x%llx %02lx,%02lx,\"", "2051": "\"UNKNOWN\"", "2052": "\"UNMAP %u.%06lu %d 0x%lx %d\\n\"", "2053": "\"UT\"", "2054": "\"Unable to set relax_domain_level\\n\"", "2055": "\"Unbalanced IRQ %d wake disable\\n\"", "2056": "\"Unbalanced enable for IRQ %d\\n\"", "2057": "\"Unbalanced parens\"", "2058": "\"Unknown action %x\\n\"", "2059": "\"Unknown argument '%s'\\n\"", "2060": "\"Unknown\"", "2061": "\"Unloading\"", "2062": "\"Unregistered I/O driver %s, debugger disabled\\n\"", "2063": "\"Unsafe core_pattern used with \"", "2064": "\"Unscheduled system shutdown detected\"", "2065": "\"Unsupported type: %s\\n\"", "2066": "\"Usage of  cmd args | grep pattern:\\n\"", "2067": "\"Usage\"", "2068": "\"Use conditional/async GP wait primitives\"", "2069": "\"Use expedited GP wait primitives\"", "2070": "\"Use normal (non-expedited) GP wait primitives\"", "2071": "\"Use synchronous GP wait primitives\"", "2072": "\"VERSION 20070824\\n\"", "2073": "\"W %d %u.%06lu %d 0x%llx 0x%lx 0x%lx %d\\n\"", "2074": "\"WARNING: Boot clock returned invalid value!\\n\"", "2075": "\"WARNING: Overflow in clocksource '%s' observed, time update capped.\\n\"", "2076": "\"WARNING: Persistent clock returned invalid value!\\n\"", "2077": "\"WARNING: Underflow in clocksource '%s' observed, time update ignored.\\n\"", "2078": "\"WARNING: timekeeping: Cycle offset (%lld) is larger than allowed by the '%s' clock's max_cycles value (%lld): time overflow danger\\n\"", "2079": "\"Wait time between fqs bursts (s)\"", "2080": "\"WaitQueue\"", "2081": "\"Waiting %dsec before reading resume device...\\n\"", "2082": "\"Waiting for connection from remote gdb...\\n\"", "2083": "\"WakeEmpty\"", "2084": "\"WakeEmptyIsDeferred\"", "2085": "\"WakeNot\"", "2086": "\"WakeNotPoll\"", "2087": "\"WakeOvf\"", "2088": "\"WakeOvfIsDeferred\"", "2089": "\"Warning: could not register \"", "2090": "\"Warning: could not register block events\\n\"", "2091": "\"Warning: could not register graph trace events\\n\"", "2092": "\"Warning: could not register the block tracer\\n\"", "2093": "\"Warning: found a stray unused \"", "2094": "\"Watchdog detected hard LOCKUP on cpu %d\"", "2095": "\"WokeEmpty\"", "2096": "\"WokeNonEmpty\"", "2097": "\"WokeQueue\"", "2098": "\"Writes\"", "2099": "\"Wrote\"", "2100": "\"X\"", "2101": "\"You already have a breakpoint at \"", "2102": "\"Your compiler is too old; turning off.\\n\"", "2103": "\"[ BUG: %s/%d still has locks held! ]\\n\"", "2104": "\"[ BUG: Nested lock was not taken ]\\n\"", "2105": "\"[ BUG: bad contention detected! ]\\n\"", "2106": "\"[ BUG: bad unlock balance detected! ]\\n\"", "2107": "\"[ BUG: circular locking deadlock detected! ]\\n\"", "2108": "\"[ BUG: lock held when returning to user space! ]\\n\"", "2109": "\"[ INFO: inconsistent lock state ]\\n\"", "2110": "\"[ INFO: possible recursive locking detected ]\\n\"", "2111": "\"[ INFO: suspicious RCU usage. ]\\n\"", "2112": "\"[ turning off deadlock detection.\"", "2113": "\"[\"", "2114": "\"[%-5.5s%5u] \"", "2115": "\"[%016llx] %lld (+%lld): \"", "2116": "\"[%08llx] %ld.%03ldms (+%ld.%03ldms): \"", "2117": "\"[%d]\"", "2118": "\"[%d]\\n\"", "2119": "\"[%p] \"", "2120": "\"[%s] %llu\\n\"", "2121": "\"[%s] %s:%s:%d\\n\"", "2122": "\"[%s]\"", "2123": "\"[%s]\\n\"", "2124": "\"[%s]kdb> %s\\n\"", "2125": "\"[+0x%lx]\"", "2126": "\"[<%p>] %pf\"", "2127": "\"[<%p>]\"", "2128": "\"[<flags>|A]\"", "2129": "\"[<vaddr>]\"", "2130": "\"[DISABLED]\"", "2131": "\"[D|R|S|T|C|Z|E|U|I|M|A]\"", "2132": "\"[FTRACE]\"", "2133": "\"[GONE]\"", "2134": "\"[OPTIMIZED]\"", "2135": "\"[datar [length]|dataw [length]]   Set hw brk\"", "2136": "\"[defcmd]\"", "2137": "\"[disabled]\\n\"", "2138": "\"[eff]\"", "2139": "\"[heap]\"", "2140": "\"[lines]\"", "2141": "\"[permanent],\"", "2142": "\"[real]\"", "2143": "\"[stack]\"", "2144": "\"[unknown/kretprobe'd]\"", "2145": "\"\\\"\"", "2146": "\"\\\", %s\"", "2147": "\"\\\"0x%lx\\\", REC->ret\"", "2148": "\"\\\"echo 0 > /proc/sys/kernel/hung_task_timeout_secs\\\"\"", "2149": "\"\\\"memory\\\" requires setting use_hierarchy to 1 on the root\\n\"", "2150": "\"\\\\\\\"%s\\\\\\\"\"", "2151": "\"\\n                                    \"", "2152": "\"\\n    is disabled\"", "2153": "\"\\n    is enabled\"", "2154": "\"\\n *** DEADLOCK ***\\n\\n\"", "2155": "\"\\n ------------------------------------------\\n\\n\"", "2156": "\"\\n new dependency: \"", "2157": "\"\\n\"", "2158": "\"\\n%s/%d's [blocked] stackdump:\\n\\n\"", "2159": "\"\\n%s/%d's [current] stackdump:\\n\\n\"", "2160": "\"\\n%srcu_scheduler_active = %d, debug_locks = %d\\n\"", "2161": "\"\\n1) %s/%d is trying to acquire this lock:\\n\"", "2162": "\"\\n2) %s/%d is blocked on this lock:\\n\"", "2163": "\"\\n============================================\\n\"", "2164": "\"\\nEntering kdb (0x%p, pid %d) \"", "2165": "\"\\nEntering kdb (current=0x%p, pid %d) \"", "2166": "\"\\nShowing all locks held in the system:\\n\"", "2167": "\"\\n\\nand interrupts could create inverse lock ordering between them.\\n\\n\"", "2168": "\"\\nacquire class [%p] %s\"", "2169": "\"\\nbut task is already holding lock:\\n\"", "2170": "\"\\nbut this task is not holding:\\n\"", "2171": "\"\\ncfs_rq[%d]:%s\\n\"", "2172": "\"\\ncfs_rq[%d]:\\n\"", "2173": "\"\\ndl_rq[%d]:\\n\"", "2174": "\"\\nhash chain already cached, key: \"", "2175": "\"\\nmarked lock as {%s}:\\n\"", "2176": "\"\\nnew class %p: %s\"", "2177": "\"\\nnew hash chain, key: %016Lx tail class: [%p] %s\\n\"", "2178": "\"\\nother info that might help us debug this:\\n\"", "2179": "\"\\nother info that might help us debug this:\\n\\n\"", "2180": "\"\\nparse_error: %s\\n\"", "2181": "\"\\npred visited %s\\n\"", "2182": "\"\\nprint fmt: %s\\n\"", "2183": "\"\\nrt_rq[%d]:%s\\n\"", "2184": "\"\\nrt_rq[%d]:\\n\"", "2185": "\"\\nrunnable tasks:\\n\"", "2186": "\"\\nstack backtrace:\\n\"", "2187": "\"\\nthe shortest dependencies between 2nd lock and 1st lock:\\n\"", "2188": "\"\\t\"", "2189": "\"\\t%d: (%lu %s) idle=%03x/%llx/%d softirq=%u/%u fqs=%ld %s\\n\"", "2190": "\"\\t%s\\n\"", "2191": "\"\\t0x%lx %s\\n\"", "2192": "\"\\t=> (\"", "2193": "\"\\tAdditional per-CPU info printed with stalls.\\n\"", "2194": "\"\\tBoot-time adjustment of leaf fanout to %d.\\n\"", "2195": "\"\\tBuild-time adjustment of leaf fanout to %d.\\n\"", "2196": "\"\\tCONFIG_RCU_FANOUT set to non-default value of %d\\n\"", "2197": "\"\\tFour-level hierarchy is enabled.\\n\"", "2198": "\"\\tHierarchical RCU autobalancing is disabled.\\n\"", "2199": "\"\\tNote: kernel parameter 'rcu_nocbs=' contains nonexistent CPUs.\\n\"", "2200": "\"\\tOffload RCU callbacks from CPU 0\\n\"", "2201": "\"\\tOffload RCU callbacks from CPUs: %*pbl.\\n\"", "2202": "\"\\tOffload RCU callbacks from all CPUs\\n\"", "2203": "\"\\tPoll for callbacks from no-CBs CPUs.\\n\"", "2204": "\"\\tRCU debugfs-based tracing is enabled.\\n\"", "2205": "\"\\tRCU dyntick-idle grace-period acceleration is enabled.\\n\"", "2206": "\"\\tRCU kthread priority: %d.\\n\"", "2207": "\"\\tRCU lockdep checking is enabled.\\n\"", "2208": "\"\\tRCU restricting CPUs from NR_CPUS=%d to nr_cpu_ids=%d.\\n\"", "2209": "\"\\tRCU torture testing starts during boot.\\n\"", "2210": "\"\\tTasks blocked on level-%d rcu_node (CPUs %d-%d):\"", "2211": "\"\\taddr at %016lx, hardtype=%d installed=%d\\n\"", "2212": "\"\\tfield: char data;\\t\"", "2213": "\"\\tfield: int overwrite;\\t\"", "2214": "\"\\tfield: local_t commit;\\t\"", "2215": "\"\\tfield: u64 timestamp;\\t\"", "2216": "\"\\tfield:%.*s %s%s;\\toffset:%u;\\tsize:%u;\\tsigned:%d;\\n\"", "2217": "\"\\tfield:%s %s;\\toffset:%u;\\tsize:%u;\\tsigned:%d;\\n\"", "2218": "\"\\ttramp: %pS\"", "2219": "\"\\ttramp: ERROR!\"", "2220": "\"]\"", "2221": "\"]\\n\"", "2222": "\"^=\"", "2223": "\"__DEVEL__sane_behavior\"", "2224": "\"__call_rcu(): Leaked duplicate callback\\n\"", "2225": "\"__data_loc char[]\"", "2226": "\"__data_loc\"", "2227": "\"__ex_table\"", "2228": "\"__gnu_lto\"", "2229": "\"__jump_table\"", "2230": "\"__kcrctab\"", "2231": "\"__kcrctab_gpl\"", "2232": "\"__kcrctab_gpl_future\"", "2233": "\"__kcrctab_unused\"", "2234": "\"__kcrctab_unused_gpl\"", "2235": "\"__ksymtab\"", "2236": "\"__ksymtab_gpl\"", "2237": "\"__ksymtab_gpl_future\"", "2238": "\"__ksymtab_unused\"", "2239": "\"__ksymtab_unused_gpl\"", "2240": "\"__mcount_loc\"", "2241": "\"__obsparm\"", "2242": "\"__param\"", "2243": "\"__probe_func\"", "2244": "\"__probe_ip\"", "2245": "\"__probe_ret_ip\"", "2246": "\"__put_cred(%p{%d,%d})\"", "2247": "\"__timekeeping_inject_sleeptime: Invalid \"", "2248": "\"__trace_printk_fmt\"", "2249": "\"__tracepoints_ptrs\"", "2250": "\"__verbose\"", "2251": "\"__versions\"", "2252": "\"_filter=\"", "2253": "\"_ftrace_enum_map\"", "2254": "\"_ftrace_events\"", "2255": "\"a %d, b %d, c %d, d %d, e %d, f %d, g %d, h %d\"", "2256": "\"a == 1 && b == 1 && c == 1 && d == 1 && \"", "2257": "\"a == 1 || b == 1 || c == 1 || d == 1 || \"", "2258": "\"aarp-expiry-time\"", "2259": "\"aarp-resolve-time\"", "2260": "\"aarp-retransmit-limit\"", "2261": "\"aarp-tick-time\"", "2262": "\"abcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()?+\\\\\"", "2263": "\"abi\"", "2264": "\"abort_creds(%p{%d,%d})\"", "2265": "\"aborting hibernation\\n\"", "2266": "\"aborting resume\\n\"", "2267": "\"abs_timeout_sec=%ld abs_timeout_nsec=%ld\"", "2268": "\"accept_ra\"", "2269": "\"accept_ra_defrtr\"", "2270": "\"accept_ra_from_local\"", "2271": "\"accept_ra_pinfo\"", "2272": "\"accept_ra_rt_info_max_plen\"", "2273": "\"accept_ra_rtr_pref\"", "2274": "\"accept_redirects\"", "2275": "\"accept_source_route\"", "2276": "\"acct\"", "2277": "\"ack\"", "2278": "\"ack_timeout\"", "2279": "\"acknowledge_hold_back_timeout\"", "2280": "\"acknowledgement_hold_back_timeout\"", "2281": "\"acpi_video_flags\"", "2282": "\"acq-bounces\"", "2283": "\"acquisitions\"", "2284": "\"add_rule\"", "2285": "\"addip_enable\"", "2286": "\"admin_reserve_kbytes\"", "2287": "\"affinity_hint\"", "2288": "\"age_buffer_centisecs\"", "2289": "\"aggrprobe@%p\\n\"", "2290": "\"ahead\"", "2291": "\"aio-max-nr\"", "2292": "\"aio-nr\"", "2293": "\"alarmtimer\"", "2294": "\"all branches stats\\n\"", "2295": "\"all leafs should have field defined\"", "2296": "\"all lock classes:\\n\"", "2297": "\"all\"", "2298": "\"alloc_snapshot\"", "2299": "\"allocated_dquots\"", "2300": "\"allow\"", "2301": "\"already unlocked\"", "2302": "\"alu\"", "2303": "\"alu64\"", "2304": "\"and/or required key missing - tainting \"", "2305": "\"annotated branches stats\\n\"", "2306": "\"another field.\\n\"", "2307": "\"app_solicit\"", "2308": "\"appletalk\"", "2309": "\"applying patch '%s' to loading module '%s'\\n\"", "2310": "\"arch=%x syscall=%d\"", "2311": "\"architecture specific data\"", "2312": "\"arg%d\"", "2313": "\"argc=%d\"", "2314": "\"arp_accept\"", "2315": "\"arp_announce\"", "2316": "\"arp_filter\"", "2317": "\"arp_ignore\"", "2318": "\"arp_notify\"", "2319": "\"association_max_retrans\"", "2320": "\"asymmetric\"", "2321": "\"async_continuing @ %i after %lli usec\\n\"", "2322": "\"async_waiting @ %i\\n\"", "2323": "\"at the time of BPF_LD_ABS|IND R6 != pointer to skb\\n\"", "2324": "\"attempting to continue\\n\"", "2325": "\"audit rule for LSM \\'%s\\' is invalid\\n\"", "2326": "\"audit(%lu.%03lu:%u): \"", "2327": "\"audit.h\"", "2328": "\"audit: %s\\n\"", "2329": "\"audit_backlog=%d > audit_backlog_limit=%d\\n\"", "2330": "\"audit_backlog_limit\"", "2331": "\"audit_backlog_wait_time\"", "2332": "\"audit_enabled\"", "2333": "\"audit_failure\"", "2334": "\"audit_lost=%u audit_rate_limit=%u audit_backlog_limit=%u\\n\"", "2335": "\"audit_prune_tree\"", "2336": "\"audit_rate_limit\"", "2337": "\"audit_send_list\"", "2338": "\"audit_send_reply\"", "2339": "\"auid=%u ses=%u op=\"", "2340": "\"auid=%u ses=%u\"", "2341": "\"auid=%u uid=%u gid=%u ses=%u\"", "2342": "\"auto_group.h\"", "2343": "\"autoconf\"", "2344": "\"autogroup_create: %s failure.\\n\"", "2345": "\"autosleep\"", "2346": "\"available_events\"", "2347": "\"ax25\"", "2348": "\"ax25_default_mode\"", "2349": "\"back-edge from insn %d to %d\\n\"", "2350": "\"backlog limit exceeded\"", "2351": "\"backmerge\"", "2352": "\"backoff_type\"", "2353": "\"bad magic\"", "2354": "\"bad rc=0x%x from %pf()\\n\"", "2355": "\"bad vermagic\"", "2356": "\"bad: scheduling from the idle thread!\\n\"", "2357": "\"barrier: %ld/%ld:%ld \"", "2358": "\"barrier_cbs_invoked = %d, n_barrier_cbs = %d\\n\"", "2359": "\"base_reachable_time\"", "2360": "\"base_reachable_time_ms\"", "2361": "\"bc\"", "2362": "\"bcc: %d nbd: %lu\\n\"", "2363": "\"bcdef\"", "2364": "\"bcdefgh\"", "2365": "\"bd\"", "2366": "\"bdfh\"", "2367": "\"be\"", "2368": "\"bindv6only\"", "2369": "\"binfmt_misc\"", "2370": "\"bl\"", "2371": "\"blk\"", "2372": "\"block\"", "2373": "\"block_dump\"", "2374": "\"blocked_load_avg\"", "2375": "\"boot_id\"", "2376": "\"bootloader_type\"", "2377": "\"bootloader_version\"", "2378": "\"bootp_relay\"", "2379": "\"bounce\"", "2380": "\"bp\"", "2381": "\"bpf verifier is misconfigured\\n\"", "2382": "\"bpf-map\"", "2383": "\"bph\"", "2384": "\"braille.h\"", "2385": "\"branch events\\n\"", "2386": "\"branch\"", "2387": "\"branch_all\"", "2388": "\"branch_annotated\"", "2389": "\"broadcast\"", "2390": "\"bset\"", "2391": "\"bt\"", "2392": "\"bta\"", "2393": "\"btc\"", "2394": "\"btc: cpu status: \"", "2395": "\"btp\"", "2396": "\"btt 0x%p\\n\"", "2397": "\"btt\"", "2398": "\"buffer had: %.*s\\n\"", "2399": "\"buffer only contains %d lines, \"", "2400": "\"buffer only contains %d lines, last %d \"", "2401": "\"buffer only contains %d lines, nothing \"", "2402": "\"bus\"", "2403": "\"busy\"", "2404": "\"busy_factor\"", "2405": "\"busy_idx\"", "2406": "\"but no thread function available.\"", "2407": "\"but there are no locks held!\\n\"", "2408": "\"but there are no more locks to release!\\n\"", "2409": "\"but this lock took another, %s-unsafe lock in the past:\\n\"", "2410": "\"but this lock was taken by another, %s-safe lock in the past:\\n\"", "2411": "\"c\"", "2412": "\"c=%ld g=%ld s=%d jfq=%ld j=%x \"", "2413": "\"cache_hits\"", "2414": "\"cache_nice_tries\"", "2415": "\"cad_pid\"", "2416": "\"call\"", "2417": "\"call_request_timeout\"", "2418": "\"calling  %lli_%pF @ %i\\n\"", "2419": "\"can not test ... force \"", "2420": "\"can't online cpu %d because it is not configured as may-hotadd at boot time\\n\"", "2421": "\"cannot call GPL only function from proprietary program\\n\"", "2422": "\"cannot create audit fsnotify group\"", "2423": "\"cannot halt\"", "2424": "\"cannot initialize netlink socket in namespace\"", "2425": "\"cannot start thread audit_prune_tree\"", "2426": "\"cap_fi\"", "2427": "\"cap_fp\"", "2428": "\"cap_last_cap\"", "2429": "\"cap_pe\"", "2430": "\"cap_pi\"", "2431": "\"cap_pp\"", "2432": "\"cascade\"", "2433": "\"cat \"", "2434": "\"cbflood: %ld\\n\"", "2435": "\"ccversion  %s\\n\"", "2436": "\"ceg\"", "2437": "\"cfs_period_us\"", "2438": "\"cfs_quota_us\"", "2439": "\"cgroup\"", "2440": "\"cgroup.clone_children\"", "2441": "\"cgroup.controllers\"", "2442": "\"cgroup.populated\"", "2443": "\"cgroup.procs\"", "2444": "\"cgroup.sane_behavior\"", "2445": "\"cgroup.subtree_control\"", "2446": "\"cgroup: failed to update controllers for the default hierarchy (%d), further operations may crash or hang\\n\"", "2447": "\"cgroup: update_dfl_csses failed to make progress, aborting in inconsistent state\\n\"", "2448": "\"cgroup: using legacy files on the default hierarchy\\n\"", "2449": "\"cgroup__DEVEL__legacy_files_on_dfl\"", "2450": "\"cgroup_css_links\"", "2451": "\"cgroup_disable=\"", "2452": "\"cgroup_mutex or RCU read lock required\"", "2453": "\"cgroup_subsys_name %s too long\\n\"", "2454": "\"char\"", "2455": "\"cipso_cache_bucket_size\"", "2456": "\"cipso_cache_enable\"", "2457": "\"cipso_rbm_optfmt\"", "2458": "\"cipso_rbm_strictvalid\"", "2459": "\"class name\"", "2460": "\"clear_request_timeout\"", "2461": "\"clock-delta\"", "2462": "\"clockevent\"", "2463": "\"clockevents\"", "2464": "\"clone_children\"", "2465": "\"cm\"", "2466": "\"cmode\"", "2467": "\"code at %08lx: \"", "2468": "\"coming\"", "2469": "\"command ignored\\n%s\\n\"", "2470": "\"commit_creds(%p{%d,%d})\"", "2471": "\"common_\"", "2472": "\"common_flags\"", "2473": "\"common_pid\"", "2474": "\"common_preempt_count\"", "2475": "\"common_tgid\"", "2476": "\"common_type\"", "2477": "\"compact_memory\"", "2478": "\"compact_unevictable_allowed\"", "2479": "\"compat-log\"", "2480": "\"complete\"", "2481": "\"completed=%ld  gpnum=%ld  age=%ld  max=%ld\\n\"", "2482": "\"con-bounces\"", "2483": "\"conf\"", "2484": "\"config.gz\"", "2485": "\"config_data.h\"", "2486": "\"connect_mode\"", "2487": "\"console_cmdline.h\"", "2488": "\"console_lock\"", "2489": "\"contentions\"", "2490": "\"cookie_preserve_enable\"", "2491": "\"core dump path required.\\n\"", "2492": "\"core\"", "2493": "\"core_pattern\"", "2494": "\"core_pipe_limit\"", "2495": "\"core_uses_pid\"", "2496": "\"could not add '%s' (incompatible \"", "2497": "\"could not add '%s' (out of memory)\\n\"", "2498": "\"could not create file\\n\"", "2499": "\"could not remove '%s' (not found)\\n\"", "2500": "\"could not save data for '%s' \"", "2501": "\"could not switch to one-shot mode:\"", "2502": "\"count %u\\n\"", "2503": "\"cpu %ld is not online\\n\"", "2504": "\"cpu recursion\"", "2505": "\"cpu\"", "2506": "\"cpu#%d, %u.%03u MHz\\n\"", "2507": "\"cpu#%d\\n\"", "2508": "\"cpu%d %u 0 %u %u %u %u %llu %llu %lu\"", "2509": "\"cpu%d\"", "2510": "\"cpu\\n\"", "2511": "\"cpu_dma_latency\"", "2512": "\"cpu_exclusive\"", "2513": "\"cpu_hotplug.lock\"", "2514": "\"cpu_stop: %s(%p) leaked preempt count\\n\"", "2515": "\"cpuacct.h\"", "2516": "\"cpudeadline.h\"", "2517": "\"cpudump\"", "2518": "\"cpuend\"", "2519": "\"cpuofl\"", "2520": "\"cpuonl\"", "2521": "\"cpupri.h\"", "2522": "\"cpuqs\"", "2523": "\"cpus\"", "2524": "\"cpuset\"", "2525": "\"cpuset,noprefix,\"", "2526": "\"cpuset: failed to transfer tasks out of empty cpuset \"", "2527": "\"cpustart\"", "2528": "\"crash_kexec_post_notifiers\"", "2529": "\"crashkernel: '-' expected\\n\"", "2530": "\"crashkernel: Memory value expected\\n\"", "2531": "\"crashkernel: invalid size\\n\"", "2532": "\"crashkernel: memory value expected\\n\"", "2533": "\"crashkernel: unrecognized char\\n\"", "2534": "\"create_direct obtained virq %d\\n\"", "2535": "\"create_direct virq allocation failed\\n\"", "2536": "\"cred_jar\"", "2537": "\"css_set %p\\n\"", "2538": "\"ctrl-alt-del\"", "2539": "\"ctx\"", "2540": "\"curr->pid\"", "2541": "\"current_css_set\"", "2542": "\"current_css_set_cg_links\"", "2543": "\"current_css_set_refcount\"", "2544": "\"cxt.lwsa: Out of memory\"", "2545": "\"dad_transmits\"", "2546": "\"dama_slave_timeout\"", "2547": "\"datar\"", "2548": "\"dataw\"", "2549": "\"date       %04d-%02d-%02d %02d:%02d:%02d \"", "2550": "\"ddcmp\"", "2551": "\"debug\"", "2552": "\"debug(g)\"", "2553": "\"debug.h\"", "2554": "\"debug_active\"", "2555": "\"debug_core.h\"", "2556": "\"debug_stoppable\"", "2557": "\"decnet\"", "2558": "\"decnet_mem\"", "2559": "\"decnet_rmem\"", "2560": "\"decnet_wmem\"", "2561": "\"default\"", "2562": "\"default_device\"", "2563": "\"default_path_quality\"", "2564": "\"defcmd\"", "2565": "\"delay_first_probe_time\"", "2566": "\"dentry-state\"", "2567": "\"deny\"", "2568": "\"depth: %i  max: %lu!\\n\"", "2569": "\"dev\"", "2570": "\"dev_weight\"", "2571": "\"devices\"", "2572": "\"devname\"", "2573": "\"dfh\"", "2574": "\"di_count\"", "2575": "\"dir-notify-enable\"", "2576": "\"dirty_background_bytes\"", "2577": "\"dirty_background_ratio\"", "2578": "\"dirty_bytes\"", "2579": "\"dirty_expire_centisecs\"", "2580": "\"dirty_ratio\"", "2581": "\"dirty_writeback_centisecs\"", "2582": "\"dirtytime_expire_seconds\"", "2583": "\"disable_event\"", "2584": "\"disable_nmi\"", "2585": "\"disable_policy\"", "2586": "\"disable_xfrm\"", "2587": "\"disabled (cpu%i): hardware events not enabled\\n\"", "2588": "\"disabled (cpu%i): not supported (no LAPIC?)\\n\"", "2589": "\"disabled (cpu%i): unable to create perf event: %ld\\n\"", "2590": "\"disabled\"", "2591": "\"disabled\\n\"", "2592": "\"disabling patch '%s'\\n\"", "2593": "\"discard\"", "2594": "\"discarding saved data for %s \"", "2595": "\"discovery\"", "2596": "\"discovery_slots\"", "2597": "\"discovery_timeout\"", "2598": "\"div by zero\\n\"", "2599": "\"dl_nr_running\"", "2600": "\"dmesg\"", "2601": "\"dmesg_restrict\"", "2602": "\"dn_count\"", "2603": "\"do not call blocking ops when !TASK_RUNNING; \"", "2604": "\"does not load-balance\\n\"", "2605": "\"doing %s, parsing ARGS: '%s'\\n\"", "2606": "\"doing %s: %s='%s'\\n\"", "2607": "\"domain%d %*pb\"", "2608": "\"domain%d\"", "2609": "\"domainname %s\\n\"", "2610": "\"domainname\"", "2611": "\"done.\"", "2612": "\"done.\\n\"", "2613": "\"dr_count\"", "2614": "\"driverloader\"", "2615": "\"drop_caches\"", "2616": "\"dropped\"", "2617": "\"drops\"", "2618": "\"drv_data\"", "2619": "\"dst_gc_interval\"", "2620": "\"dti\"", "2621": "\"due to %s @ \"", "2622": "\"due to Debug @ \"", "2623": "\"due to KDB_ENTER()\\n\"", "2624": "\"due to Keyboard Entry\\n\"", "2625": "\"due to NonMaskable Interrupt @ \"", "2626": "\"due to Recursion @ \"", "2627": "\"due to System NonMaskable Interrupt\\n\"", "2628": "\"due to cpu switch\\n\"", "2629": "\"due to oops @ \"", "2630": "\"dummy\"", "2631": "\"dump\"", "2632": "\"dup ret instances\"", "2633": "\"dup xol area\"", "2634": "\"dynamic debug error adding module: %s\\n\"", "2635": "\"e == 1 && f == 1 && g == 1 && h == 1\"", "2636": "\"e == 1 || f == 1 || g == 1 || h == 1\"", "2637": "\"e\"", "2638": "\"echo USECS [ITERS] > \"", "2639": "\"ef\"", "2640": "\"effective_cpus\"", "2641": "\"effective_mems\"", "2642": "\"efgh\"", "2643": "\"elfcorehdr\"", "2644": "\"emulated 'pipe'.\\n\"", "2645": "\"enable\"", "2646": "\"enable_event\"", "2647": "\"enable_irq before setup/request_irq: irq %u\\n\"", "2648": "\"enabled on all CPUs, permanently consumes one hw-PMU counter.\\n\"", "2649": "\"enabled\"", "2650": "\"enabled\\n\"", "2651": "\"enabling patch '%s'\\n\"", "2652": "\"end\"", "2653": "\"endefcmd\"", "2654": "\"endefcmd\\n\"", "2655": "\"endian\"", "2656": "\"entropy_avail\"", "2657": "\"env\"", "2658": "\"epoll\"", "2659": "\"error converting sid to string\"", "2660": "\"error disabling all events\\n\"", "2661": "\"error disabling system %s\\n\"", "2662": "\"error enabling all events\\n\"", "2663": "\"error enabling system %s\\n\"", "2664": "\"error in audit_log_task_context\"", "2665": "\"error on deleting a probe.\\n\"", "2666": "\"error on getting 2nd new probe.\\n\"", "2667": "\"error on getting 2nd test probe.\\n\"", "2668": "\"error on getting new probe.\\n\"", "2669": "\"error on getting probe file.\\n\"", "2670": "\"error on getting test probe.\\n\"", "2671": "\"error on probing function entry.\\n\"", "2672": "\"error on probing function return.\\n\"", "2673": "\"error updating LSM filters\"", "2674": "\"error updating watch, removing\"", "2675": "\"error updating watch, skipping\"", "2676": "\"error: hwirq 0x%x is too large for %s\\n\"", "2677": "\"error: virq%i is already associated\"", "2678": "\"error: virq%i is not allocated\"", "2679": "\"error_burst\"", "2680": "\"error_cost\"", "2681": "\"error_level\"", "2682": "\"es\"", "2683": "\"ethernet\"", "2684": "\"event trace: Could not activate\"", "2685": "\"event trace: Could not enable event \"", "2686": "\"events\"", "2687": "\"events_freezable\"", "2688": "\"events_freezable_power_efficient\"", "2689": "\"events_highpri\"", "2690": "\"events_long\"", "2691": "\"events_power_efficient\"", "2692": "\"events_unbound\"", "2693": "\"exception-trace\"", "2694": "\"exec_clock\"", "2695": "\"execdomains\"", "2696": "\"execute the probed insn, sending SIGILL.\"", "2697": "\"exit\"", "2698": "\"exit_creds(%u,%p,%p,{%d,%d})\"", "2699": "\"exiting task \\\"%s\\\" (%d) is an active IRQ thread (irq %d)\\n\"", "2700": "\"expected:   %.*s\\n\"", "2701": "\"extended_window_size\"", "2702": "\"extfrag_threshold\"", "2703": "\"failed to allocate ring buffer on CPU %ld\\n\"", "2704": "\"failed to apply patch '%s' to module '%s' (%d)\\n\"", "2705": "\"failed to create files (%d) while rebinding 0x%x to default root\\n\"", "2706": "\"failed to kmalloc\\n\"", "2707": "\"failed to register ftrace handler for function '%s' (%d)\\n\"", "2708": "\"failed to set ftrace filter for function '%s' (%d)\\n\"", "2709": "\"failed to set type for IRQ%d\\n\"", "2710": "\"failed to start irqsoff tracer\\n\"", "2711": "\"failed to start wakeup tracer\\n\"", "2712": "\"fast_poll_increase\"", "2713": "\"fd %d is not pointing to valid bpf_map\\n\"", "2714": "\"fd0=%d fd1=%d\"", "2715": "\"fd=%d flags=0x%x\"", "2716": "\"features.h\"", "2717": "\"fi\"", "2718": "\"fifo prio for consumer\"", "2719": "\"fifo prio for producer\"", "2720": "\"file-max\"", "2721": "\"file-nr\"", "2722": "\"files_cache\"", "2723": "\"filestream_centisecs\"", "2724": "\"filter\"", "2725": "\"final section addresses:\\n\"", "2726": "\"find_task_by_pid_ns() needs rcu_read_lock()\"", "2727": "\"finished\\n\"", "2728": "\"finit_module: fd=%d, uargs=%p, flags=%i\\n\"", "2729": "\"first=%llu [COLD CACHED]\"", "2730": "\"fixing request to [0x%llx-0x%llx]\\n\"", "2731": "\"flags\"", "2732": "\"flush\"", "2733": "\"follow 0/-E convention\\n\"", "2734": "\"force_igmp_version\"", "2735": "\"force_mld_version\"", "2736": "\"forcing reboot\\n\"", "2737": "\"forkexec_idx\"", "2738": "\"format\"", "2739": "\"format:\\n\"", "2740": "\"forwarding\"", "2741": "\"fp\"", "2742": "\"fqs_duration=%d fqs_holdoff=%d fqs_stutter=%d \"", "2743": "\"fqsend\"", "2744": "\"fqsstart\"", "2745": "\"fqswait\"", "2746": "\"fqswaitsig\"", "2747": "\"frame pointer is read only\\n\"", "2748": "\"free_dquots\"", "2749": "\"freezer\"", "2750": "\"frontmerge\"", "2751": "\"fs\"", "2752": "\"fs_cache\"", "2753": "\"ftrace failed to modify \"", "2754": "\"ftrace faulted on modifying \"", "2755": "\"ftrace faulted on unknown error \"", "2756": "\"ftrace faulted on writing \"", "2757": "\"ftrace ops had %pS for function\\n\"", "2758": "\"ftrace record flags: %lx\\n\"", "2759": "\"ftrace\"", "2760": "\"ftrace-test\"", "2761": "\"ftrace: FAILED to allocate memory for functions\\n\"", "2762": "\"ftrace=\"", "2763": "\"ftrace_dump_on_oops\"", "2764": "\"ftrace_enabled\"", "2765": "\"ftrace_graph: Couldn't activate tracepoint\"", "2766": "\"fua\"", "2767": "\"function graph tracer: not enough memory\\n\"", "2768": "\"function\"", "2769": "\"function%d\"", "2770": "\"function_graph\"", "2771": "\"function_profile_enabled\"", "2772": "\"fver=%x\"", "2773": "\"gc_elasticity\"", "2774": "\"gc_interval\"", "2775": "\"gc_min_interval\"", "2776": "\"gc_min_interval_ms\"", "2777": "\"gc_stale_time\"", "2778": "\"gc_thresh\"", "2779": "\"gc_thresh1\"", "2780": "\"gc_thresh2\"", "2781": "\"gc_thresh3\"", "2782": "\"gc_timeout\"", "2783": "\"gcno\"", "2784": "\"gcov\"", "2785": "\"gcov.h\"", "2786": "\"gcov: \"", "2787": "\"gcov_persist=\"", "2788": "\"get\"", "2789": "\"getrq\"", "2790": "\"gh\"", "2791": "\"go must execute on the entry cpu, \"", "2792": "\"go\"", "2793": "\"going\"", "2794": "\"gpc=%ld gps=%ld nn=%ld ndw%ld\\n\"", "2795": "\"grep \"", "2796": "\"grephelp\"", "2797": "\"h\"", "2798": "\"handling %s with %p\\n\"", "2799": "\"hardirqs last  enabled at (%u): \"", "2800": "\"hardirqs last disabled at (%u): \"", "2801": "\"hb_ctl_path\"", "2802": "\"hb_interval\"", "2803": "\"header_event\"", "2804": "\"header_page\"", "2805": "\"help\"", "2806": "\"hibernation debug: Waiting for 5 seconds.\\n\"", "2807": "\"highmem_is_dirtyable\"", "2808": "\"hm#1, depth: %u [%u], %016Lx != %016Lx\\n\"", "2809": "\"hm#2, depth: %u [%u], %016Lx != %016Lx\\n\"", "2810": "\"hm, tasklist_lock locked, retrying... \"", "2811": "\"holders\"", "2812": "\"holdtime-avg\"", "2813": "\"holdtime-max\"", "2814": "\"holdtime-min\"", "2815": "\"holdtime-total\"", "2816": "\"hop_limit\"", "2817": "\"hostname\"", "2818": "\"hotplug\"", "2819": "\"hugepages_treat_as_movable\"", "2820": "\"hugetlb_shm_group\"", "2821": "\"huh, entered softirq %u %s %p with preempt_count %08x, exited with %08x?\\n\"", "2822": "\"hung_task: blocked tasks\"", "2823": "\"hung_task_check_count\"", "2824": "\"hung_task_panic\"", "2825": "\"hung_task_panic=\"", "2826": "\"hung_task_timeout_secs\"", "2827": "\"hung_task_warnings\"", "2828": "\"icmp\"", "2829": "\"icmp_echo_ignore_all\"", "2830": "\"icmp_echo_ignore_broadcasts\"", "2831": "\"icmp_errors_use_inbound_ifaddr\"", "2832": "\"icmp_ignore_bogus_error_responses\"", "2833": "\"icmp_ratelimit\"", "2834": "\"icmp_ratemask\"", "2835": "\"id\"", "2836": "\"idle: \"", "2837": "\"idle_idx\"", "2838": "\"idle_timeout\"", "2839": "\"ieee_emulation_warnings\"", "2840": "\"if it really is, submit a report to the linux kernel \"", "2841": "\"if\"", "2842": "\"igmp_max_memberships\"", "2843": "\"igmp_max_msf\"", "2844": "\"ignore-unaligned-usertrap\"", "2845": "\"image_crc32\"", "2846": "\"imbalance_pct\"", "2847": "\"imm\"", "2848": "\"in %s\\n\"", "2849": "\"in_atomic(): %d, irqs_disabled(): %d, pid: %d, name: %s\\n\"", "2850": "\"inclusion.\\n\"", "2851": "\"inconsistent {%s} -> {%s} usage.\\n\"", "2852": "\"incorrect value in post_handler\\n\"", "2853": "\"inet_peer_gc_maxtime\"", "2854": "\"inet_peer_gc_mintime\"", "2855": "\"inet_peer_maxttl\"", "2856": "\"inet_peer_minttl\"", "2857": "\"inet_peer_threshold\"", "2858": "\"inherit_noatime\"", "2859": "\"inherit_nodefrag\"", "2860": "\"inherit_nodump\"", "2861": "\"inherit_nosymlinks\"", "2862": "\"inherit_sync\"", "2863": "\"inheritable\"", "2864": "\"init failed\\n\"", "2865": "\"init_module: umod=%p, len=%lu, uargs=%p\\n\"", "2866": "\"initcall %lli_%pF returned 0 after %lld usecs\\n\"", "2867": "\"initialized\"", "2868": "\"initializing netlink subsys (%s)\\n\"", "2869": "\"inode-nr\"", "2870": "\"inode-state\"", "2871": "\"inotify\"", "2872": "\"insert\"", "2873": "\"insn state internal bug\\n\"", "2874": "\"inst\"", "2875": "\"instruction boundary.\\n\"", "2876": "\"internal.h\"", "2877": "\"internals.h\"", "2878": "\"intree\"", "2879": "\"inv\"", "2880": "\"invalid 'pipe', see grephelp\\n\"", "2881": "\"invalid BPF_ALU opcode %x\\n\"", "2882": "\"invalid BPF_JMP opcode %x\\n\"", "2883": "\"invalid BPF_LD mode\\n\"", "2884": "\"invalid BPF_LD_IMM insn\\n\"", "2885": "\"invalid access to map value, value_size=%d off=%d size=%d\\n\"", "2886": "\"invalid bpf_context access off=%d size=%d\\n\"", "2887": "\"invalid bpf_ld_imm64 insn\\n\"", "2888": "\"invalid cgroup_subsys %d:%s css_alloc=%p css_free=%p name:id=%d:%s\\n\"", "2889": "\"invalid func %d\\n\"", "2890": "\"invalid gcov_persist parameter '%s'\\n\"", "2891": "\"invalid indirect read from stack off %d+%d size %d\\n\"", "2892": "\"invalid insn idx %d insn_cnt %d\\n\"", "2893": "\"invalid map_ptr to access map->key\\n\"", "2894": "\"invalid map_ptr to access map->value\\n\"", "2895": "\"invalid quoted string, see grephelp\\n\"", "2896": "\"invalid size of register spill\\n\"", "2897": "\"io_delay_type\"", "2898": "\"iomem\"", "2899": "\"iomem=\"", "2900": "\"ioports\"", "2901": "\"ip\"", "2902": "\"ip6_queue_maxlen\"", "2903": "\"ip6frag_high_thresh\"", "2904": "\"ip6frag_low_thresh\"", "2905": "\"ip6frag_secret_interval\"", "2906": "\"ip6frag_time\"", "2907": "\"ip_conntrack_buckets\"", "2908": "\"ip_conntrack_checksum\"", "2909": "\"ip_conntrack_count\"", "2910": "\"ip_conntrack_log_invalid\"", "2911": "\"ip_conntrack_max\"", "2912": "\"ip_conntrack_tcp_be_liberal\"", "2913": "\"ip_conntrack_tcp_loose\"", "2914": "\"ip_conntrack_tcp_max_retrans\"", "2915": "\"ip_default_mode\"", "2916": "\"ip_default_ttl\"", "2917": "\"ip_dynaddr\"", "2918": "\"ip_forward\"", "2919": "\"ip_local_port_range\"", "2920": "\"ip_no_pmtu_disc\"", "2921": "\"ip_nonlocal_bind\"", "2922": "\"ip_queue_maxlen\"", "2923": "\"ipfrag_high_thresh\"", "2924": "\"ipfrag_low_thresh\"", "2925": "\"ipfrag_secret_interval\"", "2926": "\"ipfrag_time\"", "2927": "\"ipgre\"", "2928": "\"ipmi\"", "2929": "\"ipv4\"", "2930": "\"ipv6\"", "2931": "\"ipx\"", "2932": "\"ipx_pprop_broadcasting\"", "2933": "\"irda\"", "2934": "\"irix_sgid_inherit\"", "2935": "\"irix_symlink_mode\"", "2936": "\"irq %d for MSI\\n\"", "2937": "\"irq %d uses trigger mode %u; requested %u\\n\"", "2938": "\"irq %d, desc: %p, depth: %d, count: %d, unhandled: %d\\n\"", "2939": "\"irq %u handler %pF enabled interrupts\\n\"", "2940": "\"irq [%d-%d] for MSI\\n\"", "2941": "\"irq poll in progress on cpu %d for irq %d\\n\"", "2942": "\"irq\"", "2943": "\"irq/%d-%s\"", "2944": "\"irq/default_smp_affinity\"", "2945": "\"irq/prof_cpu_mask\"", "2946": "\"irq: \"", "2947": "\"irq_create_mapping(0x%p, 0x%lx)\\n\"", "2948": "\"irqfixup\"", "2949": "\"irqpoll\"", "2950": "\"irqsoff\"", "2951": "\"is unknown, you have been warned.\\n\"", "2952": "\"isa\"", "2953": "\"isolcpus=\"", "2954": "\"issue\"", "2955": "\"item=%d\"", "2956": "\"j\"", "2957": "\"j=%04x bt=%04x\\n\"", "2958": "\"jiffies: %Lu\\n\"", "2959": "\"jmp\"", "2960": "\"jump out of range from insn %d to %d\\n\"", "2961": "\"k\"", "2962": "\"kallsyms\"", "2963": "\"kauditd\"", "2964": "\"kdb command %s failed, kdb diag %d\\n\"", "2965": "\"kdb risks deadlock\\n\"", "2966": "\"kdb.\"", "2967": "\"kdb: Bad result from kdba_db_trap: %d\\n\"", "2968": "\"kdb: error return from kdba_bp_trap: %d\\n\"", "2969": "\"kdb: unexpected reason code: %d\\n\"", "2970": "\"kdb_continue_catastrophic=%d, \"", "2971": "\"kdb_exec_defcmd: could not find commands for %s\\n\"", "2972": "\"kdb_getarea: Bad address 0x%lx\\n\"", "2973": "\"kdb_local 1\"", "2974": "\"kdb_local 4\"", "2975": "\"kdb_local 6\"", "2976": "\"kdb_local 8\"", "2977": "\"kdb_parse: command buffer \"", "2978": "\"kdb_parse: too many arguments, \"", "2979": "\"kdb_private.h\"", "2980": "\"kdb_putarea: Bad address 0x%lx\\n\"", "2981": "\"kdbgetsymval: returns 0\\n\"", "2982": "\"kdbgetsymval: returns 1, \"", "2983": "\"kdbgetsymval: symname=%s, symtab=%p\\n\"", "2984": "\"kdbnearsym: addr=0x%lx, symtab=%p\\n\"", "2985": "\"kdbnearsym: returns %d symtab->sym_start=0x%lx, \"", "2986": "\"kernel release\"", "2987": "\"kernel signature verification failed.\\n\"", "2988": "\"kernel signature verification successful.\\n\"", "2989": "\"kernel subsystem misconfigured verifier\\n\"", "2990": "\"kernel version\"", "2991": "\"kernel\"", "2992": "\"kernel, try again later\\n\"", "2993": "\"kernel.perf_event_max_sample_rate to %d\\n\"", "2994": "\"kernel\\n\"", "2995": "\"kexec: \"", "2996": "\"kexec_load_disabled\"", "2997": "\"keys\"", "2998": "\"kgdb\"", "2999": "\"kgdbcon\"", "3000": "\"kgdbwait\"", "3001": "\"khelper\"", "3002": "\"khungtaskd\"", "3003": "\"kill\"", "3004": "\"kmalloc()\"", "3005": "\"kmemcheck\"", "3006": "\"kprobe_events\"", "3007": "\"kprobe_profile\"", "3008": "\"kprobe_target\"", "3009": "\"kprobes-optimization\"", "3010": "\"kptr_restrict\"", "3011": "\"kretprobe_trampoline\"", "3012": "\"ksoftirqd/%u\"", "3013": "\"kstack_depth_to_print\"", "3014": "\"kthreadd\"", "3015": "\"kworker/%s\"", "3016": "\"kworker/dying\"", "3017": "\"lap_keepalive_time\"", "3018": "\"laptop_mode\"", "3019": "\"last=%llu first=%llu max=%llu min=%llu ** avg=%u std=%d std^2=%lld\"", "3020": "\"last_accelerate: %04lx/%04lx, nonlazy_posted: %ld, %c%c\"", "3021": "\"last_unhandled %u ms\\n\"", "3022": "\"latency_stats\"", "3023": "\"latencytop\"", "3024": "\"ld\"", "3025": "\"ldx\"", "3026": "\"lease-break-time\"", "3027": "\"leases-enable\"", "3028": "\"legacy_va_layout\"", "3029": "\"license\"", "3030": "\"linear\"", "3031": "\"lines printed\\n\"", "3032": "\"link_fail_timeout\"", "3033": "\"link_fails_count\"", "3034": "\"live\"", "3035": "\"livepatch\"", "3036": "\"llc\"", "3037": "\"llc2\"", "3038": "\"load avg   %ld.%02ld %ld.%02ld %ld.%02ld\\n\"", "3039": "\"load\"", "3040": "\"lock-torture types:\"", "3041": "\"lock-torture: invalid torture type: \\\"%s\\\"\\n\"", "3042": "\"lock_busted\"", "3043": "\"lock_stat version 0.4\\n\"", "3044": "\"lock_stat\"", "3045": "\"lock_torture_reader task started\"", "3046": "\"lock_torture_reader\"", "3047": "\"lock_torture_stats task started\"", "3048": "\"lock_torture_stats\"", "3049": "\"lock_torture_stats_print: Out of memory, need: %d\"", "3050": "\"lock_torture_writer task started\"", "3051": "\"lock_torture_writer\"", "3052": "\"lockdep\"", "3053": "\"lockdep:%s bad path found in chain graph\\n\"", "3054": "\"lockdep_chains\"", "3055": "\"lockdep_internals.h\"", "3056": "\"lockdep_states.h\"", "3057": "\"lockdep_stats\"", "3058": "\"lockname\"", "3059": "\"lockup suspected\"", "3060": "\"log_martians\"", "3061": "\"logaritmic\"", "3062": "\"logging_level\"", "3063": "\"loginuid_immutable\"", "3064": "\"lookups\"", "3065": "\"loopback\"", "3066": "\"lowmem_reserve_ratio\"", "3067": "\"lsmod\"", "3068": "\"lve\"", "3069": "\"m\"", "3070": "\"mac_hid\"", "3071": "\"machine    %s\\n\"", "3072": "\"machine\"", "3073": "\"machine_suspend\"", "3074": "\"mailing list together with submitting your code for \"", "3075": "\"map what?\\n\"", "3076": "\"map_ptr\"", "3077": "\"map_value\"", "3078": "\"map_value_or_null\"", "3079": "\"max\"", "3080": "\"max_addresses\"", "3081": "\"max_baud_rate\"", "3082": "\"max_burst\"", "3083": "\"max_desync_factor\"", "3084": "\"max_dgram_qlen\"", "3085": "\"max_graph_depth\"", "3086": "\"max_init_retransmits\"", "3087": "\"max_interval\"", "3088": "\"max_lock_depth\"", "3089": "\"max_map_count\"", "3090": "\"max_newidle_lb_cost\"", "3091": "\"max_noreply_time\"", "3092": "\"max_queued_events\"", "3093": "\"max_resvport\"", "3094": "\"max_size\"", "3095": "\"max_tx_data_size\"", "3096": "\"max_tx_window\"", "3097": "\"max_user_instances\"", "3098": "\"max_user_watches\"", "3099": "\"max_vruntime\"", "3100": "\"maximum_packet_length\"", "3101": "\"maximum_retry_count\"", "3102": "\"maximum_virtual_circuits\"", "3103": "\"mc_forwarding\"", "3104": "\"mcast_solicit\"", "3105": "\"md\"", "3106": "\"mdp\"", "3107": "\"mdr\"", "3108": "\"mds\"", "3109": "\"medium_id\"", "3110": "\"mem_exclusive\"", "3111": "\"mem_hardwall\"", "3112": "\"membase\"", "3113": "\"memory size\"", "3114": "\"memory\"", "3115": "\"memory_bandwidth\"", "3116": "\"memory_failure_early_kill\"", "3117": "\"memory_failure_recovery\"", "3118": "\"memory_migrate\"", "3119": "\"memory_pressure\"", "3120": "\"memory_pressure_enabled\"", "3121": "\"memory_spread_page\"", "3122": "\"memory_spread_slab\"", "3123": "\"mems\"", "3124": "\"message\"", "3125": "\"message_burst\"", "3126": "\"message_cost\"", "3127": "\"meta\"", "3128": "\"metacharacters:\\n\"", "3129": "\"migration/%u\"", "3130": "\"min_adv_mss\"", "3131": "\"min_free_kbytes\"", "3132": "\"min_interval\"", "3133": "\"min_pmtu\"", "3134": "\"min_resvport\"", "3135": "\"min_slab_ratio\"", "3136": "\"min_tx_turn_time\"", "3137": "\"min_unmapped_ratio\"", "3138": "\"min_vruntime\"", "3139": "\"mld_max_msf\"", "3140": "\"mm\"", "3141": "\"mm:%p idx:%d val:%ld\\n\"", "3142": "\"mm_struct\"", "3143": "\"mmap_min_addr\"", "3144": "\"mmiotrace has lost events.\\n\"", "3145": "\"mmiotrace\"", "3146": "\"modprobe\"", "3147": "\"module\"", "3148": "\"module-internal.h\"", "3149": "\"modules\"", "3150": "\"modules_disabled\"", "3151": "\"more than 1 task in runqueue\\n\"", "3152": "\"mouse_button2_keycode\"", "3153": "\"mouse_button3_keycode\"", "3154": "\"mouse_button_emulation\"", "3155": "\"mq_curmsgs=%ld \"", "3156": "\"mq_msgsize=%ld mq_curmsgs=%ld\"", "3157": "\"mqdes=%d mq_flags=0x%lx mq_maxmsg=%ld mq_msgsize=%ld \"", "3158": "\"mqdes=%d msg_len=%zd msg_prio=%u \"", "3159": "\"mqdes=%d sigev_signo=%d\"", "3160": "\"msg\"", "3161": "\"msgmax\"", "3162": "\"msgmnb\"", "3163": "\"msgmni\"", "3164": "\"mtu\"", "3165": "\"mtu_expires\"", "3166": "\"mutex\"", "3167": "\"mutex-debug.h\"", "3168": "\"mutex.h\"", "3169": "\"mutex_lock\"", "3170": "\"n_barrier_cbs=%d \"", "3171": "\"name \\\"usage\\\" \\\"help\\\"\"", "3172": "\"name\"", "3173": "\"name: %s\\n\"", "3174": "\"name=\"", "3175": "\"nargs=%d\"", "3176": "\"ndiswrapper\"", "3177": "\"neg\"", "3178": "\"neigh\"", "3179": "\"net\"", "3180": "\"netdev_budget\"", "3181": "\"netdev_max_backlog\"", "3182": "\"netfilter\"", "3183": "\"netrom\"", "3184": "\"network_latency\"", "3185": "\"network_throughput\"", "3186": "\"network_ttl_initialiser\"", "3187": "\"new mount options do not match the existing superblock, will be ignored\\n\"", "3188": "\"new_pe\"", "3189": "\"new_pi\"", "3190": "\"new_pp\"", "3191": "\"newidle_idx\"", "3192": "\"newreq\"", "3193": "\"nf_conntrack_buckets\"", "3194": "\"nf_conntrack_checksum\"", "3195": "\"nf_conntrack_count\"", "3196": "\"nf_conntrack_frag6_high_thresh\"", "3197": "\"nf_conntrack_frag6_low_thresh\"", "3198": "\"nf_conntrack_log_invalid\"", "3199": "\"nf_conntrack_max\"", "3200": "\"nf_conntrack_tcp_be_liberal\"", "3201": "\"nf_conntrack_tcp_loose\"", "3202": "\"nf_conntrack_tcp_max_retrans\"", "3203": "\"nfqs=%lu/nfqsng=%lu(%lu) fqlh=%lu oqlen=%ld/%ld\\n\"", "3204": "\"ngroups_max\"", "3205": "\"nice prio for consumer\"", "3206": "\"nice prio for producer\"", "3207": "\"nm\"", "3208": "\"nmi_watchdog\"", "3209": "\"no locks held by %s/%d.\\n\"", "3210": "\"no pid\\n\"", "3211": "\"no process for cpu %ld\\n\"", "3212": "\"no versions for exported symbols\"", "3213": "\"no\"", "3214": "\"no_activity_timeout\"", "3215": "\"no_fc_max_cwnd\"", "3216": "\"no_file_caps\"", "3217": "\"noautogroup\"", "3218": "\"node\"", "3219": "\"node_address\"", "3220": "\"node_name\"", "3221": "\"nodelayacct\"", "3222": "\"nodename   %s\\n\"", "3223": "\"noirqdebug\"", "3224": "\"nokgdbroundup\"", "3225": "\"none\"", "3226": "\"none\\n\"", "3227": "\"noprefix\"", "3228": "\"nosmp\"", "3229": "\"notes\"", "3230": "\"nothing printed\\n\"", "3231": "\"notify_on_release\"", "3232": "\"nr\"", "3233": "\"nr_hugepages\"", "3234": "\"nr_hugepages_mempolicy\"", "3235": "\"nr_involuntary_switches\"", "3236": "\"nr_open\"", "3237": "\"nr_overcommit_hugepages\"", "3238": "\"nr_pdflush_threads\"", "3239": "\"nr_periods %d\\n\"", "3240": "\"nr_running\"", "3241": "\"nr_spread_over\"", "3242": "\"nr_throttled %d\\n\"", "3243": "\"nr_trim_pages\"", "3244": "\"nr_voluntary_switches\"", "3245": "\"ns_last_pid\"", "3246": "\"ntp_internal.h\"", "3247": "\"numa_balancing\"", "3248": "\"numa_balancing_scan_delay_ms\"", "3249": "\"numa_balancing_scan_period_max_ms\"", "3250": "\"numa_balancing_scan_period_min_ms\"", "3251": "\"numa_balancing_scan_size_mb\"", "3252": "\"numa_faults_memory, %d, %d, %d, %d, %ld\\n\"", "3253": "\"numa_migrations, %ld\\n\"", "3254": "\"numa_zonelist_order\"", "3255": "\"obsolescence_count_initialiser\"", "3256": "\"ocfs2\"", "3257": "\"of domain->span\\n\"", "3258": "\"off\\n\"", "3259": "\"offset:%u;\\tsize:%u;\\tsigned:%u;\\n\"", "3260": "\"offset:0;\\tsize:%u;\\tsigned:%u;\\n\"", "3261": "\"ofl\"", "3262": "\"oflag=0x%x mode=%#ho mq_flags=0x%lx mq_maxmsg=%ld \"", "3263": "\"old_pe\"", "3264": "\"old_pi\"", "3265": "\"old_pp\"", "3266": "\"on processor %d \"", "3267": "\"on the run queue locks. \"", "3268": "\"only run producer\"", "3269": "\"only_unset_loginuid\"", "3270": "\"onoff_interval=%d onoff_holdoff=%d\\n\"", "3271": "\"oom_dump_tasks\"", "3272": "\"oom_kill_allocating_task\"", "3273": "\"oops\"", "3274": "\"op=\"", "3275": "\"op=%p %pS\\n\"", "3276": "\"op=%s\"", "3277": "\"opid=%d oauid=%d ouid=%d oses=%d\"", "3278": "\"option changes via remount are deprecated (pid=%d comm=%s)\\n\"", "3279": "\"option or name mismatch, new: 0x%x \\\"%s\\\", old: 0x%x \\\"%s\\\"\\n\"", "3280": "\"optmem_max\"", "3281": "\"ordering guarantee broken for workqueue %s\\n\"", "3282": "\"orig_cpu\"", "3283": "\"osrelease\"", "3284": "\"ostype\"", "3285": "\"ouid=%u ogid=%u mode=%#ho\"", "3286": "\"out of memory for argv string\"", "3287": "\"out of memory in audit_alloc\"", "3288": "\"out of memory in audit_log_start\"", "3289": "\"out of memory\"", "3290": "\"out of memory, audit has lost a tree reference\\n\"", "3291": "\"out of memory\\n\"", "3292": "\"overcommit_kbytes\"", "3293": "\"overcommit_memory\"", "3294": "\"overcommit_ratio\"", "3295": "\"overflow, command ignored\\n%s\\n\"", "3296": "\"overflowgid\"", "3297": "\"overflowuid\"", "3298": "\"override_creds(%p{%d,%d})\"", "3299": "\"override_creds() = %p{%d,%d}\"", "3300": "\"p\"", "3301": "\"p0\"", "3302": "\"p:testprobe kprobe_trace_selftest_target \"", "3303": "\"page-cluster\"", "3304": "\"panic\"", "3305": "\"panic_mask\"", "3306": "\"panic_on_io_nmi\"", "3307": "\"panic_on_oom\"", "3308": "\"panic_on_oops\"", "3309": "\"panic_on_stackoverflow\"", "3310": "\"panic_on_unrecovered_nmi\"", "3311": "\"panic_on_warn set ...\\n\"", "3312": "\"panic_on_warn\"", "3313": "\"parameters\"", "3314": "\"parent_freezing\"", "3315": "\"path_max_retrans\"", "3316": "\"pc\"", "3317": "\"per_cpu\"", "3318": "\"percpu IRQ %d still enabled on CPU%d!\\n\"", "3319": "\"percpu_pagelist_fraction\"", "3320": "\"perf buffer not large enough\"", "3321": "\"perf events running\\n\"", "3322": "\"perf interrupt took too long (%lld > %lld), lowering \"", "3323": "\"perf_cpu_time_max_percent\"", "3324": "\"perf_event_max_sample_rate\"", "3325": "\"perf_event_mlock_kb\"", "3326": "\"perf_event_paranoid\"", "3327": "\"performance\\n\"", "3328": "\"pid\"", "3329": "\"pid=%d uid=%u\"", "3330": "\"pid=%d\"", "3331": "\"pid_%d\"", "3332": "\"pid_max\"", "3333": "\"pid_max: default: %u minimum: %u\\n\"", "3334": "\"pipe-max-size\"", "3335": "\"platform\"", "3336": "\"please check additional_cpus= boot parameter\\n\"", "3337": "\"please switch to the trace global clock:\\n\"", "3338": "\"please use \\\"cpu %d\\\" and then execute go\\n\"", "3339": "\"plug\"", "3340": "\"pm\"", "3341": "\"pm_qos\"", "3342": "\"pm_qos_add_request() called for already added request\\n\"", "3343": "\"pm_qos_remove_request() called for unknown object\\n\"", "3344": "\"pm_qos_update_request() called for unknown object\\n\"", "3345": "\"pool %d:\"", "3346": "\"poolsize\"", "3347": "\"portbase\"", "3348": "\"portshift\"", "3349": "\"posix timers running\\n\"", "3350": "\"posix_timers_cache\"", "3351": "\"possible reason: unannotated irqs-off.\\n\"", "3352": "\"possible reason: unannotated irqs-on.\\n\"", "3353": "\"potentially unexpected fatal signal %d.\\n\"", "3354": "\"power.h\"", "3355": "\"poweroff(o)\"", "3356": "\"poweroff_cmd\"", "3357": "\"poweroff_powercycle\"", "3358": "\"powersave-nap\"", "3359": "\"ppp\"", "3360": "\"preempt_rcu\"", "3361": "\"preemptirqsoff\"", "3362": "\"preemptoff\"", "3363": "\"prepare_kernel_cred() alloc %p\"", "3364": "\"print-fatal-signals\"", "3365": "\"print-fatal-signals=\"", "3366": "\"printed\\n\"", "3367": "\"printk limit exceeded\"", "3368": "\"printk\"", "3369": "\"printk_delay\"", "3370": "\"printk_ratelimit\"", "3371": "\"printk_ratelimit_burst\"", "3372": "\"priority\"", "3373": "\"process %d (%s) no longer affine to cpu%d\\n\"", "3374": "\"process table (0x%p)\\n\"", "3375": "\"process%s\"", "3376": "\"processors\"", "3377": "\"proctitle=\"", "3378": "\"profile buffer not large enough\"", "3379": "\"profile\"", "3380": "\"promote_secondaries\"", "3381": "\"protected_hardlinks\"", "3382": "\"protected_symlinks\"", "3383": "\"protocol\"", "3384": "\"prove_locking\"", "3385": "\"proxy_arp\"", "3386": "\"proxy_ndp\"", "3387": "\"proxy_qlen\"", "3388": "\"prsctp_enable\"", "3389": "\"ps\"", "3390": "\"pty\"", "3391": "\"put_cred_rcu(%p)\"", "3392": "\"qRcmd,\"", "3393": "\"qbytes=%lx ouid=%u ogid=%u mode=%#ho\"", "3394": "\"qsp=%ld rpq=%ld cbr=%ld cng=%ld \"", "3395": "\"queue\"", "3396": "\"quota\"", "3397": "\"quote it:\\n\"", "3398": "\"r\"", "3399": "\"r:testprobe2 kprobe_trace_selftest_target \"", "3400": "\"raid\"", "3401": "\"random\"", "3402": "\"randomize_va_space\"", "3403": "\"rate limit exceeded\"", "3404": "\"ratelimit\"", "3405": "\"rbhammer\"", "3406": "\"rbtester/%d\"", "3407": "\"rcu\"", "3408": "\"rcu-torture types:\"", "3409": "\"rcu-torture: ->fqs NULL and non-zero fqs_duration, fqs disabled.\\n\"", "3410": "\"rcu-torture: invalid torture type: \\\"%s\\\"\\n\"", "3411": "\"rcu.h\"", "3412": "\"rcu_bh\"", "3413": "\"rcu_busted\"", "3414": "\"rcu_callback\"", "3415": "\"rcu_cleanup_dead_cpu: Callbacks on offline CPU %d: qlen=%lu, nxtlist=%p\\n\"", "3416": "\"rcu_head\"", "3417": "\"rcu_init_one: rcu_num_lvls overflow\"", "3418": "\"rcu_nocb_mask allocation failed, callback offloading disabled.\\n\"", "3419": "\"rcu_nocb_poll\"", "3420": "\"rcu_nocbs=\"", "3421": "\"rcu_node_0\"", "3422": "\"rcu_node_1\"", "3423": "\"rcu_node_2\"", "3424": "\"rcu_node_3\"", "3425": "\"rcu_node_fqs_0\"", "3426": "\"rcu_node_fqs_1\"", "3427": "\"rcu_node_fqs_2\"", "3428": "\"rcu_node_fqs_3\"", "3429": "\"rcu_pending\"", "3430": "\"rcu_preempt\"", "3431": "\"rcu_read_lock\"", "3432": "\"rcu_read_lock_bh\"", "3433": "\"rcu_read_lock_sched\"", "3434": "\"rcu_read_unlock() from irq or softirq with blocking in critical section!!!\\n\"", "3435": "\"rcu_sched\"", "3436": "\"rcu_spawn_gp_kthread(): Limited prio to %d from %d\\n\"", "3437": "\"rcu_tasks_kthread\"", "3438": "\"rcu_torture_barrier task starting\"", "3439": "\"rcu_torture_barrier\"", "3440": "\"rcu_torture_barrier_cbs\"", "3441": "\"rcu_torture_boost boosting failed\"", "3442": "\"rcu_torture_boost started\"", "3443": "\"rcu_torture_boost task create failed\"", "3444": "\"rcu_torture_boost\"", "3445": "\"rcu_torture_cbflood disabled: Bad args or OOM\"", "3446": "\"rcu_torture_cbflood task started\"", "3447": "\"rcu_torture_cbflood\"", "3448": "\"rcu_torture_fakewriter\"", "3449": "\"rcu_torture_fqs task started\"", "3450": "\"rcu_torture_fqs\"", "3451": "\"rcu_torture_reader task started\"", "3452": "\"rcu_torture_reader\"", "3453": "\"rcu_torture_stall begin holdoff\"", "3454": "\"rcu_torture_stall end holdoff\"", "3455": "\"rcu_torture_stall end.\\n\"", "3456": "\"rcu_torture_stall start.\\n\"", "3457": "\"rcu_torture_stall task started\"", "3458": "\"rcu_torture_stall\"", "3459": "\"rcu_torture_stats task started\"", "3460": "\"rcu_torture_stats\"", "3461": "\"rcu_torture_writer task started\"", "3462": "\"rcu_torture_writer\"", "3463": "\"rcu_torture_writer: No update-side primitives.\\n\"", "3464": "\"rcu_torture_writer: gp_cond without primitives.\\n\"", "3465": "\"rcu_torture_writer: gp_exp without primitives.\\n\"", "3466": "\"rcu_torture_writer: gp_normal without primitives.\\n\"", "3467": "\"rcu_torture_writer: gp_sync without primitives.\\n\"", "3468": "\"rcub/%d\"", "3469": "\"rcubarrier\"", "3470": "\"rcuboost\"", "3471": "\"rcuc/%u\"", "3472": "\"rcudata\"", "3473": "\"rcuexp\"", "3474": "\"rcugp\"", "3475": "\"rcuhier\"", "3476": "\"rcuo%c/%d\"", "3477": "\"rcupdate\"", "3478": "\"rcupdate.\"", "3479": "\"rcutorture test sequence: %lu %s\\n\"", "3480": "\"rcutorture update version number: %lu\\n\"", "3481": "\"rcutorture\"", "3482": "\"rcutorture: !CONFIG_DEBUG_OBJECTS_RCU_HEAD, not testing duplicate call_rcu()\\n\"", "3483": "\"rcutorture: WARN: Duplicate call_rcu() test complete.\\n\"", "3484": "\"rcutorture: WARN: Duplicate call_rcu() test starting.\\n\"", "3485": "\"rcutorture: duplicated callback was invoked.\\n\"", "3486": "\"rcutree\"", "3487": "\"rcutree.\"", "3488": "\"rcvbuf_policy\"", "3489": "\"rd\"", "3490": "\"re-enter error: breakpoint removed %lx\\n\"", "3491": "\"re-enter exception: ALL breakpoints killed\\n\"", "3492": "\"read\"", "3493": "\"read, diag=%d\\n\"", "3494": "\"read_wakeup_threshold\"", "3495": "\"reader_tasks: Out of memory\"", "3496": "\"reads\"", "3497": "\"real-root-dev\"", "3498": "\"reboot\"", "3499": "\"reboot-cmd\"", "3500": "\"reboot: \"", "3501": "\"recursion\"", "3502": "\"redirect_load\"", "3503": "\"redirect_number\"", "3504": "\"redirect_silence\"", "3505": "\"regen_max_retry\"", "3506": "\"registered taskstats version %d\\n\"", "3507": "\"regs->ip = 0x%lx\\n\"", "3508": "\"rej\"", "3509": "\"relax_domain_level=\"", "3510": "\"relaxed\"", "3511": "\"releasable\"", "3512": "\"release    %s\\n\"", "3513": "\"release child resource %pR\\n\"", "3514": "\"release_agent\"", "3515": "\"release_agent=\"", "3516": "\"release_agent=/sbin/cpuset_release_agent\"", "3517": "\"relocation failed for symbol '%s' at 0x%016lx (%d)\\n\"", "3518": "\"remap\"", "3519": "\"remount is not allowed\\n\"", "3520": "\"remove_rule\"", "3521": "\"requeue\"", "3522": "\"reqwait\"", "3523": "\"reqwaitsig\"", "3524": "\"reserve=\"", "3525": "\"reserved\"", "3526": "\"reset\"", "3527": "\"reset_request_timeout\"", "3528": "\"resource collision: %pR conflicts with %s %pR\\n\"", "3529": "\"resource sanity check: requesting [mem %#010llx-%#010llx], which spans more than %s %pR\\n\"", "3530": "\"restart_request_timeout\"", "3531": "\"retrans_time_ms\"", "3532": "\"retval\"", "3533": "\"revert_creds(%p{%d,%d})\"", "3534": "\"reverting patch '%s' on unloading module '%s'\\n\"", "3535": "\"rif_timeout\"", "3536": "\"ring_buffer_benchmark\"", "3537": "\"rm\"", "3538": "\"rmem_default\"", "3539": "\"rmem_max\"", "3540": "\"rose\"", "3541": "\"rotorstep\"", "3542": "\"route\"", "3543": "\"router_probe_interval\"", "3544": "\"router_solicitation_delay\"", "3545": "\"router_solicitation_interval\"", "3546": "\"router_solicitations\"", "3547": "\"routing_control\"", "3548": "\"rp_filter\"", "3549": "\"rt-test-%d\"", "3550": "\"rt_period_us\"", "3551": "\"rt_runtime_us\"", "3552": "\"rtbf: %ld rtb: %ld nt: %ld \"", "3553": "\"rtc: %p ver: %lu tfle: %d rta: %d rtaf: %d rtf: %d \"", "3554": "\"rtmbe: %d rtbke: %ld rtbre: %ld \"", "3555": "\"rtmutex-debug.h\"", "3556": "\"rtmutex.h\"", "3557": "\"rtmutex_common.h\"", "3558": "\"rto_alpha_exp_divisor\"", "3559": "\"rto_beta_exp_divisor\"", "3560": "\"rto_initial\"", "3561": "\"rto_max\"", "3562": "\"rto_min\"", "3563": "\"rttest\"", "3564": "\"runnable_load_avg\"", "3565": "\"rw what?\\n\"", "3566": "\"rw_lock\"", "3567": "\"rw_lock_irq\"", "3568": "\"rwsem.h\"", "3569": "\"rwsem_lock\"", "3570": "\"s\"", "3571": "\"s390dbf\"", "3572": "\"s=%lu d=%lu w=%lu tf=%lu wd1=%lu wd2=%lu n=%lu sc=%lu dt=%lu dl=%lu dx=%lu\\n\"", "3573": "\"s>\"", "3574": "\"s>=\"", "3575": "\"s>>=\"", "3576": "\"sack_timeout\"", "3577": "\"saddr=\"", "3578": "\"same insn cannot be used with different pointers\\n\"", "3579": "\"sane_behavior: no other mount options allowed\\n\"", "3580": "\"sane_behavior: this is still under development and its behaviors will change, proceed at your own risk\\n\"", "3581": "\"save_stack_trace_regs() not implemented yet.\\n\"", "3582": "\"save_stack_trace_tsk() not implemented yet.\\n\"", "3583": "\"sched RCU must be held\"", "3584": "\"sched RCU or wq->mutex should be held\"", "3585": "\"sched RCU or wq_pool_mutex should be held\"", "3586": "\"sched trace: Couldn't activate tracepoint\"", "3587": "\"sched\"", "3588": "\"sched.h\"", "3589": "\"sched: RT throttling activated\\n\"", "3590": "\"sched_autogroup_enabled\"", "3591": "\"sched_cfs_bandwidth_slice_us\"", "3592": "\"sched_child_runs_first\"", "3593": "\"sched_create_group()\"", "3594": "\"sched_debug\"", "3595": "\"sched_domain\"", "3596": "\"sched_features\"", "3597": "\"sched_latency_ns\"", "3598": "\"sched_load_balance\"", "3599": "\"sched_migration_cost_ns\"", "3600": "\"sched_min_granularity_ns\"", "3601": "\"sched_nr_migrate\"", "3602": "\"sched_relax_domain_level\"", "3603": "\"sched_rr_timeslice_ms\"", "3604": "\"sched_rt_period_us\"", "3605": "\"sched_rt_runtime_us\"", "3606": "\"sched_shares_window_ns\"", "3607": "\"sched_time_avg_ms\"", "3608": "\"sched_tunable_scaling\"", "3609": "\"sched_wakeup_granularity_ns\"", "3610": "\"scons-poweroff\"", "3611": "\"scsi\"", "3612": "\"sctp\"", "3613": "\"search string too long\\n\"", "3614": "\"sections\"", "3615": "\"secure_redirects\"", "3616": "\"self_freezing\"", "3617": "\"sem\"", "3618": "\"send_redirects\"", "3619": "\"serial_cpumask\"", "3620": "\"set\"", "3621": "\"set_event\"", "3622": "\"set_ftrace_pid\"", "3623": "\"setting gcov_persist to %d\\n\"", "3624": "\"settings.h\"", "3625": "\"sg-big-buff\"", "3626": "\"sha256_digest\"", "3627": "\"sha_regions\"", "3628": "\"shadowCPU%d\"", "3629": "\"share_creds(%p{%d,%d})\"", "3630": "\"shared_media\"", "3631": "\"shares\"", "3632": "\"shmall\"", "3633": "\"shmmax\"", "3634": "\"shmmni\"", "3635": "\"shuffle_interval=%d stutter=%d irqreader=%d \"", "3636": "\"shutdown\"", "3637": "\"sighand_cache\"", "3638": "\"signal_cache\"", "3639": "\"skew_tick\"", "3640": "\"sleep delta value!\\n\"", "3641": "\"sleeprq\"", "3642": "\"slot_timeout\"", "3643": "\"smp_affinity\"", "3644": "\"smp_affinity_list\"", "3645": "\"smpboot.h\"", "3646": "\"snapshot\"", "3647": "\"sndbuf_policy\"", "3648": "\"soft-power\"", "3649": "\"soft_watchdog\"", "3650": "\"softirqs last  enabled at (%u): \"", "3651": "\"softirqs last disabled at (%u): \"", "3652": "\"softlockup: hung tasks\"", "3653": "\"softlockup_all_cpu_backtrace\"", "3654": "\"softlockup_panic\"", "3655": "\"somaxconn\"", "3656": "\"span %*pbl level %s\\n\"", "3657": "\"speed_limit_max\"", "3658": "\"speed_limit_min\"", "3659": "\"spin\"", "3660": "\"spin_lock\"", "3661": "\"spin_lock_irq\"", "3662": "\"spin_retry\"", "3663": "\"split\"", "3664": "\"spread\"", "3665": "\"spread0\"", "3666": "\"spurious\"", "3667": "\"sr\"", "3668": "\"srcu\"", "3669": "\"ss\"", "3670": "\"st\"", "3671": "\"stack\"", "3672": "\"stack-protector: Kernel stack is corrupted in: %p\\n\"", "3673": "\"stack_max_size\"", "3674": "\"stack_trace\"", "3675": "\"stack_trace_filter\"", "3676": "\"stack_tracer_enabled\"", "3677": "\"stacktrace\"", "3678": "\"staging\"", "3679": "\"stall_cpu=%d stall_cpu_holdoff=%d \"", "3680": "\"standard_window_size\"", "3681": "\"start\"", "3682": "\"stat\"", "3683": "\"stat_interval\"", "3684": "\"stat_interval=%d verbose=%d test_no_idle_hz=%d \"", "3685": "\"state\"", "3686": "\"state=%lx set at [<%p>] %pS\\n\"", "3687": "\"station\"", "3688": "\"stats.h\"", "3689": "\"stats_clear\"", "3690": "\"stop-a\"", "3691": "\"strict\"", "3692": "\"string\"", "3693": "\"string_size\"", "3694": "\"stx\"", "3695": "\"suid_dumpable\"", "3696": "\"suid_dumpable=2. Pipe handler or fully qualified \"", "3697": "\"summary\"", "3698": "\"sunrpc\"", "3699": "\"suspend\"", "3700": "\"swapon -a.\\n\"", "3701": "\"swapper tasks\\n\"", "3702": "\"swappiness\"", "3703": "\"symbol %s is in a bss section. Cannot %s\\n\"", "3704": "\"symbol %s size mismatch: expected %lu actual %u\\n\"", "3705": "\"symbol '%s' not found at specified address 0x%016lx, kernel mismatch?\\n\"", "3706": "\"symbol '%s' not found in symbol table\\n\"", "3707": "\"symtab->mod_name=%p, symtab->sym_name=%p (%s)\\n\"", "3708": "\"symtab->sym_start=0x%lx\\n\"", "3709": "\"sync\"", "3710": "\"synchronize_rcu_tasks called too soon\"", "3711": "\"syncs\"", "3712": "\"sys_ni_syscall\"", "3713": "\"syscall %s metadata not mapped, disabling ftrace event\\n\"", "3714": "\"syscall entry trace point\"", "3715": "\"syscall exit trace point\"", "3716": "\"syscalls\"", "3717": "\"sysctl_sched\\n\"", "3718": "\"sysctl_sched_tunable_scaling\"", "3719": "\"sysctl_writes_strict\"", "3720": "\"sysname    %s\\n\"", "3721": "\"sysrq\"", "3722": "\"system call with \"", "3723": "\"system type\"", "3724": "\"system\"", "3725": "\"t1_timeout\"", "3726": "\"t2\"", "3727": "\"t2_timeout\"", "3728": "\"t3\"", "3729": "\"t3_timeout\"", "3730": "\"table\\n\"", "3731": "\"tag\"", "3732": "\"tainted\"", "3733": "\"tainting kernel with TAINT_LIVEPATCH\\n\"", "3734": "\"target module is loaded. Continue.\\n\"", "3735": "\"task_struct\"", "3736": "\"taskcount\"", "3737": "\"tasks\"", "3738": "\"tcp_abort_on_overflow\"", "3739": "\"tcp_adv_win_scale\"", "3740": "\"tcp_allowed_congestion_control\"", "3741": "\"tcp_app_win\"", "3742": "\"tcp_base_mss\"", "3743": "\"tcp_congestion_control\"", "3744": "\"tcp_dsack\"", "3745": "\"tcp_ecn\"", "3746": "\"tcp_fack\"", "3747": "\"tcp_fin_timeout\"", "3748": "\"tcp_frto\"", "3749": "\"tcp_frto_response\"", "3750": "\"tcp_keepalive_intvl\"", "3751": "\"tcp_keepalive_probes\"", "3752": "\"tcp_keepalive_time\"", "3753": "\"tcp_low_latency\"", "3754": "\"tcp_max_orphans\"", "3755": "\"tcp_max_ssthresh\"", "3756": "\"tcp_max_syn_backlog\"", "3757": "\"tcp_max_tw_buckets\"", "3758": "\"tcp_mem\"", "3759": "\"tcp_moderate_rcvbuf\"", "3760": "\"tcp_mtu_probing\"", "3761": "\"tcp_no_metrics_save\"", "3762": "\"tcp_orphan_retries\"", "3763": "\"tcp_reordering\"", "3764": "\"tcp_retrans_collapse\"", "3765": "\"tcp_retries1\"", "3766": "\"tcp_retries2\"", "3767": "\"tcp_rfc1337\"", "3768": "\"tcp_rmem\"", "3769": "\"tcp_sack\"", "3770": "\"tcp_slot_table_entries\"", "3771": "\"tcp_slow_start_after_idle\"", "3772": "\"tcp_stdurg\"", "3773": "\"tcp_syn_retries\"", "3774": "\"tcp_synack_retries\"", "3775": "\"tcp_syncookies\"", "3776": "\"tcp_timestamps\"", "3777": "\"tcp_tso_win_divisor\"", "3778": "\"tcp_tw_recycle\"", "3779": "\"tcp_tw_reuse\"", "3780": "\"tcp_window_scaling\"", "3781": "\"tcp_wmem\"", "3782": "\"tcp_workaround_signed_windows\"", "3783": "\"temp_prefered_lft\"", "3784": "\"temp_valid_lft\"", "3785": "\"test-events\"", "3786": "\"test_boost=%d/%d test_boost_interval=%d \"", "3787": "\"test_boost_duration=%d shutdown_secs=%d \"", "3788": "\"test_suspend\"", "3789": "\"testprobe\"", "3790": "\"testprobe2\"", "3791": "\"tg->cfs_bandwidth.timer_active\"", "3792": "\"tg->runnable_avg\"", "3793": "\"tg_load_avg\"", "3794": "\"tg_load_contrib\"", "3795": "\"tg_runnable_contrib\"", "3796": "\"thaw_processes\"", "3797": "\"the code is fine but needs lockdep annotation.\\n\"", "3798": "\"the deadlock.\\n\"", "3799": "\"thread:\"", "3800": "\"thread_info\"", "3801": "\"threadirqs\"", "3802": "\"threads-max\"", "3803": "\"throttle_count\"", "3804": "\"throttled\"", "3805": "\"throttled_time %llu\\n\"", "3806": "\"tick-internal.h\"", "3807": "\"tick-sched.h\"", "3808": "\"ticks this GP\"", "3809": "\"time_wait\"", "3810": "\"timeconst.h\"", "3811": "\"timekeeping.h\"", "3812": "\"timekeeping_internal.h\"", "3813": "\"timeout\"", "3814": "\"timer: %pF preempt leak: %08x -> %08x\\n\"", "3815": "\"timer_list\"", "3816": "\"timer_migration\"", "3817": "\"timestamp %lu\\n\"", "3818": "\"tiny_plugin.h\"", "3819": "\"to continue\\n\"", "3820": "\"token-ring\"", "3821": "\"torture thread %s parking due to system shutdown\\n\"", "3822": "\"torture_init_begin: refusing %s init: %s running\"", "3823": "\"torture_onoff begin holdoff\"", "3824": "\"torture_onoff end holdoff\"", "3825": "\"torture_onoff task started\"", "3826": "\"torture_onoff task: offline %d failed: errno %d\\n\"", "3827": "\"torture_onoff task: offlined %d\\n\"", "3828": "\"torture_onoff task: offlining %d\\n\"", "3829": "\"torture_shuffle task started\"", "3830": "\"torture_shuffle\"", "3831": "\"torture_shutdown task shutting down system\"", "3832": "\"torture_shutdown task started\"", "3833": "\"torture_shutdown task: %lu jiffies remaining\\n\"", "3834": "\"torture_shutdown\"", "3835": "\"torture_stutter task started\"", "3836": "\"torture_stutter\"", "3837": "\"tp_printk\"", "3838": "\"trace\"", "3839": "\"trace.h\"", "3840": "\"trace_benchmark.h\"", "3841": "\"trace_buf_size=\"", "3842": "\"trace_clock=\"", "3843": "\"trace_entries.h\"", "3844": "\"trace_event=\"", "3845": "\"trace_events_filter_test.h\"", "3846": "\"trace_options=\"", "3847": "\"trace_output.h\"", "3848": "\"trace_probe.h\"", "3849": "\"trace_stat\"", "3850": "\"trace_stat.h\"", "3851": "\"traceoff\"", "3852": "\"traceoff_on_warning\"", "3853": "\"traceon\"", "3854": "\"tracepoint_printk\"", "3855": "\"tracing: Failed to allocate common fields\"", "3856": "\"transport_acknowledge_delay\"", "3857": "\"transport_busy_delay\"", "3858": "\"transport_maximum_tries\"", "3859": "\"transport_no_activity_timeout\"", "3860": "\"transport_requested_window_size\"", "3861": "\"transport_timeout\"", "3862": "\"tree.h\"", "3863": "\"trigger\"", "3864": "\"trylock failure on UP\"", "3865": "\"tsb-ratio\"", "3866": "\"turning off the locking correctness validator.\\n\"", "3867": "\"type go a second time if you really want \"", "3868": "\"type: %d\\n\"", "3869": "\"type=%d %s\\n\"", "3870": "\"tz_minuteswest %d\\n\"", "3871": "\"u16\"", "3872": "\"u32\"", "3873": "\"u64\"", "3874": "\"u8\"", "3875": "\"ucast_solicit\"", "3876": "\"udelay() test (lpj=%ld kt=%ld.%09ld)\\n\"", "3877": "\"udelay_test\"", "3878": "\"udp_slot_table_entries\"", "3879": "\"uid_cache\"", "3880": "\"unaligned-dump-stack\"", "3881": "\"unaligned-trap\"", "3882": "\"unexpected event refcount: %ld; ptr=%p\\n\"", "3883": "\"unhandled %u\\n\"", "3884": "\"unix\"", "3885": "\"unknown func %d\\n\"", "3886": "\"unknown insn class %d\\n\"", "3887": "\"unknown opcode %02x\\n\"", "3888": "\"unknown return type %d of func %d\\n\"", "3889": "\"unknown\"", "3890": "\"unknown_nmi_panic\"", "3891": "\"unplug_io\"", "3892": "\"unplug_timer\"", "3893": "\"unrecognized bpf_ld_imm64 insn\\n\"", "3894": "\"unres_qlen\"", "3895": "\"unresolvable ambiguity (%lu matches) on symbol '%s' in object '%s'\\n\"", "3896": "\"unspecified\"", "3897": "\"unstable sched clock\\n\"", "3898": "\"unsupported arg_type %d\\n\"", "3899": "\"updated_rules\"", "3900": "\"uprobe: %s:%d failed to %s\\n\"", "3901": "\"uprobe: omit uretprobe due to\"", "3902": "\"uprobe: unable to handle uretprobe pid/tgid=%d/%d\\n\"", "3903": "\"uprobe: unable to set uretprobe pid/tgid=%d/%d\\n\"", "3904": "\"uprobe_events\"", "3905": "\"uprobe_profile\"", "3906": "\"uprobes\"", "3907": "\"uptime     \"", "3908": "\"usage\"", "3909": "\"usage:\\n\"", "3910": "\"usage_percpu\"", "3911": "\"use_tempaddr\"", "3912": "\"user\"", "3913": "\"user_reserve_kbytes\"", "3914": "\"usermodehelper\"", "3915": "\"userprocess_debug\"", "3916": "\"using it.\\n\"", "3917": "\"utilization_load_avg\"", "3918": "\"uts\"", "3919": "\"uuid\"", "3920": "\"valid_cookie_life\"", "3921": "\"vdso_enabled\"", "3922": "\"vermagic\"", "3923": "\"version    %s\\n\"", "3924": "\"version %d\\n\"", "3925": "\"version magic: 0x%x\\n\"", "3926": "\"version\"", "3927": "\"version)\\n\"", "3928": "\"vfs_cache_pressure\"", "3929": "\"virq%i doesn't exist; cannot disassociate\\n\"", "3930": "\"vm\"", "3931": "\"vmlinux\"", "3932": "\"waittime-avg\"", "3933": "\"waittime-max\"", "3934": "\"waittime-min\"", "3935": "\"waittime-total\"", "3936": "\"wake_idx\"", "3937": "\"wakeup trace: Couldn't activate tracepoint\"", "3938": "\"wakeup\"", "3939": "\"wakeup_dl\"", "3940": "\"wakeup_rt\"", "3941": "\"warn_noreply_time\"", "3942": "\"warning: `%s' uses 32-bit capabilities (legacy support in use)\\n\"", "3943": "\"warning: `%s' uses deprecated v2 capabilities in a way that may be insecure\\n\"", "3944": "\"warning: process `%s' used the deprecated sysctl \"", "3945": "\"warnings\"", "3946": "\"watchdog\"", "3947": "\"watchdog/%u\"", "3948": "\"watchdog_thresh\"", "3949": "\"which will not be allowed in the future\\n\"", "3950": "\"window_size\"", "3951": "\"wmem_default\"", "3952": "\"wmem_max\"", "3953": "\"work_struct\"", "3954": "\"workqueue %s: flags=0x%x\\n\"", "3955": "\"workqueue\"", "3956": "\"workqueue: allocation failed while updating NUMA affinity of \\\"%s\\\"\\n\"", "3957": "\"workqueue: max_active %d requested for %s is out of range, clamping between %d and %d\\n\"", "3958": "\"workqueue: per-cpu pwq for %s on cpu%d has 0 refcnt\"", "3959": "\"workqueue_internal.h\"", "3960": "\"write\"", "3961": "\"write_wakeup_threshold\"", "3962": "\"writer_tasks: Out of memory\"", "3963": "\"writes\"", "3964": "\"wrong CPU\"", "3965": "\"wrong owner\"", "3966": "\"wrong sd_flags in topology description\\n\"", "3967": "\"x25\"", "3968": "\"x25_forward\"", "3969": "\"xattr\"", "3970": "\"xfrm_aevent_etime\"", "3971": "\"xfrm_aevent_rseqth\"", "3972": "\"xfs\"", "3973": "\"xfsbufd_centisecs\"", "3974": "\"xfssyncd_centisecs\"", "3975": "\"yes\"", "3976": "\"you may retry by moving them to a different hierarchy and unbinding\\n\"", "3977": "\"zone_reclaim_mode\"", "3978": "\"{%s} state was registered at:\\n\"", "3979": "\"|=\"", "3980": "\"|\\n\"", "3981": "\"||\"", "3982": "\"||||\"", "3983": "\"} \"", "3984": "\"} \\n\"", "3985": "\"}\\n\"", "3986": "\"~\"", "3987": "# define", "3988": "# endif", "3989": "# ifdef", "3990": "#define", "3991": "#endif", "3992": "#ifdef", "3993": "#ifndef", "3994": "#include", "3995": "%", "3996": "&", "3997": "&&", "3998": "' '", "3999": "'!'", "4000": "'\"'", "4001": "'#'", "4002": "'$'", "4003": "'%'", "4004": "'('", "4005": "')'", "4006": "'*'", "4007": "'+'", "4008": "','", "4009": "'-'", "4010": "'.'", "4011": "'/'", "4012": "'0'", "4013": "'1'", "4014": "'2'", "4015": "'3'", "4016": "'4'", "4017": "'5'", "4018": "'9'", "4019": "':'", "4020": "';'", "4021": "'='", "4022": "'>'", "4023": "'?'", "4024": "'@'", "4025": "'A'", "4026": "'B'", "4027": "'C'", "4028": "'D'", "4029": "'E'", "4030": "'F'", "4031": "'G'", "4032": "'H'", "4033": "'I'", "4034": "'K'", "4035": "'L'", "4036": "'M'", "4037": "'N'", "4038": "'O'", "4039": "'P'", "4040": "'Q'", "4041": "'R'", "4042": "'S'", "4043": "'T'", "4044": "'U'", "4045": "'W'", "4046": "'X'", "4047": "'Y'", "4048": "'Z'", "4049": "'['", "4050": "'\\''", "4051": "'\\0'", "4052": "'\\\\'", "4053": "'\\n'", "4054": "'\\t'", "4055": "'^'", "4056": "'_'", "4057": "'a'", "4058": "'b'", "4059": "'c'", "4060": "'d'", "4061": "'e'", "4062": "'g'", "4063": "'h'", "4064": "'k'", "4065": "'l'", "4066": "'m'", "4067": "'n'", "4068": "'o'", "4069": "'p'", "4070": "'q'", "4071": "'r'", "4072": "'s'", "4073": "'t'", "4074": "'u'", "4075": "'v'", "4076": "'w'", "4077": "'x'", "4078": "'z'", "4079": "'|'", "4080": "(", "4081": ")", "4082": "*", "4083": "+", "4084": "++", "4085": ",", "4086": "-", "4087": "--", "4088": "->", "4089": ".", "4090": "/", "4091": "0", "4092": "000000", "4093": "0200", "4094": "0222", "4095": "0400", "4096": "0444", "4097": "0555", "4098": "0600", "4099": "0644", "4100": "0666", "4101": "1", "4102": "1.5", "4103": "10", "4104": "100", "4105": "1000", "4106": "10000", "4107": "100000", "4108": "1000000", "4109": "100000000", "4110": "1001", "4111": "1002", "4112": "1003", "4113": "1005", "4114": "10153587", "4115": "1023", "4116": "1024", "4117": "1048576", "4118": "10698", "4119": "1099582", "4120": "11", "4121": "110", "4122": "1100000", "4123": "112", "4124": "11470", "4125": "117", "4126": "1178", "4127": "118348", "4128": "11916", "4129": "119304647", "4130": "12", "4131": "120", "4132": "12226", "4133": "1234", "4134": "12345", "4135": "123456", "4136": "125", "4137": "127", "4138": "1277", "4139": "128", "4140": "12820798", "4141": "12966", "4142": "13", "4143": "13690", "4144": "137", "4145": "1376151", "4146": "14", "4147": "1431655765", "4148": "14398", "4149": "147320", "4150": "148102320", "4151": "14949", "4152": "15", "4153": "15091", "4154": "15769", "4155": "15790321", "4156": "1586", "4157": "16", "4158": "16433", "4159": "17", "4160": "17082", "4161": "1717300", "4162": "172", "4163": "17718", "4164": "18", "4165": "18340", "4166": "184698", "4167": "186737708", "4168": "18705", "4169": "18949", "4170": "1900", "4171": "19545", "4172": "1982", "4173": "1991", "4174": "19976592", "4175": "2", "4176": "20", "4177": "200", "4178": "2000", "4179": "20000", "4180": "20128", "4181": "20698", "4182": "2088", "4183": "2089", "4184": "21", "4185": "21256", "4186": "215", "4187": "2157191", "4188": "21802", "4189": "22", "4190": "22336", "4191": "22859", "4192": "229616", "4193": "23", "4194": "231", "4195": "23254", "4196": "23371", "4197": "238609294", "4198": "24", "4199": "24970740", "4200": "25", "4201": "250", "4202": "2501", "4203": "253", "4204": "255", "4205": "256", "4206": "2560", "4207": "27", "4208": "2708050", "4209": "272", "4210": "28", "4211": "286331153", "4212": "287308", "4213": "29", "4214": "29154", "4215": "2941", "4216": "3", "4217": "30", "4218": "300", "4219": "31", "4220": "3121", "4221": "31350126", "4222": "32", "4223": "32767", "4224": "32768", "4225": "335", "4226": "3363326", "4227": "345", "4228": "36", "4229": "3600", "4230": "360437", "4231": "36291", "4232": "365", "4233": "367", "4234": "38", "4235": "3880", "4236": "39", "4237": "39045157", "4238": "3906", "4239": "4", "4240": "40", "4241": "400", "4242": "4080", "4243": "4096", "4244": "4194304", "4245": "423", "4246": "43", "4247": "449829", "4248": "45", "4249": "46273", "4250": "47742", "4251": "4798", "4252": "48", "4253": "48388", "4254": "4904", "4255": "49367440", "4256": "5", "4257": "50", "4258": "500", "4259": "5000", "4260": "500000", "4261": "512", "4262": "5237765", "4263": "526", "4264": "56", "4265": "563644", "4266": "56483", "4267": "5678", "4268": "5679", "4269": "5697", "4270": "59856", "4271": "6", "4272": "60", "4273": "600", "4274": "60000", "4275": "6100", "4276": "61356676", "4277": "63", "4278": "64", "4279": "65", "4280": "655", "4281": "65535", "4282": "6557202", "4283": "6576", "4284": "68", "4285": "7", "4286": "70", "4287": "704093", "4288": "71755", "4289": "719499", "4290": "72", "4291": "7437", "4292": "75", "4293": "7500", "4294": "76", "4295": "76040", "4296": "7620", "4297": "76695844", "4298": "8", "4299": "80", "4300": "8165337", "4301": "8192", "4302": "8196", "4303": "820", "4304": "8279", "4305": "87", "4306": "875809", "4307": "88761", "4308": "9", "4309": "9103", "4310": "92818", "4311": "933", "4312": "950000", "4313": "95443717", "4314": "9548", "4315": "96", "4316": "98", "4317": "99", "4318": "9909", "4319": "99900", "4320": ":", "4321": ";", "4322": "<\n\t\t\t\t(rq->", "4323": "<\n\t\t\t(sgs->", "4324": "<\n\t    busiest->", "4325": "<  900000/USER_HZ ||\n\t\t     txc->", "4326": "<  offset ||\n\t\t    uprobe->", "4327": "< &(rsp)->", "4328": "< &per_cpu(cpu_worker_pools, cpu)[NR_STD_WORKER_POOLS]; \\\n\t     (pool)++)\n\n\n#define for_each_pool(pool, pi)\t\t\t\t\t\t\\\n\tidr_for_each_entry(&worker_pool_idr, pool, pi)\t\t\t\\\n\t\tif (({ assert_rcu_or_pool_mutex(); false; })) { }\t\\\n\t\telse\n\n\n#define for_each_pool_worker(worker, pool)\t\t\t\t\\\n\tlist_for_each_entry((worker), &(pool)->", "4329": "< &pid_ns->", "4330": "< '0' || argv[0][1] >", "4331": "< ((u64)WL_GC_TIME_SEC * NSEC_PER_SEC))\n\t\t\tbreak;\n\n\t\tif (!active) {\n\t\t\twakeup_source_remove(&wl->", "4332": "< (1ULL << DL_SCALE))\n\t\treturn false;\n\n\t\n\tif (attr->", "4333": "< (BUFMAX - 1)) {\n\t\t\tch = gdbstub_read_wait();\n\t\t\tif (ch == '#')\n\t\t\t\tbreak;\n\t\t\tchecksum = checksum + ch;\n\t\t\tbuffer[count] = ch;\n\t\t\tcount = count + 1;\n\t\t}\n\n\t\tif (ch == '#') {\n\t\t\txmitcsum = hex_to_bin(gdbstub_read_wait()) << 4;\n\t\t\txmitcsum += hex_to_bin(gdbstub_read_wait());\n\n\t\t\tif (checksum != xmitcsum)\n\t\t\t\t\n\t\t\t\tdbg_io_ops->", "4334": "< (arr->", "4335": "< (bw + bo)) ? -EINVAL : 0;\n}\n\n\nint traceprobe_parse_probe_arg(char *arg, ssize_t *size,\n\t\tstruct probe_arg *parg, bool is_return, bool is_kprobe,\n\t\tconst struct fetch_type *ftbl)\n{\n\tconst char *t;\n\tint ret;\n\n\tif (strlen(arg) >", "4336": "< (commit - read)) ||\n\t    cpu_buffer->", "4337": "< (const unsigned char *)string + len; p++) {\n\t\tif (*p == '\"' || *p < 0x21 || *p >", "4338": "< (depth + 1) * TRACE_GRAPH_INDENT; i++)\n\t\t\ttrace_seq_putc(s, ' ');\n\n\t\n\ttrace_seq_puts(s, \"\n\tif (s->", "4339": "< (group_faults(p, src_nid) * 3 / 4);\n}\n\nstatic unsigned long weighted_cpuload(const int cpu);\nstatic unsigned long source_load(int cpu, int type);\nstatic unsigned long target_load(int cpu, int type);\nstatic unsigned long capacity_of(int cpu);\nstatic long effective_load(struct task_group *tg, int cpu, long wl, long wg);\n\n\nstruct numa_stats {\n\tunsigned long nr_running;\n\tunsigned long load;\n\n\t\n\tunsigned long compute_capacity;\n\n\t\n\tunsigned long task_capacity;\n\tint has_free_capacity;\n};\n\n\nstatic void update_numa_stats(struct numa_stats *ns, int nid)\n{\n\tint smt, cpu, cpus = 0;\n\tunsigned long capacity;\n\n\tmemset(ns, 0, sizeof(*ns));\n\tfor_each_cpu(cpu, cpumask_of_node(nid)) {\n\t\tstruct rq *rq = cpu_rq(cpu);\n\n\t\tns->", "4340": "< (mask >", "4341": "< (pos & 0xFF); i++)\n\t\tname = name + (*name) + 1;\n\n\treturn name - kallsyms_names;\n}\n\n\nunsigned long kallsyms_lookup_name(const char *name)\n{\n\tchar namebuf[KSYM_NAME_LEN];\n\tunsigned long i;\n\tunsigned int off;\n\n\tfor (i = 0, off = 0; i < kallsyms_num_syms; i++) {\n\t\toff = kallsyms_expand_symbol(off, namebuf, ARRAY_SIZE(namebuf));\n\n\t\tif (strcmp(namebuf, name) == 0)\n\t\t\treturn kallsyms_addresses[i];\n\t}\n\treturn module_kallsyms_lookup_name(name);\n}\nEXPORT_SYMBOL_GPL(kallsyms_lookup_name);\n\nint kallsyms_on_each_symbol(int (*fn)(void *, const char *, struct module *,\n\t\t\t\t      unsigned long),\n\t\t\t    void *data)\n{\n\tchar namebuf[KSYM_NAME_LEN];\n\tunsigned long i;\n\tunsigned int off;\n\tint ret;\n\n\tfor (i = 0, off = 0; i < kallsyms_num_syms; i++) {\n\t\toff = kallsyms_expand_symbol(off, namebuf, ARRAY_SIZE(namebuf));\n\t\tret = fn(data, namebuf, NULL, kallsyms_addresses[i]);\n\t\tif (ret != 0)\n\t\t\treturn ret;\n\t}\n\treturn module_kallsyms_on_each_symbol(fn, data);\n}\nEXPORT_SYMBOL_GPL(kallsyms_on_each_symbol);\n\nstatic unsigned long get_symbol_pos(unsigned long addr,\n\t\t\t\t    unsigned long *symbolsize,\n\t\t\t\t    unsigned long *offset)\n{\n\tunsigned long symbol_start = 0, symbol_end = 0;\n\tunsigned long i, low, high, mid;\n\n\t\n\tBUG_ON(!kallsyms_addresses);\n\n\t\n\tlow = 0;\n\thigh = kallsyms_num_syms;\n\n\twhile (high - low >", "4342": "< (ret & SECCOMP_RET_ACTION))\n\t\t\tret = cur_ret;\n\t}\n\treturn ret;\n}\n#endif \n\nstatic inline bool seccomp_may_assign_mode(unsigned long seccomp_mode)\n{\n\tassert_spin_locked(&current->", "4343": "< (rsp)->", "4344": "< (s64)d->", "4345": "< (s64)sysctl_sched_migration_cost;\n}\n\n#ifdef CONFIG_NUMA_BALANCING\n\nstatic bool migrate_improves_locality(struct task_struct *p, struct lb_env *env)\n{\n\tstruct numa_group *numa_group = rcu_dereference(p->", "4346": "< (unsigned long) -1l ?\n\t\t\t\t(unsigned long) elapsed : (unsigned long) -1l);\n#endif\n#if ACCT_VERSION == 1 || ACCT_VERSION == 2\n\t{\n\t\t\n\t\tcomp2_t etime = encode_comp2_t(elapsed);\n\n\t\tac->", "4347": "< (unsigned long)__irqentry_text_start ||\n\t\taddr >", "4348": "< (unsigned long)__irqentry_text_start) ||\n\t    (addr >", "4349": "< (unsigned long)__kprobes_text_end;\n}\n\nstatic bool within_kprobe_blacklist(unsigned long addr)\n{\n\tstruct kprobe_blacklist_entry *ent;\n\n\tif (arch_within_kprobe_blacklist(addr))\n\t\treturn true;\n\t\n\tlist_for_each_entry(ent, &kprobe_blacklist, list) {\n\t\tif (addr >", "4350": "< (unsigned long)__lock_text_end;\n}\nEXPORT_SYMBOL(in_lock_functions);\n\nLOCKDEP_STATE(HARDIRQ)\nLOCKDEP_STATE(SOFTIRQ)\nLOCKDEP_STATE(RECLAIM_FS)\n#ifndef _LINUX_CPUDL_H\n#define _LINUX_CPUDL_H\n\n#include <linux/sched.h>", "4351": "< (unsigned long)__sched_text_end);\n}\n\n#ifdef CONFIG_CGROUP_SCHED\n\nstruct task_group root_task_group;\nLIST_HEAD(task_groups);\n#endif\n\nDECLARE_PER_CPU(cpumask_var_t, load_balance_mask);\n\nvoid __init sched_init(void)\n{\n\tint i, j;\n\tunsigned long alloc_size = 0, ptr;\n\n#ifdef CONFIG_FAIR_GROUP_SCHED\n\talloc_size += 2 * nr_cpu_ids * sizeof(void **);\n#endif\n#ifdef CONFIG_RT_GROUP_SCHED\n\talloc_size += 2 * nr_cpu_ids * sizeof(void **);\n#endif\n\tif (alloc_size) {\n\t\tptr = (unsigned long)kzalloc(alloc_size, GFP_NOWAIT);\n\n#ifdef CONFIG_FAIR_GROUP_SCHED\n\t\troot_task_group.se = (struct sched_entity **)ptr;\n\t\tptr += nr_cpu_ids * sizeof(void **);\n\n\t\troot_task_group.cfs_rq = (struct cfs_rq **)ptr;\n\t\tptr += nr_cpu_ids * sizeof(void **);\n\n#endif \n#ifdef CONFIG_RT_GROUP_SCHED\n\t\troot_task_group.rt_se = (struct sched_rt_entity **)ptr;\n\t\tptr += nr_cpu_ids * sizeof(void **);\n\n\t\troot_task_group.rt_rq = (struct rt_rq **)ptr;\n\t\tptr += nr_cpu_ids * sizeof(void **);\n\n#endif \n\t}\n#ifdef CONFIG_CPUMASK_OFFSTACK\n\tfor_each_possible_cpu(i) {\n\t\tper_cpu(load_balance_mask, i) = (cpumask_var_t)kzalloc_node(\n\t\t\tcpumask_size(), GFP_KERNEL, cpu_to_node(i));\n\t}\n#endif \n\n\tinit_rt_bandwidth(&def_rt_bandwidth,\n\t\t\tglobal_rt_period(), global_rt_runtime());\n\tinit_dl_bandwidth(&def_dl_bandwidth,\n\t\t\tglobal_rt_period(), global_rt_runtime());\n\n#ifdef CONFIG_SMP\n\tinit_defrootdomain();\n#endif\n\n#ifdef CONFIG_RT_GROUP_SCHED\n\tinit_rt_bandwidth(&root_task_group.rt_bandwidth,\n\t\t\tglobal_rt_period(), global_rt_runtime());\n#endif \n\n#ifdef CONFIG_CGROUP_SCHED\n\tlist_add(&root_task_group.list, &task_groups);\n\tINIT_LIST_HEAD(&root_task_group.children);\n\tINIT_LIST_HEAD(&root_task_group.siblings);\n\tautogroup_init(&init_task);\n\n#endif \n\n\tfor_each_possible_cpu(i) {\n\t\tstruct rq *rq;\n\n\t\trq = cpu_rq(i);\n\t\traw_spin_lock_init(&rq->", "4352": "< (unsigned long)_edata)\n\t\treturn 1;\n\treturn 0;\n}\n\nint __kernel_text_address(unsigned long addr)\n{\n\tif (core_kernel_text(addr))\n\t\treturn 1;\n\tif (is_module_text_address(addr))\n\t\treturn 1;\n\tif (is_ftrace_trampoline(addr))\n\t\treturn 1;\n\t\n\tif (init_kernel_text(addr))\n\t\treturn 1;\n\treturn 0;\n}\n\nint kernel_text_address(unsigned long addr)\n{\n\tif (core_kernel_text(addr))\n\t\treturn 1;\n\tif (is_module_text_address(addr))\n\t\treturn 1;\n\treturn is_ftrace_trampoline(addr);\n}\n\n\nint func_ptr_is_kernel_text(void *ptr)\n{\n\tunsigned long addr;\n\taddr = (unsigned long) dereference_function_descriptor(ptr);\n\tif (core_kernel_text(addr))\n\t\treturn 1;\n\treturn is_module_text_address(addr);\n}\n\n\n#define rt_mutex_deadlock_check(l)\t\t\t(0)\n#define rt_mutex_deadlock_account_lock(m, t)\t\tdo { } while (0)\n#define rt_mutex_deadlock_account_unlock(l)\t\tdo { } while (0)\n#define debug_rt_mutex_init_waiter(w)\t\t\tdo { } while (0)\n#define debug_rt_mutex_free_waiter(w)\t\t\tdo { } while (0)\n#define debug_rt_mutex_lock(l)\t\t\t\tdo { } while (0)\n#define debug_rt_mutex_proxy_lock(l,p)\t\t\tdo { } while (0)\n#define debug_rt_mutex_proxy_unlock(l)\t\t\tdo { } while (0)\n#define debug_rt_mutex_unlock(l)\t\t\tdo { } while (0)\n#define debug_rt_mutex_init(m, n)\t\t\tdo { } while (0)\n#define debug_rt_mutex_deadlock(d, a ,l)\t\tdo { } while (0)\n#define debug_rt_mutex_print_deadlock(w)\t\tdo { } while (0)\n#define debug_rt_mutex_reset_waiter(w)\t\t\tdo { } while (0)\n\nstatic inline void rt_mutex_print_deadlock(struct rt_mutex_waiter *w)\n{\n\tWARN(1, \"rtmutex deadlock detected\\n\");\n}\n\nstatic inline bool debug_rt_mutex_detect_deadlock(struct rt_mutex_waiter *w,\n\t\t\t\t\t\t  enum rtmutex_chainwalk walk)\n{\n\treturn walk == RT_MUTEX_FULL_CHAINWALK;\n}\n#include \"audit.h\"\n#include <linux/fsnotify_backend.h>", "4353": "< (unsigned long)_einittext)\n\t\treturn 1;\n\treturn 0;\n}\n\nint core_kernel_text(unsigned long addr)\n{\n\tif (addr >", "4354": "< (unsigned long)_etext)\n\t\treturn 1;\n\n\tif (system_state == SYSTEM_BOOTING &&\n\t    init_kernel_text(addr))\n\t\treturn 1;\n\treturn 0;\n}\n\n\nint core_kernel_data(unsigned long addr)\n{\n\tif (addr >", "4355": "< (unsigned long)end;\t\t\\\n\t     event++)\n\n#ifdef CONFIG_MODULES\n\nstatic void trace_module_add_events(struct module *mod)\n{\n\tstruct ftrace_event_call **call, **start, **end;\n\n\tif (!mod->", "4356": "< (unsigned)(b - base);\n}\n\n\nstatic void set_last_pid(struct pid_namespace *pid_ns, int base, int pid)\n{\n\tint prev;\n\tint last_write = base;\n\tdo {\n\t\tprev = last_write;\n\t\tlast_write = cmpxchg(&pid_ns->", "4357": "< *lenp && len < maxlen - 1) {\n\t\t\tif (get_user(c, p++))\n\t\t\t\treturn -EFAULT;\n\t\t\tif (c == 0 || c == '\\n')\n\t\t\t\tbreak;\n\t\t\tdata[len++] = c;\n\t\t}\n\t\tdata[len] = 0;\n\t} else {\n\t\tlen = strlen(data);\n\t\tif (len >", "4358": "< *lenp) {\n\t\t\tif (put_user('\\n', buffer + len))\n\t\t\t\treturn -EFAULT;\n\t\t\tlen++;\n\t\t}\n\t\t*lenp = len;\n\t\t*ppos += len;\n\t}\n\treturn 0;\n}\n\nstatic void warn_sysctl_write(struct ctl_table *table)\n{\n\tpr_warn_once(\"%s wrote to %s when file position was not 0!\\n\"\n\t\t\"This will not be supported in the future. To silence this\\n\"\n\t\t\"warning, set kernel.sysctl_writes_strict = -1\\n\",\n\t\tcurrent->", "4359": "< *min) || (max && val >", "4360": "< *pos && p)\n\t\tp = f_next(m, p, &l);\n\n\treturn p;\n}\n\nstatic void f_stop(struct seq_file *m, void *p)\n{\n\tmutex_unlock(&event_mutex);\n}\n\nstatic const struct seq_operations trace_format_seq_ops = {\n\t.start\t\t= f_start,\n\t.next\t\t= f_next,\n\t.stop\t\t= f_stop,\n\t.show\t\t= f_show,\n};\n\nstatic int trace_format_open(struct inode *inode, struct file *file)\n{\n\tstruct seq_file *m;\n\tint ret;\n\n\tret = seq_open(file, &trace_format_seq_ops);\n\tif (ret < 0)\n\t\treturn ret;\n\n\tm = file->", "4361": "< *pos; i++) {\n\t\tif (gcov_iter_next(seq->", "4362": "< *pos; p = r_next(m, p, &l))\n\t\t;\n\treturn p;\n}\n\nstatic void r_stop(struct seq_file *m, void *v)\n\t__releases(resource_lock)\n{\n\tread_unlock(&resource_lock);\n}\n\nstatic int r_show(struct seq_file *m, void *v)\n{\n\tstruct resource *root = m->", "4363": "< *size && perm_tr_len && !memchr(perm_tr, *p, perm_tr_len))\n\t\treturn -EINVAL;\n\n\tif (tr && (len < *size))\n\t\t*tr = *p;\n\n\t*buf += len;\n\t*size -= len;\n\n\treturn 0;\n}\n\n\nstatic int proc_put_long(void __user **buf, size_t *size, unsigned long val,\n\t\t\t  bool neg)\n{\n\tint len;\n\tchar tmp[TMPBUFLEN], *p = tmp;\n\n\tsprintf(p, \"%s%lu\", neg ? \"-\" : \"\", val);\n\tlen = strlen(tmp);\n\tif (len >", "4364": "< -1 || val >", "4365": "< -1)\n\t\treturn -EBUSY;\n\n\tcalltime = trace_clock_local();\n\n\tindex = ++current->", "4366": "< -1) {\n\t\tcurrent->", "4367": "< -MAXFREQ * freq_norm.sec)) {\n\t\ttime_status |= STA_PPSJITTER;\n\t\t\n\t\tpps_fbase = *raw_ts;\n\t\tprintk_deferred(KERN_ERR \"hardpps: PPSJITTER: bad pulse\\n\");\n\t\treturn;\n\t}\n\n\t\n\n\t\n\tif (freq_norm.sec >", "4368": "< -MAX_BPF_STACK || off + access_size >", "4369": "< -MAX_BPF_STACK) {\n\t\t\tverbose(\"invalid stack off=%d size=%d\\n\", off, size);\n\t\t\treturn -EACCES;\n\t\t}\n\t\tif (t == BPF_WRITE)\n\t\t\terr = check_stack_write(state, off, size, value_regno);\n\t\telse\n\t\t\terr = check_stack_read(state, off, size, value_regno);\n\t} else {\n\t\tverbose(\"R%d invalid mem access '%s'\\n\",\n\t\t\tregno, reg_type_str[state->", "4370": "< -MAX_TICKADJ) {\n\t\ttime_adjust += MAX_TICKADJ;\n\t\ttick_length -= MAX_TICKADJ_SCALED;\n\t\tgoto out;\n\t}\n\n\ttick_length += (s64)(time_adjust * NSEC_PER_USEC / NTP_INTERVAL_FREQ)\n\t\t\t\t\t\t\t << NTP_SCALE_SHIFT;\n\ttime_adjust = 0;\n\nout:\n\treturn leap;\n}\n\n#ifdef CONFIG_GENERIC_CMOS_UPDATE\nint __weak update_persistent_clock64(struct timespec64 now64)\n{\n\tstruct timespec now;\n\n\tnow = timespec64_to_timespec(now64);\n\treturn update_persistent_clock(now);\n}\n#endif\n\n#if defined(CONFIG_GENERIC_CMOS_UPDATE) || defined(CONFIG_RTC_SYSTOHC)\nstatic void sync_cmos_clock(struct work_struct *work);\n\nstatic DECLARE_DELAYED_WORK(sync_cmos_work, sync_cmos_clock);\n\nstatic void sync_cmos_clock(struct work_struct *work)\n{\n\tstruct timespec64 now;\n\tstruct timespec next;\n\tint fail = 1;\n\n\t\n\tif (!ntp_synced()) {\n\t\t\n\t\treturn;\n\t}\n\n\tgetnstimeofday64(&now);\n\tif (abs(now.tv_nsec - (NSEC_PER_SEC / 2)) <= tick_nsec * 5) {\n\t\tstruct timespec64 adjust = now;\n\n\t\tfail = -ENODEV;\n\t\tif (persistent_clock_is_local)\n\t\t\tadjust.tv_sec -= (sys_tz.tz_minuteswest * 60);\n#ifdef CONFIG_GENERIC_CMOS_UPDATE\n\t\tfail = update_persistent_clock64(adjust);\n#endif\n\n#ifdef CONFIG_RTC_SYSTOHC\n\t\tif (fail == -ENODEV)\n\t\t\tfail = rtc_set_ntp_time(adjust);\n#endif\n\t}\n\n\tnext.tv_nsec = (NSEC_PER_SEC / 2) - now.tv_nsec - (TICK_NSEC / 2);\n\tif (next.tv_nsec <= 0)\n\t\tnext.tv_nsec += NSEC_PER_SEC;\n\n\tif (!fail || fail == -ENODEV)\n\t\tnext.tv_sec = 659;\n\telse\n\t\tnext.tv_sec = 0;\n\n\tif (next.tv_nsec >", "4371": "< -PPS_MAXWANDER) {\n\t\tprintk_deferred(KERN_WARNING\n\t\t\t\t\"hardpps: PPSWANDER: change=%ld\\n\", delta);\n\t\ttime_status |= STA_PPSWANDER;\n\t\tpps_stbcnt++;\n\t\tpps_dec_freq_interval();\n\t} else {\t\n\t\tpps_inc_freq_interval();\n\t}\n\n\t\n\tdelta_mod = delta;\n\tif (delta_mod < 0)\n\t\tdelta_mod = -delta_mod;\n\tpps_stabil += (div_s64(((s64)delta_mod) <<\n\t\t\t\t(NTP_SCALE_SHIFT - SHIFT_USEC),\n\t\t\t\tNSEC_PER_USEC) - pps_stabil) >", "4372": "< 0  ? \"H\" : \"\");\n\telse\n\t\tsnprintf(id_buf, sizeof(id_buf), \"u%d:%d\", pool->", "4373": "< 0 &&\n\t\t   t->", "4374": "< 0 && !can_nice(current, nice))\n\t\treturn -EPERM;\n\n\t\n\tif (!capable(CAP_SYS_ADMIN) && time_before(jiffies, next))\n\t\treturn -EAGAIN;\n\n\tnext = HZ / 10 + jiffies;\n\tag = autogroup_task_get(p);\n\n\tdown_write(&ag->", "4375": "< 0 && groupimp < 0)\n\t\t\t\tcontinue;\n\n\t\t\tenv.dist = dist;\n\t\t\tenv.dst_nid = nid;\n\t\t\tupdate_numa_stats(&env.dst_stats, env.dst_nid);\n\t\t\ttask_numa_find_cpu(&env, taskimp, groupimp);\n\t\t}\n\t}\n\n\t\n\tif (p->", "4376": "< 0 && ret != -ENOSYS)\n\t\t\tpr_warn(\"Could not initialize trace events/%s\\n\", name);\n\t}\n\n\treturn ret;\n}\n\nstatic int\n__register_event(struct ftrace_event_call *call, struct module *mod)\n{\n\tint ret;\n\n\tret = event_init(call);\n\tif (ret < 0)\n\t\treturn ret;\n\n\tlist_add(&call->", "4377": "< 0 && rrln >", "4378": "< 0 ? 0 : timeout;\n}\nEXPORT_SYMBOL(schedule_timeout);\n\n\nsigned long __sched schedule_timeout_interruptible(signed long timeout)\n{\n\t__set_current_state(TASK_INTERRUPTIBLE);\n\treturn schedule_timeout(timeout);\n}\nEXPORT_SYMBOL(schedule_timeout_interruptible);\n\nsigned long __sched schedule_timeout_killable(signed long timeout)\n{\n\t__set_current_state(TASK_KILLABLE);\n\treturn schedule_timeout(timeout);\n}\nEXPORT_SYMBOL(schedule_timeout_killable);\n\nsigned long __sched schedule_timeout_uninterruptible(signed long timeout)\n{\n\t__set_current_state(TASK_UNINTERRUPTIBLE);\n\treturn schedule_timeout(timeout);\n}\nEXPORT_SYMBOL(schedule_timeout_uninterruptible);\n\n#ifdef CONFIG_HOTPLUG_CPU\nstatic void migrate_timer_list(struct tvec_base *new_base, struct list_head *head)\n{\n\tstruct timer_list *timer;\n\n\twhile (!list_empty(head)) {\n\t\ttimer = list_first_entry(head, struct timer_list, entry);\n\t\t\n\t\tdetach_timer(timer, false);\n\t\ttimer_set_base(timer, new_base);\n\t\tinternal_add_timer(new_base, timer);\n\t}\n}\n\nstatic void migrate_timers(int cpu)\n{\n\tstruct tvec_base *old_base;\n\tstruct tvec_base *new_base;\n\tint i;\n\n\tBUG_ON(cpu_online(cpu));\n\told_base = per_cpu(tvec_bases, cpu);\n\tnew_base = get_cpu_var(tvec_bases);\n\t\n\tspin_lock_irq(&new_base->", "4379": "< 0 ? err : 0;\n}\n\n\nstatic void audit_receive_skb(struct sk_buff *skb)\n{\n\tstruct nlmsghdr *nlh;\n\t\n\tint len;\n\tint err;\n\n\tnlh = nlmsg_hdr(skb);\n\tlen = skb->", "4380": "< 0 ? ret : 0;\n}\n\nstatic int\nftrace_trace_onoff_callback(struct ftrace_hash *hash,\n\t\t\t    char *glob, char *cmd, char *param, int enable)\n{\n\tstruct ftrace_probe_ops *ops;\n\n\t\n\tif (strcmp(cmd, \"traceon\") == 0)\n\t\tops = param ? &traceon_count_probe_ops : &traceon_probe_ops;\n\telse\n\t\tops = param ? &traceoff_count_probe_ops : &traceoff_probe_ops;\n\n\treturn ftrace_trace_probe_callback(ops, hash, glob, cmd,\n\t\t\t\t\t   param, enable);\n}\n\nstatic int\nftrace_stacktrace_callback(struct ftrace_hash *hash,\n\t\t\t   char *glob, char *cmd, char *param, int enable)\n{\n\tstruct ftrace_probe_ops *ops;\n\n\tops = param ? &stacktrace_count_probe_ops : &stacktrace_probe_ops;\n\n\treturn ftrace_trace_probe_callback(ops, hash, glob, cmd,\n\t\t\t\t\t   param, enable);\n}\n\nstatic int\nftrace_dump_callback(struct ftrace_hash *hash,\n\t\t\t   char *glob, char *cmd, char *param, int enable)\n{\n\tstruct ftrace_probe_ops *ops;\n\n\tops = &dump_probe_ops;\n\n\t\n\treturn ftrace_trace_probe_callback(ops, hash, glob, cmd,\n\t\t\t\t\t   \"1\", enable);\n}\n\nstatic int\nftrace_cpudump_callback(struct ftrace_hash *hash,\n\t\t\t   char *glob, char *cmd, char *param, int enable)\n{\n\tstruct ftrace_probe_ops *ops;\n\n\tops = &cpudump_probe_ops;\n\n\t\n\treturn ftrace_trace_probe_callback(ops, hash, glob, cmd,\n\t\t\t\t\t   \"1\", enable);\n}\n\nstatic struct ftrace_func_command ftrace_traceon_cmd = {\n\t.name\t\t\t= \"traceon\",\n\t.func\t\t\t= ftrace_trace_onoff_callback,\n};\n\nstatic struct ftrace_func_command ftrace_traceoff_cmd = {\n\t.name\t\t\t= \"traceoff\",\n\t.func\t\t\t= ftrace_trace_onoff_callback,\n};\n\nstatic struct ftrace_func_command ftrace_stacktrace_cmd = {\n\t.name\t\t\t= \"stacktrace\",\n\t.func\t\t\t= ftrace_stacktrace_callback,\n};\n\nstatic struct ftrace_func_command ftrace_dump_cmd = {\n\t.name\t\t\t= \"dump\",\n\t.func\t\t\t= ftrace_dump_callback,\n};\n\nstatic struct ftrace_func_command ftrace_cpudump_cmd = {\n\t.name\t\t\t= \"cpudump\",\n\t.func\t\t\t= ftrace_cpudump_callback,\n};\n\nstatic int __init init_func_cmd_traceon(void)\n{\n\tint ret;\n\n\tret = register_ftrace_command(&ftrace_traceoff_cmd);\n\tif (ret)\n\t\treturn ret;\n\n\tret = register_ftrace_command(&ftrace_traceon_cmd);\n\tif (ret)\n\t\tgoto out_free_traceoff;\n\n\tret = register_ftrace_command(&ftrace_stacktrace_cmd);\n\tif (ret)\n\t\tgoto out_free_traceon;\n\n\tret = register_ftrace_command(&ftrace_dump_cmd);\n\tif (ret)\n\t\tgoto out_free_stacktrace;\n\n\tret = register_ftrace_command(&ftrace_cpudump_cmd);\n\tif (ret)\n\t\tgoto out_free_dump;\n\n\treturn 0;\n\n out_free_dump:\n\tunregister_ftrace_command(&ftrace_dump_cmd);\n out_free_stacktrace:\n\tunregister_ftrace_command(&ftrace_stacktrace_cmd);\n out_free_traceon:\n\tunregister_ftrace_command(&ftrace_traceon_cmd);\n out_free_traceoff:\n\tunregister_ftrace_command(&ftrace_traceoff_cmd);\n\n\treturn ret;\n}\n#else\nstatic inline int init_func_cmd_traceon(void)\n{\n\treturn 0;\n}\n#endif \n\nstatic __init int init_function_trace(void)\n{\n\tinit_func_cmd_traceon();\n\treturn register_tracer(&function_trace);\n}\ncore_initcall(init_function_trace);\n\n\n#include <linux/kernel.h>", "4381": "< 0 ? ret : count;\n}\nKERNEL_ATTR_RW(kexec_crash_size);\n\nstatic ssize_t vmcoreinfo_show(struct kobject *kobj,\n\t\t\t       struct kobj_attribute *attr, char *buf)\n{\n\treturn sprintf(buf, \"%lx %x\\n\",\n\t\t       paddr_vmcoreinfo_note(),\n\t\t       (unsigned int)sizeof(vmcoreinfo_note));\n}\nKERNEL_ATTR_RO(vmcoreinfo);\n\n#endif \n\n\nstatic ssize_t fscaps_show(struct kobject *kobj,\n\t\t\t\t  struct kobj_attribute *attr, char *buf)\n{\n\treturn sprintf(buf, \"%d\\n\", file_caps_enabled);\n}\nKERNEL_ATTR_RO(fscaps);\n\nint rcu_expedited;\nstatic ssize_t rcu_expedited_show(struct kobject *kobj,\n\t\t\t\t  struct kobj_attribute *attr, char *buf)\n{\n\treturn sprintf(buf, \"%d\\n\", rcu_expedited);\n}\nstatic ssize_t rcu_expedited_store(struct kobject *kobj,\n\t\t\t\t   struct kobj_attribute *attr,\n\t\t\t\t   const char *buf, size_t count)\n{\n\tif (kstrtoint(buf, 0, &rcu_expedited))\n\t\treturn -EINVAL;\n\n\treturn count;\n}\nKERNEL_ATTR_RW(rcu_expedited);\n\n\nextern const void __start_notes __weak;\nextern const void __stop_notes __weak;\n#define\tnotes_size (&__stop_notes - &__start_notes)\n\nstatic ssize_t notes_read(struct file *filp, struct kobject *kobj,\n\t\t\t  struct bin_attribute *bin_attr,\n\t\t\t  char *buf, loff_t off, size_t count)\n{\n\tmemcpy(buf, &__start_notes + off, count);\n\treturn count;\n}\n\nstatic struct bin_attribute notes_attr = {\n\t.attr = {\n\t\t.name = \"notes\",\n\t\t.mode = S_IRUGO,\n\t},\n\t.read = &notes_read,\n};\n\nstruct kobject *kernel_kobj;\nEXPORT_SYMBOL_GPL(kernel_kobj);\n\nstatic struct attribute * kernel_attrs[] = {\n\t&fscaps_attr.attr,\n\t&uevent_seqnum_attr.attr,\n#ifdef CONFIG_UEVENT_HELPER\n\t&uevent_helper_attr.attr,\n#endif\n#ifdef CONFIG_PROFILING\n\t&profiling_attr.attr,\n#endif\n#ifdef CONFIG_KEXEC\n\t&kexec_loaded_attr.attr,\n\t&kexec_crash_loaded_attr.attr,\n\t&kexec_crash_size_attr.attr,\n\t&vmcoreinfo_attr.attr,\n#endif\n\t&rcu_expedited_attr.attr,\n\tNULL\n};\n\nstatic struct attribute_group kernel_attr_group = {\n\t.attrs = kernel_attrs,\n};\n\nstatic int __init ksysfs_init(void)\n{\n\tint error;\n\n\tkernel_kobj = kobject_create_and_add(\"kernel\", NULL);\n\tif (!kernel_kobj) {\n\t\terror = -ENOMEM;\n\t\tgoto exit;\n\t}\n\terror = sysfs_create_group(kernel_kobj, &kernel_attr_group);\n\tif (error)\n\t\tgoto kset_exit;\n\n\tif (notes_size >", "4382": "< 0 ? x : y;\n}\n\nstatic inline u64 wrap_max(u64 x, u64 y)\n{\n\treturn (s64)(x - y) >", "4383": "< 0 ||\n\t\t    !cpu_online(cpu_file))\n\t\t\treturn KDB_BADINT;\n\t} else {\n\t\tcpu_file = RING_BUFFER_ALL_CPUS;\n\t}\n\n\tkdb_trap_printk++;\n\tftrace_dump_buf(skip_lines, cpu_file);\n\tkdb_trap_printk--;\n\n\treturn 0;\n}\n\nstatic __init int kdb_ftrace_register(void)\n{\n\tkdb_register_flags(\"ftdump\", kdb_ftdump, \"[skip_#lines] [cpu]\",\n\t\t\t    \"Dump ftrace log\", 0, KDB_ENABLE_ALWAYS_SAFE);\n\treturn 0;\n}\n\nlate_initcall(kdb_ftrace_register);\n\n\n#include <linux/types.h>", "4384": "< 0 || !tick_nohz_full_cpu(cpu)],\n\t\t t->", "4385": "< 0 || (delta >", "4386": "< 0 || bp->", "4387": "< 0 || data->", "4388": "< 0 || func_id >", "4389": "< 0 || id >", "4390": "< 0 || len >", "4391": "< 0 || num >", "4392": "< 0 || off + size >", "4393": "< 0 || off >", "4394": "< 0 || size >", "4395": "< 0 || syscall_nr >", "4396": "< 0 || w >", "4397": "< 0)\n\t\t\t\t\terror = -ENODEV;\n\t\t\t} else {\n\t\t\t\tdata->", "4398": "< 0)\n\t\t\t\tadjust = 0;\n\t\t}\n\t}\n\n\t\n\tdiag = kdbgetintenv(\"LOGGING\", &logging);\n\tif (!diag && logging) {\n\t\tconst char *setargs[] = { \"set\", \"LOGGING\", \"0\" };\n\t\tkdb_set(2, setargs);\n\t}\n\n\tkmsg_dump_rewind_nolock(&dumper);\n\twhile (kmsg_dump_get_line_nolock(&dumper, 1, NULL, 0, NULL))\n\t\tn++;\n\n\tif (lines < 0) {\n\t\tif (adjust >", "4399": "< 0)\n\t\t\t\tgoto err;\n\t\t}\n\t}\n\treturn 0;\nerr:\n\tcgroup_clear_dir(cgrp, subsys_mask);\n\treturn ret;\n}\n\n\nstatic void css_free_work_fn(struct work_struct *work)\n{\n\tstruct cgroup_subsys_state *css =\n\t\tcontainer_of(work, struct cgroup_subsys_state, destroy_work);\n\tstruct cgroup_subsys *ss = css->", "4400": "< 0)\n\t\t\t\tgoto err_free;\n\t\t} else if (opcode == BPF_JA) {\n\t\t\tif (BPF_SRC(insns[t].code) != BPF_K) {\n\t\t\t\tret = -EINVAL;\n\t\t\t\tgoto err_free;\n\t\t\t}\n\t\t\t\n\t\t\tret = push_insn(t, t + insns[t].off + 1,\n\t\t\t\t\tFALLTHROUGH, env);\n\t\t\tif (ret == 1)\n\t\t\t\tgoto peek_stack;\n\t\t\telse if (ret < 0)\n\t\t\t\tgoto err_free;\n\t\t\t\n\t\t\tif (t + 1 < insn_cnt)\n\t\t\t\tenv->", "4401": "< 0)\n\t\t\t\tgoto err_free;\n\n\t\t\tret = push_insn(t, t + insns[t].off + 1, BRANCH, env);\n\t\t\tif (ret == 1)\n\t\t\t\tgoto peek_stack;\n\t\t\telse if (ret < 0)\n\t\t\t\tgoto err_free;\n\t\t}\n\t} else {\n\t\t\n\t\tret = push_insn(t, t + 1, FALLTHROUGH, env);\n\t\tif (ret == 1)\n\t\t\tgoto peek_stack;\n\t\telse if (ret < 0)\n\t\t\tgoto err_free;\n\t}\n\nmark_explored:\n\tinsn_state[t] = EXPLORED;\n\tif (cur_stack-- <= 0) {\n\t\tverbose(\"pop stack internal bug\\n\");\n\t\tret = -EFAULT;\n\t\tgoto err_free;\n\t}\n\tgoto peek_stack;\n\ncheck_state:\n\tfor (i = 0; i < insn_cnt; i++) {\n\t\tif (insn_state[i] != EXPLORED) {\n\t\t\tverbose(\"unreachable insn %d\\n\", i);\n\t\t\tret = -EINVAL;\n\t\t\tgoto err_free;\n\t\t}\n\t}\n\tret = 0; \n\nerr_free:\n\tkfree(insn_state);\n\tkfree(insn_stack);\n\treturn ret;\n}\n\n\nstatic bool states_equal(struct verifier_state *old, struct verifier_state *cur)\n{\n\tint i;\n\n\tfor (i = 0; i < MAX_BPF_REG; i++) {\n\t\tif (memcmp(&old->", "4402": "< 0)\n\t\t\t\tgoto error;\n\t\t}\n\t}\n\tif (euid != (uid_t) -1)\n\t\tnew->", "4403": "< 0)\n\t\t\t\tgoto error;\n\t\t}\n\t} else if (!uid_eq(kuid, old->", "4404": "< 0)\n\t\t\t\tgoto free_hash;\n\t\t}\n\t}\n\n\tFTRACE_WARN_ON(new_hash->", "4405": "< 0)\n\t\t\t\tgoto out;\n\t\t\tvalue = ret;\n\t\t}\n\t} else if (sscanf(buf, \"%llu\", &value) != 1)\n\t\tgoto out;\n\n\tret = -ENXIO;\n\n\tp = dev_to_part(dev);\n\tbdev = bdget(part_devt(p));\n\tif (bdev == NULL)\n\t\tgoto out;\n\n\tq = blk_trace_get_queue(bdev);\n\tif (q == NULL)\n\t\tgoto out_bdput;\n\n\tmutex_lock(&bdev->", "4406": "< 0)\n\t\t\t\tgoto out_reset;\n\t\t\tif (ret)\n\t\t\t\tgoto out_again;\n\t\t} else {\n\t\t\t\n\t\t\tif (unlikely((cpu_buffer->", "4407": "< 0)\n\t\t\t\tpr_info(\"Cannot allocate irq_descs @ IRQ%d, assuming pre-allocated\\n\",\n\t\t\t\t\tfirst_irq);\n\t\t}\n\t\tirq_domain_associate_many(domain, first_irq, 0, size);\n\t}\n\n\treturn domain;\n}\nEXPORT_SYMBOL_GPL(irq_domain_add_simple);\n\n\nstruct irq_domain *irq_domain_add_legacy(struct device_node *of_node,\n\t\t\t\t\t unsigned int size,\n\t\t\t\t\t unsigned int first_irq,\n\t\t\t\t\t irq_hw_number_t first_hwirq,\n\t\t\t\t\t const struct irq_domain_ops *ops,\n\t\t\t\t\t void *host_data)\n{\n\tstruct irq_domain *domain;\n\n\tdomain = __irq_domain_add(of_node, first_hwirq + size,\n\t\t\t\t  first_hwirq + size, 0, ops, host_data);\n\tif (domain)\n\t\tirq_domain_associate_many(domain, first_irq, first_hwirq, size);\n\n\treturn domain;\n}\nEXPORT_SYMBOL_GPL(irq_domain_add_legacy);\n\n\nstruct irq_domain *irq_find_host(struct device_node *node)\n{\n\tstruct irq_domain *h, *found = NULL;\n\tint rc;\n\n\t\n\tmutex_lock(&irq_domain_mutex);\n\tlist_for_each_entry(h, &irq_domain_list, link) {\n\t\tif (h->", "4408": "< 0)\n\t\t\t\trestore_unbound_workers_cpumask(pool, cpu);\n\n\t\t\tmutex_unlock(&pool->", "4409": "< 0)\n\t\t\t\treturn err;\n\t\t}\n\t\tbreak;\n\t}\n\tcase AUDIT_GET_FEATURE:\n\t\terr = audit_get_feature(skb);\n\t\tif (err)\n\t\t\treturn err;\n\t\tbreak;\n\tcase AUDIT_SET_FEATURE:\n\t\terr = audit_set_feature(skb);\n\t\tif (err)\n\t\t\treturn err;\n\t\tbreak;\n\tcase AUDIT_USER:\n\tcase AUDIT_FIRST_USER_MSG ... AUDIT_LAST_USER_MSG:\n\tcase AUDIT_FIRST_USER_MSG2 ... AUDIT_LAST_USER_MSG2:\n\t\tif (!audit_enabled && msg_type != AUDIT_USER_AVC)\n\t\t\treturn 0;\n\n\t\terr = audit_filter_user(msg_type);\n\t\tif (err == 1) { \n\t\t\terr = 0;\n\t\t\tif (msg_type == AUDIT_USER_TTY) {\n\t\t\t\terr = tty_audit_push_current();\n\t\t\t\tif (err)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmutex_unlock(&audit_cmd_mutex);\n\t\t\taudit_log_common_recv_msg(&ab, msg_type);\n\t\t\tif (msg_type != AUDIT_USER_TTY)\n\t\t\t\taudit_log_format(ab, \" msg='%.*s'\",\n\t\t\t\t\t\t AUDIT_MESSAGE_TEXT_MAX,\n\t\t\t\t\t\t (char *)data);\n\t\t\telse {\n\t\t\t\tint size;\n\n\t\t\t\taudit_log_format(ab, \" data=\");\n\t\t\t\tsize = nlmsg_len(nlh);\n\t\t\t\tif (size >", "4410": "< 0)\n\t\t\t\treturn err;\n\t\t}\n\t\tif (s.mask & AUDIT_STATUS_BACKLOG_LIMIT) {\n\t\t\terr = audit_set_backlog_limit(s.backlog_limit);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t}\n\t\tif (s.mask & AUDIT_STATUS_BACKLOG_WAIT_TIME) {\n\t\t\tif (sizeof(s) >", "4411": "< 0)\n\t\t\t\treturn err;\n\t\t}\n\t\tif (s.mask & AUDIT_STATUS_FAILURE) {\n\t\t\terr = audit_set_failure(s.failure);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t}\n\t\tif (s.mask & AUDIT_STATUS_PID) {\n\t\t\tint new_pid = s.pid;\n\n\t\t\tif ((!new_pid) && (task_tgid_vnr(current) != audit_pid))\n\t\t\t\treturn -EACCES;\n\t\t\tif (audit_enabled != AUDIT_OFF)\n\t\t\t\taudit_log_config_change(\"audit_pid\", new_pid, audit_pid, 1);\n\t\t\taudit_pid = new_pid;\n\t\t\taudit_nlk_portid = NETLINK_CB(skb).portid;\n\t\t\taudit_sock = skb->", "4412": "< 0)\n\t\t\t\tset_user_nice(p, 0);\n\t\t\tcontinue;\n\t\t}\n\n\t\trq = task_rq_lock(p, &flags);\n\t\tnormalize_task(rq, p);\n\t\ttask_rq_unlock(rq, p, &flags);\n\t}\n\tread_unlock(&tasklist_lock);\n}\n\n#endif \n\n#if defined(CONFIG_IA64) || defined(CONFIG_KGDB_KDB)\n\n\n\nstruct task_struct *curr_task(int cpu)\n{\n\treturn cpu_curr(cpu);\n}\n\n#endif \n\n#ifdef CONFIG_IA64\n\nvoid set_curr_task(int cpu, struct task_struct *p)\n{\n\tcpu_curr(cpu) = p;\n}\n\n#endif\n\n#ifdef CONFIG_CGROUP_SCHED\n\nstatic DEFINE_SPINLOCK(task_group_lock);\n\nstatic void free_sched_group(struct task_group *tg)\n{\n\tfree_fair_sched_group(tg);\n\tfree_rt_sched_group(tg);\n\tautogroup_free(tg);\n\tkfree(tg);\n}\n\n\nstruct task_group *sched_create_group(struct task_group *parent)\n{\n\tstruct task_group *tg;\n\n\ttg = kzalloc(sizeof(*tg), GFP_KERNEL);\n\tif (!tg)\n\t\treturn ERR_PTR(-ENOMEM);\n\n\tif (!alloc_fair_sched_group(tg, parent))\n\t\tgoto err;\n\n\tif (!alloc_rt_sched_group(tg, parent))\n\t\tgoto err;\n\n\treturn tg;\n\nerr:\n\tfree_sched_group(tg);\n\treturn ERR_PTR(-ENOMEM);\n}\n\nvoid sched_online_group(struct task_group *tg, struct task_group *parent)\n{\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&task_group_lock, flags);\n\tlist_add_rcu(&tg->", "4413": "< 0)\n\t\t\tbreak;\n\t}\n\treturn err;\n}\n\n\nunsigned int __weak arch_mod_section_prepend(struct module *mod,\n\t\t\t\t\t     unsigned int section)\n{\n\t\n\treturn 0;\n}\n\n\nstatic long get_offset(struct module *mod, unsigned int *size,\n\t\t       Elf_Shdr *sechdr, unsigned int section)\n{\n\tlong ret;\n\n\t*size += arch_mod_section_prepend(mod, section);\n\tret = ALIGN(*size, sechdr->", "4414": "< 0)\n\t\t\tdelta = 0;\n\n\t\tif (unlikely(delta >", "4415": "< 0)\n\t\t\tgoto done;\n\n\t\tif (!nodes_subset(trialcs->", "4416": "< 0)\n\t\t\tgoto end;\n\t\tfree_trace_kprobe(old_tk);\n\t}\n\n\t\n\tret = register_kprobe_event(tk);\n\tif (ret) {\n\t\tpr_warning(\"Failed to register probe event(%d)\\n\", ret);\n\t\tgoto end;\n\t}\n\n\t\n\tret = __register_trace_kprobe(tk);\n\tif (ret < 0)\n\t\tunregister_kprobe_event(tk);\n\telse\n\t\tlist_add_tail(&tk->", "4417": "< 0)\n\t\t\tgoto error;\n\t}\n\tif (ruid != (uid_t) -1 ||\n\t    (euid != (uid_t) -1 && !uid_eq(keuid, old->", "4418": "< 0)\n\t\t\tgoto error_put;\n\t}\n\n#ifdef CONFIG_KEYS\n\t\n\tif (new->", "4419": "< 0)\n\t\t\tgoto free_pages;\n\n\t\tnum_to_init -= cnt;\n\t\tif (!num_to_init)\n\t\t\tbreak;\n\n\t\tpg->", "4420": "< 0)\n\t\t\tgoto next;\n\t\tctx = rcu_dereference(current->", "4421": "< 0)\n\t\t\tgoto out;\n\t}\n\n\tlist_add_rcu(&data->", "4422": "< 0)\n\t\t\tgoto out;\n\t}\n\n\tresult = copied;\nout:\n\treturn result;\n}\n\nstatic const struct bin_table *get_sysctl(const int *name, int nlen, char *path)\n{\n\tconst struct bin_table *table = &bin_root_table[0];\n\tint ctl_name;\n\n\t\n\tmemcpy(path, \"sys/\", 4);\n\tpath += 4;\n\nrepeat:\n\tif (!nlen)\n\t\treturn ERR_PTR(-ENOTDIR);\n\tctl_name = *name;\n\tname++;\n\tnlen--;\n\tfor ( ; table->", "4423": "< 0)\n\t\t\tgoto out;\n\n\t\tbuf[result] = '\\0';\n\n\t\t\n\t\tresult = -EIO;\n\t\tnodep = strchr(buf, '.');\n\t\tif (!nodep)\n\t\t\tgoto out;\n\t\t++nodep;\n\n\t\tarea = simple_strtoul(buf, NULL, 10);\n\t\tnode = simple_strtoul(nodep, NULL, 10);\n\n\t\tresult = -EIO;\n\t\tif ((area >", "4424": "< 0)\n\t\t\tgoto out;\n\n\t\tcopied = result;\n\t\tlastp = oldval + copied - 1;\n\n\t\tresult = -EFAULT;\n\t\tif (get_user(ch, lastp))\n\t\t\tgoto out;\n\n\t\t\n\t\tif (ch == '\\n') {\n\t\t\tresult = -EFAULT;\n\t\t\tif (put_user('\\0', lastp))\n\t\t\t\tgoto out;\n\t\t\tcopied -= 1;\n\t\t}\n\t}\n\n\tif (newval && newlen) {\n\t\tloff_t pos = 0;\n\n\t\tresult = vfs_write(file, newval, newlen, &pos);\n\t\tif (result < 0)\n\t\t\tgoto out;\n\t}\n\n\tresult = copied;\nout:\n\treturn result;\n}\n\nstatic ssize_t bin_intvec(struct file *file,\n\tvoid __user *oldval, size_t oldlen, void __user *newval, size_t newlen)\n{\n\tssize_t copied = 0;\n\tchar *buffer;\n\tssize_t result;\n\n\tresult = -ENOMEM;\n\tbuffer = kmalloc(BUFSZ, GFP_KERNEL);\n\tif (!buffer)\n\t\tgoto out;\n\n\tif (oldval && oldlen) {\n\t\tunsigned __user *vec = oldval;\n\t\tsize_t length = oldlen / sizeof(*vec);\n\t\tchar *str, *end;\n\t\tint i;\n\n\t\tresult = kernel_read(file, 0, buffer, BUFSZ - 1);\n\t\tif (result < 0)\n\t\t\tgoto out_kfree;\n\n\t\tstr = buffer;\n\t\tend = str + result;\n\t\t*end++ = '\\0';\n\t\tfor (i = 0; i < length; i++) {\n\t\t\tunsigned long value;\n\n\t\t\tvalue = simple_strtoul(str, &str, 10);\n\t\t\twhile (isspace(*str))\n\t\t\t\tstr++;\n\t\t\t\n\t\t\tresult = -EFAULT;\n\t\t\tif (put_user(value, vec + i))\n\t\t\t\tgoto out_kfree;\n\n\t\t\tcopied += sizeof(*vec);\n\t\t\tif (!isdigit(*str))\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (newval && newlen) {\n\t\tunsigned __user *vec = newval;\n\t\tsize_t length = newlen / sizeof(*vec);\n\t\tchar *str, *end;\n\t\tint i;\n\n\t\tstr = buffer;\n\t\tend = str + BUFSZ;\n\t\tfor (i = 0; i < length; i++) {\n\t\t\tunsigned long value;\n\n\t\t\tresult = -EFAULT;\n\t\t\tif (get_user(value, vec + i))\n\t\t\t\tgoto out_kfree;\n\n\t\t\tstr += scnprintf(str, end - str, \"%lu\\t\", value);\n\t\t}\n\n\t\tresult = kernel_write(file, buffer, str - buffer, 0);\n\t\tif (result < 0)\n\t\t\tgoto out_kfree;\n\t}\n\tresult = copied;\nout_kfree:\n\tkfree(buffer);\nout:\n\treturn result;\n}\n\nstatic ssize_t bin_ulongvec(struct file *file,\n\tvoid __user *oldval, size_t oldlen, void __user *newval, size_t newlen)\n{\n\tssize_t copied = 0;\n\tchar *buffer;\n\tssize_t result;\n\n\tresult = -ENOMEM;\n\tbuffer = kmalloc(BUFSZ, GFP_KERNEL);\n\tif (!buffer)\n\t\tgoto out;\n\n\tif (oldval && oldlen) {\n\t\tunsigned long __user *vec = oldval;\n\t\tsize_t length = oldlen / sizeof(*vec);\n\t\tchar *str, *end;\n\t\tint i;\n\n\t\tresult = kernel_read(file, 0, buffer, BUFSZ - 1);\n\t\tif (result < 0)\n\t\t\tgoto out_kfree;\n\n\t\tstr = buffer;\n\t\tend = str + result;\n\t\t*end++ = '\\0';\n\t\tfor (i = 0; i < length; i++) {\n\t\t\tunsigned long value;\n\n\t\t\tvalue = simple_strtoul(str, &str, 10);\n\t\t\twhile (isspace(*str))\n\t\t\t\tstr++;\n\t\t\t\n\t\t\tresult = -EFAULT;\n\t\t\tif (put_user(value, vec + i))\n\t\t\t\tgoto out_kfree;\n\n\t\t\tcopied += sizeof(*vec);\n\t\t\tif (!isdigit(*str))\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (newval && newlen) {\n\t\tunsigned long __user *vec = newval;\n\t\tsize_t length = newlen / sizeof(*vec);\n\t\tchar *str, *end;\n\t\tint i;\n\n\t\tstr = buffer;\n\t\tend = str + BUFSZ;\n\t\tfor (i = 0; i < length; i++) {\n\t\t\tunsigned long value;\n\n\t\t\tresult = -EFAULT;\n\t\t\tif (get_user(value, vec + i))\n\t\t\t\tgoto out_kfree;\n\n\t\t\tstr += scnprintf(str, end - str, \"%lu\\t\", value);\n\t\t}\n\n\t\tresult = kernel_write(file, buffer, str - buffer, 0);\n\t\tif (result < 0)\n\t\t\tgoto out_kfree;\n\t}\n\tresult = copied;\nout_kfree:\n\tkfree(buffer);\nout:\n\treturn result;\n}\n\nstatic ssize_t bin_uuid(struct file *file,\n\tvoid __user *oldval, size_t oldlen, void __user *newval, size_t newlen)\n{\n\tssize_t result, copied = 0;\n\n\t\n\tif (oldval && oldlen) {\n\t\tchar buf[40], *str = buf;\n\t\tunsigned char uuid[16];\n\t\tint i;\n\n\t\tresult = kernel_read(file, 0, buf, sizeof(buf) - 1);\n\t\tif (result < 0)\n\t\t\tgoto out;\n\n\t\tbuf[result] = '\\0';\n\n\t\t\n\t\tfor (i = 0; i < 16; i++) {\n\t\t\tresult = -EIO;\n\t\t\tif (!isxdigit(str[0]) || !isxdigit(str[1]))\n\t\t\t\tgoto out;\n\n\t\t\tuuid[i] = (hex_to_bin(str[0]) << 4) |\n\t\t\t\t\thex_to_bin(str[1]);\n\t\t\tstr += 2;\n\t\t\tif (*str == '-')\n\t\t\t\tstr++;\n\t\t}\n\n\t\tif (oldlen >", "4425": "< 0)\n\t\t\tjps[i]->", "4426": "< 0)\n\t\t\tn = n->", "4427": "< 0)\n\t\t\tnode = &(*node)->", "4428": "< 0)\n\t\t\tp = &parent->", "4429": "< 0)\n\t\t\tp->", "4430": "< 0)\n\t\t\tposix_cpu_timer_schedule(timr);\n\t\telse\n\t\t\tschedule_next_timer(timr);\n\n\t\tinfo->", "4431": "< 0)\n\t\t\tpr_warn(\"Could not create directory for event %s\\n\",\n\t\t\t\tftrace_event_name(call));\n\t}\n}\n\nstruct ftrace_event_file *\nfind_event_file(struct trace_array *tr, const char *system,  const char *event)\n{\n\tstruct ftrace_event_file *file;\n\tstruct ftrace_event_call *call;\n\tconst char *name;\n\n\tlist_for_each_entry(file, &tr->", "4432": "< 0)\n\t\t\tpr_warn(\"Could not create directory for event %s\\n\",\n\t\t\t\tftrace_event_name(file->", "4433": "< 0)\n\t\t\tpr_warn(\"Could not create early event %s\\n\",\n\t\t\t\tftrace_event_name(call));\n\t}\n}\n\n\nstatic void\n__trace_remove_event_dirs(struct trace_array *tr)\n{\n\tstruct ftrace_event_file *file, *next;\n\n\tlist_for_each_entry_safe(file, next, &tr->", "4434": "< 0)\n\t\t\treturn -EFAULT;\n\t\tset_task_comm(me, comm);\n\t\tproc_comm_connector(me);\n\t\tbreak;\n\tcase PR_GET_NAME:\n\t\tget_task_comm(comm, me);\n\t\tif (copy_to_user((char __user *)arg2, comm, sizeof(comm)))\n\t\t\treturn -EFAULT;\n\t\tbreak;\n\tcase PR_GET_ENDIAN:\n\t\terror = GET_ENDIAN(me, arg2);\n\t\tbreak;\n\tcase PR_SET_ENDIAN:\n\t\terror = SET_ENDIAN(me, arg2);\n\t\tbreak;\n\tcase PR_GET_SECCOMP:\n\t\terror = prctl_get_seccomp();\n\t\tbreak;\n\tcase PR_SET_SECCOMP:\n\t\terror = prctl_set_seccomp(arg2, (char __user *)arg3);\n\t\tbreak;\n\tcase PR_GET_TSC:\n\t\terror = GET_TSC_CTL(arg2);\n\t\tbreak;\n\tcase PR_SET_TSC:\n\t\terror = SET_TSC_CTL(arg2);\n\t\tbreak;\n\tcase PR_TASK_PERF_EVENTS_DISABLE:\n\t\terror = perf_event_task_disable();\n\t\tbreak;\n\tcase PR_TASK_PERF_EVENTS_ENABLE:\n\t\terror = perf_event_task_enable();\n\t\tbreak;\n\tcase PR_GET_TIMERSLACK:\n\t\terror = current->", "4435": "< 0)\n\t\t\treturn err;\n\t\tif (err == 1) {\n\t\t\t\n\t\t\tif (log_level) {\n\t\t\t\tif (do_print_state)\n\t\t\t\t\tverbose(\"\\nfrom %d to %d: safe\\n\",\n\t\t\t\t\t\tprev_insn_idx, insn_idx);\n\t\t\t\telse\n\t\t\t\t\tverbose(\"%d: safe\\n\", insn_idx);\n\t\t\t}\n\t\t\tgoto process_bpf_exit;\n\t\t}\n\n\t\tif (log_level && do_print_state) {\n\t\t\tverbose(\"\\nfrom %d to %d:\", prev_insn_idx, insn_idx);\n\t\t\tprint_verifier_state(env);\n\t\t\tdo_print_state = false;\n\t\t}\n\n\t\tif (log_level) {\n\t\t\tverbose(\"%d: \", insn_idx);\n\t\t\tprint_bpf_insn(insn);\n\t\t}\n\n\t\tif (class == BPF_ALU || class == BPF_ALU64) {\n\t\t\terr = check_alu_op(regs, insn);\n\t\t\tif (err)\n\t\t\t\treturn err;\n\n\t\t} else if (class == BPF_LDX) {\n\t\t\tenum bpf_reg_type src_reg_type;\n\n\t\t\t\n\n\t\t\t\n\t\t\terr = check_reg_arg(regs, insn->", "4436": "< 0)\n\t\t\treturn ret;\n\t\toff += ret;\n\t}\n\tbuffer[off] = '\\0';\n\treturn off;\n}\n\nstatic void param_array_free(void *arg)\n{\n\tunsigned int i;\n\tconst struct kparam_array *arr = arg;\n\n\tif (arr->", "4437": "< 0)\n\t\t\treturn ret;\n\t}\n\n\treturn seq_open(file, &probes_seq_op);\n}\n\nstatic ssize_t probes_write(struct file *file, const char __user *buffer,\n\t\t\t    size_t count, loff_t *ppos)\n{\n\treturn traceprobe_probes_write(file, buffer, count, ppos,\n\t\t\tcreate_trace_kprobe);\n}\n\nstatic const struct file_operations kprobe_events_ops = {\n\t.owner          = THIS_MODULE,\n\t.open           = probes_open,\n\t.read           = seq_read,\n\t.llseek         = seq_lseek,\n\t.release        = seq_release,\n\t.write\t\t= probes_write,\n};\n\n\nstatic int probes_profile_seq_show(struct seq_file *m, void *v)\n{\n\tstruct trace_kprobe *tk = v;\n\n\tseq_printf(m, \"  %-44s %15lu %15lu\\n\",\n\t\t   ftrace_event_name(&tk->", "4438": "< 0)\n\t\t\treturn ret;\n\n\t\ttr->", "4439": "< 0)\n\t\t\treturn retval;\n\n\t\tif (!cpumask_subset(trialcs->", "4440": "< 0)\n\t\t\trps[i]->", "4441": "< 0)\n\t\t\tsig->", "4442": "< 0)\n\t\t\tstate = PM_SUSPEND_FREEZE;\n\t}\n\tif (state == PM_SUSPEND_FREEZE) {\n\t\tprintk(info_test, pm_states[state]);\n\t\tstatus = pm_suspend(state);\n\t}\n\n\tif (status < 0)\n\t\tprintk(err_suspend, status);\n\n\ttest_repeat_count_current++;\n\tif (test_repeat_count_current < test_repeat_count_max)\n\t\tgoto repeat;\n\n\t\n\talm.enabled = false;\n\trtc_set_alarm(rtc, &alm);\n}\n\nstatic int __init has_wakealarm(struct device *dev, const void *data)\n{\n\tstruct rtc_device *candidate = to_rtc_device(dev);\n\n\tif (!candidate->", "4443": "< 0)\n\t\t\ttk->", "4444": "< 0)\n\t\t\tuprobe_buffer_refcnt--;\n\t}\n\n\treturn ret;\n}\n\nstatic void uprobe_buffer_disable(void)\n{\n\tint cpu;\n\n\tBUG_ON(!mutex_is_locked(&event_mutex));\n\n\tif (--uprobe_buffer_refcnt == 0) {\n\t\tfor_each_possible_cpu(cpu)\n\t\t\tfree_page((unsigned long)per_cpu_ptr(uprobe_cpu_buffer,\n\t\t\t\t\t\t\t     cpu)->", "4445": "< 0)\n\t\t\n\t\tgoto free_map;\n\n\treturn err;\n\nfree_map:\n\tmap->", "4446": "< 0)\n\t\t*jitter = -*jitter;\n\n\t\n\treturn pps_tf[0];\n}\n\n\nstatic inline void pps_phase_filter_add(long err)\n{\n\tpps_tf[2] = pps_tf[1];\n\tpps_tf[1] = pps_tf[0];\n\tpps_tf[0] = err;\n}\n\n\nstatic inline void pps_dec_freq_interval(void)\n{\n\tif (--pps_intcnt <= -PPS_INTCOUNT) {\n\t\tpps_intcnt = -PPS_INTCOUNT;\n\t\tif (pps_shift >", "4447": "< 0)\n\t\tBUG();\n\tnh->", "4448": "< 0)\n\t\tBUG();\n\tsched_init_granularity();\n\tfree_cpumask_var(non_isolated_cpus);\n\n\tinit_sched_rt_class();\n\tinit_sched_dl_class();\n}\n#else\nvoid __init sched_init_smp(void)\n{\n\tsched_init_granularity();\n}\n#endif \n\nconst_debug unsigned int sysctl_timer_migration = 1;\n\nint in_sched_functions(unsigned long addr)\n{\n\treturn in_lock_functions(addr) ||\n\t\t(addr >", "4449": "< 0)\n\t\tSEQ_printf(m, \"<%pK>", "4450": "< 0)\n\t\tSEQ_printf(m, \"Broadcast device\\n\");\n\telse\n\t\tSEQ_printf(m, \"Per CPU device: %d\\n\", cpu);\n\n\tSEQ_printf(m, \"Clock Event Device: \");\n\tif (!dev) {\n\t\tSEQ_printf(m, \"<NULL>", "4451": "< 0)\n\t\td = -d;\n\n\tif (d >", "4452": "< 0)\n\t\tgoto bad_fork_free;\n\n\t\n\tretval = -EAGAIN;\n\tif (nr_threads >", "4453": "< 0)\n\t\tgoto bug_cleanup;\n\n\t\n\tfree_copy(info);\n\n\t\n\ttrace_module_load(mod);\n\n\treturn do_init_module(mod);\n\n bug_cleanup:\n\t\n\tmutex_lock(&module_mutex);\n\tmodule_bug_cleanup(mod);\n\tmutex_unlock(&module_mutex);\n\n\t\n\tunset_module_init_ro_nx(mod);\n\tunset_module_core_ro_nx(mod);\n\n ddebug_cleanup:\n\tdynamic_debug_remove(info->", "4454": "< 0)\n\t\tgoto done;\n\n\tspin_lock_irq(&callback_lock);\n\tcs->", "4455": "< 0)\n\t\tgoto err;\n\treturn send_reply(rep_skb, info);\nerr:\n\tnlmsg_free(rep_skb);\n\treturn rc;\n}\n\nstatic int cmd_attr_tgid(struct genl_info *info)\n{\n\tstruct taskstats *stats;\n\tstruct sk_buff *rep_skb;\n\tsize_t size;\n\tu32 tgid;\n\tint rc;\n\n\tsize = taskstats_packet_size();\n\n\trc = prepare_reply(info, TASKSTATS_CMD_NEW, &rep_skb, size);\n\tif (rc < 0)\n\t\treturn rc;\n\n\trc = -EINVAL;\n\ttgid = nla_get_u32(info->", "4456": "< 0)\n\t\tgoto err;\n\treturn send_reply(rep_skb, info);\nerr:\n\tnlmsg_free(rep_skb);\n\treturn rc;\n}\n\nstatic int taskstats_user_cmd(struct sk_buff *skb, struct genl_info *info)\n{\n\tif (info->", "4457": "< 0)\n\t\tgoto err;\n\n\tna = nla_reserve(rep_skb, CGROUPSTATS_TYPE_CGROUP_STATS,\n\t\t\t\tsizeof(struct cgroupstats));\n\tif (na == NULL) {\n\t\tnlmsg_free(rep_skb);\n\t\trc = -EMSGSIZE;\n\t\tgoto err;\n\t}\n\n\tstats = nla_data(na);\n\tmemset(stats, 0, sizeof(*stats));\n\n\trc = cgroupstats_build(stats, f.file->", "4458": "< 0)\n\t\tgoto err_free_percpu_ref;\n\tcss->", "4459": "< 0)\n\t\tgoto err_free_squeue;\n\n\tpadata_init_pqueues(pd);\n\tpadata_init_squeues(pd);\n\tsetup_timer(&pd->", "4460": "< 0)\n\t\tgoto err_free_wq;\n\n\t\n\tif (flags & WQ_MEM_RECLAIM) {\n\t\tstruct worker *rescuer;\n\n\t\trescuer = alloc_worker(NUMA_NO_NODE);\n\t\tif (!rescuer)\n\t\t\tgoto err_destroy;\n\n\t\trescuer->", "4461": "< 0)\n\t\tgoto error;\n\tvalidate_creds(new);\n\treturn new;\n\nerror:\n\tabort_creds(new);\n\treturn NULL;\n}\nEXPORT_SYMBOL(prepare_creds);\n\n\nstruct cred *prepare_exec_creds(void)\n{\n\tstruct cred *new;\n\n\tnew = prepare_creds();\n\tif (!new)\n\t\treturn new;\n\n#ifdef CONFIG_KEYS\n\t\n\tkey_put(new->", "4462": "< 0)\n\t\tgoto error;\n\n\tput_cred(old);\n\tvalidate_creds(new);\n\treturn new;\n\nerror:\n\tput_cred(new);\n\tput_cred(old);\n\treturn NULL;\n}\nEXPORT_SYMBOL(prepare_kernel_cred);\n\n\nint set_security_override(struct cred *new, u32 secid)\n{\n\treturn security_kernel_act_as(new, secid);\n}\nEXPORT_SYMBOL(set_security_override);\n\n\nint set_security_override_from_ctx(struct cred *new, const char *secctx)\n{\n\tu32 secid;\n\tint ret;\n\n\tret = security_secctx_to_secid(secctx, strlen(secctx), &secid);\n\tif (ret < 0)\n\t\treturn ret;\n\n\treturn set_security_override(new, secid);\n}\nEXPORT_SYMBOL(set_security_override_from_ctx);\n\n\nint set_create_files_as(struct cred *new, struct inode *inode)\n{\n\tnew->", "4463": "< 0)\n\t\tgoto error;\n\n\treturn commit_creds(new);\n\nerror:\n\tabort_creds(new);\n\treturn retval;\n}\n\n\n\nSYSCALL_DEFINE3(setresuid, uid_t, ruid, uid_t, euid, uid_t, suid)\n{\n\tstruct user_namespace *ns = current_user_ns();\n\tconst struct cred *old;\n\tstruct cred *new;\n\tint retval;\n\tkuid_t kruid, keuid, ksuid;\n\n\tkruid = make_kuid(ns, ruid);\n\tkeuid = make_kuid(ns, euid);\n\tksuid = make_kuid(ns, suid);\n\n\tif ((ruid != (uid_t) -1) && !uid_valid(kruid))\n\t\treturn -EINVAL;\n\n\tif ((euid != (uid_t) -1) && !uid_valid(keuid))\n\t\treturn -EINVAL;\n\n\tif ((suid != (uid_t) -1) && !uid_valid(ksuid))\n\t\treturn -EINVAL;\n\n\tnew = prepare_creds();\n\tif (!new)\n\t\treturn -ENOMEM;\n\n\told = current_cred();\n\n\tretval = -EPERM;\n\tif (!ns_capable(old->", "4464": "< 0)\n\t\tgoto error;\n\n\treturn commit_creds(new);\n\nerror:\n\tabort_creds(new);\n\treturn retval;\n}\n\n\nSYSCALL_DEFINE1(setuid, uid_t, uid)\n{\n\tstruct user_namespace *ns = current_user_ns();\n\tconst struct cred *old;\n\tstruct cred *new;\n\tint retval;\n\tkuid_t kuid;\n\n\tkuid = make_kuid(ns, uid);\n\tif (!uid_valid(kuid))\n\t\treturn -EINVAL;\n\n\tnew = prepare_creds();\n\tif (!new)\n\t\treturn -ENOMEM;\n\told = current_cred();\n\n\tretval = -EPERM;\n\tif (ns_capable(old->", "4465": "< 0)\n\t\tgoto error;\n\n\treturn commit_creds(new);\n\nerror:\n\tabort_creds(new);\n\treturn retval;\n}\n\nSYSCALL_DEFINE3(getresuid, uid_t __user *, ruidp, uid_t __user *, euidp, uid_t __user *, suidp)\n{\n\tconst struct cred *cred = current_cred();\n\tint retval;\n\tuid_t ruid, euid, suid;\n\n\truid = from_kuid_munged(cred->", "4466": "< 0)\n\t\tgoto error;\n\n\treturn new;\n\nerror:\n\tabort_creds(new);\n\treturn NULL;\n}\n\n\nstruct cred *prepare_creds(void)\n{\n\tstruct task_struct *task = current;\n\tconst struct cred *old;\n\tstruct cred *new;\n\n\tvalidate_process_creds();\n\n\tnew = kmem_cache_alloc(cred_jar, GFP_KERNEL);\n\tif (!new)\n\t\treturn NULL;\n\n\tkdebug(\"prepare_creds() alloc %p\", new);\n\n\told = task->", "4467": "< 0)\n\t\tgoto error_free_pks;\n\n\tret = verify_signature(key, pks);\n\tpr_devel(\"verify_signature() = %d\\n\", ret);\n\nerror_free_pks:\n\tmpi_free(pks->", "4468": "< 0)\n\t\tgoto errout;\n\n\tif (event->", "4469": "< 0)\n\t\tgoto fail;\n\n\t\n\tif (!create_worker(pool))\n\t\tgoto fail;\n\n\t\n\thash_add(unbound_pool_hash, &pool->", "4470": "< 0)\n\t\tgoto fail;\n\n\tlockdep_set_subclass(&pool->", "4471": "< 0)\n\t\tgoto fail;\n\n\tworker = alloc_worker(pool->", "4472": "< 0)\n\t\tgoto fail_free_reader;\n\n\tcpu_buffer->", "4473": "< 0)\n\t\tgoto free_modinfo;\n\n\terr = apply_relocations(mod, info);\n\tif (err < 0)\n\t\tgoto free_modinfo;\n\n\terr = post_relocation(mod, info);\n\tif (err < 0)\n\t\tgoto free_modinfo;\n\n\tflush_module_icache(mod);\n\n\t\n\tmod->", "4474": "< 0)\n\t\tgoto free_prog;\n\n\t\n\terr = bpf_check(&prog, attr);\n\tif (err < 0)\n\t\tgoto free_used_maps;\n\n\t\n\tfixup_bpf_calls(prog);\n\n\t\n\tbpf_prog_select_runtime(prog);\n\n\terr = anon_inode_getfd(\"bpf-prog\", &bpf_prog_fops, prog, O_RDWR | O_CLOEXEC);\n\tif (err < 0)\n\t\t\n\t\tgoto free_used_maps;\n\n\treturn err;\n\nfree_used_maps:\n\tfree_used_maps(prog->", "4475": "< 0)\n\t\tgoto out;\n\trc = add_del_listener(info->", "4476": "< 0)\n\t\tgoto out;\n\troot_cgrp->", "4477": "< 0)\n\t\tgoto out;\n\n\t\n\tmodule_bug_finalize(info->", "4478": "< 0)\n\t\tgoto out;\n\n\t*ppos += cnt;\n\tret = cnt;\n out:\n\treturn ret;\n}\n\nstatic int event_trigger_regex_release(struct inode *inode, struct file *file)\n{\n\tmutex_lock(&event_mutex);\n\n\tif (file->", "4479": "< 0)\n\t\tgoto out;\n\n\tbalance_flag_changed = (is_sched_load_balance(cs) !=\n\t\t\t\tis_sched_load_balance(trialcs));\n\n\tspread_flag_changed = ((is_spread_slab(cs) != is_spread_slab(trialcs))\n\t\t\t|| (is_spread_page(cs) != is_spread_page(trialcs)));\n\n\tspin_lock_irq(&callback_lock);\n\tcs->", "4480": "< 0)\n\t\tgoto out;\n\n\tcpu = smp_processor_id();\n\tdata = per_cpu_ptr(tr->", "4481": "< 0)\n\t\tgoto out;\n\n\ttype->", "4482": "< 0)\n\t\tgoto out;\n\n\twhile (mbytes) {\n\t\tstruct page *page;\n\t\tchar *ptr;\n\t\tsize_t uchunk, mchunk;\n\n\t\tpage = kimage_alloc_page(image, GFP_HIGHUSER, maddr);\n\t\tif (!page) {\n\t\t\tresult  = -ENOMEM;\n\t\t\tgoto out;\n\t\t}\n\t\tresult = kimage_add_page(image, page_to_pfn(page)\n\t\t\t\t\t\t\t\t<< PAGE_SHIFT);\n\t\tif (result < 0)\n\t\t\tgoto out;\n\n\t\tptr = kmap(page);\n\t\t\n\t\tclear_page(ptr);\n\t\tptr += maddr & ~PAGE_MASK;\n\t\tmchunk = min_t(size_t, mbytes,\n\t\t\t\tPAGE_SIZE - (maddr & ~PAGE_MASK));\n\t\tuchunk = min(ubytes, mchunk);\n\n\t\t\n\t\tif (image->", "4483": "< 0)\n\t\tgoto out_disable;\n\t\n\tret = 0;\n out:\n\treturn ret;\n\n out_disable:\n\ttrace_event_enable_disable(event_enable_file, 0, 1);\n out_put:\n\tmodule_put(event_enable_file->", "4484": "< 0)\n\t\tgoto out_free;\n\tret = 0;\n out:\n\treturn ret;\n\n out_free:\n\tif (cmd_ops->", "4485": "< 0)\n\t\tgoto out_free;\n\n out_reg:\n\t\n\tret = try_module_get(event_enable_file->", "4486": "< 0)\n\t\tgoto out_free;\n\n out_reg:\n\tret = cmd_ops->", "4487": "< 0)\n\t\tgoto out_free_sha_regions;\n\n\tdigest = kzalloc(SHA256_DIGEST_SIZE, GFP_KERNEL);\n\tif (!digest) {\n\t\tret = -ENOMEM;\n\t\tgoto out_free_sha_regions;\n\t}\n\n\tfor (j = i = 0; i < image->", "4488": "< 0)\n\t\tgoto out_put;\n\tret = cmd_ops->", "4489": "< 0)\n\t\tgoto out_put;\n\tret = register_ftrace_function_probe(glob, ops, data);\n\t\n\tif (!ret) {\n\t\tret = -ENOENT;\n\t\tgoto out_disable;\n\t} else if (ret < 0)\n\t\tgoto out_disable;\n\t\n\tret = 0;\n out:\n\tmutex_unlock(&event_mutex);\n\treturn ret;\n\n out_disable:\n\t__ftrace_event_enable_disable(file, 0, 1);\n out_put:\n\tmodule_put(file->", "4490": "< 0)\n\t\tgoto out_put_task_struct;\n\n\tret = arch_ptrace(child, request, addr, data);\n\tif (ret || request != PTRACE_DETACH)\n\t\tptrace_unfreeze_traced(child);\n\n out_put_task_struct:\n\tput_task_struct(child);\n out:\n\treturn ret;\n}\n\nint generic_ptrace_peekdata(struct task_struct *tsk, unsigned long addr,\n\t\t\t    unsigned long data)\n{\n\tunsigned long tmp;\n\tint copied;\n\n\tcopied = access_process_vm(tsk, addr, &tmp, sizeof(tmp), 0);\n\tif (copied != sizeof(tmp))\n\t\treturn -EIO;\n\treturn put_user(tmp, (unsigned long __user *)data);\n}\n\nint generic_ptrace_pokedata(struct task_struct *tsk, unsigned long addr,\n\t\t\t    unsigned long data)\n{\n\tint copied;\n\n\tcopied = access_process_vm(tsk, addr, &data, sizeof(data), 1);\n\treturn (copied == sizeof(data)) ? 0 : -EIO;\n}\n\n#if defined CONFIG_COMPAT\n\nint compat_ptrace_request(struct task_struct *child, compat_long_t request,\n\t\t\t  compat_ulong_t addr, compat_ulong_t data)\n{\n\tcompat_ulong_t __user *datap = compat_ptr(data);\n\tcompat_ulong_t word;\n\tsiginfo_t siginfo;\n\tint ret;\n\n\tswitch (request) {\n\tcase PTRACE_PEEKTEXT:\n\tcase PTRACE_PEEKDATA:\n\t\tret = access_process_vm(child, addr, &word, sizeof(word), 0);\n\t\tif (ret != sizeof(word))\n\t\t\tret = -EIO;\n\t\telse\n\t\t\tret = put_user(word, datap);\n\t\tbreak;\n\n\tcase PTRACE_POKETEXT:\n\tcase PTRACE_POKEDATA:\n\t\tret = access_process_vm(child, addr, &data, sizeof(data), 1);\n\t\tret = (ret != sizeof(data) ? -EIO : 0);\n\t\tbreak;\n\n\tcase PTRACE_GETEVENTMSG:\n\t\tret = put_user((compat_ulong_t) child->", "4491": "< 0)\n\t\tgoto skip_full_check;\n\n\tenv->", "4492": "< 0)\n\t\tgoto skip_full_check;\n\n\tret = do_check(env);\n\nskip_full_check:\n\twhile (pop_stack(env, NULL) >", "4493": "< 0)\n\t\tgoto use_default;\n\n\t\n\tif (current_clr_polling_and_test()) {\n\t\tdev->", "4494": "< 0)\n\t\tindex += FTRACE_NOTRACE_DEPTH;\n\n\tif (unlikely(index < 0 || index >", "4495": "< 0)\n\t\tmin_vruntime = vruntime;\n\n\treturn min_vruntime;\n}\n\nstatic inline int entity_before(struct sched_entity *a,\n\t\t\t\tstruct sched_entity *b)\n{\n\treturn (s64)(a->", "4496": "< 0)\n\t\tnow = trace_clock_struct.prev_time + 1;\n\n\ttrace_clock_struct.prev_time = now;\n\n\tarch_spin_unlock(&trace_clock_struct.lock);\n\n out:\n\tlocal_irq_restore(flags);\n\n\treturn now;\n}\n\nstatic atomic64_t trace_counter;\n\n\nu64 notrace trace_clock_counter(void)\n{\n\treturn atomic64_add_return(1, &trace_counter);\n}\n\n#include <linux/kernel.h>", "4497": "< 0)\n\t\tquota = RUNTIME_INF;\n\telse\n\t\tquota = (u64)cfs_quota_us * NSEC_PER_USEC;\n\n\treturn tg_set_cfs_bandwidth(tg, period, quota);\n}\n\nlong tg_get_cfs_quota(struct task_group *tg)\n{\n\tu64 quota_us;\n\n\tif (tg->", "4498": "< 0)\n\t\trcu_unexpedite_gp();\n\tWARN_ON_ONCE(can_expedite && rcu_gp_is_expedited());\n\trcu_torture_writer_state = RTWS_STOPPING;\n\ttorture_kthread_stopping(\"rcu_torture_writer\");\n\treturn 0;\n}\n\n\nstatic int\nrcu_torture_fakewriter(void *arg)\n{\n\tDEFINE_TORTURE_RANDOM(rand);\n\n\tVERBOSE_TOROUT_STRING(\"rcu_torture_fakewriter task started\");\n\tset_user_nice(current, MAX_NICE);\n\n\tdo {\n\t\tschedule_timeout_uninterruptible(1 + torture_random(&rand)%10);\n\t\tudelay(torture_random(&rand) & 0x3ff);\n\t\tif (cur_ops->", "4499": "< 0)\n\t\treturn (id & CLOCKFD_MASK) == CLOCKFD ?\n\t\t\t&clock_posix_dynamic : &clock_posix_cpu;\n\n\tif (id >", "4500": "< 0)\n\t\treturn -1;  \n\n\treturn 0;\n}\n#endif \n\nlong prctl_get_seccomp(void)\n{\n\treturn current->", "4501": "< 0)\n\t\treturn -EFAULT;\n\tlicense[sizeof(license) - 1] = 0;\n\n\t\n\tis_gpl = license_is_gpl_compatible(license);\n\n\tif (attr->", "4502": "< 0)\n\t\treturn -EFAULT;\n\tname[MODULE_NAME_LEN-1] = '\\0';\n\n\tif (mutex_lock_interruptible(&module_mutex) != 0)\n\t\treturn -EINTR;\n\n\tmod = find_module(name);\n\tif (!mod) {\n\t\tret = -ENOENT;\n\t\tgoto out;\n\t}\n\n\tif (!list_empty(&mod->", "4503": "< 0)\n\t\treturn -EINVAL;\n\tdown_read(&uts_sem);\n\tu = utsname();\n\ti = 1 + strlen(u->", "4504": "< 0)\n\t\treturn -EINVAL;\n\tif (copy_from_user(&lparam, param, sizeof(struct sched_param)))\n\t\treturn -EFAULT;\n\n\trcu_read_lock();\n\tretval = -ESRCH;\n\tp = find_process_by_pid(pid);\n\tif (p != NULL)\n\t\tretval = sched_setscheduler(p, policy, &lparam);\n\trcu_read_unlock();\n\n\treturn retval;\n}\n\n\nstatic int sched_copy_attr(struct sched_attr __user *uattr,\n\t\t\t   struct sched_attr *attr)\n{\n\tu32 size;\n\tint ret;\n\n\tif (!access_ok(VERIFY_WRITE, uattr, SCHED_ATTR_SIZE_VER0))\n\t\treturn -EFAULT;\n\n\t\n\tmemset(attr, 0, sizeof(*attr));\n\n\tret = get_user(size, &uattr->", "4505": "< 0)\n\t\treturn -EINVAL;\n\trcu_read_lock();\n\n\t\n\twrite_lock_irq(&tasklist_lock);\n\n\terr = -ESRCH;\n\tp = find_task_by_vpid(pid);\n\tif (!p)\n\t\tgoto out;\n\n\terr = -EINVAL;\n\tif (!thread_group_leader(p))\n\t\tgoto out;\n\n\tif (same_thread_group(p->", "4506": "< 0)\n\t\treturn -EINVAL;\n\n\tcgrp = cgroup_kn_lock_live(of->", "4507": "< 0)\n\t\treturn -EINVAL;\n\n\tdown_read(&umhelper_sem);\n\tfor (;;) {\n\t\tprepare_to_wait(&usermodehelper_disabled_waitq, &wait,\n\t\t\t\tTASK_UNINTERRUPTIBLE);\n\t\tif (!usermodehelper_disabled)\n\t\t\tbreak;\n\n\t\tup_read(&umhelper_sem);\n\n\t\ttimeout = schedule_timeout(timeout);\n\t\tif (!timeout)\n\t\t\tbreak;\n\n\t\tdown_read(&umhelper_sem);\n\t}\n\tfinish_wait(&usermodehelper_disabled_waitq, &wait);\n\treturn timeout;\n}\nEXPORT_SYMBOL_GPL(usermodehelper_read_lock_wait);\n\nvoid usermodehelper_read_unlock(void)\n{\n\tup_read(&umhelper_sem);\n}\nEXPORT_SYMBOL_GPL(usermodehelper_read_unlock);\n\n\nvoid __usermodehelper_set_disable_depth(enum umh_disable_depth depth)\n{\n\tdown_write(&umhelper_sem);\n\tusermodehelper_disabled = depth;\n\twake_up(&usermodehelper_disabled_waitq);\n\tup_write(&umhelper_sem);\n}\n\n\nint __usermodehelper_disable(enum umh_disable_depth depth)\n{\n\tlong retval;\n\n\tif (!depth)\n\t\treturn -EINVAL;\n\n\tdown_write(&umhelper_sem);\n\tusermodehelper_disabled = depth;\n\tup_write(&umhelper_sem);\n\n\t\n\tretval = wait_event_timeout(running_helpers_waitq,\n\t\t\t\t\tatomic_read(&running_helpers) == 0,\n\t\t\t\t\tRUNNING_HELPERS_TIMEOUT);\n\tif (retval)\n\t\treturn 0;\n\n\t__usermodehelper_set_disable_depth(UMH_ENABLED);\n\treturn -EAGAIN;\n}\n\nstatic void helper_lock(void)\n{\n\tatomic_inc(&running_helpers);\n\tsmp_mb__after_atomic();\n}\n\nstatic void helper_unlock(void)\n{\n\tif (atomic_dec_and_test(&running_helpers))\n\t\twake_up(&running_helpers_waitq);\n}\n\n\nstruct subprocess_info *call_usermodehelper_setup(char *path, char **argv,\n\t\tchar **envp, gfp_t gfp_mask,\n\t\tint (*init)(struct subprocess_info *info, struct cred *new),\n\t\tvoid (*cleanup)(struct subprocess_info *info),\n\t\tvoid *data)\n{\n\tstruct subprocess_info *sub_info;\n\tsub_info = kzalloc(sizeof(struct subprocess_info), gfp_mask);\n\tif (!sub_info)\n\t\tgoto out;\n\n\tINIT_WORK(&sub_info->", "4508": "< 0)\n\t\treturn -EINVAL;\n\n\ti = cred->", "4509": "< 0)\n\t\treturn -EINVAL;\n\n\tif (arg.flags & PTRACE_PEEKSIGINFO_SHARED)\n\t\tpending = &child->", "4510": "< 0)\n\t\treturn -EINVAL;\n\n\trcu_read_lock();\n\tp = find_process_by_pid(pid);\n\tretval = -ESRCH;\n\tif (!p)\n\t\tgoto out_unlock;\n\n\tretval = security_task_getscheduler(p);\n\tif (retval)\n\t\tgoto out_unlock;\n\n\tif (task_has_rt_policy(p))\n\t\tlp.sched_priority = p->", "4511": "< 0)\n\t\treturn -EINVAL;\n\n\tret = cap_get_target_pid(pid, &pE, &pI, &pP);\n\tif (!ret) {\n\t\tstruct __user_cap_data_struct kdata[_KERNEL_CAPABILITY_U32S];\n\t\tunsigned i;\n\n\t\tfor (i = 0; i < tocopy; i++) {\n\t\t\tkdata[i].effective = pE.cap[i];\n\t\t\tkdata[i].permitted = pP.cap[i];\n\t\t\tkdata[i].inheritable = pI.cap[i];\n\t\t}\n\n\t\t\n\t\tif (copy_to_user(dataptr, kdata, tocopy\n\t\t\t\t * sizeof(struct __user_cap_data_struct))) {\n\t\t\treturn -EFAULT;\n\t\t}\n\t}\n\n\treturn ret;\n}\n\n\nSYSCALL_DEFINE2(capset, cap_user_header_t, header, const cap_user_data_t, data)\n{\n\tstruct __user_cap_data_struct kdata[_KERNEL_CAPABILITY_U32S];\n\tunsigned i, tocopy, copybytes;\n\tkernel_cap_t inheritable, permitted, effective;\n\tstruct cred *new;\n\tint ret;\n\tpid_t pid;\n\n\tret = cap_validate_magic(header, &tocopy);\n\tif (ret != 0)\n\t\treturn ret;\n\n\tif (get_user(pid, &header->", "4512": "< 0)\n\t\treturn -EINVAL;\n\n\treturn do_sched_setscheduler(pid, policy, param);\n}\n\n\nSYSCALL_DEFINE2(sched_setparam, pid_t, pid, struct sched_param __user *, param)\n{\n\treturn do_sched_setscheduler(pid, SETPARAM_POLICY, param);\n}\n\n\nSYSCALL_DEFINE3(sched_setattr, pid_t, pid, struct sched_attr __user *, uattr,\n\t\t\t       unsigned int, flags)\n{\n\tstruct sched_attr attr;\n\tstruct task_struct *p;\n\tint retval;\n\n\tif (!uattr || pid < 0 || flags)\n\t\treturn -EINVAL;\n\n\tretval = sched_copy_attr(uattr, &attr);\n\tif (retval)\n\t\treturn retval;\n\n\tif ((int)attr.sched_policy < 0)\n\t\treturn -EINVAL;\n\n\trcu_read_lock();\n\tretval = -ESRCH;\n\tp = find_process_by_pid(pid);\n\tif (p != NULL)\n\t\tretval = sched_setattr(p, &attr);\n\trcu_read_unlock();\n\n\treturn retval;\n}\n\n\nSYSCALL_DEFINE1(sched_getscheduler, pid_t, pid)\n{\n\tstruct task_struct *p;\n\tint retval;\n\n\tif (pid < 0)\n\t\treturn -EINVAL;\n\n\tretval = -ESRCH;\n\trcu_read_lock();\n\tp = find_process_by_pid(pid);\n\tif (p) {\n\t\tretval = security_task_getscheduler(p);\n\t\tif (!retval)\n\t\t\tretval = p->", "4513": "< 0)\n\t\treturn -EINVAL;\n\n\tretval = -ESRCH;\n\trcu_read_lock();\n\tp = find_process_by_pid(pid);\n\tif (!p)\n\t\tgoto out_unlock;\n\n\tretval = security_task_getscheduler(p);\n\tif (retval)\n\t\tgoto out_unlock;\n\n\trq = task_rq_lock(p, &flags);\n\ttime_slice = 0;\n\tif (p->", "4514": "< 0)\n\t\treturn -ENODEV;\n\n\t\n\tdir = kzalloc(sizeof(*dir), GFP_KERNEL);\n\tif (!dir) {\n\t\ttrace_array_put(tr);\n\t\treturn -ENOMEM;\n\t}\n\n\tdir->", "4515": "< 0)\n\t\treturn -ENODEV;\n\n\tif ((file->", "4516": "< 0)\n\t\treturn -ENOMEM;\n\tret = register_ftrace_event(&call->", "4517": "< 0)\n\t\treturn -ENOMEM;\n\n\tid = trace_event_raw_init(call);\n\n\tif (id < 0) {\n\t\tfree_syscall_print_fmt(call);\n\t\treturn id;\n\t}\n\n\treturn id;\n}\n\nstruct trace_event_functions enter_syscall_print_funcs = {\n\t.trace\t\t= print_syscall_enter,\n};\n\nstruct trace_event_functions exit_syscall_print_funcs = {\n\t.trace\t\t= print_syscall_exit,\n};\n\nstruct ftrace_event_class __refdata event_class_syscall_enter = {\n\t.system\t\t= \"syscalls\",\n\t.reg\t\t= syscall_enter_register,\n\t.define_fields\t= syscall_enter_define_fields,\n\t.get_fields\t= syscall_get_enter_fields,\n\t.raw_init\t= init_syscall_trace,\n};\n\nstruct ftrace_event_class __refdata event_class_syscall_exit = {\n\t.system\t\t= \"syscalls\",\n\t.reg\t\t= syscall_exit_register,\n\t.define_fields\t= syscall_exit_define_fields,\n\t.fields\t\t= LIST_HEAD_INIT(event_class_syscall_exit.fields),\n\t.raw_init\t= init_syscall_trace,\n};\n\nunsigned long __init __weak arch_syscall_addr(int nr)\n{\n\treturn (unsigned long)sys_call_table[nr];\n}\n\nvoid __init init_ftrace_syscalls(void)\n{\n\tstruct syscall_metadata *meta;\n\tunsigned long addr;\n\tint i;\n\n\tsyscalls_metadata = kcalloc(NR_syscalls, sizeof(*syscalls_metadata),\n\t\t\t\t    GFP_KERNEL);\n\tif (!syscalls_metadata) {\n\t\tWARN_ON(1);\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < NR_syscalls; i++) {\n\t\taddr = arch_syscall_addr(i);\n\t\tmeta = find_syscall_meta(addr);\n\t\tif (!meta)\n\t\t\tcontinue;\n\n\t\tmeta->", "4518": "< 0)\n\t\treturn -ENOMEM;\n\n\tret = register_ftrace_event(&call->", "4519": "< 0)\n\t\treturn 0;\n\treturn 1;\n}\n\n\nstatic unsigned long get_ksymbol_core(struct kallsym_iter *iter)\n{\n\tunsigned off = iter->", "4520": "< 0)\n\t\treturn 0;\n\ttracing_thresh = threshold * 1000;\n\treturn 1;\n}\n__setup(\"tracing_thresh=\", set_tracing_thresh);\n\nunsigned long nsecs_to_usecs(unsigned long nsecs)\n{\n\treturn nsecs / 1000;\n}\n\n\nstatic const char *trace_options[] = {\n\t\"print-parent\",\n\t\"sym-offset\",\n\t\"sym-addr\",\n\t\"verbose\",\n\t\"raw\",\n\t\"hex\",\n\t\"bin\",\n\t\"block\",\n\t\"stacktrace\",\n\t\"trace_printk\",\n\t\"ftrace_preempt\",\n\t\"branch\",\n\t\"annotate\",\n\t\"userstacktrace\",\n\t\"sym-userobj\",\n\t\"printk-msg-only\",\n\t\"context-info\",\n\t\"latency-format\",\n\t\"sleep-time\",\n\t\"graph-time\",\n\t\"record-cmd\",\n\t\"overwrite\",\n\t\"disable_on_free\",\n\t\"irq-info\",\n\t\"markers\",\n\t\"function-trace\",\n\tNULL\n};\n\nstatic struct {\n\tu64 (*func)(void);\n\tconst char *name;\n\tint in_ns;\t\t\n} trace_clocks[] = {\n\t{ trace_clock_local,\t\t\"local\",\t1 },\n\t{ trace_clock_global,\t\t\"global\",\t1 },\n\t{ trace_clock_counter,\t\t\"counter\",\t0 },\n\t{ trace_clock_jiffies,\t\t\"uptime\",\t0 },\n\t{ trace_clock,\t\t\t\"perf\",\t\t1 },\n\t{ ktime_get_mono_fast_ns,\t\"mono\",\t\t1 },\n\tARCH_TRACE_CLOCKS\n};\n\n\nint trace_parser_get_init(struct trace_parser *parser, int size)\n{\n\tmemset(parser, 0, sizeof(*parser));\n\n\tparser->", "4521": "< 0)\n\t\treturn 0;\n\n\tfor (i = irq; cnt >", "4522": "< 0)\n\t\treturn 0;\n\n\tif (unlikely(delta.tv64 >", "4523": "< 0)\n\t\treturn 0;\n\n\tkmsg_dump_rewind_nolock(&dumper);\n\twhile (kmsg_dump_get_line_nolock(&dumper, 1, buf, sizeof(buf), &len)) {\n\t\tif (skip) {\n\t\t\tskip--;\n\t\t\tcontinue;\n\t\t}\n\t\tif (!lines--)\n\t\t\tbreak;\n\t\tif (KDB_FLAG(CMD_INTERRUPT))\n\t\t\treturn 0;\n\n\t\tkdb_printf(\"%.*s\\n\", (int)len - 1, buf);\n\t}\n\n\treturn 0;\n}\n#endif \n\n\nstatic atomic_t kdb_nmi_disabled;\n\nstatic int kdb_disable_nmi(int argc, const char *argv[])\n{\n\tif (atomic_read(&kdb_nmi_disabled))\n\t\treturn 0;\n\tatomic_set(&kdb_nmi_disabled, 1);\n\tarch_kgdb_ops.enable_nmi(0);\n\treturn 0;\n}\n\nstatic int kdb_param_enable_nmi(const char *val, const struct kernel_param *kp)\n{\n\tif (!atomic_add_unless(&kdb_nmi_disabled, -1, 0))\n\t\treturn -EINVAL;\n\tarch_kgdb_ops.enable_nmi(1);\n\treturn 0;\n}\n\nstatic const struct kernel_param_ops kdb_param_ops_enable_nmi = {\n\t.set = kdb_param_enable_nmi,\n};\nmodule_param_cb(enable_nmi, &kdb_param_ops_enable_nmi, NULL, 0600);\n\n\nstatic void kdb_cpu_status(void)\n{\n\tint i, start_cpu, first_print = 1;\n\tchar state, prev_state = '?';\n\n\tkdb_printf(\"Currently on cpu %d\\n\", raw_smp_processor_id());\n\tkdb_printf(\"Available cpus: \");\n\tfor (start_cpu = -1, i = 0; i < NR_CPUS; i++) {\n\t\tif (!cpu_online(i)) {\n\t\t\tstate = 'F';\t\n\t\t} else if (!kgdb_info[i].enter_kgdb) {\n\t\t\tstate = 'D';\t\n\t\t} else {\n\t\t\tstate = ' ';\t\n\t\t\tif (kdb_task_state_char(KDB_TSK(i)) == 'I')\n\t\t\t\tstate = 'I';\t\n\t\t}\n\t\tif (state != prev_state) {\n\t\t\tif (prev_state != '?') {\n\t\t\t\tif (!first_print)\n\t\t\t\t\tkdb_printf(\", \");\n\t\t\t\tfirst_print = 0;\n\t\t\t\tkdb_printf(\"%d\", start_cpu);\n\t\t\t\tif (start_cpu < i-1)\n\t\t\t\t\tkdb_printf(\"-%d\", i-1);\n\t\t\t\tif (prev_state != ' ')\n\t\t\t\t\tkdb_printf(\"(%c)\", prev_state);\n\t\t\t}\n\t\t\tprev_state = state;\n\t\t\tstart_cpu = i;\n\t\t}\n\t}\n\t\n\tif (prev_state != 'F') {\n\t\tif (!first_print)\n\t\t\tkdb_printf(\", \");\n\t\tkdb_printf(\"%d\", start_cpu);\n\t\tif (start_cpu < i-1)\n\t\t\tkdb_printf(\"-%d\", i-1);\n\t\tif (prev_state != ' ')\n\t\t\tkdb_printf(\"(%c)\", prev_state);\n\t}\n\tkdb_printf(\"\\n\");\n}\n\nstatic int kdb_cpu(int argc, const char **argv)\n{\n\tunsigned long cpunum;\n\tint diag;\n\n\tif (argc == 0) {\n\t\tkdb_cpu_status();\n\t\treturn 0;\n\t}\n\n\tif (argc != 1)\n\t\treturn KDB_ARGCOUNT;\n\n\tdiag = kdbgetularg(argv[1], &cpunum);\n\tif (diag)\n\t\treturn diag;\n\n\t\n\tif ((cpunum >", "4524": "< 0)\n\t\treturn ERR_PTR(err);\n\n\t\n\tinfo->", "4525": "< 0)\n\t\treturn NULL;\n\n\tif (regs)\n\t\t*regs = this_cpu_ptr(&__perf_regs[*rctxp]);\n\traw_data = this_cpu_ptr(perf_trace_buf[*rctxp]);\n\n\t\n\tmemset(&raw_data[size - sizeof(u64)], 0, sizeof(u64));\n\n\tentry = (struct trace_entry *)raw_data;\n\tlocal_save_flags(flags);\n\ttracing_generic_entry_update(entry, flags, pc);\n\tentry->", "4526": "< 0)\n\t\treturn NULL;\n\n\treturn syscalls_metadata[nr];\n}\n\nstatic enum print_line_t\nprint_syscall_enter(struct trace_iterator *iter, int flags,\n\t\t    struct trace_event *event)\n{\n\tstruct trace_seq *s = &iter->", "4527": "< 0)\n\t\treturn RETRY_TASK;\n\n\tif (new_tasks >", "4528": "< 0)\n\t\treturn TIMER_RETRY;\n\treturn 0;\n}\n\nstatic inline int timer_delete_hook(struct k_itimer *timer)\n{\n\tstruct k_clock *kc = clockid_to_kclock(timer->", "4529": "< 0)\n\t\treturn TIMER_RETRY;\n\n\t\n\ttimr->", "4530": "< 0)\n\t\treturn TIMER_RETRY;\n\n\treturn 0;\n}\n\n\nstatic int alarm_timer_set(struct k_itimer *timr, int flags,\n\t\t\t\tstruct itimerspec *new_setting,\n\t\t\t\tstruct itimerspec *old_setting)\n{\n\tktime_t exp;\n\n\tif (!rtcdev)\n\t\treturn -ENOTSUPP;\n\n\tif (flags & ~TIMER_ABSTIME)\n\t\treturn -EINVAL;\n\n\tif (old_setting)\n\t\talarm_timer_get(timr, old_setting);\n\n\t\n\tif (alarm_try_to_cancel(&timr->", "4531": "< 0)\n\t\treturn TIMER_RETRY;\n\n\ttimr->", "4532": "< 0)\n\t\treturn __copy_to_user(to, from, sizeof(siginfo_t))\n\t\t\t? -EFAULT : 0;\n\t\n\terr = __put_user(from->", "4533": "< 0)\n\t\treturn err;\n\tif (write)\n\t\tset_numabalancing_state(state);\n\treturn err;\n}\n#endif\n#endif\n\n\nint sched_fork(unsigned long clone_flags, struct task_struct *p)\n{\n\tunsigned long flags;\n\tint cpu = get_cpu();\n\n\t__sched_fork(clone_flags, p);\n\t\n\tp->", "4534": "< 0)\n\t\treturn err;\n\n\t\n\tfor (i = 0; i < _KERNEL_CAPABILITY_U32S; i++)\n\t\tnew_cap.cap[i] = cap_array[i];\n\n\t\n\tspin_lock(&umh_sysctl_lock);\n\tif (write) {\n\t\tif (table->", "4535": "< 0)\n\t\treturn err;\n\n\t*ppos += cnt;\n\n\treturn cnt;\n}\n\nstatic LIST_HEAD(event_subsystems);\n\nstatic int subsystem_open(struct inode *inode, struct file *filp)\n{\n\tstruct event_subsystem *system = NULL;\n\tstruct ftrace_subsystem_dir *dir = NULL; \n\tstruct trace_array *tr;\n\tint ret;\n\n\tif (tracing_is_disabled())\n\t\treturn -ENODEV;\n\n\t\n\tmutex_lock(&trace_types_lock);\n\tmutex_lock(&event_mutex);\n\tlist_for_each_entry(tr, &ftrace_trace_arrays, list) {\n\t\tlist_for_each_entry(dir, &tr->", "4536": "< 0)\n\t\treturn err;\n\n\t*ppos += cnt;\n\n\treturn cnt;\n}\n\nstatic ssize_t\nshow_header(struct file *filp, char __user *ubuf, size_t cnt, loff_t *ppos)\n{\n\tint (*func)(struct trace_seq *s) = filp->", "4537": "< 0)\n\t\treturn err;\n\n\tcpu_notify(CPU_DYING | param->", "4538": "< 0)\n\t\treturn err;\n\n\tif (!alloc_cpumask_var(&cpus_attach, GFP_KERNEL))\n\t\tBUG();\n\n\treturn 0;\n}\n\n\nstatic void remove_tasks_in_empty_cpuset(struct cpuset *cs)\n{\n\tstruct cpuset *parent;\n\n\t\n\tparent = parent_cs(cs);\n\twhile (cpumask_empty(parent->", "4539": "< 0)\n\t\treturn err;\n\n\tif (write) {\n\t\t\n\t\tint i;\n\t\tfor (i = 0; i < BITS_PER_LONG && tmptaint >", "4540": "< 0)\n\t\treturn id;\n\n\troot->", "4541": "< 0)\n\t\treturn print_bfs_bug(ret);\n\tif (ret == 1)\n\t\treturn ret;\n\n\treturn print_irq_inversion_bug(curr, &root, target_entry,\n\t\t\t\t\tthis, 1, irqclass);\n}\n\n\nstatic int\ncheck_usage_backwards(struct task_struct *curr, struct held_lock *this,\n\t\t      enum lock_usage_bit bit, const char *irqclass)\n{\n\tint ret;\n\tstruct lock_list root;\n\tstruct lock_list *uninitialized_var(target_entry);\n\n\troot.parent = NULL;\n\troot.class = hlock_class(this);\n\tret = find_usage_backwards(&root, bit, &target_entry);\n\tif (ret < 0)\n\t\treturn print_bfs_bug(ret);\n\tif (ret == 1)\n\t\treturn ret;\n\n\treturn print_irq_inversion_bug(curr, &root, target_entry,\n\t\t\t\t\tthis, 0, irqclass);\n}\n\nvoid print_irqtrace_events(struct task_struct *curr)\n{\n\tprintk(\"irq event stamp: %u\\n\", curr->", "4542": "< 0)\n\t\treturn print_bfs_bug(ret);\n\tif (ret == 1)\n\t\treturn ret;\n\n\tthat.parent = NULL;\n\tthat.class = hlock_class(next);\n\tret = find_usage_forwards(&that, bit_forwards, &target_entry1);\n\tif (ret < 0)\n\t\treturn print_bfs_bug(ret);\n\tif (ret == 1)\n\t\treturn ret;\n\n\treturn print_bad_irq_dependency(curr, &this, &that,\n\t\t\ttarget_entry, target_entry1,\n\t\t\tprev, next,\n\t\t\tbit_backwards, bit_forwards, irqclass);\n}\n\nstatic const char *state_names[] = {\n#define LOCKDEP_STATE(__STATE) \\\n\t__stringify(__STATE),\n#include \"lockdep_states.h\"\n#undef LOCKDEP_STATE\n};\n\nstatic const char *state_rnames[] = {\n#define LOCKDEP_STATE(__STATE) \\\n\t__stringify(__STATE)\"-READ\",\n#include \"lockdep_states.h\"\n#undef LOCKDEP_STATE\n};\n\nstatic inline const char *state_name(enum lock_usage_bit bit)\n{\n\treturn (bit & 1) ? state_rnames[bit >", "4543": "< 0)\n\t\treturn rc;\n\n\trc = -EINVAL;\n\tpid = nla_get_u32(info->", "4544": "< 0)\n\t\treturn res;\n\n\troot_swap = res;\n\tres = blkdev_get(hib_resume_bdev, FMODE_WRITE, NULL);\n\tif (res)\n\t\treturn res;\n\n\tres = set_blocksize(hib_resume_bdev, PAGE_SIZE);\n\tif (res < 0)\n\t\tblkdev_put(hib_resume_bdev, FMODE_WRITE);\n\n\treturn res;\n}\n\n\n\nstatic int write_page(void *buf, sector_t offset, struct bio **bio_chain)\n{\n\tvoid *src;\n\tint ret;\n\n\tif (!offset)\n\t\treturn -ENOSPC;\n\n\tif (bio_chain) {\n\t\tsrc = (void *)__get_free_page(__GFP_WAIT | __GFP_NOWARN |\n\t\t                              __GFP_NORETRY);\n\t\tif (src) {\n\t\t\tcopy_page(src, buf);\n\t\t} else {\n\t\t\tret = hib_wait_on_bio_chain(bio_chain); \n\t\t\tif (ret)\n\t\t\t\treturn ret;\n\t\t\tsrc = (void *)__get_free_page(__GFP_WAIT |\n\t\t\t                              __GFP_NOWARN |\n\t\t\t                              __GFP_NORETRY);\n\t\t\tif (src) {\n\t\t\t\tcopy_page(src, buf);\n\t\t\t} else {\n\t\t\t\tWARN_ON_ONCE(1);\n\t\t\t\tbio_chain = NULL;\t\n\t\t\t\tsrc = buf;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tsrc = buf;\n\t}\n\treturn hib_bio_write_page(offset, src, bio_chain);\n}\n\nstatic void release_swap_writer(struct swap_map_handle *handle)\n{\n\tif (handle->", "4545": "< 0)\n\t\treturn result;\n\n\tcopy_from_page(page, vaddr, &opcode, UPROBE_SWBP_INSN_SIZE);\n\tput_page(page);\n out:\n\t\n\treturn is_trap_insn(&opcode);\n}\n\nstatic struct uprobe *find_active_uprobe(unsigned long bp_vaddr, int *is_swbp)\n{\n\tstruct mm_struct *mm = current->", "4546": "< 0)\n\t\treturn ret;\n\tm = file->", "4547": "< 0)\n\t\treturn ret;\n\n\tfor (i = 0; i < nr_irqs; i++) {\n\t\tret = ops->", "4548": "< 0)\n\t\treturn ret;\n\n\tif (ftrace_enabled)\n\t\tupdate_ftrace_function();\n\n\treturn 0;\n}\n\nstatic void ftrace_update_pid_func(void)\n{\n\t\n\tif (ftrace_trace_function == ftrace_stub)\n\t\treturn;\n\n\tupdate_ftrace_function();\n}\n\n#ifdef CONFIG_FUNCTION_PROFILER\nstruct ftrace_profile {\n\tstruct hlist_node\t\tnode;\n\tunsigned long\t\t\tip;\n\tunsigned long\t\t\tcounter;\n#ifdef CONFIG_FUNCTION_GRAPH_TRACER\n\tunsigned long long\t\ttime;\n\tunsigned long long\t\ttime_squared;\n#endif\n};\n\nstruct ftrace_profile_page {\n\tstruct ftrace_profile_page\t*next;\n\tunsigned long\t\t\tindex;\n\tstruct ftrace_profile\t\trecords[];\n};\n\nstruct ftrace_profile_stat {\n\tatomic_t\t\t\tdisabled;\n\tstruct hlist_head\t\t*hash;\n\tstruct ftrace_profile_page\t*pages;\n\tstruct ftrace_profile_page\t*start;\n\tstruct tracer_stat\t\tstat;\n};\n\n#define PROFILE_RECORDS_SIZE\t\t\t\t\t\t\\\n\t(PAGE_SIZE - offsetof(struct ftrace_profile_page, records))\n\n#define PROFILES_PER_PAGE\t\t\t\t\t\\\n\t(PROFILE_RECORDS_SIZE / sizeof(struct ftrace_profile))\n\nstatic int ftrace_profile_enabled __read_mostly;\n\n\nstatic DEFINE_MUTEX(ftrace_profile_lock);\n\nstatic DEFINE_PER_CPU(struct ftrace_profile_stat, ftrace_profile_stats);\n\n#define FTRACE_PROFILE_HASH_BITS 10\n#define FTRACE_PROFILE_HASH_SIZE (1 << FTRACE_PROFILE_HASH_BITS)\n\nstatic void *\nfunction_stat_next(void *v, int idx)\n{\n\tstruct ftrace_profile *rec = v;\n\tstruct ftrace_profile_page *pg;\n\n\tpg = (struct ftrace_profile_page *)((unsigned long)rec & PAGE_MASK);\n\n again:\n\tif (idx != 0)\n\t\trec++;\n\n\tif ((void *)rec >", "4549": "< 0)\n\t\treturn ret;\n\n\tif (trace_parser_get_init(&parser, EVENT_BUF_SIZE + 1))\n\t\treturn -ENOMEM;\n\n\tread = trace_get_user(&parser, ubuf, cnt, ppos);\n\n\tif (read >", "4550": "< 0)\n\t\treturn ret;\n\n\tif (val != 0 && val != 1)\n\t\treturn -EINVAL;\n\n\t\n\tif (system)\n\t\tname = system->", "4551": "< 0)\n\t\treturn ret;\n\n\tret = -ENODEV;\n\tmutex_lock(&clockevents_mutex);\n\traw_spin_lock_irq(&clockevents_lock);\n\tlist_for_each_entry(ce, &clockevent_devices, list) {\n\t\tif (!strcmp(ce->", "4552": "< 0)\n\t\treturn ret;\n\n\tret = ftrace_pid_add(val);\n\n\treturn ret ? ret : cnt;\n}\n\nstatic int\nftrace_pid_release(struct inode *inode, struct file *file)\n{\n\tif (file->", "4553": "< 0)\n\t\treturn ret;\n\n\tswitch (val) {\n\tcase 0:\n\tcase 1:\n\t\tret = -ENODEV;\n\t\tmutex_lock(&event_mutex);\n\t\tfile = event_file_data(filp);\n\t\tif (likely(file))\n\t\t\tret = ftrace_event_enable_disable(file, val);\n\t\tmutex_unlock(&event_mutex);\n\t\tbreak;\n\n\tdefault:\n\t\treturn -EINVAL;\n\t}\n\n\t*ppos += cnt;\n\n\treturn ret ? ret : cnt;\n}\n\nstatic ssize_t\nsystem_enable_read(struct file *filp, char __user *ubuf, size_t cnt,\n\t\t   loff_t *ppos)\n{\n\tconst char set_to_char[4] = { '?', '0', '1', 'X' };\n\tstruct ftrace_subsystem_dir *dir = filp->", "4554": "< 0)\n\t\treturn retval;\n\n\treturn 0;\n}\n\nstatic const struct file_operations perf_fops = {\n\t.llseek\t\t\t= no_llseek,\n\t.release\t\t= perf_release,\n\t.read\t\t\t= perf_read,\n\t.poll\t\t\t= perf_poll,\n\t.unlocked_ioctl\t\t= perf_ioctl,\n\t.compat_ioctl\t\t= perf_compat_ioctl,\n\t.mmap\t\t\t= perf_mmap,\n\t.fasync\t\t\t= perf_fasync,\n};\n\n\n\nvoid perf_event_wakeup(struct perf_event *event)\n{\n\tring_buffer_wakeup(event);\n\n\tif (event->", "4555": "< 0)\n\t\treturn retval;\n\n\tspin_lock_irq(&callback_lock);\n\tcpumask_copy(cs->", "4556": "< 0)\n\t\treturn size;\n\n\tif (off % size != 0) {\n\t\tverbose(\"misaligned access off %d size %d\\n\", off, size);\n\t\treturn -EACCES;\n\t}\n\n\tif (state->", "4557": "< 0)\n\t\treturn;\n\trq->", "4558": "< 0)\n\t\treturn;\n\n\t\n\tif (op->", "4559": "< 0)\n\t\treturn;\n\n\t\n\tpreempt_disable_notrace();\n\tdo_for_each_ftrace_op(op, ftrace_ops_list) {\n\t\tif (ftrace_ops_test(op, ip, regs)) {\n\t\t\tif (FTRACE_WARN_ON(!op->", "4560": "< 0)\n\t\treturn;\n\n\t\n\n\tif (cfs_rq->", "4561": "< 0)\n\t\treturn;\n\n\tif (delta >", "4562": "< 0)\n\t\treturn;\n\n\top->", "4563": "< 0)\n\t\treturn;\n\n\tstats = mk_reply(rep_skb, TASKSTATS_TYPE_PID,\n\t\t\t task_pid_nr_ns(tsk, &init_pid_ns));\n\tif (!stats)\n\t\tgoto err;\n\n\tfill_stats(&init_user_ns, &init_pid_ns, tsk, stats);\n\n\t\n\tif (!is_thread_group || !group_dead)\n\t\tgoto send;\n\n\tstats = mk_reply(rep_skb, TASKSTATS_TYPE_TGID,\n\t\t\t task_tgid_nr_ns(tsk, &init_pid_ns));\n\tif (!stats)\n\t\tgoto err;\n\n\tmemcpy(stats, tsk->", "4564": "< 0)\n\t\trt_runtime = RUNTIME_INF;\n\n\treturn tg_set_rt_bandwidth(tg, rt_period, rt_runtime);\n}\n\nstatic long sched_group_rt_runtime(struct task_group *tg)\n{\n\tu64 rt_runtime_us;\n\n\tif (tg->", "4565": "< 0)\n\t\tseq_printf(m, \"<%p>", "4566": "< 0)\n\t\tseq_puts(m, \"  X \");\n\telse\n\t\tseq_printf(m, \"%3ld \", percent);\n\tseq_printf(m, \"%-30.30s %-20.20s %d\\n\", p->", "4567": "< 0)\n\t\tstutter = 0;\n\tif (stutter) {\n\t\tfirsterr = torture_stutter_init(stutter * HZ);\n\t\tif (firsterr)\n\t\t\tgoto unwind;\n\t}\n\tif (fqs_duration < 0)\n\t\tfqs_duration = 0;\n\tif (fqs_duration) {\n\t\t\n\t\tfirsterr = torture_create_kthread(rcu_torture_fqs, NULL,\n\t\t\t\t\t\t  fqs_task);\n\t\tif (firsterr)\n\t\t\tgoto unwind;\n\t}\n\tif (test_boost_interval < 1)\n\t\ttest_boost_interval = 1;\n\tif (test_boost_duration < 2)\n\t\ttest_boost_duration = 2;\n\tif ((test_boost == 1 && cur_ops->", "4568": "< 0)\n\t\ttrace_array_put(tr);\n\treturn ret;\n}\n\nstatic struct event_subsystem *\ncreate_new_subsystem(const char *name)\n{\n\tstruct event_subsystem *system;\n\n\t\n\tsystem = kmalloc(sizeof(*system), GFP_KERNEL);\n\tif (!system)\n\t\treturn NULL;\n\n\tsystem->", "4569": "< 0) \n\t\t\t\tcxt.nrealwriters_stress = num_online_cpus();\n\t\t\tcxt.nrealreaders_stress = cxt.nrealwriters_stress;\n\t\t}\n\n\t\tlock_is_read_held = 0;\n\t\tcxt.lrsa = kmalloc(sizeof(*cxt.lrsa) * cxt.nrealreaders_stress, GFP_KERNEL);\n\t\tif (cxt.lrsa == NULL) {\n\t\t\tVERBOSE_TOROUT_STRING(\"cxt.lrsa: Out of memory\");\n\t\t\tfirsterr = -ENOMEM;\n\t\t\tkfree(cxt.lwsa);\n\t\t\tgoto unwind;\n\t\t}\n\n\t\tfor (i = 0; i < cxt.nrealreaders_stress; i++) {\n\t\t\tcxt.lrsa[i].n_lock_fail = 0;\n\t\t\tcxt.lrsa[i].n_lock_acquired = 0;\n\t\t}\n\t}\n\tlock_torture_print_module_parms(cxt.cur_ops, \"Start of test\");\n\n\t\n\tif (onoff_interval >", "4570": "< 0) ? 'U' :\n\t\t(p->", "4571": "< 0) {\t\n\t\t((u8 *)get_rloc_data(dest))[0] = '\\0';\n\t\t*(u32 *)dest = make_data_rloc(0, get_rloc_offs(rloc));\n\t} else {\n\t\t*(u32 *)dest = make_data_rloc(ret, get_rloc_offs(rloc));\n\t}\n}\n\nstatic void FETCH_FUNC_NAME(memory, string_size)(struct pt_regs *regs,\n\t\t\t\t\t\t void *addr, void *dest)\n{\n\tint len;\n\tvoid __user *vaddr = (void __force __user *) addr;\n\n\tlen = strnlen_user(vaddr, MAX_STRING_SIZE);\n\n\tif (len == 0 || len >", "4572": "< 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tdo_print_state = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = check_cond_jmp_op(env, insn, &insn_idx);\n\t\t\t\tif (err)\n\t\t\t\t\treturn err;\n\t\t\t}\n\t\t} else if (class == BPF_LD) {\n\t\t\tu8 mode = BPF_MODE(insn->", "4573": "< 0) {\n\t\t\t\t\tmin_offline = delta;\n\t\t\t\t\tmax_offline = delta;\n\t\t\t\t}\n\t\t\t\tif (min_offline >", "4574": "< 0) {\n\t\t\t\tcnt = ret;\n\t\t\t\tgoto out;\n\t\t\t}\n\n\t\t\tret = register_ftrace_profiler();\n\t\t\tif (ret < 0) {\n\t\t\t\tcnt = ret;\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\tftrace_profile_enabled = 1;\n\t\t} else {\n\t\t\tftrace_profile_enabled = 0;\n\t\t\t\n\t\t\tunregister_ftrace_profiler();\n\t\t}\n\t}\n out:\n\tmutex_unlock(&ftrace_profile_lock);\n\n\t*ppos += cnt;\n\n\treturn cnt;\n}\n\nstatic ssize_t\nftrace_profile_read(struct file *filp, char __user *ubuf,\n\t\t     size_t cnt, loff_t *ppos)\n{\n\tchar buf[64];\t\t\n\tint r;\n\n\tr = sprintf(buf, \"%u\\n\", ftrace_profile_enabled);\n\treturn simple_read_from_buffer(ubuf, cnt, ppos, buf, r);\n}\n\nstatic const struct file_operations ftrace_profile_fops = {\n\t.open\t\t= tracing_open_generic,\n\t.read\t\t= ftrace_profile_read,\n\t.write\t\t= ftrace_profile_write,\n\t.llseek\t\t= default_llseek,\n};\n\n\nstatic struct tracer_stat function_stats __initdata = {\n\t.name\t\t= \"functions\",\n\t.stat_start\t= function_stat_start,\n\t.stat_next\t= function_stat_next,\n\t.stat_cmp\t= function_stat_cmp,\n\t.stat_headers\t= function_stat_headers,\n\t.stat_show\t= function_stat_show\n};\n\nstatic __init void ftrace_profile_tracefs(struct dentry *d_tracer)\n{\n\tstruct ftrace_profile_stat *stat;\n\tstruct dentry *entry;\n\tchar *name;\n\tint ret;\n\tint cpu;\n\n\tfor_each_possible_cpu(cpu) {\n\t\tstat = &per_cpu(ftrace_profile_stats, cpu);\n\n\t\t\n\t\tname = kmalloc(32, GFP_KERNEL);\n\t\tif (!name) {\n\t\t\t\n\t\t\tWARN(1,\n\t\t\t     \"Could not allocate stat file for cpu %d\\n\",\n\t\t\t     cpu);\n\t\t\treturn;\n\t\t}\n\t\tstat->", "4575": "< 0) {\n\t\t\t\n\t\t\tWARN_ON_ONCE(1);\n\t\t\ttr->", "4576": "< 0) {\n\t\t\t\n\t\t\tcontinue;\n\t\t}\n\n\t\tdp = doms[nslot];\n\n\t\tif (nslot == ndoms) {\n\t\t\tstatic int warnings = 10;\n\t\t\tif (warnings) {\n\t\t\t\tpr_warn(\"rebuild_sched_domains confused: nslot %d, ndoms %d, csn %d, i %d, apn %d\\n\",\n\t\t\t\t\tnslot, ndoms, csn, i, apn);\n\t\t\t\twarnings--;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcpumask_clear(dp);\n\t\tif (dattr)\n\t\t\t*(dattr + nslot) = SD_ATTR_INIT;\n\t\tfor (j = i; j < csn; j++) {\n\t\t\tstruct cpuset *b = csa[j];\n\n\t\t\tif (apn == b->", "4577": "< 0) {\n\t\t\t*len_sent = 0;\n\t\t\taudit_log_end(*ab);\n\t\t\t*ab = audit_log_start(context, GFP_KERNEL, AUDIT_EXECVE);\n\t\t\tif (!*ab)\n\t\t\t\treturn 0;\n\t\t}\n\n\t\t\n\t\tif ((i == 0) && (too_long))\n\t\t\taudit_log_format(*ab, \" a%d_len=%zu\", arg_num,\n\t\t\t\t\t has_cntl ? 2*len : len);\n\n\t\t\n\t\tif (len >", "4578": "< 0) {\n\t\t\t*negp = true;\n\t\t\t*lvalp = (unsigned long)-val;\n\t\t} else {\n\t\t\t*negp = false;\n\t\t\t*lvalp = (unsigned long)val;\n\t\t}\n\t}\n\treturn 0;\n}\n\nstatic const char proc_wspace_sep[] = { ' ', '\\t', '\\n' };\n\nstatic int __do_proc_dointvec(void *tbl_data, struct ctl_table *table,\n\t\t  int write, void __user *buffer,\n\t\t  size_t *lenp, loff_t *ppos,\n\t\t  int (*conv)(bool *negp, unsigned long *lvalp, int *valp,\n\t\t\t      int write, void *data),\n\t\t  void *data)\n{\n\tint *i, vleft, first = 1, err = 0;\n\tunsigned long page = 0;\n\tsize_t left;\n\tchar *kbuf;\n\t\n\tif (!tbl_data || !table->", "4579": "< 0) {\n\t\t\t*negp = true;\n\t\t\tlval = (unsigned long)-val;\n\t\t} else {\n\t\t\t*negp = false;\n\t\t\tlval = (unsigned long)val;\n\t\t}\n\t\t*lvalp = jiffies_to_clock_t(lval);\n\t}\n\treturn 0;\n}\n\nstatic int do_proc_dointvec_ms_jiffies_conv(bool *negp, unsigned long *lvalp,\n\t\t\t\t\t    int *valp,\n\t\t\t\t\t    int write, void *data)\n{\n\tif (write) {\n\t\tunsigned long jif = msecs_to_jiffies(*negp ? -*lvalp : *lvalp);\n\n\t\tif (jif >", "4580": "< 0) {\n\t\t\t*negp = true;\n\t\t\tlval = (unsigned long)-val;\n\t\t} else {\n\t\t\t*negp = false;\n\t\t\tlval = (unsigned long)val;\n\t\t}\n\t\t*lvalp = jiffies_to_msecs(lval);\n\t}\n\treturn 0;\n}\n\n\nint proc_dointvec_jiffies(struct ctl_table *table, int write,\n\t\t\t  void __user *buffer, size_t *lenp, loff_t *ppos)\n{\n    return do_proc_dointvec(table,write,buffer,lenp,ppos,\n\t\t    \t    do_proc_dointvec_jiffies_conv,NULL);\n}\n\n\nint proc_dointvec_userhz_jiffies(struct ctl_table *table, int write,\n\t\t\t\t void __user *buffer, size_t *lenp, loff_t *ppos)\n{\n    return do_proc_dointvec(table,write,buffer,lenp,ppos,\n\t\t    \t    do_proc_dointvec_userhz_jiffies_conv,NULL);\n}\n\n\nint proc_dointvec_ms_jiffies(struct ctl_table *table, int write,\n\t\t\t     void __user *buffer, size_t *lenp, loff_t *ppos)\n{\n\treturn do_proc_dointvec(table, write, buffer, lenp, ppos,\n\t\t\t\tdo_proc_dointvec_ms_jiffies_conv, NULL);\n}\n\nstatic int proc_do_cad_pid(struct ctl_table *table, int write,\n\t\t\t   void __user *buffer, size_t *lenp, loff_t *ppos)\n{\n\tstruct pid *new_pid;\n\tpid_t tmp;\n\tint r;\n\n\ttmp = pid_vnr(cad_pid);\n\n\tr = __do_proc_dointvec(&tmp, table, write, buffer,\n\t\t\t       lenp, ppos, NULL, NULL);\n\tif (r || !write)\n\t\treturn r;\n\n\tnew_pid = find_get_pid(tmp);\n\tif (!new_pid)\n\t\treturn -ESRCH;\n\n\tput_pid(xchg(&cad_pid, new_pid));\n\treturn 0;\n}\n\n\nint proc_do_large_bitmap(struct ctl_table *table, int write,\n\t\t\t void __user *buffer, size_t *lenp, loff_t *ppos)\n{\n\tint err = 0;\n\tbool first = 1;\n\tsize_t left = *lenp;\n\tunsigned long bitmap_len = table->", "4581": "< 0) {\n\t\t\t*negp = true;\n\t\t\tlval = (unsigned long)-val;\n\t\t} else {\n\t\t\t*negp = false;\n\t\t\tlval = (unsigned long)val;\n\t\t}\n\t\t*lvalp = lval / HZ;\n\t}\n\treturn 0;\n}\n\nstatic int do_proc_dointvec_userhz_jiffies_conv(bool *negp, unsigned long *lvalp,\n\t\t\t\t\t\tint *valp,\n\t\t\t\t\t\tint write, void *data)\n{\n\tif (write) {\n\t\tif (USER_HZ < HZ && *lvalp >", "4582": "< 0) {\n\t\t\terror_packet(remcom_out_buffer, error);\n\t\t} else {\n\t\t\tstrcpy(remcom_out_buffer, \"OK\");\n\t\t\tkgdb_connected = 0;\n\t\t}\n\t\tput_packet(remcom_out_buffer);\n\t} else {\n\t\t\n\t\tdbg_remove_all_break();\n\t\tkgdb_connected = 0;\n\t}\n}\n\n\nstatic int gdb_cmd_reboot(struct kgdb_state *ks)\n{\n\t\n\tif (strcmp(remcom_in_buffer, \"R0\") == 0) {\n\t\tprintk(KERN_CRIT \"Executing emergency reboot\\n\");\n\t\tstrcpy(remcom_out_buffer, \"OK\");\n\t\tput_packet(remcom_out_buffer);\n\n\t\t\n\t\tmachine_emergency_restart();\n\t\tkgdb_connected = 0;\n\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n\nstatic void gdb_cmd_query(struct kgdb_state *ks)\n{\n\tstruct task_struct *g;\n\tstruct task_struct *p;\n\tunsigned char thref[BUF_THREAD_ID_SIZE];\n\tchar *ptr;\n\tint i;\n\tint cpu;\n\tint finished = 0;\n\n\tswitch (remcom_in_buffer[1]) {\n\tcase 's':\n\tcase 'f':\n\t\tif (memcmp(remcom_in_buffer + 2, \"ThreadInfo\", 10))\n\t\t\tbreak;\n\n\t\ti = 0;\n\t\tremcom_out_buffer[0] = 'm';\n\t\tptr = remcom_out_buffer + 1;\n\t\tif (remcom_in_buffer[1] == 'f') {\n\t\t\t\n\t\t\tfor_each_online_cpu(cpu) {\n\t\t\t\tks->", "4583": "< 0) {\n\t\t\tfree_ftrace_hash(new_hash);\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t\n\tftrace_hash_rec_disable_modify(ops, enable);\n\n\trcu_assign_pointer(*dst, new_hash);\n\n\tftrace_hash_rec_enable_modify(ops, enable);\n\n\treturn 0;\n}\n\nstatic bool hash_contains_ip(unsigned long ip,\n\t\t\t     struct ftrace_ops_hash *hash)\n{\n\t\n\treturn (ftrace_hash_empty(hash->", "4584": "< 0) {\n\t\t\tif (i >", "4585": "< 0) {\n\t\t\tif (ops->", "4586": "< 0) {\n\t\t\tif (rq->", "4587": "< 0) {\n\t\t\tlines += skip;\n\t\t\tskip = 0;\n\t\t\tkdb_printf(\"buffer only contains %d lines, first \"\n\t\t\t\t   \"%d lines printed\\n\", n, lines);\n\t\t}\n\t} else {\n\t\tlines = n;\n\t}\n\n\tif (skip >", "4588": "< 0) {\n\t\t\tpr_warn(\"Could not initialize trace point events/%s\\n\",\n\t\t\t\tname);\n\t\t\treturn -1;\n\t\t}\n\t}\n\ttrace_create_file(\"filter\", 0644, file->", "4589": "< 0) {\n\t\t\tprintk(KERN_ERR \"schedule_timeout: wrong timeout \"\n\t\t\t\t\"value %lx\\n\", timeout);\n\t\t\tdump_stack();\n\t\t\tcurrent->", "4590": "< 0) {\n\t\t\tret = -EFAULT;\n\t\t\tbreak;\n\t\t}\n\t\tbuffer[sizeof(buffer) - 1] = '\\0';\n\n\t\tkernel_restart(buffer);\n\t\tbreak;\n\n#ifdef CONFIG_KEXEC\n\tcase LINUX_REBOOT_CMD_KEXEC:\n\t\tret = kernel_kexec();\n\t\tbreak;\n#endif\n\n#ifdef CONFIG_HIBERNATION\n\tcase LINUX_REBOOT_CMD_SW_SUSPEND:\n\t\tret = hibernate();\n\t\tbreak;\n#endif\n\n\tdefault:\n\t\tret = -EINVAL;\n\t\tbreak;\n\t}\n\tmutex_unlock(&reboot_mutex);\n\treturn ret;\n}\n\nstatic void deferred_cad(struct work_struct *dummy)\n{\n\tkernel_restart(NULL);\n}\n\n\nvoid ctrl_alt_del(void)\n{\n\tstatic DECLARE_WORK(cad_work, deferred_cad);\n\n\tif (C_A_D)\n\t\tschedule_work(&cad_work);\n\telse\n\t\tkill_cad_pid(SIGINT, 1);\n}\n\nchar poweroff_cmd[POWEROFF_CMD_PATH_LEN] = \"/sbin/poweroff\";\nstatic const char reboot_cmd[] = \"/sbin/reboot\";\n\nstatic int run_cmd(const char *cmd)\n{\n\tchar **argv;\n\tstatic char *envp[] = {\n\t\t\"HOME=/\",\n\t\t\"PATH=/sbin:/bin:/usr/sbin:/usr/bin\",\n\t\tNULL\n\t};\n\tint ret;\n\targv = argv_split(GFP_KERNEL, cmd, NULL);\n\tif (argv) {\n\t\tret = call_usermodehelper(argv[0], argv, envp, UMH_WAIT_EXEC);\n\t\targv_free(argv);\n\t} else {\n\t\tret = -ENOMEM;\n\t}\n\n\treturn ret;\n}\n\nstatic int __orderly_reboot(void)\n{\n\tint ret;\n\n\tret = run_cmd(reboot_cmd);\n\n\tif (ret) {\n\t\tpr_warn(\"Failed to start orderly reboot: forcing the issue\\n\");\n\t\temergency_sync();\n\t\tkernel_restart(NULL);\n\t}\n\n\treturn ret;\n}\n\nstatic int __orderly_poweroff(bool force)\n{\n\tint ret;\n\n\tret = run_cmd(poweroff_cmd);\n\n\tif (ret && force) {\n\t\tpr_warn(\"Failed to start orderly shutdown: forcing the issue\\n\");\n\n\t\t\n\t\temergency_sync();\n\t\tkernel_power_off();\n\t}\n\n\treturn ret;\n}\n\nstatic bool poweroff_force;\n\nstatic void poweroff_work_func(struct work_struct *work)\n{\n\t__orderly_poweroff(poweroff_force);\n}\n\nstatic DECLARE_WORK(poweroff_work, poweroff_work_func);\n\n\nvoid orderly_poweroff(bool force)\n{\n\tif (force) \n\t\tpoweroff_force = true;\n\tschedule_work(&poweroff_work);\n}\nEXPORT_SYMBOL_GPL(orderly_poweroff);\n\nstatic void reboot_work_func(struct work_struct *work)\n{\n\t__orderly_reboot();\n}\n\nstatic DECLARE_WORK(reboot_work, reboot_work_func);\n\n\nvoid orderly_reboot(void)\n{\n\tschedule_work(&reboot_work);\n}\nEXPORT_SYMBOL_GPL(orderly_reboot);\n\nstatic int __init reboot_setup(char *str)\n{\n\tfor (;;) {\n\t\t\n\t\treboot_default = 0;\n\n\t\tswitch (*str) {\n\t\tcase 'w':\n\t\t\treboot_mode = REBOOT_WARM;\n\t\t\tbreak;\n\n\t\tcase 'c':\n\t\t\treboot_mode = REBOOT_COLD;\n\t\t\tbreak;\n\n\t\tcase 'h':\n\t\t\treboot_mode = REBOOT_HARD;\n\t\t\tbreak;\n\n\t\tcase 's':\n\t\t{\n\t\t\tint rc;\n\n\t\t\tif (isdigit(*(str+1))) {\n\t\t\t\trc = kstrtoint(str+1, 0, &reboot_cpu);\n\t\t\t\tif (rc)\n\t\t\t\t\treturn rc;\n\t\t\t} else if (str[1] == 'm' && str[2] == 'p' &&\n\t\t\t\t   isdigit(*(str+3))) {\n\t\t\t\trc = kstrtoint(str+3, 0, &reboot_cpu);\n\t\t\t\tif (rc)\n\t\t\t\t\treturn rc;\n\t\t\t} else\n\t\t\t\treboot_mode = REBOOT_SOFT;\n\t\t\tbreak;\n\t\t}\n\t\tcase 'g':\n\t\t\treboot_mode = REBOOT_GPIO;\n\t\t\tbreak;\n\n\t\tcase 'b':\n\t\tcase 'a':\n\t\tcase 'k':\n\t\tcase 't':\n\t\tcase 'e':\n\t\tcase 'p':\n\t\t\treboot_type = *str;\n\t\t\tbreak;\n\n\t\tcase 'f':\n\t\t\treboot_force = 1;\n\t\t\tbreak;\n\t\t}\n\n\t\tstr = strchr(str, ',');\n\t\tif (str)\n\t\t\tstr++;\n\t\telse\n\t\t\tbreak;\n\t}\n\treturn 1;\n}\n__setup(\"reboot=\", reboot_setup);\n\n\n#ifndef __KERNEL_RTMUTEX_COMMON_H\n#define __KERNEL_RTMUTEX_COMMON_H\n\n#include <linux/rtmutex.h>", "4591": "< 0) {\n\t\t\tret = -ENOSPC;\n\t\t\tif (ops->", "4592": "< 0) {\n\t\t\tspin_unlock_irq(&tsk->", "4593": "< 0) {\n\t\t\tvfree(info->", "4594": "< 0) {\n\t\t\n\t\t__unregister_ftrace_function(ops);\n\t\tftrace_start_up--;\n\t\tops->", "4595": "< 0) {\n\t\t\n\t\traw_spin_unlock(&cfs_b->", "4596": "< 0) {\n\t\t\n\t\tstruct completion *done = xchg(&create->", "4597": "< 0) {\n\t\t\n\t\tvec = base->", "4598": "< 0) {\n\t\tBUG_ON(err != -ECONNREFUSED); \n\t\tif (audit_pid) {\n\t\t\tpr_err(\"*NO* daemon at audit_pid=%d\\n\", audit_pid);\n\t\t\taudit_log_lost(\"auditd disappeared\");\n\t\t\taudit_pid = 0;\n\t\t\taudit_sock = NULL;\n\t\t}\n\t\t\n\t\taudit_hold_skb(skb);\n\t} else\n\t\t\n\t\tconsume_skb(skb);\n}\n\n\nstatic void kauditd_send_multicast_skb(struct sk_buff *skb, gfp_t gfp_mask)\n{\n\tstruct sk_buff\t\t*copy;\n\tstruct audit_net\t*aunet = net_generic(&init_net, audit_net_id);\n\tstruct sock\t\t*sock = aunet->", "4599": "< 0) {\n\t\tVERBOSE_TOROUT_STRING(\"rcu_torture_boost RT prio failed!\");\n\t\tn_rcu_torture_boost_rterror++;\n\t}\n\n\tinit_rcu_head_on_stack(&rbi.rcu);\n\t\n\tdo {\n\t\t\n\t\toldstarttime = boost_starttime;\n\t\twhile (ULONG_CMP_LT(jiffies, oldstarttime)) {\n\t\t\tschedule_timeout_interruptible(oldstarttime - jiffies);\n\t\t\tstutter_wait(\"rcu_torture_boost\");\n\t\t\tif (torture_must_stop())\n\t\t\t\tgoto checkwait;\n\t\t}\n\n\t\t\n\t\tendtime = oldstarttime + test_boost_duration * HZ;\n\t\tcall_rcu_time = jiffies;\n\t\twhile (ULONG_CMP_LT(jiffies, endtime)) {\n\t\t\t\n\t\t\tif (!rbi.inflight) {\n\t\t\t\tsmp_mb(); \n\t\t\t\trbi.inflight = 1;\n\t\t\t\tcall_rcu(&rbi.rcu, rcu_torture_boost_cb);\n\t\t\t\tif (jiffies - call_rcu_time >", "4600": "< 0) {\n\t\tasm(\"\" : \"+rm\"(nsec));\n\t\tnsec += NSEC_PER_SEC;\n\t\t--sec;\n\t}\n\tts->", "4601": "< 0) {\n\t\taudit_free_parent(parent);\n\t\treturn ERR_PTR(ret);\n\t}\n\n\treturn parent;\n}\n\n\nstatic struct audit_watch *audit_init_watch(char *path)\n{\n\tstruct audit_watch *watch;\n\n\twatch = kzalloc(sizeof(*watch), GFP_KERNEL);\n\tif (unlikely(!watch))\n\t\treturn ERR_PTR(-ENOMEM);\n\n\tINIT_LIST_HEAD(&watch->", "4602": "< 0) {\n\t\taudit_log_lost(\"out of memory in audit_expand\");\n\t\treturn 0;\n\t}\n\n\tskb->", "4603": "< 0) {\n\t\terror = new_timer_id;\n\t\tgoto out;\n\t}\n\n\tit_id_set = IT_ID_SET;\n\tnew_timer->", "4604": "< 0) {\n\t\tgoto fail_free_freeinit;\n\t}\n\tif (ret >", "4605": "< 0) {\n\t\tif (default_relax_domain_level < 0)\n\t\t\treturn;\n\t\telse\n\t\t\trequest = default_relax_domain_level;\n\t} else\n\t\trequest = attr->", "4606": "< 0) {\n\t\tkfree(cset);\n\t\treturn NULL;\n\t}\n\n\tatomic_set(&cset->", "4607": "< 0) {\n\t\tkfree(savedcmd);\n\t\tsavedcmd = NULL;\n\t\treturn -ENOMEM;\n\t}\n\n\treturn 0;\n}\n\nint is_tracing_stopped(void)\n{\n\treturn global_trace.stop_count;\n}\n\n\nvoid tracing_start(void)\n{\n\tstruct ring_buffer *buffer;\n\tunsigned long flags;\n\n\tif (tracing_disabled)\n\t\treturn;\n\n\traw_spin_lock_irqsave(&global_trace.start_lock, flags);\n\tif (--global_trace.stop_count) {\n\t\tif (global_trace.stop_count < 0) {\n\t\t\t\n\t\t\tWARN_ON_ONCE(1);\n\t\t\tglobal_trace.stop_count = 0;\n\t\t}\n\t\tgoto out;\n\t}\n\n\t\n\tarch_spin_lock(&global_trace.max_lock);\n\n\tbuffer = global_trace.trace_buffer.buffer;\n\tif (buffer)\n\t\tring_buffer_record_enable(buffer);\n\n#ifdef CONFIG_TRACER_MAX_TRACE\n\tbuffer = global_trace.max_buffer.buffer;\n\tif (buffer)\n\t\tring_buffer_record_enable(buffer);\n#endif\n\n\tarch_spin_unlock(&global_trace.max_lock);\n\n out:\n\traw_spin_unlock_irqrestore(&global_trace.start_lock, flags);\n}\n\nstatic void tracing_start_tr(struct trace_array *tr)\n{\n\tstruct ring_buffer *buffer;\n\tunsigned long flags;\n\n\tif (tracing_disabled)\n\t\treturn;\n\n\t\n\tif (tr->", "4608": "< 0) {\n\t\tkfree(stat->", "4609": "< 0) {\n\t\tkobject_put(cgroup_kobj);\n\t\treturn err;\n\t}\n\n\tproc_create(\"cgroups\", 0, NULL, &proc_cgroupstats_operations);\n\treturn 0;\n}\n\nstatic int __init cgroup_wq_init(void)\n{\n\t\n\tcgroup_destroy_wq = alloc_workqueue(\"cgroup_destroy\", 0, 1);\n\tBUG_ON(!cgroup_destroy_wq);\n\n\t\n\tcgroup_pidlist_destroy_wq = alloc_workqueue(\"cgroup_pidlist_destroy\",\n\t\t\t\t\t\t    0, 1);\n\tBUG_ON(!cgroup_pidlist_destroy_wq);\n\n\treturn 0;\n}\ncore_initcall(cgroup_wq_init);\n\n\nint proc_cgroup_show(struct seq_file *m, struct pid_namespace *ns,\n\t\t     struct pid *pid, struct task_struct *tsk)\n{\n\tchar *buf, *path;\n\tint retval;\n\tstruct cgroup_root *root;\n\n\tretval = -ENOMEM;\n\tbuf = kmalloc(PATH_MAX, GFP_KERNEL);\n\tif (!buf)\n\t\tgoto out;\n\n\tmutex_lock(&cgroup_mutex);\n\tdown_read(&css_set_rwsem);\n\n\tfor_each_root(root) {\n\t\tstruct cgroup_subsys *ss;\n\t\tstruct cgroup *cgrp;\n\t\tint ssid, count = 0;\n\n\t\tif (root == &cgrp_dfl_root && !cgrp_dfl_root_visible)\n\t\t\tcontinue;\n\n\t\tseq_printf(m, \"%d:\", root->", "4610": "< 0) {\n\t\tlist_del_rcu(&data->", "4611": "< 0) {\n\t\tnlmsg_free(rep_skb);\n\t\tgoto err;\n\t}\n\n\trc = send_reply(rep_skb, info);\n\nerr:\n\tfdput(f);\n\treturn rc;\n}\n\nstatic int cmd_attr_register_cpumask(struct genl_info *info)\n{\n\tcpumask_var_t mask;\n\tint rc;\n\n\tif (!alloc_cpumask_var(&mask, GFP_KERNEL))\n\t\treturn -ENOMEM;\n\trc = parse(info->", "4612": "< 0) {\n\t\tnsec = -nsec;\n\t\tdo_div(nsec, 1000000);\n\t\treturn -nsec;\n\t}\n\tdo_div(nsec, 1000000);\n\n\treturn nsec;\n}\n\nstatic unsigned long nsec_low(unsigned long long nsec)\n{\n\tif ((long long)nsec < 0)\n\t\tnsec = -nsec;\n\n\treturn do_div(nsec, 1000000);\n}\n\n#define SPLIT_NS(x) nsec_high(x), nsec_low(x)\n\n#ifdef CONFIG_FAIR_GROUP_SCHED\nstatic void print_cfs_group_stats(struct seq_file *m, int cpu, struct task_group *tg)\n{\n\tstruct sched_entity *se = tg->", "4613": "< 0) {\n\t\tpr_err(\"register_kprobe returned %d\\n\", ret);\n\t\treturn ret;\n\t}\n\n\tret = target(rand1);\n\tunregister_kprobe(&kp);\n\n\tif (preh_val == 0) {\n\t\tpr_err(\"kprobe pre_handler not called\\n\");\n\t\thandler_errors++;\n\t}\n\n\tif (posth_val == 0) {\n\t\tpr_err(\"kprobe post_handler not called\\n\");\n\t\thandler_errors++;\n\t}\n\n\treturn 0;\n}\n\nstatic noinline u32 kprobe_target2(u32 value)\n{\n\treturn (value / div_factor) + 1;\n}\n\nstatic int kp_pre_handler2(struct kprobe *p, struct pt_regs *regs)\n{\n\tpreh_val = (rand1 / div_factor) + 1;\n\treturn 0;\n}\n\nstatic void kp_post_handler2(struct kprobe *p, struct pt_regs *regs,\n\t\tunsigned long flags)\n{\n\tif (preh_val != (rand1 / div_factor) + 1) {\n\t\thandler_errors++;\n\t\tpr_err(\"incorrect value in post_handler2\\n\");\n\t}\n\tposth_val = preh_val + div_factor;\n}\n\nstatic struct kprobe kp2 = {\n\t.symbol_name = \"kprobe_target2\",\n\t.pre_handler = kp_pre_handler2,\n\t.post_handler = kp_post_handler2\n};\n\nstatic int test_kprobes(void)\n{\n\tint ret;\n\tstruct kprobe *kps[2] = {&kp, &kp2};\n\n\t\n\tkp.addr = NULL;\n\tkp.flags = 0;\n\tret = register_kprobes(kps, 2);\n\tif (ret < 0) {\n\t\tpr_err(\"register_kprobes returned %d\\n\", ret);\n\t\treturn ret;\n\t}\n\n\tpreh_val = 0;\n\tposth_val = 0;\n\tret = target(rand1);\n\n\tif (preh_val == 0) {\n\t\tpr_err(\"kprobe pre_handler not called\\n\");\n\t\thandler_errors++;\n\t}\n\n\tif (posth_val == 0) {\n\t\tpr_err(\"kprobe post_handler not called\\n\");\n\t\thandler_errors++;\n\t}\n\n\tpreh_val = 0;\n\tposth_val = 0;\n\tret = target2(rand1);\n\n\tif (preh_val == 0) {\n\t\tpr_err(\"kprobe pre_handler2 not called\\n\");\n\t\thandler_errors++;\n\t}\n\n\tif (posth_val == 0) {\n\t\tpr_err(\"kprobe post_handler2 not called\\n\");\n\t\thandler_errors++;\n\t}\n\n\tunregister_kprobes(kps, 2);\n\treturn 0;\n\n}\n\nstatic u32 j_kprobe_target(u32 value)\n{\n\tif (value != rand1) {\n\t\thandler_errors++;\n\t\tpr_err(\"incorrect value in jprobe handler\\n\");\n\t}\n\n\tjph_val = rand1;\n\tjprobe_return();\n\treturn 0;\n}\n\nstatic struct jprobe jp = {\n\t.entry\t\t= j_kprobe_target,\n\t.kp.symbol_name = \"kprobe_target\"\n};\n\nstatic int test_jprobe(void)\n{\n\tint ret;\n\n\tret = register_jprobe(&jp);\n\tif (ret < 0) {\n\t\tpr_err(\"register_jprobe returned %d\\n\", ret);\n\t\treturn ret;\n\t}\n\n\tret = target(rand1);\n\tunregister_jprobe(&jp);\n\tif (jph_val == 0) {\n\t\tpr_err(\"jprobe handler not called\\n\");\n\t\thandler_errors++;\n\t}\n\n\treturn 0;\n}\n\nstatic struct jprobe jp2 = {\n\t.entry          = j_kprobe_target,\n\t.kp.symbol_name = \"kprobe_target2\"\n};\n\nstatic int test_jprobes(void)\n{\n\tint ret;\n\tstruct jprobe *jps[2] = {&jp, &jp2};\n\n\t\n\tjp.kp.addr = NULL;\n\tjp.kp.flags = 0;\n\tret = register_jprobes(jps, 2);\n\tif (ret < 0) {\n\t\tpr_err(\"register_jprobes returned %d\\n\", ret);\n\t\treturn ret;\n\t}\n\n\tjph_val = 0;\n\tret = target(rand1);\n\tif (jph_val == 0) {\n\t\tpr_err(\"jprobe handler not called\\n\");\n\t\thandler_errors++;\n\t}\n\n\tjph_val = 0;\n\tret = target2(rand1);\n\tif (jph_val == 0) {\n\t\tpr_err(\"jprobe handler2 not called\\n\");\n\t\thandler_errors++;\n\t}\n\tunregister_jprobes(jps, 2);\n\n\treturn 0;\n}\n#ifdef CONFIG_KRETPROBES\nstatic u32 krph_val;\n\nstatic int entry_handler(struct kretprobe_instance *ri, struct pt_regs *regs)\n{\n\tkrph_val = (rand1 / div_factor);\n\treturn 0;\n}\n\nstatic int return_handler(struct kretprobe_instance *ri, struct pt_regs *regs)\n{\n\tunsigned long ret = regs_return_value(regs);\n\n\tif (ret != (rand1 / div_factor)) {\n\t\thandler_errors++;\n\t\tpr_err(\"incorrect value in kretprobe handler\\n\");\n\t}\n\tif (krph_val == 0) {\n\t\thandler_errors++;\n\t\tpr_err(\"call to kretprobe entry handler failed\\n\");\n\t}\n\n\tkrph_val = rand1;\n\treturn 0;\n}\n\nstatic struct kretprobe rp = {\n\t.handler\t= return_handler,\n\t.entry_handler  = entry_handler,\n\t.kp.symbol_name = \"kprobe_target\"\n};\n\nstatic int test_kretprobe(void)\n{\n\tint ret;\n\n\tret = register_kretprobe(&rp);\n\tif (ret < 0) {\n\t\tpr_err(\"register_kretprobe returned %d\\n\", ret);\n\t\treturn ret;\n\t}\n\n\tret = target(rand1);\n\tunregister_kretprobe(&rp);\n\tif (krph_val != rand1) {\n\t\tpr_err(\"kretprobe handler not called\\n\");\n\t\thandler_errors++;\n\t}\n\n\treturn 0;\n}\n\nstatic int return_handler2(struct kretprobe_instance *ri, struct pt_regs *regs)\n{\n\tunsigned long ret = regs_return_value(regs);\n\n\tif (ret != (rand1 / div_factor) + 1) {\n\t\thandler_errors++;\n\t\tpr_err(\"incorrect value in kretprobe handler2\\n\");\n\t}\n\tif (krph_val == 0) {\n\t\thandler_errors++;\n\t\tpr_err(\"call to kretprobe entry handler failed\\n\");\n\t}\n\n\tkrph_val = rand1;\n\treturn 0;\n}\n\nstatic struct kretprobe rp2 = {\n\t.handler\t= return_handler2,\n\t.entry_handler  = entry_handler,\n\t.kp.symbol_name = \"kprobe_target2\"\n};\n\nstatic int test_kretprobes(void)\n{\n\tint ret;\n\tstruct kretprobe *rps[2] = {&rp, &rp2};\n\n\t\n\trp.kp.addr = NULL;\n\trp.kp.flags = 0;\n\tret = register_kretprobes(rps, 2);\n\tif (ret < 0) {\n\t\tpr_err(\"register_kretprobe returned %d\\n\", ret);\n\t\treturn ret;\n\t}\n\n\tkrph_val = 0;\n\tret = target(rand1);\n\tif (krph_val != rand1) {\n\t\tpr_err(\"kretprobe handler not called\\n\");\n\t\thandler_errors++;\n\t}\n\n\tkrph_val = 0;\n\tret = target2(rand1);\n\tif (krph_val != rand1) {\n\t\tpr_err(\"kretprobe handler2 not called\\n\");\n\t\thandler_errors++;\n\t}\n\tunregister_kretprobes(rps, 2);\n\treturn 0;\n}\n#endif \n\nint init_test_probes(void)\n{\n\tint ret;\n\n\ttarget = kprobe_target;\n\ttarget2 = kprobe_target2;\n\n\tdo {\n\t\trand1 = prandom_u32();\n\t} while (rand1 <= div_factor);\n\n\tpr_info(\"started\\n\");\n\tnum_tests++;\n\tret = test_kprobe();\n\tif (ret < 0)\n\t\terrors++;\n\n\tnum_tests++;\n\tret = test_kprobes();\n\tif (ret < 0)\n\t\terrors++;\n\n\tnum_tests++;\n\tret = test_jprobe();\n\tif (ret < 0)\n\t\terrors++;\n\n\tnum_tests++;\n\tret = test_jprobes();\n\tif (ret < 0)\n\t\terrors++;\n\n#ifdef CONFIG_KRETPROBES\n\tnum_tests++;\n\tret = test_kretprobe();\n\tif (ret < 0)\n\t\terrors++;\n\n\tnum_tests++;\n\tret = test_kretprobes();\n\tif (ret < 0)\n\t\terrors++;\n#endif \n\n\tif (errors)\n\t\tpr_err(\"BUG: %d out of %d tests failed\\n\", errors, num_tests);\n\telse if (handler_errors)\n\t\tpr_err(\"BUG: %d error(s) running handlers\\n\", handler_errors);\n\telse\n\t\tpr_info(\"passed successfully\\n\");\n\n\treturn 0;\n}\n\n\n#include <linux/string.h>", "4614": "< 0) {\n\t\tpr_warn(\"could not remove '%s' (not found)\\n\",\n\t\t\tgcov_info_filename(info));\n\t\treturn;\n\t}\n\tif (gcov_persist)\n\t\tsave_info(node, info);\n\t\n\tnode->", "4615": "< 0) {\n\t\tpr_warning(\"NOHZ: Incorrect nohz_full cpumask\\n\");\n\t\tfree_bootmem_cpumask_var(tick_nohz_full_mask);\n\t\treturn 1;\n\t}\n\ttick_nohz_full_running = true;\n\n\treturn 1;\n}\n__setup(\"nohz_full=\", tick_nohz_full_setup);\n\nstatic int tick_nohz_cpu_down_callback(struct notifier_block *nfb,\n\t\t\t\t\t\t unsigned long action,\n\t\t\t\t\t\t void *hcpu)\n{\n\tunsigned int cpu = (unsigned long)hcpu;\n\n\tswitch (action & ~CPU_TASKS_FROZEN) {\n\tcase CPU_DOWN_PREPARE:\n\t\t\n\t\tif (tick_nohz_full_running && tick_do_timer_cpu == cpu)\n\t\t\treturn NOTIFY_BAD;\n\t\tbreak;\n\t}\n\treturn NOTIFY_OK;\n}\n\nstatic int tick_nohz_init_all(void)\n{\n\tint err = -1;\n\n#ifdef CONFIG_NO_HZ_FULL_ALL\n\tif (!alloc_cpumask_var(&tick_nohz_full_mask, GFP_KERNEL)) {\n\t\tWARN(1, \"NO_HZ: Can't allocate full dynticks cpumask\\n\");\n\t\treturn err;\n\t}\n\terr = 0;\n\tcpumask_setall(tick_nohz_full_mask);\n\ttick_nohz_full_running = true;\n#endif\n\treturn err;\n}\n\nvoid __init tick_nohz_init(void)\n{\n\tint cpu;\n\n\tif (!tick_nohz_full_running) {\n\t\tif (tick_nohz_init_all() < 0)\n\t\t\treturn;\n\t}\n\n\tif (!alloc_cpumask_var(&housekeeping_mask, GFP_KERNEL)) {\n\t\tWARN(1, \"NO_HZ: Can't allocate not-full dynticks cpumask\\n\");\n\t\tcpumask_clear(tick_nohz_full_mask);\n\t\ttick_nohz_full_running = false;\n\t\treturn;\n\t}\n\n\t\n\tif (!arch_irq_work_has_interrupt()) {\n\t\tpr_warning(\"NO_HZ: Can't run full dynticks because arch doesn't \"\n\t\t\t   \"support irq work self-IPIs\\n\");\n\t\tcpumask_clear(tick_nohz_full_mask);\n\t\tcpumask_copy(housekeeping_mask, cpu_possible_mask);\n\t\ttick_nohz_full_running = false;\n\t\treturn;\n\t}\n\n\tcpu = smp_processor_id();\n\n\tif (cpumask_test_cpu(cpu, tick_nohz_full_mask)) {\n\t\tpr_warning(\"NO_HZ: Clearing %d from nohz_full range for timekeeping\\n\", cpu);\n\t\tcpumask_clear_cpu(cpu, tick_nohz_full_mask);\n\t}\n\n\tcpumask_andnot(housekeeping_mask,\n\t\t       cpu_possible_mask, tick_nohz_full_mask);\n\n\tfor_each_cpu(cpu, tick_nohz_full_mask)\n\t\tcontext_tracking_cpu_set(cpu);\n\n\tcpu_notifier(tick_nohz_cpu_down_callback, 0);\n\tpr_info(\"NO_HZ: Full dynticks CPUs: %*pbl.\\n\",\n\t\tcpumask_pr_args(tick_nohz_full_mask));\n}\n#endif\n\n\n#ifdef CONFIG_NO_HZ_COMMON\n\nstatic int tick_nohz_enabled __read_mostly  = 1;\nint tick_nohz_active  __read_mostly;\n\nstatic int __init setup_tick_nohz(char *str)\n{\n\tif (!strcmp(str, \"off\"))\n\t\ttick_nohz_enabled = 0;\n\telse if (!strcmp(str, \"on\"))\n\t\ttick_nohz_enabled = 1;\n\telse\n\t\treturn 0;\n\treturn 1;\n}\n\n__setup(\"nohz=\", setup_tick_nohz);\n\nint tick_nohz_tick_stopped(void)\n{\n\treturn __this_cpu_read(tick_cpu_sched.tick_stopped);\n}\n\n\nstatic void tick_nohz_update_jiffies(ktime_t now)\n{\n\tunsigned long flags;\n\n\t__this_cpu_write(tick_cpu_sched.idle_waketime, now);\n\n\tlocal_irq_save(flags);\n\ttick_do_update_jiffies64(now);\n\tlocal_irq_restore(flags);\n\n\ttouch_softlockup_watchdog();\n}\n\n\nstatic void\nupdate_ts_time_stats(int cpu, struct tick_sched *ts, ktime_t now, u64 *last_update_time)\n{\n\tktime_t delta;\n\n\tif (ts->", "4616": "< 0) {\n\t\tprintk(err_readtime, dev_name(&rtc->", "4617": "< 0) {\n\t\tprintk(err_wakealarm, dev_name(&rtc->", "4618": "< 0) {\n\t\tput_system(dir);\n\t\treturn -ENODEV;\n\t}\n\n\tret = tracing_open_generic(inode, filp);\n\tif (ret < 0) {\n\t\ttrace_array_put(tr);\n\t\tput_system(dir);\n\t}\n\n\treturn ret;\n}\n\nstatic int system_tr_open(struct inode *inode, struct file *filp)\n{\n\tstruct ftrace_subsystem_dir *dir;\n\tstruct trace_array *tr = inode->", "4619": "< 0) {\n\t\treset_on_fork = p->", "4620": "< 0) {\n\t\tret = -ENOMEM;\n\t\tgoto out_cancel_ref;\n\t}\n\n\tinit_cgroup_housekeeping(cgrp);\n\n\tcgrp->", "4621": "< 0) {\n\t\tsa->", "4622": "< 0) {\n\t\tsub_info->", "4623": "< 0) {\n\t\ttrace_array_put(tr);\n\t\tkfree(dir);\n\t\treturn ret;\n\t}\n\n\tfilp->", "4624": "< 0) {\n\t\ttrsp->", "4625": "< 0) ||\n\t    (max_depth && trace->", "4626": "< 0) || (cpu >", "4627": "< 0) || (info.si_signo == 0))\n\t\treturn ret;\n\n\tif (uru) {\n\t\t\n\t\tif (COMPAT_USE_64BIT_TIME)\n\t\t\tret = copy_to_user(uru, &ru, sizeof(ru));\n\t\telse\n\t\t\tret = put_compat_rusage(&ru, uru);\n\t\tif (ret)\n\t\t\treturn -EFAULT;\n\t}\n\n\tBUG_ON(info.si_code & __SI_MASK);\n\tinfo.si_code |= __SI_CHLD;\n\treturn copy_siginfo_to_user32(uinfo, &info);\n}\n\nstatic int compat_get_user_cpu_mask(compat_ulong_t __user *user_mask_ptr,\n\t\t\t\t    unsigned len, struct cpumask *new_mask)\n{\n\tunsigned long *k;\n\n\tif (len < cpumask_size())\n\t\tmemset(new_mask, 0, cpumask_size());\n\telse if (len >", "4628": "< 0))\n\t\tdelta = 0;\n\n\told_clock = scd->", "4629": "< 0))\n\t\tdelta = 0;\n\n\ttotal = sched_avg_period() + delta;\n\n\tused = div_u64(avg, total);\n\n\tif (likely(used < SCHED_CAPACITY_SCALE))\n\t\treturn SCHED_CAPACITY_SCALE - used;\n\n\treturn 1;\n}\n\nstatic void update_cpu_capacity(struct sched_domain *sd, int cpu)\n{\n\tunsigned long capacity = SCHED_CAPACITY_SCALE;\n\tstruct sched_group *sdg = sd->", "4630": "< 0))\n\t\treturn false;\n\n\tset_work_pool_and_clear_pending(&dwork->", "4631": "< 0))\n\t\treturn print_bfs_bug(ret);\n\n\tif (!check_prev_add_irq(curr, prev, next))\n\t\treturn 0;\n\n\t\n\tif (next->", "4632": "< 0))\n\t\treturn ret;\n\tret = register_event_command(&trigger_disable_cmd);\n\tif (WARN_ON(ret < 0))\n\t\tunregister_trigger_enable_disable_cmds();\n\n\treturn ret;\n}\n\nstatic __init int register_trigger_traceon_traceoff_cmds(void)\n{\n\tint ret;\n\n\tret = register_event_command(&trigger_traceon_cmd);\n\tif (WARN_ON(ret < 0))\n\t\treturn ret;\n\tret = register_event_command(&trigger_traceoff_cmd);\n\tif (WARN_ON(ret < 0))\n\t\tunregister_trigger_traceon_traceoff_cmds();\n\n\treturn ret;\n}\n\n__init int register_trigger_cmds(void)\n{\n\tregister_trigger_traceon_traceoff_cmds();\n\tregister_trigger_snapshot_cmd();\n\tregister_trigger_stacktrace_cmd();\n\tregister_trigger_enable_disable_cmds();\n\n\treturn 0;\n}\n\n#include <linux/sched.h>", "4633": "< 0))\n\t\treturn ret;\n\tret = register_ftrace_command(&event_disable_cmd);\n\tif (WARN_ON(ret < 0))\n\t\tunregister_ftrace_command(&event_enable_cmd);\n\treturn ret;\n}\n#else\nstatic inline int register_event_cmds(void) { return 0; }\n#endif \n\n\nstatic __init void\n__trace_early_add_event_dirs(struct trace_array *tr)\n{\n\tstruct ftrace_event_file *file;\n\tint ret;\n\n\n\tlist_for_each_entry(file, &tr->", "4634": "< 0))\n\t\treturn;\n\n\tif (cfs_rq->", "4635": "< 0)) \n\t\tatomic_inc(&cpu_hotplug.refcount);\n\n\tif (refcount <= 0 && waitqueue_active(&cpu_hotplug.wq))\n\t\twake_up(&cpu_hotplug.wq);\n\n\tcpuhp_lock_release();\n\n}\nEXPORT_SYMBOL_GPL(put_online_cpus);\n\n\nvoid cpu_hotplug_begin(void)\n{\n\tDEFINE_WAIT(wait);\n\n\tcpu_hotplug.active_writer = current;\n\tcpuhp_lock_acquire();\n\n\tfor (;;) {\n\t\tmutex_lock(&cpu_hotplug.lock);\n\t\tprepare_to_wait(&cpu_hotplug.wq, &wait, TASK_UNINTERRUPTIBLE);\n\t\tif (likely(!atomic_read(&cpu_hotplug.refcount)))\n\t\t\t\tbreak;\n\t\tmutex_unlock(&cpu_hotplug.lock);\n\t\tschedule();\n\t}\n\tfinish_wait(&cpu_hotplug.wq, &wait);\n}\n\nvoid cpu_hotplug_done(void)\n{\n\tcpu_hotplug.active_writer = NULL;\n\tmutex_unlock(&cpu_hotplug.lock);\n\tcpuhp_lock_release();\n}\n\n\nvoid cpu_hotplug_disable(void)\n{\n\tcpu_maps_update_begin();\n\tcpu_hotplug_disabled = 1;\n\tcpu_maps_update_done();\n}\n\nvoid cpu_hotplug_enable(void)\n{\n\tcpu_maps_update_begin();\n\tcpu_hotplug_disabled = 0;\n\tcpu_maps_update_done();\n}\n\n#endif\t\n\n\nint __ref register_cpu_notifier(struct notifier_block *nb)\n{\n\tint ret;\n\tcpu_maps_update_begin();\n\tret = raw_notifier_chain_register(&cpu_chain, nb);\n\tcpu_maps_update_done();\n\treturn ret;\n}\n\nint __ref __register_cpu_notifier(struct notifier_block *nb)\n{\n\treturn raw_notifier_chain_register(&cpu_chain, nb);\n}\n\nstatic int __cpu_notify(unsigned long val, void *v, int nr_to_call,\n\t\t\tint *nr_calls)\n{\n\tint ret;\n\n\tret = __raw_notifier_call_chain(&cpu_chain, val, v, nr_to_call,\n\t\t\t\t\tnr_calls);\n\n\treturn notifier_to_errno(ret);\n}\n\nstatic int cpu_notify(unsigned long val, void *v)\n{\n\treturn __cpu_notify(val, v, -1, NULL);\n}\n\n#ifdef CONFIG_HOTPLUG_CPU\n\nstatic void cpu_notify_nofail(unsigned long val, void *v)\n{\n\tBUG_ON(cpu_notify(val, v));\n}\nEXPORT_SYMBOL(register_cpu_notifier);\nEXPORT_SYMBOL(__register_cpu_notifier);\n\nvoid __ref unregister_cpu_notifier(struct notifier_block *nb)\n{\n\tcpu_maps_update_begin();\n\traw_notifier_chain_unregister(&cpu_chain, nb);\n\tcpu_maps_update_done();\n}\nEXPORT_SYMBOL(unregister_cpu_notifier);\n\nvoid __ref __unregister_cpu_notifier(struct notifier_block *nb)\n{\n\traw_notifier_chain_unregister(&cpu_chain, nb);\n}\nEXPORT_SYMBOL(__unregister_cpu_notifier);\n\n\nvoid clear_tasks_mm_cpumask(int cpu)\n{\n\tstruct task_struct *p;\n\n\t\n\tWARN_ON(cpu_online(cpu));\n\trcu_read_lock();\n\tfor_each_process(p) {\n\t\tstruct task_struct *t;\n\n\t\t\n\t\tt = find_lock_task_mm(p);\n\t\tif (!t)\n\t\t\tcontinue;\n\t\tcpumask_clear_cpu(cpu, mm_cpumask(t->", "4636": "< 0)) {\n\t\tWARN_ON_ONCE(1);\n\t\treturn -ETIME;\n\t}\n\n\tdev->", "4637": "< 0)) {\n\t\tpr_info(\"Failed to enable function tracer for event tests\\n\");\n\t\treturn;\n\t}\n\tpr_info(\"Running tests again, along with the function tracer\\n\");\n\tevent_trace_self_tests();\n\tunregister_ftrace_function(&trace_ops);\n}\n#else\nstatic __init void event_trace_self_test_with_function(void)\n{\n}\n#endif\n\nstatic __init int event_trace_self_tests_init(void)\n{\n\tif (!tracing_selftest_disabled) {\n\t\tevent_trace_self_tests();\n\t\tevent_trace_self_test_with_function();\n\t}\n\n\treturn 0;\n}\n\nlate_initcall(event_trace_self_tests_init);\n\n#endif\n\n\n\n\n#include <linux/mm.h>", "4638": "< 0)) {\n\t\tptr = &scd->", "4639": "< 0)) {\n\t\ts64 neg = -(s64)tk->", "4640": "< 0)) {\n\t\tstrcpy(comm, \"<XXX>", "4641": "< 0)) {\n\t\tts.tv_sec--;\n\t\trem += NSEC_PER_SEC;\n\t}\n\tts.tv_nsec = rem;\n\n\treturn ts;\n}\nEXPORT_SYMBOL(ns_to_timespec);\n\n\nstruct timeval ns_to_timeval(const s64 nsec)\n{\n\tstruct timespec ts = ns_to_timespec(nsec);\n\tstruct timeval tv;\n\n\ttv.tv_sec = ts.tv_sec;\n\ttv.tv_usec = (suseconds_t) ts.tv_nsec / 1000;\n\n\treturn tv;\n}\nEXPORT_SYMBOL(ns_to_timeval);\n\n#if BITS_PER_LONG == 32\n\nvoid set_normalized_timespec64(struct timespec64 *ts, time64_t sec, s64 nsec)\n{\n\twhile (nsec >", "4642": "< 0)) {\n\t\tts.tv_sec--;\n\t\trem += NSEC_PER_SEC;\n\t}\n\tts.tv_nsec = rem;\n\n\treturn ts;\n}\nEXPORT_SYMBOL(ns_to_timespec64);\n#endif\n\nunsigned long msecs_to_jiffies(const unsigned int m)\n{\n\t\n\tif ((int)m < 0)\n\t\treturn MAX_JIFFY_OFFSET;\n\n#if HZ <= MSEC_PER_SEC && !(MSEC_PER_SEC % HZ)\n\t\n\treturn (m + (MSEC_PER_SEC / HZ) - 1) / (MSEC_PER_SEC / HZ);\n#elif HZ >", "4643": "< 0)) ||\n\t    WARN_ON(!list_empty(&pool->", "4644": "< 0)))\n\t\treturn;\n#endif\n\t__preempt_count_add(val);\n#ifdef CONFIG_DEBUG_PREEMPT\n\t\n\tDEBUG_LOCKS_WARN_ON((preempt_count() & PREEMPT_MASK) >", "4645": "< 0));\n\n\t\n\tmark_work_canceling(work);\n\tlocal_irq_restore(flags);\n\n\tflush_work(work);\n\tclear_work_data(work);\n\n\t\n\tsmp_mb();\n\tif (waitqueue_active(&cancel_waitq))\n\t\t__wake_up(&cancel_waitq, TASK_NORMAL, 1, work);\n\n\treturn ret;\n}\n\n\nbool cancel_work_sync(struct work_struct *work)\n{\n\treturn __cancel_work_timer(work, false);\n}\nEXPORT_SYMBOL_GPL(cancel_work_sync);\n\n\nbool flush_delayed_work(struct delayed_work *dwork)\n{\n\tlocal_irq_disable();\n\tif (del_timer_sync(&dwork->", "4646": "< 0);\t\n\t\ttrace_module_put(module, _RET_IP_);\n\t\tpreempt_enable();\n\t}\n}\nEXPORT_SYMBOL(module_put);\n\n#else \nstatic inline void print_unload_info(struct seq_file *m, struct module *mod)\n{\n\t\n\tseq_puts(m, \" - -\");\n}\n\nstatic inline void module_unload_free(struct module *mod)\n{\n}\n\nint ref_module(struct module *a, struct module *b)\n{\n\treturn strong_try_module_get(b);\n}\nEXPORT_SYMBOL_GPL(ref_module);\n\nstatic inline int module_unload_init(struct module *mod)\n{\n\treturn 0;\n}\n#endif \n\nstatic size_t module_flags_taint(struct module *mod, char *buf)\n{\n\tsize_t l = 0;\n\n\tif (mod->", "4647": "< 0);\n\t\t\tif (pwq->", "4648": "< 0);\n\t\t\treturn;  \n\t\t}\n\t}\n\n\t\n\tj = jiffies;\n\tACCESS_ONCE(rdtp->", "4649": "< 0);\n\t\tif (rdtp->", "4650": "< 0);\n\t\t} else {\n\t\t\tcgroup_init_subsys(ss, false);\n\t\t}\n\n\t\tlist_add_tail(&init_css_set.e_cset_node[ssid],\n\t\t\t      &cgrp_dfl_root.cgrp.e_csets[ssid]);\n\n\t\t\n\t\tif (ss->", "4651": "< 0);\n\tif (oldval & DYNTICK_TASK_NEST_MASK) {\n\t\trdtp->", "4652": "< 0);\n\tif (onoff_holdoff >", "4653": "< 0);\n\tif (rdtp->", "4654": "< 0);\n\tif (ret)\n\t\t\n\t\tret = atomic_add_unless(&mod->", "4655": "< 0);\n\t}\n\n\t\n\tinit_css_set.subsys[ss->", "4656": "< 0);\n\t}\n}\n\n#ifdef CONFIG_GENERIC_IDLE_POLL_SETUP\nstatic int __init cpu_idle_poll_setup(char *__unused)\n{\n\tcpu_idle_force_poll = 1;\n\treturn 1;\n}\n__setup(\"nohlt\", cpu_idle_poll_setup);\n\nstatic int __init cpu_idle_nopoll_setup(char *__unused)\n{\n\tcpu_idle_force_poll = 0;\n\treturn 1;\n}\n__setup(\"hlt\", cpu_idle_nopoll_setup);\n#endif\n\nstatic inline int cpu_idle_poll(void)\n{\n\trcu_idle_enter();\n\ttrace_cpu_idle_rcuidle(0, smp_processor_id());\n\tlocal_irq_enable();\n\twhile (!tif_need_resched() &&\n\t\t(cpu_idle_force_poll || tick_check_broadcast_expired()))\n\t\tcpu_relax();\n\ttrace_cpu_idle_rcuidle(PWR_EVENT_EXIT, smp_processor_id());\n\trcu_idle_exit();\n\treturn 1;\n}\n\n\nvoid __weak arch_cpu_idle_prepare(void) { }\nvoid __weak arch_cpu_idle_enter(void) { }\nvoid __weak arch_cpu_idle_exit(void) { }\nvoid __weak arch_cpu_idle_dead(void) { }\nvoid __weak arch_cpu_idle(void)\n{\n\tcpu_idle_force_poll = 1;\n\tlocal_irq_enable();\n}\n\n\nstatic void cpuidle_idle_call(void)\n{\n\tstruct cpuidle_device *dev = __this_cpu_read(cpuidle_devices);\n\tstruct cpuidle_driver *drv = cpuidle_get_cpu_driver(dev);\n\tint next_state, entered_state;\n\tbool reflect;\n\n\t\n\tif (need_resched()) {\n\t\tlocal_irq_enable();\n\t\treturn;\n\t}\n\n\t\n\tstop_critical_timings();\n\n\t\n\trcu_idle_enter();\n\n\tif (cpuidle_not_available(drv, dev))\n\t\tgoto use_default;\n\n\t\n\tif (idle_should_freeze()) {\n\t\tentered_state = cpuidle_enter_freeze(drv, dev);\n\t\tif (entered_state >", "4657": "< 0);\n\n\t\n\tftrace_hash_ipmodify_disable(ops);\n\tftrace_hash_rec_disable(ops, 1);\n\n\tops->", "4658": "< 0);\n\n\t\n\tif (!(atomic_read(&rdtp->", "4659": "< 0);\n\n\treturn ret;\n}\n#else\nstatic __init int register_trigger_snapshot_cmd(void) { return 0; }\n#endif \n\n#ifdef CONFIG_STACKTRACE\n\n#define STACK_SKIP 3\n\nstatic void\nstacktrace_trigger(struct event_trigger_data *data)\n{\n\ttrace_dump_stack(STACK_SKIP);\n}\n\nstatic void\nstacktrace_count_trigger(struct event_trigger_data *data)\n{\n\tif (!data->", "4660": "< 0);\n\n\treturn ret;\n}\n#else\nstatic __init int register_trigger_stacktrace_cmd(void) { return 0; }\n#endif \n\nstatic __init void unregister_trigger_traceon_traceoff_cmds(void)\n{\n\tunregister_event_command(&trigger_traceon_cmd);\n\tunregister_event_command(&trigger_traceoff_cmd);\n}\n\n\n#define ENABLE_EVENT_STR\t\"enable_event\"\n#define DISABLE_EVENT_STR\t\"disable_event\"\n\nstruct enable_trigger_data {\n\tstruct ftrace_event_file\t*file;\n\tbool\t\t\t\tenable;\n};\n\nstatic void\nevent_enable_trigger(struct event_trigger_data *data)\n{\n\tstruct enable_trigger_data *enable_data = data->", "4661": "< 0);\n\n\treturn ret;\n}\nEXPORT_SYMBOL_GPL(tracing_alloc_snapshot);\n\n\nvoid tracing_snapshot_alloc(void)\n{\n\tint ret;\n\n\tret = tracing_alloc_snapshot();\n\tif (ret < 0)\n\t\treturn;\n\n\ttracing_snapshot();\n}\nEXPORT_SYMBOL_GPL(tracing_snapshot_alloc);\n#else\nvoid tracing_snapshot(void)\n{\n\tWARN_ONCE(1, \"Snapshot feature not enabled, but internal snapshot used\");\n}\nEXPORT_SYMBOL_GPL(tracing_snapshot);\nint tracing_alloc_snapshot(void)\n{\n\tWARN_ONCE(1, \"Snapshot feature not enabled, but snapshot allocation used\");\n\treturn -ENODEV;\n}\nEXPORT_SYMBOL_GPL(tracing_alloc_snapshot);\nvoid tracing_snapshot_alloc(void)\n{\n\t\n\ttracing_snapshot();\n}\nEXPORT_SYMBOL_GPL(tracing_snapshot_alloc);\n#endif \n\nstatic void tracer_tracing_off(struct trace_array *tr)\n{\n\tif (tr->", "4662": "< 0);\n\n\tspin_lock_irq(&pool->", "4663": "< 0);\n}\n\n\nstatic int workqueue_cpu_up_callback(struct notifier_block *nfb,\n\t\t\t\t\t       unsigned long action,\n\t\t\t\t\t       void *hcpu)\n{\n\tint cpu = (unsigned long)hcpu;\n\tstruct worker_pool *pool;\n\tstruct workqueue_struct *wq;\n\tint pi;\n\n\tswitch (action & ~CPU_TASKS_FROZEN) {\n\tcase CPU_UP_PREPARE:\n\t\tfor_each_cpu_worker_pool(pool, cpu) {\n\t\t\tif (pool->", "4664": "< 0);\n}\nEXPORT_SYMBOL(down_trylock);\n\n\nint down_timeout(struct semaphore *sem, long timeout)\n{\n\tunsigned long flags;\n\tint result = 0;\n\n\traw_spin_lock_irqsave(&sem->", "4665": "< 0,\n\t\t     \"jump label: negative count!\\n\");\n\t\treturn;\n\t}\n\n\tif (rate_limit) {\n\t\tatomic_inc(&key->", "4666": "< 0, \"Failed to arm kprobe-ftrace at %p (%d)\\n\", p->", "4667": "< 0, \"Failed to disarm kprobe-ftrace at %p (%d)\\n\", p->", "4668": "< 0, \"Failed to init kprobe-ftrace (%d)\\n\", ret);\n\t}\n}\n\n\nstatic void disarm_kprobe_ftrace(struct kprobe *p)\n{\n\tint ret;\n\n\tkprobe_ftrace_enabled--;\n\tif (kprobe_ftrace_enabled == 0) {\n\t\tret = unregister_ftrace_function(&kprobe_ftrace_ops);\n\t\tWARN(ret < 0, \"Failed to init kprobe-ftrace (%d)\\n\", ret);\n\t}\n\tret = ftrace_set_filter_ip(&kprobe_ftrace_ops,\n\t\t\t   (unsigned long)p->", "4669": "< 0;\n}\n\n\nstatic inline bool\ndl_entity_preempt(struct sched_dl_entity *a, struct sched_dl_entity *b)\n{\n\treturn dl_time_before(a->", "4670": "< 0;\n}\n\nstatic void update_min_vruntime(struct cfs_rq *cfs_rq)\n{\n\tu64 vruntime = cfs_rq->", "4671": "< 0x10000 ? 4 : 8;\n\tint depth;\n\n\tfor (depth = 0, p = r; depth < MAX_IORES_LEVEL; depth++, p = p->", "4672": "< 1 << (TVR_BITS + 2 * TVN_BITS)) {\n\t\tint i = (expires >", "4673": "< 1 << (TVR_BITS + 3 * TVN_BITS)) {\n\t\tint i = (expires >", "4674": "< 1 << (TVR_BITS + TVN_BITS)) {\n\t\tint i = (expires >", "4675": "< 1 || (act && sig_kernel_only(sig)))\n\t\treturn -EINVAL;\n\n\tk = &p->", "4676": "< 1 || max_active >", "4677": "< 1)\n\t\t\tse = second;\n\t}\n\n\t\n\tif (cfs_rq->", "4678": "< 1)\n\t\tdelta = 1;\n\tnow += delta;\n\tif (time_before(now, expires))\n\t\treturn now;\n\treturn expires;\n}\n\n\nunsigned long get_next_timer_interrupt(unsigned long now)\n{\n\tstruct tvec_base *base = __this_cpu_read(tvec_bases);\n\tunsigned long expires = now + NEXT_TIMER_MAX_DELTA;\n\n\t\n\tif (cpu_is_offline(smp_processor_id()))\n\t\treturn expires;\n\n\tspin_lock(&base->", "4679": "< 1)\n\t\treturn -EINVAL;\n\tdata = kmalloc(len, GFP_KERNEL);\n\tif (!data)\n\t\treturn -ENOMEM;\n\tnla_strlcpy(data, na, len);\n\tret = cpulist_parse(data, mask);\n\tkfree(data);\n\treturn ret;\n}\n\n#if defined(CONFIG_64BIT) && !defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)\n#define TASKSTATS_NEEDS_PADDING 1\n#endif\n\nstatic struct taskstats *mk_reply(struct sk_buff *skb, int type, u32 pid)\n{\n\tstruct nlattr *na, *ret;\n\tint aggr;\n\n\taggr = (type == TASKSTATS_TYPE_PID)\n\t\t\t? TASKSTATS_TYPE_AGGR_PID\n\t\t\t: TASKSTATS_TYPE_AGGR_TGID;\n\n\t\n#ifdef TASKSTATS_NEEDS_PADDING\n\tif (nla_put(skb, TASKSTATS_TYPE_NULL, 0, NULL) < 0)\n\t\tgoto err;\n#endif\n\tna = nla_nest_start(skb, aggr);\n\tif (!na)\n\t\tgoto err;\n\n\tif (nla_put(skb, type, sizeof(pid), &pid) < 0) {\n\t\tnla_nest_cancel(skb, na);\n\t\tgoto err;\n\t}\n\tret = nla_reserve(skb, TASKSTATS_TYPE_STATS, sizeof(struct taskstats));\n\tif (!ret) {\n\t\tnla_nest_cancel(skb, na);\n\t\tgoto err;\n\t}\n\tnla_nest_end(skb, na);\n\n\treturn nla_data(ret);\nerr:\n\treturn NULL;\n}\n\nstatic int cgroupstats_user_cmd(struct sk_buff *skb, struct genl_info *info)\n{\n\tint rc = 0;\n\tstruct sk_buff *rep_skb;\n\tstruct cgroupstats *stats;\n\tstruct nlattr *na;\n\tsize_t size;\n\tu32 fd;\n\tstruct fd f;\n\n\tna = info->", "4680": "< 1)\n\t\treturn -EINVAL;\n\telse if (ret < 2)\n\t\titers = DEFAULT_ITERATIONS;\n\n\tmutex_lock(&udelay_test_lock);\n\tudelay_test_usecs = usecs;\n\tudelay_test_iterations = iters;\n\tmutex_unlock(&udelay_test_lock);\n\n\treturn count;\n}\n\nstatic const struct file_operations udelay_test_debugfs_ops = {\n\t.owner = THIS_MODULE,\n\t.open = udelay_test_open,\n\t.read = seq_read,\n\t.write = udelay_test_write,\n\t.llseek = seq_lseek,\n\t.release = single_release,\n};\n\nstatic int __init udelay_test_init(void)\n{\n\tmutex_lock(&udelay_test_lock);\n\tudelay_test_debugfs_file = debugfs_create_file(DEBUGFS_FILENAME,\n\t\t\tS_IRUSR, NULL, NULL, &udelay_test_debugfs_ops);\n\tmutex_unlock(&udelay_test_lock);\n\n\treturn 0;\n}\n\nmodule_init(udelay_test_init);\n\nstatic void __exit udelay_test_exit(void)\n{\n\tmutex_lock(&udelay_test_lock);\n\tdebugfs_remove(udelay_test_debugfs_file);\n\tmutex_unlock(&udelay_test_lock);\n}\n\nmodule_exit(udelay_test_exit);\n\nMODULE_AUTHOR(\"David Riley <davidriley@chromium.org>", "4681": "< 1)\n\t\treturn -EINVAL;\n\n\tmemcpy(cmdbuf, buf, count);\n\tcmdbuf[count] = 0;\n\n\tif (sscanf(cmdbuf, \"%d:%d\", &op, &dat) != 2)\n\t\treturn -EINVAL;\n\n\tswitch (op) {\n\tcase RTTEST_SCHEDOT:\n\t\tschedpar.sched_priority = 0;\n\t\tret = sched_setscheduler(threads[tid], SCHED_NORMAL, &schedpar);\n\t\tif (ret)\n\t\t\treturn ret;\n\t\tset_user_nice(current, 0);\n\t\tbreak;\n\n\tcase RTTEST_SCHEDRT:\n\t\tschedpar.sched_priority = dat;\n\t\tret = sched_setscheduler(threads[tid], SCHED_FIFO, &schedpar);\n\t\tif (ret)\n\t\t\treturn ret;\n\t\tbreak;\n\n\tcase RTTEST_SIGNAL:\n\t\tsend_sig(SIGHUP, threads[tid], 0);\n\t\tbreak;\n\n\tdefault:\n\t\tif (td->", "4682": "< 1)\n\t\tse = cfs_rq->", "4683": "< 1) {\n\t\t\t\tj = 1;\n\t\t\t\tjiffies_till_next_fqs = 1;\n\t\t\t}\n\t\t}\n\n\t\t\n\t\trcu_gp_cleanup(rsp);\n\t}\n}\n\n\nstatic bool\nrcu_start_gp_advanced(struct rcu_state *rsp, struct rcu_node *rnp,\n\t\t      struct rcu_data *rdp)\n{\n\tif (!rsp->", "4684": "< 1) {\n\t\ts->", "4685": "< 1)) {\n\t\terr = -EINVAL;\n\t\tgoto exit;\n\t}\n\n\tif (count >", "4686": "< 1);\n\tput_cred(new);\n}\nEXPORT_SYMBOL(abort_creds);\n\n\nconst struct cred *override_creds(const struct cred *new)\n{\n\tconst struct cred *old = current->", "4687": "< 1);\n\n\tget_cred(new); \n\n\t\n\tif (!uid_eq(old->", "4688": "< 1);\n}\n\nstatic const struct fsnotify_ops audit_tree_ops = {\n\t.handle_event = audit_tree_handle_event,\n\t.freeing_mark = audit_tree_freeing_mark,\n};\n\nstatic int __init audit_tree_init(void)\n{\n\tint i;\n\n\taudit_tree_group = fsnotify_alloc_group(&audit_tree_ops);\n\tif (IS_ERR(audit_tree_group))\n\t\taudit_panic(\"cannot initialize fsnotify group for rectree watches\");\n\n\tfor (i = 0; i < HASH_SIZE; i++)\n\t\tINIT_LIST_HEAD(&chunk_hash_heads[i]);\n\n\treturn 0;\n}\n__initcall(audit_tree_init);\n\n#include <linux/bpf.h>", "4689": "< 10 &&\n\t\t    (local_softirq_pending() & SOFTIRQ_STOP_IDLE_MASK)) {\n\t\t\tpr_warn(\"NOHZ: local_softirq_pending %02x\\n\",\n\t\t\t\t(unsigned int) local_softirq_pending());\n\t\t\tratelimit++;\n\t\t}\n\t\treturn false;\n\t}\n\n\tif (tick_nohz_full_enabled()) {\n\t\t\n\t\tif (tick_do_timer_cpu == cpu)\n\t\t\treturn false;\n\t\t\n\t\tif (tick_do_timer_cpu == TICK_DO_TIMER_NONE)\n\t\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nstatic void __tick_nohz_idle_enter(struct tick_sched *ts)\n{\n\tktime_t now, expires;\n\tint cpu = smp_processor_id();\n\n\tnow = tick_nohz_start_idle(ts);\n\n\tif (can_stop_idle_tick(cpu, ts)) {\n\t\tint was_stopped = ts->", "4690": "< 10 && j <= nr_irqs; ++prec)\n\t\t\tj *= 10;\n\n\t\tseq_printf(p, \"%*s\", prec + 8, \"\");\n\t\tfor_each_online_cpu(j)\n\t\t\tseq_printf(p, \"CPU%-8d\", j);\n\t\tseq_putc(p, '\\n');\n\t}\n\n\tirq_lock_sparse();\n\tdesc = irq_to_desc(i);\n\tif (!desc)\n\t\tgoto outsparse;\n\n\traw_spin_lock_irqsave(&desc->", "4691": "< 10 && last_seed != seed);\n\n\t\tstd = seed;\n\t}\n\n\tscnprintf(bm_str, BENCHMARK_EVENT_STRLEN,\n\t\t  \"last=%llu first=%llu max=%llu min=%llu avg=%u std=%d std^2=%lld\",\n\t\t  bm_last, bm_first, bm_max, bm_min, avg, std, stddev);\n\n\tbm_std = std;\n\tbm_avg = avg;\n\tbm_stddev = stddev;\n}\n\nstatic int benchmark_event_kthread(void *arg)\n{\n\t\n\tmsleep(100);\n\n\twhile (!kthread_should_stop()) {\n\n\t\ttrace_do_benchmark();\n\n\t\t\n\t\tcond_resched();\n\t}\n\n\treturn 0;\n}\n\n\nvoid trace_benchmark_reg(void)\n{\n\tbm_event_thread = kthread_run(benchmark_event_kthread,\n\t\t\t\t      NULL, \"event_benchmark\");\n\tWARN_ON(!bm_event_thread);\n}\n\n\nvoid trace_benchmark_unreg(void)\n{\n\tif (!bm_event_thread)\n\t\treturn;\n\n\tkthread_stop(bm_event_thread);\n\n\tstrcpy(bm_str, \"START\");\n\tbm_total = 0;\n\tbm_totalsq = 0;\n\tbm_last = 0;\n\tbm_max = 0;\n\tbm_min = 0;\n\tbm_cnt = 0;\n\t\n\tbm_first = 0;\n\tbm_std = 0;\n\tbm_avg = 0;\n\tbm_stddev = 0;\n}\n\n#include <linux/proc_fs.h>", "4692": "< 10) {\n\t\t\tudelay(trycount * num_online_cpus());\n\t\t} else {\n\t\t\tput_online_cpus();\n\t\t\twait_rcu_gp(call_rcu);\n\t\t\treturn;\n\t\t}\n\t}\n\tif (ULONG_CMP_LT(snap, ACCESS_ONCE(sync_rcu_preempt_exp_count))) {\n\t\tput_online_cpus();\n\t\tgoto unlock_mb_ret; \n\t}\n\n\t\n\tsynchronize_sched_expedited();\n\n\t\n\trcu_for_each_leaf_node(rsp, rnp)\n\t\tsync_rcu_preempt_exp_init1(rsp, rnp);\n\trcu_for_each_leaf_node(rsp, rnp)\n\t\tsync_rcu_preempt_exp_init2(rsp, rnp);\n\n\tput_online_cpus();\n\n\t\n\trnp = rcu_get_root(rsp);\n\twait_event(sync_rcu_preempt_exp_wq,\n\t\t   sync_rcu_preempt_exp_done(rnp));\n\n\t\n\tsmp_mb(); \n\tACCESS_ONCE(sync_rcu_preempt_exp_count) =\n\t\t\t\t\tsync_rcu_preempt_exp_count + 1;\nunlock_mb_ret:\n\tmutex_unlock(&sync_rcu_preempt_exp_mutex);\nmb_ret:\n\tsmp_mb(); \n}\nEXPORT_SYMBOL_GPL(synchronize_rcu_expedited);\n\n\nvoid rcu_barrier(void)\n{\n\t_rcu_barrier(&rcu_preempt_state);\n}\nEXPORT_SYMBOL_GPL(rcu_barrier);\n\n\nstatic void __init __rcu_init_preempt(void)\n{\n\trcu_init_one(&rcu_preempt_state, &rcu_preempt_data);\n}\n\n\nvoid exit_rcu(void)\n{\n\tstruct task_struct *t = current;\n\n\tif (likely(list_empty(&current->", "4693": "< 10) {\n\t\t\tudelay(trycount * num_online_cpus());\n\t\t} else {\n\t\t\twait_rcu_gp(call_rcu_sched);\n\t\t\tatomic_long_inc(&rsp->", "4694": "< 100000))\n\t\treturn;\n\n\tdesc->", "4695": "< 10; spincnt++) {\n\t\ttrace_rcu_utilization(TPS(\"Start CPU kthread@rcu_wait\"));\n\t\tlocal_bh_disable();\n\t\t*statusp = RCU_KTHREAD_RUNNING;\n\t\tthis_cpu_inc(rcu_cpu_kthread_loops);\n\t\tlocal_irq_disable();\n\t\twork = *workp;\n\t\t*workp = 0;\n\t\tlocal_irq_enable();\n\t\tif (work)\n\t\t\trcu_kthread_do_work();\n\t\tlocal_bh_enable();\n\t\tif (*workp == 0) {\n\t\t\ttrace_rcu_utilization(TPS(\"End CPU kthread@rcu_wait\"));\n\t\t\t*statusp = RCU_KTHREAD_WAITING;\n\t\t\treturn;\n\t\t}\n\t}\n\t*statusp = RCU_KTHREAD_YIELDING;\n\ttrace_rcu_utilization(TPS(\"Start CPU kthread@rcu_yield\"));\n\tschedule_timeout_interruptible(2);\n\ttrace_rcu_utilization(TPS(\"End CPU kthread@rcu_yield\"));\n\t*statusp = RCU_KTHREAD_WAITING;\n}\n\n\nstatic void rcu_boost_kthread_setaffinity(struct rcu_node *rnp, int outgoingcpu)\n{\n\tstruct task_struct *t = rnp->", "4696": "< 128 || log_size >", "4697": "< 16 && !(desc->", "4698": "< 16 && !env->", "4699": "< 16; i++) {\n\t\t\tunsigned char insn;\n\n\t\t\tif (get_user(insn, (unsigned char *)(regs->", "4700": "< 2 && rq->", "4701": "< 2 ? 2 : trycount;\n\tif (!try_check_zero(sp, idx^1, trycount))\n\t\treturn; \n\n\t\n\trcu_batch_move(&sp->", "4702": "< 2 ||\n\t     curr->", "4703": "< 2 ||\n\t     rq->", "4704": "< 2)\n\t\tnr_pages = 2;\n\n\t\n#ifdef CONFIG_HOTPLUG_CPU\n\tcpu_notifier_register_begin();\n\tcpumask_copy(buffer->", "4705": "< 2)\n\t\treturn 0;\n\n\tif (!irq)\n\t\treturn 1;\n\n\t\n\taction = desc->", "4706": "< 2)\n\t\treturn KDB_ARGCOUNT;\n\n\tnextarg = 1;\n\tdiag = kdbgetaddrarg(argc, argv, &nextarg, &addr, &offset, NULL);\n\tif (diag)\n\t\treturn diag;\n\n\tif (nextarg >", "4707": "< 2) {\n\t\tpr_info(\"Probe point is not specified.\\n\");\n\t\treturn -EINVAL;\n\t}\n\tif (isdigit(argv[1][0])) {\n\t\tif (is_return) {\n\t\t\tpr_info(\"Return probe point must be a symbol.\\n\");\n\t\t\treturn -EINVAL;\n\t\t}\n\t\t\n\t\tret = kstrtoul(&argv[1][0], 0, (unsigned long *)&addr);\n\t\tif (ret) {\n\t\t\tpr_info(\"Failed to parse address.\\n\");\n\t\t\treturn ret;\n\t\t}\n\t} else {\n\t\t\n\t\tsymbol = argv[1];\n\t\t\n\t\tret = traceprobe_split_symbol_offset(symbol, &offset);\n\t\tif (ret) {\n\t\t\tpr_info(\"Failed to parse symbol.\\n\");\n\t\t\treturn ret;\n\t\t}\n\t\tif (offset && is_return) {\n\t\t\tpr_info(\"Return probe must be used without offset.\\n\");\n\t\t\treturn -EINVAL;\n\t\t}\n\t}\n\targc -= 2; argv += 2;\n\n\t\n\tif (!event) {\n\t\t\n\t\tif (symbol)\n\t\t\tsnprintf(buf, MAX_EVENT_NAME_LEN, \"%c_%s_%ld\",\n\t\t\t\t is_return ? 'r' : 'p', symbol, offset);\n\t\telse\n\t\t\tsnprintf(buf, MAX_EVENT_NAME_LEN, \"%c_0x%p\",\n\t\t\t\t is_return ? 'r' : 'p', addr);\n\t\tevent = buf;\n\t}\n\ttk = alloc_trace_kprobe(group, event, addr, symbol, offset, argc,\n\t\t\t       is_return);\n\tif (IS_ERR(tk)) {\n\t\tpr_info(\"Failed to allocate trace_probe.(%d)\\n\",\n\t\t\t(int)PTR_ERR(tk));\n\t\treturn PTR_ERR(tk);\n\t}\n\n\t\n\tret = 0;\n\tfor (i = 0; i < argc && i < MAX_TRACE_ARGS; i++) {\n\t\tstruct probe_arg *parg = &tk->", "4708": "< 2) {\n\t\tpr_info(\"Probe point is not specified.\\n\");\n\t\treturn -EINVAL;\n\t}\n\tif (isdigit(argv[1][0])) {\n\t\tpr_info(\"probe point must be have a filename.\\n\");\n\t\treturn -EINVAL;\n\t}\n\targ = strchr(argv[1], ':');\n\tif (!arg) {\n\t\tret = -EINVAL;\n\t\tgoto fail_address_parse;\n\t}\n\n\t*arg++ = '\\0';\n\tfilename = argv[1];\n\tret = kern_path(filename, LOOKUP_FOLLOW, &path);\n\tif (ret)\n\t\tgoto fail_address_parse;\n\n\tinode = igrab(d_inode(path.dentry));\n\tpath_put(&path);\n\n\tif (!inode || !S_ISREG(inode->", "4709": "< 2);\n\tvalidate_creds(old);\n\tvalidate_creds(new);\n#endif\n\tBUG_ON(atomic_read(&new->", "4710": "< 256 ? HASH_SMALL : 0,\n\t\t\t\t\t       &futex_shift, NULL,\n\t\t\t\t\t       futex_hashsize, futex_hashsize);\n\tfutex_hashsize = 1UL << futex_shift;\n\n\tfutex_detect_cmpxchg();\n\n\tfor (i = 0; i < futex_hashsize; i++) {\n\t\tatomic_set(&futex_queues[i].waiters, 0);\n\t\tplist_head_init(&futex_queues[i].chain);\n\t\tspin_lock_init(&futex_queues[i].lock);\n\t}\n\n\treturn 0;\n}\n__initcall(futex_init);\n\n\n\n\n#include <linux/compiler.h>", "4711": "< 256)\n\t\t\treturn expires;\n\n\t\texpires_limit = expires + delta / 256;\n\t}\n\tmask = expires ^ expires_limit;\n\tif (mask == 0)\n\t\treturn expires;\n\n\tbit = find_last_bit(&mask, BITS_PER_LONG);\n\n\tmask = (1UL << bit) - 1;\n\n\texpires_limit = expires_limit & ~(mask);\n\n\treturn expires_limit;\n}\n\n\nint mod_timer(struct timer_list *timer, unsigned long expires)\n{\n\texpires = apply_slack(timer, expires);\n\n\t\n\tif (timer_pending(timer) && timer->", "4712": "< 2; i++) {\n\t\t\tunsigned long nr_faults = -1;\n\t\t\tint cpu_current, home_node;\n\n\t\t\tif (p->", "4713": "< 3) {\n\t\tACCESS_ONCE(rcu_cpu_stall_timeout) = 3;\n\t\ttill_stall_check = 3;\n\t} else if (till_stall_check >", "4714": "< 31; n++)\n\t\t\tif (audit_tree_match(p->", "4715": "< 32)\n\t\t\t\t\tmask |= 1 << i;\n\t\t}\n\t\traw_spin_unlock_irq(&desc->", "4716": "< 32) {\n\t\t\t\tif (cmdptr == cmd_head) {\n\t\t\t\t\tstrncpy(cmd_hist[cmd_head], cmd_cur,\n\t\t\t\t\t\tCMD_BUFLEN);\n\t\t\t\t\t*(cmd_hist[cmd_head] +\n\t\t\t\t\t  strlen(cmd_hist[cmd_head])-1) = '\\0';\n\t\t\t\t}\n\t\t\t\tif (!handle_ctrl_cmd(cmdbuf))\n\t\t\t\t\t*(cmd_cur+strlen(cmd_cur)-1) = '\\0';\n\t\t\t\tcmdbuf = cmd_cur;\n\t\t\t\tgoto do_full_getstr;\n\t\t\t} else {\n\t\t\t\tstrncpy(cmd_hist[cmd_head], cmd_cur,\n\t\t\t\t\tCMD_BUFLEN);\n\t\t\t}\n\n\t\t\tcmd_head = (cmd_head+1) % KDB_CMD_HISTORY_COUNT;\n\t\t\tif (cmd_head == cmd_tail)\n\t\t\t\tcmd_tail = (cmd_tail+1) % KDB_CMD_HISTORY_COUNT;\n\t\t}\n\n\t\tcmdptr = cmd_head;\n\t\tdiag = kdb_parse(cmdbuf);\n\t\tif (diag == KDB_NOTFOUND) {\n\t\t\tkdb_printf(\"Unknown kdb command: '%s'\\n\", cmdbuf);\n\t\t\tdiag = 0;\n\t\t}\n\t\tif (diag == KDB_CMD_GO\n\t\t || diag == KDB_CMD_CPU\n\t\t || diag == KDB_CMD_SS\n\t\t || diag == KDB_CMD_KGDB)\n\t\t\tbreak;\n\n\t\tif (diag)\n\t\t\tkdb_cmderror(diag);\n\t}\n\tKDB_DEBUG_STATE(\"kdb_local 9\", diag);\n\treturn diag;\n}\n\n\n\nvoid kdb_print_state(const char *text, int value)\n{\n\tkdb_printf(\"state: %s cpu %d value %d initial %d state %x\\n\",\n\t\t   text, raw_smp_processor_id(), value, kdb_initial_cpu,\n\t\t   kdb_state);\n}\n\n\nint kdb_main_loop(kdb_reason_t reason, kdb_reason_t reason2, int error,\n\t      kdb_dbtrap_t db_result, struct pt_regs *regs)\n{\n\tint result = 1;\n\t\n\twhile (1) {\n\t\t\n\t\tKDB_DEBUG_STATE(\"kdb_main_loop 1\", reason);\n\t\twhile (KDB_STATE(HOLD_CPU)) {\n\t\t\t\n\t\t\tif (!KDB_STATE(KDB))\n\t\t\t\tKDB_STATE_SET(KDB);\n\t\t}\n\n\t\tKDB_STATE_CLEAR(SUPPRESS);\n\t\tKDB_DEBUG_STATE(\"kdb_main_loop 2\", reason);\n\t\tif (KDB_STATE(LEAVING))\n\t\t\tbreak;\t\n\t\t\n\t\tresult = kdb_local(reason2, error, regs, db_result);\n\t\tKDB_DEBUG_STATE(\"kdb_main_loop 3\", result);\n\n\t\tif (result == KDB_CMD_CPU)\n\t\t\tbreak;\n\n\t\tif (result == KDB_CMD_SS) {\n\t\t\tKDB_STATE_SET(DOING_SS);\n\t\t\tbreak;\n\t\t}\n\n\t\tif (result == KDB_CMD_KGDB) {\n\t\t\tif (!KDB_STATE(DOING_KGDB))\n\t\t\t\tkdb_printf(\"Entering please attach debugger \"\n\t\t\t\t\t   \"or use $D#44+ or $3#33\\n\");\n\t\t\tbreak;\n\t\t}\n\t\tif (result && result != 1 && result != KDB_CMD_GO)\n\t\t\tkdb_printf(\"\\nUnexpected kdb_local return code %d\\n\",\n\t\t\t\t   result);\n\t\tKDB_DEBUG_STATE(\"kdb_main_loop 4\", reason);\n\t\tbreak;\n\t}\n\tif (KDB_STATE(DOING_SS))\n\t\tKDB_STATE_CLEAR(SSBPT);\n\n\t\n\tkdb_kbd_cleanup_state();\n\n\treturn result;\n}\n\n\nstatic int kdb_mdr(unsigned long addr, unsigned int count)\n{\n\tunsigned char c;\n\twhile (count--) {\n\t\tif (kdb_getarea(c, addr))\n\t\t\treturn 0;\n\t\tkdb_printf(\"%02x\", c);\n\t\taddr++;\n\t}\n\tkdb_printf(\"\\n\");\n\treturn 0;\n}\n\n\nstatic void kdb_md_line(const char *fmtstr, unsigned long addr,\n\t\t\tint symbolic, int nosect, int bytesperword,\n\t\t\tint num, int repeat, int phys)\n{\n\t\n\tkdb_symtab_t symtab;\n\tchar cbuf[32];\n\tchar *c = cbuf;\n\tint i;\n\tunsigned long word;\n\n\tmemset(cbuf, '\\0', sizeof(cbuf));\n\tif (phys)\n\t\tkdb_printf(\"phys \" kdb_machreg_fmt0 \" \", addr);\n\telse\n\t\tkdb_printf(kdb_machreg_fmt0 \" \", addr);\n\n\tfor (i = 0; i < num && repeat--; i++) {\n\t\tif (phys) {\n\t\t\tif (kdb_getphysword(&word, addr, bytesperword))\n\t\t\t\tbreak;\n\t\t} else if (kdb_getword(&word, addr, bytesperword))\n\t\t\tbreak;\n\t\tkdb_printf(fmtstr, word);\n\t\tif (symbolic)\n\t\t\tkdbnearsym(word, &symtab);\n\t\telse\n\t\t\tmemset(&symtab, 0, sizeof(symtab));\n\t\tif (symtab.sym_name) {\n\t\t\tkdb_symbol_print(word, &symtab, 0);\n\t\t\tif (!nosect) {\n\t\t\t\tkdb_printf(\"\\n\");\n\t\t\t\tkdb_printf(\"                       %s %s \"\n\t\t\t\t\t   kdb_machreg_fmt \" \"\n\t\t\t\t\t   kdb_machreg_fmt \" \"\n\t\t\t\t\t   kdb_machreg_fmt, symtab.mod_name,\n\t\t\t\t\t   symtab.sec_name, symtab.sec_start,\n\t\t\t\t\t   symtab.sym_start, symtab.sym_end);\n\t\t\t}\n\t\t\taddr += bytesperword;\n\t\t} else {\n\t\t\tunion {\n\t\t\t\tu64 word;\n\t\t\t\tunsigned char c[8];\n\t\t\t} wc;\n\t\t\tunsigned char *cp;\n#ifdef\t__BIG_ENDIAN\n\t\t\tcp = wc.c + 8 - bytesperword;\n#else\n\t\t\tcp = wc.c;\n#endif\n\t\t\twc.word = word;\n#define printable_char(c) \\\n\t({unsigned char __c = c; isascii(__c) && isprint(__c) ? __c : '.'; })\n\t\t\tswitch (bytesperword) {\n\t\t\tcase 8:\n\t\t\t\t*c++ = printable_char(*cp++);\n\t\t\t\t*c++ = printable_char(*cp++);\n\t\t\t\t*c++ = printable_char(*cp++);\n\t\t\t\t*c++ = printable_char(*cp++);\n\t\t\t\taddr += 4;\n\t\t\tcase 4:\n\t\t\t\t*c++ = printable_char(*cp++);\n\t\t\t\t*c++ = printable_char(*cp++);\n\t\t\t\taddr += 2;\n\t\t\tcase 2:\n\t\t\t\t*c++ = printable_char(*cp++);\n\t\t\t\taddr++;\n\t\t\tcase 1:\n\t\t\t\t*c++ = printable_char(*cp++);\n\t\t\t\taddr++;\n\t\t\t\tbreak;\n\t\t\t}\n#undef printable_char\n\t\t}\n\t}\n\tkdb_printf(\"%*s %s\\n\", (int)((num-i)*(2*bytesperword + 1)+1),\n\t\t   \" \", cbuf);\n}\n\nstatic int kdb_md(int argc, const char **argv)\n{\n\tstatic unsigned long last_addr;\n\tstatic int last_radix, last_bytesperword, last_repeat;\n\tint radix = 16, mdcount = 8, bytesperword = KDB_WORD_SIZE, repeat;\n\tint nosect = 0;\n\tchar fmtchar, fmtstr[64];\n\tunsigned long addr;\n\tunsigned long word;\n\tlong offset = 0;\n\tint symbolic = 0;\n\tint valid = 0;\n\tint phys = 0;\n\n\tkdbgetintenv(\"MDCOUNT\", &mdcount);\n\tkdbgetintenv(\"RADIX\", &radix);\n\tkdbgetintenv(\"BYTESPERWORD\", &bytesperword);\n\n\t\n\trepeat = mdcount * 16 / bytesperword;\n\n\tif (strcmp(argv[0], \"mdr\") == 0) {\n\t\tif (argc != 2)\n\t\t\treturn KDB_ARGCOUNT;\n\t\tvalid = 1;\n\t} else if (isdigit(argv[0][2])) {\n\t\tbytesperword = (int)(argv[0][2] - '0');\n\t\tif (bytesperword == 0) {\n\t\t\tbytesperword = last_bytesperword;\n\t\t\tif (bytesperword == 0)\n\t\t\t\tbytesperword = 4;\n\t\t}\n\t\tlast_bytesperword = bytesperword;\n\t\trepeat = mdcount * 16 / bytesperword;\n\t\tif (!argv[0][3])\n\t\t\tvalid = 1;\n\t\telse if (argv[0][3] == 'c' && argv[0][4]) {\n\t\t\tchar *p;\n\t\t\trepeat = simple_strtoul(argv[0] + 4, &p, 10);\n\t\t\tmdcount = ((repeat * bytesperword) + 15) / 16;\n\t\t\tvalid = !*p;\n\t\t}\n\t\tlast_repeat = repeat;\n\t} else if (strcmp(argv[0], \"md\") == 0)\n\t\tvalid = 1;\n\telse if (strcmp(argv[0], \"mds\") == 0)\n\t\tvalid = 1;\n\telse if (strcmp(argv[0], \"mdp\") == 0) {\n\t\tphys = valid = 1;\n\t}\n\tif (!valid)\n\t\treturn KDB_NOTFOUND;\n\n\tif (argc == 0) {\n\t\tif (last_addr == 0)\n\t\t\treturn KDB_ARGCOUNT;\n\t\taddr = last_addr;\n\t\tradix = last_radix;\n\t\tbytesperword = last_bytesperword;\n\t\trepeat = last_repeat;\n\t\tmdcount = ((repeat * bytesperword) + 15) / 16;\n\t}\n\n\tif (argc) {\n\t\tunsigned long val;\n\t\tint diag, nextarg = 1;\n\t\tdiag = kdbgetaddrarg(argc, argv, &nextarg, &addr,\n\t\t\t\t     &offset, NULL);\n\t\tif (diag)\n\t\t\treturn diag;\n\t\tif (argc >", "4717": "< 32; bin++) {\n\t\tif (sleep_time_bin[bin] == 0)\n\t\t\tcontinue;\n\t\tseq_printf(s, \"%10u - %-10u %4u\\n\",\n\t\t\tbin ? 1 << (bin - 1) : 0, 1 << bin,\n\t\t\t\tsleep_time_bin[bin]);\n\t}\n\treturn 0;\n}\n\nstatic int tk_debug_sleep_time_open(struct inode *inode, struct file *file)\n{\n\treturn single_open(file, tk_debug_show_sleep_time, NULL);\n}\n\nstatic const struct file_operations tk_debug_sleep_time_fops = {\n\t.open\t\t= tk_debug_sleep_time_open,\n\t.read\t\t= seq_read,\n\t.llseek\t\t= seq_lseek,\n\t.release\t= single_release,\n};\n\nstatic int __init tk_debug_sleep_time_init(void)\n{\n\tstruct dentry *d;\n\n\td = debugfs_create_file(\"sleep_time\", 0444, NULL, NULL,\n\t\t&tk_debug_sleep_time_fops);\n\tif (!d) {\n\t\tpr_err(\"Failed to create sleep_time debug file\\n\");\n\t\treturn -ENOMEM;\n\t}\n\n\treturn 0;\n}\nlate_initcall(tk_debug_sleep_time_init);\n\nvoid tk_debug_account_sleep_time(struct timespec64 *t)\n{\n\tsleep_time_bin[fls(t->", "4718": "< 34\n#define JIFFIES_SHIFT\t6\n#elif HZ < 67\n#define JIFFIES_SHIFT\t7\n#else\n#define JIFFIES_SHIFT\t8\n#endif\n\nstatic cycle_t jiffies_read(struct clocksource *cs)\n{\n\treturn (cycle_t) jiffies;\n}\n\nstatic struct clocksource clocksource_jiffies = {\n\t.name\t\t= \"jiffies\",\n\t.rating\t\t= 1, \n\t.read\t\t= jiffies_read,\n\t.mask\t\t= 0xffffffff, \n\t.mult\t\t= NSEC_PER_JIFFY << JIFFIES_SHIFT, \n\t.shift\t\t= JIFFIES_SHIFT,\n\t.max_cycles\t= 10,\n};\n\n__cacheline_aligned_in_smp DEFINE_SEQLOCK(jiffies_lock);\n\n#if (BITS_PER_LONG < 64)\nu64 get_jiffies_64(void)\n{\n\tunsigned long seq;\n\tu64 ret;\n\n\tdo {\n\t\tseq = read_seqbegin(&jiffies_lock);\n\t\tret = jiffies_64;\n\t} while (read_seqretry(&jiffies_lock, seq));\n\treturn ret;\n}\nEXPORT_SYMBOL(get_jiffies_64);\n#endif\n\nEXPORT_SYMBOL(jiffies);\n\nstatic int __init init_jiffies_clocksource(void)\n{\n\treturn __clocksource_register(&clocksource_jiffies);\n}\n\ncore_initcall(init_jiffies_clocksource);\n\nstruct clocksource * __init __weak clocksource_default_clock(void)\n{\n\treturn &clocksource_jiffies;\n}\n\nstruct clocksource refined_jiffies;\n\nint register_refined_jiffies(long cycles_per_second)\n{\n\tu64 nsec_per_tick, shift_hz;\n\tlong cycles_per_tick;\n\n\n\n\trefined_jiffies = clocksource_jiffies;\n\trefined_jiffies.name = \"refined-jiffies\";\n\trefined_jiffies.rating++;\n\n\t\n\tcycles_per_tick = (cycles_per_second + HZ/2)/HZ;\n\t\n\tshift_hz = (u64)cycles_per_second << 8;\n\tshift_hz += cycles_per_tick/2;\n\tdo_div(shift_hz, cycles_per_tick);\n\t\n\tnsec_per_tick = (u64)NSEC_PER_SEC << 8;\n\tnsec_per_tick += (u32)shift_hz/2;\n\tdo_div(nsec_per_tick, (u32)shift_hz);\n\n\trefined_jiffies.mult = ((u32)nsec_per_tick) << JIFFIES_SHIFT;\n\n\t__clocksource_register(&refined_jiffies);\n\treturn 0;\n}\n\n\n#define pr_fmt(fmt) \"genirq: \" fmt\n\n#include <linux/irq.h>", "4719": "< 3; i++) {\n\t\tdo {\n\t\t\tif (rb_is_head_page(cpu_buffer, page, page->", "4720": "< 3; loop++) {\n\t\tch = buffer[loop];\n\t\tchecksum += ch;\n\t\tdbg_io_ops->", "4721": "< 4096)\n\t\tgoto out;\n\tknt1 = debug_kmalloc(knt1_size, GFP_ATOMIC);\n\tif (!knt1) {\n\t\tkdb_printf(\"kdbnearsym: addr=0x%lx cannot kmalloc knt1\\n\",\n\t\t\t   addr);\n\t\tgoto out;\n\t}\n\tsymtab->", "4722": "< 4; array++) {\n\t\tstruct tvec *varp = varray[array];\n\n\t\tindex = slot = timer_jiffies & TVN_MASK;\n\t\tdo {\n\t\t\tlist_for_each_entry(nte, varp->", "4723": "< 5) {\n\t\t\tprintk(KERN_ERR\n\t\t\t       \"request_module: runaway loop modprobe %s\\n\",\n\t\t\t       module_name);\n\t\t\tkmod_loop_msg++;\n\t\t}\n\t\tatomic_dec(&kmod_concurrent);\n\t\treturn -ENOMEM;\n\t}\n\n\ttrace_module_request(module_name, wait, _RET_IP_);\n\n\tret = call_modprobe(module_name, wait ? UMH_WAIT_PROC : UMH_WAIT_EXEC);\n\n\tatomic_dec(&kmod_concurrent);\n\treturn ret;\n}\nEXPORT_SYMBOL(__request_module);\n#endif \n\nstatic void call_usermodehelper_freeinfo(struct subprocess_info *info)\n{\n\tif (info->", "4724": "< 5000)\n\t\tdev->", "4725": "< 64\n\tif (seconds >", "4726": "< 64\n\treturn rlim64 >", "4727": "< 7) {\n\t\tsize_t slen = min_t(size_t, sizeof(nsecs_str), 8UL - len);\n\n\t\tsnprintf(nsecs_str, slen, \"%03lu\", nsecs_rem);\n\t\ttrace_seq_printf(s, \".%s\", nsecs_str);\n\t\tlen += strlen(nsecs_str);\n\t}\n\n\ttrace_seq_puts(s, \" us \");\n\n\t\n\tfor (i = len; i < 7; i++)\n\t\ttrace_seq_putc(s, ' ');\n}\n\nstatic void\nprint_graph_duration(unsigned long long duration, struct trace_seq *s,\n\t\t     u32 flags)\n{\n\tif (!(flags & TRACE_GRAPH_PRINT_DURATION) ||\n\t    !(trace_flags & TRACE_ITER_CONTEXT_INFO))\n\t\treturn;\n\n\t\n\tswitch (flags & TRACE_GRAPH_PRINT_FILL_MASK) {\n\tcase FLAGS_FILL_FULL:\n\t\ttrace_seq_puts(s, \"              |  \");\n\t\treturn;\n\tcase FLAGS_FILL_START:\n\t\ttrace_seq_puts(s, \"  \");\n\t\treturn;\n\tcase FLAGS_FILL_END:\n\t\ttrace_seq_puts(s, \" |\");\n\t\treturn;\n\t}\n\n\t\n\tif (flags & TRACE_GRAPH_PRINT_OVERHEAD)\n\t\ttrace_seq_printf(s, \"%c \", trace_find_mark(duration));\n\telse\n\t\ttrace_seq_puts(s, \"  \");\n\n\ttrace_print_graph_duration(duration, s);\n\ttrace_seq_puts(s, \"|  \");\n}\n\n\nstatic enum print_line_t\nprint_graph_entry_leaf(struct trace_iterator *iter,\n\t\tstruct ftrace_graph_ent_entry *entry,\n\t\tstruct ftrace_graph_ret_entry *ret_entry,\n\t\tstruct trace_seq *s, u32 flags)\n{\n\tstruct fgraph_data *data = iter->", "4728": "< 7; i++) {\n\t\tpci_resource_to_user(dev, i, &dev->", "4729": "< 8 * USEC_PER_MSEC)\n\t\t\tsleep_usecs *= 2;\n\t}\n\n\tdo_gettimeofday(&end);\n\telapsed_msecs64 = timeval_to_ns(&end) - timeval_to_ns(&start);\n\tdo_div(elapsed_msecs64, NSEC_PER_MSEC);\n\telapsed_msecs = elapsed_msecs64;\n\n\tif (todo) {\n\t\tpr_cont(\"\\n\");\n\t\tpr_err(\"Freezing of tasks %s after %d.%03d seconds \"\n\t\t       \"(%d tasks refusing to freeze, wq_busy=%d):\\n\",\n\t\t       wakeup ? \"aborted\" : \"failed\",\n\t\t       elapsed_msecs / 1000, elapsed_msecs % 1000,\n\t\t       todo - wq_busy, wq_busy);\n\n\t\tif (!wakeup) {\n\t\t\tread_lock(&tasklist_lock);\n\t\t\tfor_each_process_thread(g, p) {\n\t\t\t\tif (p != current && !freezer_should_skip(p)\n\t\t\t\t    && freezing(p) && !frozen(p))\n\t\t\t\t\tsched_show_task(p);\n\t\t\t}\n\t\t\tread_unlock(&tasklist_lock);\n\t\t}\n\t} else {\n\t\tpr_cont(\"(elapsed %d.%03d seconds) \", elapsed_msecs / 1000,\n\t\t\telapsed_msecs % 1000);\n\t}\n\n\treturn todo ? -EBUSY : 0;\n}\n\n\nint freeze_processes(void)\n{\n\tint error;\n\n\terror = __usermodehelper_disable(UMH_FREEZING);\n\tif (error)\n\t\treturn error;\n\n\t\n\tcurrent->", "4730": "< ALARM_NUMTYPE; i++) {\n\t\tstruct alarm_base *base = &alarm_bases[i];\n\t\tstruct timerqueue_node *next;\n\t\tktime_t delta;\n\n\t\tspin_lock_irqsave(&base->", "4731": "< ALARM_NUMTYPE; i++) {\n\t\ttimerqueue_init_head(&alarm_bases[i].timerqueue);\n\t\tspin_lock_init(&alarm_bases[i].lock);\n\t}\n\n\terror = alarmtimer_rtc_interface_setup();\n\tif (error)\n\t\treturn error;\n\n\terror = platform_driver_register(&alarmtimer_driver);\n\tif (error)\n\t\tgoto out_if;\n\n\tpdev = platform_device_register_simple(\"alarmtimer\", -1, NULL, 0);\n\tif (IS_ERR(pdev)) {\n\t\terror = PTR_ERR(pdev);\n\t\tgoto out_drv;\n\t}\n\tws = wakeup_source_register(\"alarmtimer\");\n\treturn 0;\n\nout_drv:\n\tplatform_driver_unregister(&alarmtimer_driver);\nout_if:\n\talarmtimer_rtc_interface_remove();\n\treturn error;\n}\ndevice_initcall(alarmtimer_init);\n\n#include <linux/completion.h>", "4732": "< ARRAY_SIZE(arr); i++) {\n\t\tfor (s = arr[i].sym; s < arr[i].sym + arr[i].num; s++) {\n\t\t\tif (find_symbol(s->", "4733": "< ARRAY_SIZE(kdb_name_table); ++i) {\n\t\t\tif (kdb_name_table[i] &&\n\t\t\t    strcmp(kdb_name_table[i], knt1) == 0)\n\t\t\t\tbreak;\n\t\t}\n\t\tif (i >", "4734": "< ARRAY_SIZE(kdb_name_table); ++i) {\n\t\tif (kdb_name_table[i]) {\n\t\t\tdebug_kfree(kdb_name_table[i]);\n\t\t\tkdb_name_table[i] = NULL;\n\t\t}\n\t}\n}\n\nstatic char ks_namebuf[KSYM_NAME_LEN+1], ks_namebuf_prev[KSYM_NAME_LEN+1];\n\n\nint kallsyms_symbol_complete(char *prefix_name, int max_len)\n{\n\tloff_t pos = 0;\n\tint prefix_len = strlen(prefix_name), prev_len = 0;\n\tint i, number = 0;\n\tconst char *name;\n\n\twhile ((name = kdb_walk_kallsyms(&pos))) {\n\t\tif (strncmp(name, prefix_name, prefix_len) == 0) {\n\t\t\tstrcpy(ks_namebuf, name);\n\t\t\t\n\t\t\tif (++number == 1) {\n\t\t\t\tprev_len = min_t(int, max_len-1,\n\t\t\t\t\t\t strlen(ks_namebuf));\n\t\t\t\tmemcpy(ks_namebuf_prev, ks_namebuf, prev_len);\n\t\t\t\tks_namebuf_prev[prev_len] = '\\0';\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (i = 0; i < prev_len; i++) {\n\t\t\t\tif (ks_namebuf[i] != ks_namebuf_prev[i]) {\n\t\t\t\t\tprev_len = i;\n\t\t\t\t\tks_namebuf_prev[i] = '\\0';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (prev_len >", "4735": "< ARRAY_SIZE(mask_maps); i++) {\n\t\t\tif (strcasecmp(token, mask_maps[i].str) == 0) {\n\t\t\t\tmask |= mask_maps[i].mask;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (i == ARRAY_SIZE(mask_maps)) {\n\t\t\tmask = -EINVAL;\n\t\t\tbreak;\n\t\t}\n\t}\n\tkfree(buf);\n\n\treturn mask;\n}\n\nstatic ssize_t blk_trace_mask2str(char *buf, int mask)\n{\n\tint i;\n\tchar *p = buf;\n\n\tfor (i = 0; i < ARRAY_SIZE(mask_maps); i++) {\n\t\tif (mask & mask_maps[i].mask) {\n\t\t\tp += sprintf(p, \"%s%s\",\n\t\t\t\t    (p == buf) ? \"\" : \",\", mask_maps[i].str);\n\t\t}\n\t}\n\t*p++ = '\\n';\n\n\treturn p - buf;\n}\n\nstatic struct request_queue *blk_trace_get_queue(struct block_device *bdev)\n{\n\tif (bdev->", "4736": "< ARRAY_SIZE(masks); ++m) {\n\t\tfor (i = 0; i < info->", "4737": "< ARRAY_SIZE(offsets); i++) {\n\t\tu64 val = *(u64 *)((char *)prctl_map + offsets[i]);\n\n\t\tif ((unsigned long)val >", "4738": "< ARRAY_SIZE(reserved_field_names); i++)\n\t\tif (strcmp(reserved_field_names[i], name) == 0)\n\t\t\treturn 1;\n\n\tfor (i = 0; i < narg; i++)\n\t\tif (strcmp(args[i].name, name) == 0)\n\t\t\treturn 1;\n\n\treturn 0;\n}\n\nvoid traceprobe_update_arg(struct probe_arg *arg)\n{\n\tif (CHECK_FETCH_FUNCS(bitfield, arg->", "4739": "< ARRAY_SIZE(stats.bounces); i++)\n\t\t\tstats.bounces[i] += pcs->", "4740": "< ARRAY_SIZE(stats.contending_point); i++)\n\t\t\tstats.contending_point[i] += pcs->", "4741": "< ARRAY_SIZE(stats.contention_point); i++)\n\t\t\tstats.contention_point[i] += pcs->", "4742": "< ARRAY_SIZE(tnts); i++) {\n\t\t\tconst struct tnt *t = &tnts[i];\n\t\t\t*s++ = test_bit(t->", "4743": "< ARRAY_SIZE(torture_ops); i++)\n\t\t\tpr_alert(\" %s\", torture_ops[i]->", "4744": "< ARRAY_SIZE(torture_ops); i++) {\n\t\tcur_ops = torture_ops[i];\n\t\tif (strcmp(torture_type, cur_ops->", "4745": "< AUDIT_BITMASK_SIZE; i++)\n\t\t\tif (mask[i] & classes[class][i])\n\t\t\t\treturn 0;\n\t}\n\treturn 1;\n}\n\nstatic int audit_match_signal(struct audit_entry *entry)\n{\n\tstruct audit_field *arch = entry->", "4746": "< AUDIT_BITMASK_SIZE; i++)\n\t\tentry->", "4747": "< AUDIT_BITMASK_SIZE; i++)\n\t\tif (a->", "4748": "< AUDIT_BITMASK_SIZE; i++)\n\t\tnew->", "4749": "< AUDIT_BITMASK_SIZE; i++) data->", "4750": "< AUDIT_BITMASK_SIZE; j++)\n\t\t\t\tentry->", "4751": "< AUDIT_INODE_BUCKETS; h++) {\n\t\t\tlist = &audit_inode_hash[h];\n\t\t\tlist_for_each_entry(e, list, list)\n\t\t\t\tif (!audit_compare_rule(&entry->", "4752": "< AUDIT_INODE_BUCKETS; i++)\n\t\tINIT_LIST_HEAD(&audit_inode_hash[i]);\n\n\treturn 0;\n}\n__initcall(audit_init);\n\n\nstatic int __init audit_enable(char *str)\n{\n\taudit_default = !!simple_strtol(str, NULL, 0);\n\tif (!audit_default)\n\t\taudit_initialized = AUDIT_DISABLED;\n\n\tpr_info(\"%s\\n\", audit_default ?\n\t\t\"enabled (after initialization)\" : \"disabled (until reboot)\");\n\n\treturn 1;\n}\n__setup(\"audit=\", audit_enable);\n\n\nstatic int __init audit_backlog_limit_set(char *str)\n{\n\tu32 audit_backlog_limit_arg;\n\n\tpr_info(\"audit_backlog_limit: \");\n\tif (kstrtouint(str, 0, &audit_backlog_limit_arg)) {\n\t\tpr_cont(\"using default of %u, unable to parse %s\\n\",\n\t\t\taudit_backlog_limit, str);\n\t\treturn 1;\n\t}\n\n\taudit_backlog_limit = audit_backlog_limit_arg;\n\tpr_cont(\"%d\\n\", audit_backlog_limit);\n\n\treturn 1;\n}\n__setup(\"audit_backlog_limit=\", audit_backlog_limit_set);\n\nstatic void audit_buffer_free(struct audit_buffer *ab)\n{\n\tunsigned long flags;\n\n\tif (!ab)\n\t\treturn;\n\n\tif (ab->", "4753": "< AUDIT_NAMES) {\n\t\taname = &context->", "4754": "< AUDIT_NR_FILTERS; i++) {\n\t\tlist_for_each_entry_safe(r, n, &audit_rules_list[i], list) {\n\t\t\tint res = update_lsm_rule(r);\n\t\t\tif (!err)\n\t\t\t\terr = res;\n\t\t}\n\t}\n\tmutex_unlock(&audit_filter_mutex);\n\n\treturn err;\n}\n\n#include <linux/sched.h>", "4755": "< AUDIT_SYSCALL_CLASSES; i++) {\n\t\tint bit = AUDIT_BITMASK_SIZE * 32 - i - 1;\n\t\t__u32 *p = &entry->", "4756": "< Audit_bad && audit_ops[n] != op; n++)\n\t\t;\n\treturn n;\n}\n\n\nstatic int audit_field_valid(struct audit_entry *entry, struct audit_field *f)\n{\n\tswitch(f->", "4757": "< BITS_PER_PAGE)\n\t\t\treturn mk_pid(pid_ns, map, offset);\n\t}\n\treturn -1;\n}\n\nvoid put_pid(struct pid *pid)\n{\n\tstruct pid_namespace *ns;\n\n\tif (!pid)\n\t\treturn;\n\n\tns = pid->", "4758": "< BITS_TO_LONGS(bitmap_size); i++) {\n\t\tm = 0;\n\n\t\tfor (j = 0; j < sizeof(m)/sizeof(um); j++) {\n\t\t\t\n\t\t\tif (nr_compat_longs-- >", "4759": "< BPF_REG_SIZE; i++)\n\t\t\tstate->", "4760": "< BPF_REG_SIZE; i++) {\n\t\t\tif (slot_type[i] != STACK_SPILL) {\n\t\t\t\tverbose(\"corrupted spill memory\\n\");\n\t\t\t\treturn -EACCES;\n\t\t\t}\n\t\t}\n\n\t\tif (value_regno >", "4761": "< BUF_PAGE_SIZE * 2)\n\t\tsize = BUF_PAGE_SIZE * 2;\n\n\tnr_pages = DIV_ROUND_UP(size, BUF_PAGE_SIZE);\n\n\t\n\tif (atomic_read(&buffer->", "4762": "< BUF_PAGE_SIZE)\n\t\tmemset(&bpage->", "4763": "< CALLER_SAVED_REGS; i++) {\n\t\treg = regs + caller_saved[i];\n\t\treg->", "4764": "< CGROUP_SUBSYS_COUNT; (ssid)++)\t\\\n\t\tif (!((css) = cgroup_e_css(cgrp, cgroup_subsys[(ssid)]))) \\\n\t\t\t;\t\t\t\t\t\t\\\n\t\telse\n\n\n#define for_each_subsys(ss, ssid)\t\t\t\t\t\\\n\tfor ((ssid) = 0; (ssid) < CGROUP_SUBSYS_COUNT &&\t\t\\\n\t     (((ss) = cgroup_subsys[ssid]) || true); (ssid)++)\n\n\n#define for_each_root(root)\t\t\t\t\t\t\\\n\tlist_for_each_entry((root), &cgroup_roots, root_list)\n\n\n#define cgroup_for_each_live_child(child, cgrp)\t\t\t\t\\\n\tlist_for_each_entry((child), &(cgrp)->", "4765": "< CGROUP_SUBSYS_COUNT; (ssid)++)\t\\\n\t\tif (!((css) = rcu_dereference_check(\t\t\t\\\n\t\t\t\t(cgrp)->", "4766": "< CHAINHASH_SIZE; i++)\n\t\tINIT_LIST_HEAD(chainhash_table + i);\n\traw_local_irq_restore(flags);\n}\n\nstatic void zap_class(struct lock_class *class)\n{\n\tint i;\n\n\t\n\tfor (i = 0; i < nr_list_entries; i++) {\n\t\tif (list_entries[i].class == class)\n\t\t\tlist_del_rcu(&list_entries[i].entry);\n\t}\n\t\n\tlist_del_rcu(&class->", "4767": "< CLASSHASH_SIZE; i++)\n\t\tINIT_LIST_HEAD(classhash_table + i);\n\n\tfor (i = 0; i < CHAINHASH_SIZE; i++)\n\t\tINIT_LIST_HEAD(chainhash_table + i);\n\n\tlockdep_initialized = 1;\n}\n\nvoid __init lockdep_info(void)\n{\n\tprintk(\"Lock dependency validator: Copyright (c) 2006 Red Hat, Inc., Ingo Molnar\\n\");\n\n\tprintk(\"... MAX_LOCKDEP_SUBCLASSES:  %lu\\n\", MAX_LOCKDEP_SUBCLASSES);\n\tprintk(\"... MAX_LOCK_DEPTH:          %lu\\n\", MAX_LOCK_DEPTH);\n\tprintk(\"... MAX_LOCKDEP_KEYS:        %lu\\n\", MAX_LOCKDEP_KEYS);\n\tprintk(\"... CLASSHASH_SIZE:          %lu\\n\", CLASSHASH_SIZE);\n\tprintk(\"... MAX_LOCKDEP_ENTRIES:     %lu\\n\", MAX_LOCKDEP_ENTRIES);\n\tprintk(\"... MAX_LOCKDEP_CHAINS:      %lu\\n\", MAX_LOCKDEP_CHAINS);\n\tprintk(\"... CHAINHASH_SIZE:          %lu\\n\", CHAINHASH_SIZE);\n\n\tprintk(\" memory used by lock dependency info: %lu kB\\n\",\n\t\t(sizeof(struct lock_class) * MAX_LOCKDEP_KEYS +\n\t\tsizeof(struct list_head) * CLASSHASH_SIZE +\n\t\tsizeof(struct lock_list) * MAX_LOCKDEP_ENTRIES +\n\t\tsizeof(struct lock_chain) * MAX_LOCKDEP_CHAINS +\n\t\tsizeof(struct list_head) * CHAINHASH_SIZE\n#ifdef CONFIG_PROVE_LOCKING\n\t\t+ sizeof(struct circular_queue)\n#endif\n\t\t) / 1024\n\t\t);\n\n\tprintk(\" per task-struct memory footprint: %lu bytes\\n\",\n\t\tsizeof(struct held_lock) * MAX_LOCK_DEPTH);\n\n#ifdef CONFIG_DEBUG_LOCKDEP\n\tif (lockdep_init_error) {\n\t\tprintk(\"WARNING: lockdep init error! lock-%s was acquired\"\n\t\t\t\"before lockdep_init\\n\", lock_init_error);\n\t\tprintk(\"Call stack leading to lockdep invocation was:\\n\");\n\t\tprint_stack_trace(&lockdep_init_trace, 0);\n\t}\n#endif\n}\n\nstatic void\nprint_freed_lock_bug(struct task_struct *curr, const void *mem_from,\n\t\t     const void *mem_to, struct held_lock *hlock)\n{\n\tif (!debug_locks_off())\n\t\treturn;\n\tif (debug_locks_silent)\n\t\treturn;\n\n\tprintk(\"\\n\");\n\tprintk(\"=========================\\n\");\n\tprintk(\"[ BUG: held lock freed! ]\\n\");\n\tprint_kernel_ident();\n\tprintk(\"-------------------------\\n\");\n\tprintk(\"%s/%d is freeing memory %p-%p, with a lock still held there!\\n\",\n\t\tcurr->", "4768": "< CPU_LOAD_IDX_MAX; i++, scale += scale) {\n\t\tunsigned long old_load, new_load;\n\n\t\t\n\n\t\told_load = this_rq->", "4769": "< CPU_LOAD_IDX_MAX; j++)\n\t\t\trq->", "4770": "< CPU_MAX_IDLE_TYPES;\n\t\t\t\t\titype++) {\n\t\t\t\tseq_printf(seq, \" %u %u %u %u %u %u %u %u\",\n\t\t\t\t    sd->", "4771": "< DATA_CNT; i++) {\n\t\tstruct event_filter *filter = NULL;\n\t\tstruct test_filter_data_t *d = &test_filter_data[i];\n\t\tint err;\n\n\t\terr = create_filter(&event_ftrace_test_filter, d->", "4772": "< DBG_MAX_REG_NUM; i++) {\n\t\tdbg_get_reg(i, ptr + idx, regs);\n\t\tidx += dbg_reg_def[i].size;\n\t}\n}\n\nvoid gdb_regs_to_pt_regs(unsigned long *gdb_regs, struct pt_regs *regs)\n{\n\tint i;\n\tint idx = 0;\n\tchar *ptr = (char *)gdb_regs;\n\n\tfor (i = 0; i < DBG_MAX_REG_NUM; i++) {\n\t\tdbg_set_reg(i, ptr + idx, regs);\n\t\tidx += dbg_reg_def[i].size;\n\t}\n}\n#endif \n\n\nstatic int write_mem_msg(int binary)\n{\n\tchar *ptr = &remcom_in_buffer[1];\n\tunsigned long addr;\n\tunsigned long length;\n\tint err;\n\n\tif (kgdb_hex2long(&ptr, &addr) >", "4773": "< DBG_MAX_REG_NUM; i++) {\n\t\tif (strcmp(rname, dbg_reg_def[i].name) == 0) {\n\t\t\tdiag = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!diag) {\n\t\tswitch(dbg_reg_def[i].size * 8) {\n\t\tcase 8:\n\t\t\treg8 = reg64;\n\t\t\tdbg_set_reg(i, &reg8, kdb_current_regs);\n\t\t\tbreak;\n\t\tcase 16:\n\t\t\treg16 = reg64;\n\t\t\tdbg_set_reg(i, &reg16, kdb_current_regs);\n\t\t\tbreak;\n\t\tcase 32:\n\t\t\treg32 = reg64;\n\t\t\tdbg_set_reg(i, &reg32, kdb_current_regs);\n\t\t\tbreak;\n\t\tcase 64:\n\t\t\tdbg_set_reg(i, &reg64, kdb_current_regs);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn diag;\n#else\n\tkdb_printf(\"ERROR: Register set currently not implemented\\n\");\n    return 0;\n#endif\n}\n\n#if defined(CONFIG_MAGIC_SYSRQ)\n\nstatic int kdb_sr(int argc, const char **argv)\n{\n\tbool check_mask =\n\t    !kdb_check_flags(KDB_ENABLE_ALL, kdb_cmd_enabled, false);\n\n\tif (argc != 1)\n\t\treturn KDB_ARGCOUNT;\n\n\tkdb_trap_printk++;\n\t__handle_sysrq(*argv[1], check_mask);\n\tkdb_trap_printk--;\n\n\treturn 0;\n}\n#endif\t\n\n\nstatic int kdb_ef(int argc, const char **argv)\n{\n\tint diag;\n\tunsigned long addr;\n\tlong offset;\n\tint nextarg;\n\n\tif (argc != 1)\n\t\treturn KDB_ARGCOUNT;\n\n\tnextarg = 1;\n\tdiag = kdbgetaddrarg(argc, argv, &nextarg, &addr, &offset, NULL);\n\tif (diag)\n\t\treturn diag;\n\tshow_regs((struct pt_regs *)addr);\n\treturn 0;\n}\n\n#if defined(CONFIG_MODULES)\n\nstatic int kdb_lsmod(int argc, const char **argv)\n{\n\tstruct module *mod;\n\n\tif (argc != 0)\n\t\treturn KDB_ARGCOUNT;\n\n\tkdb_printf(\"Module                  Size  modstruct     Used by\\n\");\n\tlist_for_each_entry(mod, kdb_modules, list) {\n\t\tif (mod->", "4774": "< DBG_MAX_REG_NUM; i++) {\n\t\trsize = dbg_reg_def[i].size * 2;\n\t\tif (rsize >", "4775": "< FETCH_MTD_END; i++)\n\t\tif (type->", "4776": "< FTRACE_RETFUNC_DEPTH)\n\t\t\tcpu_data->", "4777": "< FTRACE_RETFUNC_DEPTH) {\n\t\t\tif (cpu_data->", "4778": "< FTRACE_RETSTACK_ALLOC_SIZE; i++) {\n\t\tret_stack_list[i] = kmalloc(FTRACE_RETFUNC_DEPTH\n\t\t\t\t\t* sizeof(struct ftrace_ret_stack),\n\t\t\t\t\tGFP_KERNEL);\n\t\tif (!ret_stack_list[i]) {\n\t\t\tstart = 0;\n\t\t\tend = i;\n\t\t\tret = -ENOMEM;\n\t\t\tgoto free;\n\t\t}\n\t}\n\n\tread_lock_irqsave(&tasklist_lock, flags);\n\tdo_each_thread(g, t) {\n\t\tif (start == end) {\n\t\t\tret = -EAGAIN;\n\t\t\tgoto unlock;\n\t\t}\n\n\t\tif (t->", "4779": "< FTRACE_STACK_ENTRIES; i++) {\n\t\tunsigned long ip = entry->", "4780": "< GCOV_COUNTERS; ct_idx++) {\n\t\t\tif (!counter_active(info, ct_idx))\n\t\t\t\tcontinue;\n\n\t\t\t\n\t\t\tpos += store_gcov_u32(buffer, pos,\n\t\t\t\t\t      GCOV_TAG_FOR_COUNTER(ct_idx));\n\t\t\tpos += store_gcov_u32(buffer, pos, ci_ptr->", "4781": "< GCOV_COUNTERS; ct_idx++) {\n\t\t\tif (!counter_active(info, ct_idx))\n\t\t\t\tcontinue;\n\n\t\t\tmemset(ci_ptr->", "4782": "< GCOV_COUNTERS; ct_idx++) {\n\t\t\tif (!counter_active(src, ct_idx))\n\t\t\t\tcontinue;\n\n\t\t\tfor (val_idx = 0; val_idx < sci_ptr->", "4783": "< GCOV_COUNTERS; i++) {\n\t\tif (counter_active(info, i))\n\t\t\tresult++;\n\t}\n\treturn result;\n}\n\n\nvoid gcov_info_reset(struct gcov_info *info)\n{\n\tstruct gcov_ctr_info *ci_ptr;\n\tunsigned int fi_idx;\n\tunsigned int ct_idx;\n\n\tfor (fi_idx = 0; fi_idx < info->", "4784": "< GCOV_COUNTERS; i++) {\n\t\tif (counter_active(info, i))\n\t\t\tresult++;\n\t}\n\treturn result;\n}\n\n\nvoid gcov_info_reset(struct gcov_info *info)\n{\n\tunsigned int active = num_counter_active(info);\n\tunsigned int i;\n\n\tfor (i = 0; i < active; i++) {\n\t\tmemset(info->", "4785": "< GCOV_COUNTERS; i++) {\n\t\tif (counter_active(iter->", "4786": "< HZ/4 && !force_up) \n\t\tj = j - rem;\n\telse \n\t\tj = j - rem + HZ;\n\n\t\n\tj -= cpu * 3;\n\n\t\n\treturn time_is_after_jiffies(j) ? j : original;\n}\n\n\nunsigned long __round_jiffies(unsigned long j, int cpu)\n{\n\treturn round_jiffies_common(j, cpu, false);\n}\nEXPORT_SYMBOL_GPL(__round_jiffies);\n\n\nunsigned long __round_jiffies_relative(unsigned long j, int cpu)\n{\n\tunsigned long j0 = jiffies;\n\n\t\n\treturn round_jiffies_common(j + j0, cpu, false) - j0;\n}\nEXPORT_SYMBOL_GPL(__round_jiffies_relative);\n\n\nunsigned long round_jiffies(unsigned long j)\n{\n\treturn round_jiffies_common(j, raw_smp_processor_id(), false);\n}\nEXPORT_SYMBOL_GPL(round_jiffies);\n\n\nunsigned long round_jiffies_relative(unsigned long j)\n{\n\treturn __round_jiffies_relative(j, raw_smp_processor_id());\n}\nEXPORT_SYMBOL_GPL(round_jiffies_relative);\n\n\nunsigned long __round_jiffies_up(unsigned long j, int cpu)\n{\n\treturn round_jiffies_common(j, cpu, true);\n}\nEXPORT_SYMBOL_GPL(__round_jiffies_up);\n\n\nunsigned long __round_jiffies_up_relative(unsigned long j, int cpu)\n{\n\tunsigned long j0 = jiffies;\n\n\t\n\treturn round_jiffies_common(j + j0, cpu, true) - j0;\n}\nEXPORT_SYMBOL_GPL(__round_jiffies_up_relative);\n\n\nunsigned long round_jiffies_up(unsigned long j)\n{\n\treturn round_jiffies_common(j, raw_smp_processor_id(), true);\n}\nEXPORT_SYMBOL_GPL(round_jiffies_up);\n\n\nunsigned long round_jiffies_up_relative(unsigned long j)\n{\n\treturn __round_jiffies_up_relative(j, raw_smp_processor_id());\n}\nEXPORT_SYMBOL_GPL(round_jiffies_up_relative);\n\n\nvoid set_timer_slack(struct timer_list *timer, int slack_hz)\n{\n\ttimer->", "4787": "< KCMP_TYPES; i++)\n\t\tcookies[i][1] |= (~(~0UL >", "4788": "< KDB_MAXBPT) {\n\t\t\tbp = &kdb_breakpoints[addr];\n\t\t\tlowbp = highbp = addr;\n\t\t\thighbp++;\n\t\t} else {\n\t\t\tfor (i = 0, bp = kdb_breakpoints; i < KDB_MAXBPT;\n\t\t\t    i++, bp++) {\n\t\t\t\tif (bp->", "4789": "< KDB_MAXBPT;\n\t\t     bpno++, bp++) {\n\t\t\tif (bp->", "4790": "< KDB_MAXBPT;\n\t     i++, bp_check++) {\n\t\tif (!bp_check->", "4791": "< KDB_MAXBPT; bpno++, bp++) {\n\t\tif (bp->", "4792": "< KDB_MAXBPT; i++) {\n\t\tkdb_bp_t *bp = &kdb_breakpoints[i];\n\n\t\tif (KDB_DEBUG(BP)) {\n\t\t\tkdb_printf(\"%s: bp %d bp_enabled %d\\n\",\n\t\t\t\t   __func__, i, bp->", "4793": "< KDB_MAXBPT; i++, bp++)\n\t\tbp->", "4794": "< KDB_MAXBPT; i++, bp++) {\n\t\t\tif (bp->", "4795": "< KDB_MAXBPT; i++, bp++) {\n\t\tif ((bp->", "4796": "< KGDB_MAX_BREAKPOINTS; i++) {\n\t\tif (kgdb_break[i].state != BP_SET)\n\t\t\tcontinue;\n\n\t\terror = kgdb_arch_set_breakpoint(&kgdb_break[i]);\n\t\tif (error) {\n\t\t\tret = error;\n\t\t\tpr_info(\"BP install failed: %lx\\n\",\n\t\t\t\tkgdb_break[i].bpt_addr);\n\t\t\tcontinue;\n\t\t}\n\n\t\tkgdb_flush_swbreak_addr(kgdb_break[i].bpt_addr);\n\t\tkgdb_break[i].state = BP_ACTIVE;\n\t}\n\treturn ret;\n}\n\nint dbg_set_sw_break(unsigned long addr)\n{\n\tint err = kgdb_validate_break_address(addr);\n\tint breakno = -1;\n\tint i;\n\n\tif (err)\n\t\treturn err;\n\n\tfor (i = 0; i < KGDB_MAX_BREAKPOINTS; i++) {\n\t\tif ((kgdb_break[i].state == BP_SET) &&\n\t\t\t\t\t(kgdb_break[i].bpt_addr == addr))\n\t\t\treturn -EEXIST;\n\t}\n\tfor (i = 0; i < KGDB_MAX_BREAKPOINTS; i++) {\n\t\tif (kgdb_break[i].state == BP_REMOVED &&\n\t\t\t\t\tkgdb_break[i].bpt_addr == addr) {\n\t\t\tbreakno = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (breakno == -1) {\n\t\tfor (i = 0; i < KGDB_MAX_BREAKPOINTS; i++) {\n\t\t\tif (kgdb_break[i].state == BP_UNDEFINED) {\n\t\t\t\tbreakno = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (breakno == -1)\n\t\treturn -E2BIG;\n\n\tkgdb_break[breakno].state = BP_SET;\n\tkgdb_break[breakno].type = BP_BREAKPOINT;\n\tkgdb_break[breakno].bpt_addr = addr;\n\n\treturn 0;\n}\n\nint dbg_deactivate_sw_breakpoints(void)\n{\n\tint error;\n\tint ret = 0;\n\tint i;\n\n\tfor (i = 0; i < KGDB_MAX_BREAKPOINTS; i++) {\n\t\tif (kgdb_break[i].state != BP_ACTIVE)\n\t\t\tcontinue;\n\t\terror = kgdb_arch_remove_breakpoint(&kgdb_break[i]);\n\t\tif (error) {\n\t\t\tpr_info(\"BP remove failed: %lx\\n\",\n\t\t\t\tkgdb_break[i].bpt_addr);\n\t\t\tret = error;\n\t\t}\n\n\t\tkgdb_flush_swbreak_addr(kgdb_break[i].bpt_addr);\n\t\tkgdb_break[i].state = BP_SET;\n\t}\n\treturn ret;\n}\n\nint dbg_remove_sw_break(unsigned long addr)\n{\n\tint i;\n\n\tfor (i = 0; i < KGDB_MAX_BREAKPOINTS; i++) {\n\t\tif ((kgdb_break[i].state == BP_SET) &&\n\t\t\t\t(kgdb_break[i].bpt_addr == addr)) {\n\t\t\tkgdb_break[i].state = BP_REMOVED;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n\nint kgdb_isremovedbreak(unsigned long addr)\n{\n\tint i;\n\n\tfor (i = 0; i < KGDB_MAX_BREAKPOINTS; i++) {\n\t\tif ((kgdb_break[i].state == BP_REMOVED) &&\n\t\t\t\t\t(kgdb_break[i].bpt_addr == addr))\n\t\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nint dbg_remove_all_break(void)\n{\n\tint error;\n\tint i;\n\n\t\n\tfor (i = 0; i < KGDB_MAX_BREAKPOINTS; i++) {\n\t\tif (kgdb_break[i].state != BP_ACTIVE)\n\t\t\tgoto setundefined;\n\t\terror = kgdb_arch_remove_breakpoint(&kgdb_break[i]);\n\t\tif (error)\n\t\t\tpr_err(\"breakpoint remove failed: %lx\\n\",\n\t\t\t       kgdb_break[i].bpt_addr);\nsetundefined:\n\t\tkgdb_break[i].state = BP_UNDEFINED;\n\t}\n\n\t\n\tif (arch_kgdb_ops.remove_all_hw_break)\n\t\tarch_kgdb_ops.remove_all_hw_break();\n\n\treturn 0;\n}\n\n\nstatic int kgdb_io_ready(int print_wait)\n{\n\tif (!dbg_io_ops)\n\t\treturn 0;\n\tif (kgdb_connected)\n\t\treturn 1;\n\tif (atomic_read(&kgdb_setting_breakpoint))\n\t\treturn 1;\n\tif (print_wait) {\n#ifdef CONFIG_KGDB_KDB\n\t\tif (!dbg_kdb_mode)\n\t\t\tpr_crit(\"waiting... or $3#33 for KDB\\n\");\n#else\n\t\tpr_crit(\"Waiting for remote debugger\\n\");\n#endif\n\t}\n\treturn 1;\n}\n\nstatic int kgdb_reenter_check(struct kgdb_state *ks)\n{\n\tunsigned long addr;\n\n\tif (atomic_read(&kgdb_active) != raw_smp_processor_id())\n\t\treturn 0;\n\n\t\n\texception_level++;\n\taddr = kgdb_arch_pc(ks->", "4797": "< KPROBE_TABLE_SIZE) ? pos : NULL;\n}\n\nstatic void *kprobe_seq_next(struct seq_file *f, void *v, loff_t *pos)\n{\n\t(*pos)++;\n\tif (*pos >", "4798": "< KPROBE_TABLE_SIZE; hash++) {\n\t\tkretprobe_table_lock(hash, &flags);\n\t\thead = &kretprobe_inst_table[hash];\n\t\thlist_for_each_entry_safe(ri, next, head, hlist) {\n\t\t\tif (ri->", "4799": "< KPROBE_TABLE_SIZE; i++) {\n\t\tINIT_HLIST_HEAD(&kprobe_table[i]);\n\t\tINIT_HLIST_HEAD(&kretprobe_inst_table[i]);\n\t\traw_spin_lock_init(&(kretprobe_table_locks[i].lock));\n\t}\n\n\terr = populate_kprobe_blacklist(__start_kprobe_blacklist,\n\t\t\t\t\t__stop_kprobe_blacklist);\n\tif (err) {\n\t\tpr_err(\"kprobes: failed to populate blacklist: %d\\n\", err);\n\t\tpr_err(\"Please take care of using kprobes.\\n\");\n\t}\n\n\tif (kretprobe_blacklist_size) {\n\t\t\n\t\tfor (i = 0; kretprobe_blacklist[i].name != NULL; i++) {\n\t\t\tkprobe_lookup_name(kretprobe_blacklist[i].name,\n\t\t\t\t\t   kretprobe_blacklist[i].addr);\n\t\t\tif (!kretprobe_blacklist[i].addr)\n\t\t\t\tprintk(\"kretprobe: lookup failed: %s\\n\",\n\t\t\t\t       kretprobe_blacklist[i].name);\n\t\t}\n\t}\n\n#if defined(CONFIG_OPTPROBES)\n#if defined(__ARCH_WANT_KPROBES_INSN_SLOT)\n\t\n\tkprobe_optinsn_slots.insn_size = MAX_OPTINSN_SIZE;\n#endif\n\t\n\tkprobes_allow_optimization = true;\n#endif\n\n\t\n\tkprobes_all_disarmed = false;\n\n\terr = arch_init_kprobes();\n\tif (!err)\n\t\terr = register_die_notifier(&kprobe_exceptions_nb);\n\tif (!err)\n\t\terr = register_module_notifier(&kprobe_module_nb);\n\n\tkprobes_initialized = (err == 0);\n\n\tif (!err)\n\t\tinit_test_probes();\n\treturn err;\n}\n\n#ifdef CONFIG_DEBUG_FS\nstatic void report_probe(struct seq_file *pi, struct kprobe *p,\n\t\tconst char *sym, int offset, char *modname, struct kprobe *pp)\n{\n\tchar *kprobe_type;\n\n\tif (p->", "4800": "< KPROBE_TABLE_SIZE; i++) {\n\t\thead = &kprobe_table[i];\n\t\thlist_for_each_entry_rcu(p, head, hlist)\n\t\t\tif (!kprobe_disabled(p))\n\t\t\t\tarm_kprobe(p);\n\t}\n\n\tprintk(KERN_INFO \"Kprobes globally enabled\\n\");\n\nalready_enabled:\n\tmutex_unlock(&kprobe_mutex);\n\treturn;\n}\n\nstatic void disarm_all_kprobes(void)\n{\n\tstruct hlist_head *head;\n\tstruct kprobe *p;\n\tunsigned int i;\n\n\tmutex_lock(&kprobe_mutex);\n\n\t\n\tif (kprobes_all_disarmed) {\n\t\tmutex_unlock(&kprobe_mutex);\n\t\treturn;\n\t}\n\n\tkprobes_all_disarmed = true;\n\tprintk(KERN_INFO \"Kprobes globally disabled\\n\");\n\n\tfor (i = 0; i < KPROBE_TABLE_SIZE; i++) {\n\t\thead = &kprobe_table[i];\n\t\thlist_for_each_entry_rcu(p, head, hlist) {\n\t\t\tif (!arch_trampoline_kprobe(p) && !kprobe_disabled(p))\n\t\t\t\tdisarm_kprobe(p, false);\n\t\t}\n\t}\n\tmutex_unlock(&kprobe_mutex);\n\n\t\n\twait_for_kprobe_optimizer();\n}\n\n\nstatic ssize_t read_enabled_file_bool(struct file *file,\n\t       char __user *user_buf, size_t count, loff_t *ppos)\n{\n\tchar buf[3];\n\n\tif (!kprobes_all_disarmed)\n\t\tbuf[0] = '1';\n\telse\n\t\tbuf[0] = '0';\n\tbuf[1] = '\\n';\n\tbuf[2] = 0x00;\n\treturn simple_read_from_buffer(user_buf, count, ppos, buf, 2);\n}\n\nstatic ssize_t write_enabled_file_bool(struct file *file,\n\t       const char __user *user_buf, size_t count, loff_t *ppos)\n{\n\tchar buf[32];\n\tsize_t buf_size;\n\n\tbuf_size = min(count, (sizeof(buf)-1));\n\tif (copy_from_user(buf, user_buf, buf_size))\n\t\treturn -EFAULT;\n\n\tbuf[buf_size] = '\\0';\n\tswitch (buf[0]) {\n\tcase 'y':\n\tcase 'Y':\n\tcase '1':\n\t\tarm_all_kprobes();\n\t\tbreak;\n\tcase 'n':\n\tcase 'N':\n\tcase '0':\n\t\tdisarm_all_kprobes();\n\t\tbreak;\n\tdefault:\n\t\treturn -EINVAL;\n\t}\n\n\treturn count;\n}\n\nstatic const struct file_operations fops_kp = {\n\t.read =         read_enabled_file_bool,\n\t.write =        write_enabled_file_bool,\n\t.llseek =\tdefault_llseek,\n};\n\nstatic int __init debugfs_kprobe_init(void)\n{\n\tstruct dentry *dir, *file;\n\tunsigned int value = 1;\n\n\tdir = debugfs_create_dir(\"kprobes\", NULL);\n\tif (!dir)\n\t\treturn -ENOMEM;\n\n\tfile = debugfs_create_file(\"list\", 0444, dir, NULL,\n\t\t\t\t&debugfs_kprobes_operations);\n\tif (!file)\n\t\tgoto error;\n\n\tfile = debugfs_create_file(\"enabled\", 0600, dir,\n\t\t\t\t\t&value, &fops_kp);\n\tif (!file)\n\t\tgoto error;\n\n\tfile = debugfs_create_file(\"blacklist\", 0444, dir, NULL,\n\t\t\t\t&debugfs_kprobe_blacklist_ops);\n\tif (!file)\n\t\tgoto error;\n\n\treturn 0;\n\nerror:\n\tdebugfs_remove(dir);\n\treturn -ENOMEM;\n}\n\nlate_initcall(debugfs_kprobe_init);\n#endif \n\nmodule_init(init_kprobes);\n\n\nEXPORT_SYMBOL_GPL(jprobe_return);\n\n\n\n#include <linux/list.h>", "4801": "< KPROBE_TABLE_SIZE; i++) {\n\t\thead = &kprobe_table[i];\n\t\thlist_for_each_entry_rcu(p, head, hlist)\n\t\t\tif (!kprobe_disabled(p))\n\t\t\t\toptimize_kprobe(p);\n\t}\n\tprintk(KERN_INFO \"Kprobes globally optimized\\n\");\nout:\n\tmutex_unlock(&kprobe_mutex);\n}\n\nstatic void unoptimize_all_kprobes(void)\n{\n\tstruct hlist_head *head;\n\tstruct kprobe *p;\n\tunsigned int i;\n\n\tmutex_lock(&kprobe_mutex);\n\t\n\tif (!kprobes_allow_optimization) {\n\t\tmutex_unlock(&kprobe_mutex);\n\t\treturn;\n\t}\n\n\tkprobes_allow_optimization = false;\n\tfor (i = 0; i < KPROBE_TABLE_SIZE; i++) {\n\t\thead = &kprobe_table[i];\n\t\thlist_for_each_entry_rcu(p, head, hlist) {\n\t\t\tif (!kprobe_disabled(p))\n\t\t\t\tunoptimize_kprobe(p, false);\n\t\t}\n\t}\n\tmutex_unlock(&kprobe_mutex);\n\n\t\n\twait_for_kprobe_optimizer();\n\tprintk(KERN_INFO \"Kprobes globally unoptimized\\n\");\n}\n\nstatic DEFINE_MUTEX(kprobe_sysctl_mutex);\nint sysctl_kprobes_optimization;\nint proc_kprobes_optimization_handler(struct ctl_table *table, int write,\n\t\t\t\t      void __user *buffer, size_t *length,\n\t\t\t\t      loff_t *ppos)\n{\n\tint ret;\n\n\tmutex_lock(&kprobe_sysctl_mutex);\n\tsysctl_kprobes_optimization = kprobes_allow_optimization ? 1 : 0;\n\tret = proc_dointvec_minmax(table, write, buffer, length, ppos);\n\n\tif (sysctl_kprobes_optimization)\n\t\toptimize_all_kprobes();\n\telse\n\t\tunoptimize_all_kprobes();\n\tmutex_unlock(&kprobe_sysctl_mutex);\n\n\treturn ret;\n}\n#endif \n\n\nstatic void __arm_kprobe(struct kprobe *p)\n{\n\tstruct kprobe *_p;\n\n\t\n\t_p = get_optimized_kprobe((unsigned long)p->", "4802": "< KPROBE_TABLE_SIZE; i++) {\n\t\thead = &kprobe_table[i];\n\t\thlist_for_each_entry_rcu(p, head, hlist)\n\t\t\tif (within_module_init((unsigned long)p->", "4803": "< LOCKSTAT_POINTS)\n\t\tstats->", "4804": "< LOCKSTAT_POINTS; i++) {\n\t\tchar ip[32];\n\n\t\tif (class->", "4805": "< LOCKSTAT_POINTS; i++) {\n\t\tif (points[i] == 0) {\n\t\t\tpoints[i] = ip;\n\t\t\tbreak;\n\t\t}\n\t\tif (points[i] == ip)\n\t\t\tbreak;\n\t}\n\n\treturn i;\n}\n\nstatic void lock_time_inc(struct lock_time *lt, u64 time)\n{\n\tif (time >", "4806": "< LONG_MAX)\n\t\taccount_idle_ticks(ticks);\n#endif\n}\n\n\nvoid tick_nohz_idle_exit(void)\n{\n\tstruct tick_sched *ts = this_cpu_ptr(&tick_cpu_sched);\n\tktime_t now;\n\n\tlocal_irq_disable();\n\n\tWARN_ON_ONCE(!ts->", "4807": "< LT_BACKTRACEDEPTH; q++) {\n\t\t\t\tunsigned long bt = lr->", "4808": "< LT_BACKTRACEDEPTH; q++) {\n\t\t\tunsigned long record = lat->", "4809": "< LT_BACKTRACEDEPTH; q++) {\n\t\t\tunsigned long record = lat.backtrace[q];\n\n\t\t\tif (mylat->", "4810": "< LZO_CMP_PAGES && asked) {\n\t\t\tret = hib_wait_on_bio_chain(&bio);\n\t\t\tif (ret)\n\t\t\t\tgoto out_finish;\n\t\t\thave += asked;\n\t\t\tasked = 0;\n\t\t\tif (eof)\n\t\t\t\teof = 2;\n\t\t}\n\n\t\tfor (run_threads = thr, thr = 0; thr < run_threads; thr++) {\n\t\t\twait_event(data[thr].done,\n\t\t\t           atomic_read(&data[thr].stop));\n\t\t\tatomic_set(&data[thr].stop, 0);\n\n\t\t\tret = data[thr].ret;\n\n\t\t\tif (ret < 0) {\n\t\t\t\tprintk(KERN_ERR\n\t\t\t\t       \"PM: LZO decompression failed\\n\");\n\t\t\t\tgoto out_finish;\n\t\t\t}\n\n\t\t\tif (unlikely(!data[thr].unc_len ||\n\t\t\t             data[thr].unc_len >", "4811": "< LZO_HEADER + data[thr].cmp_len;\n\t\t\t     off += PAGE_SIZE) {\n\t\t\t\tmemcpy(data[thr].cmp + off,\n\t\t\t\t       page[pg], PAGE_SIZE);\n\t\t\t\thave--;\n\t\t\t\twant++;\n\t\t\t\tif (++pg >", "4812": "< LZO_HEADER + data[thr].cmp_len;\n\t\t\t     off += PAGE_SIZE) {\n\t\t\t\tmemcpy(page, data[thr].cmp + off, PAGE_SIZE);\n\n\t\t\t\tret = swap_write_page(handle, page, &bio);\n\t\t\t\tif (ret)\n\t\t\t\t\tgoto out_finish;\n\t\t\t}\n\t\t}\n\n\t\twait_event(crc->", "4813": "< MAXLR; i++) {\n\t\tint q, same = 1;\n\n\t\t\n\t\tif (!latency_record[i].backtrace[0]) {\n\t\t\tif (firstnonnull >", "4814": "< MAXLR; i++) {\n\t\tstruct latency_record *lr = &latency_record[i];\n\n\t\tif (lr->", "4815": "< MAXRESERVE) {\n\t\t\tstruct resource *res = reserve + x;\n\t\t\tres->", "4816": "< MAX_BPF_REG; i++) {\n\t\tregs[i].type = NOT_INIT;\n\t\tregs[i].imm = 0;\n\t\tregs[i].map_ptr = NULL;\n\t}\n\n\t\n\tregs[BPF_REG_FP].type = FRAME_PTR;\n\n\t\n\tregs[BPF_REG_1].type = PTR_TO_CTX;\n}\n\nstatic void mark_reg_unknown_value(struct reg_state *regs, u32 regno)\n{\n\tBUG_ON(regno >", "4817": "< MAX_BPF_REG; i++) {\n\t\tt = env->", "4818": "< MAX_BPF_STACK; i += BPF_REG_SIZE) {\n\t\tif (env->", "4819": "< MAX_BPF_STACK; i++) {\n\t\tif (old->", "4820": "< MAX_DMA_CHANNELS ; i++) {\n\t\tif (dma_chan_busy[i].lock) {\n\t\t\tseq_printf(m, \"%2d: %s\\n\", i,\n\t\t\t\t   dma_chan_busy[i].device_id);\n\t\t}\n\t}\n\treturn 0;\n}\n#else\nstatic int proc_dma_show(struct seq_file *m, void *v)\n{\n\tseq_puts(m, \"No DMA\\n\");\n\treturn 0;\n}\n#endif \n\nstatic int proc_dma_open(struct inode *inode, struct file *file)\n{\n\treturn single_open(file, proc_dma_show, NULL);\n}\n\nstatic const struct file_operations proc_dma_operations = {\n\t.open\t\t= proc_dma_open,\n\t.read\t\t= seq_read,\n\t.llseek\t\t= seq_lseek,\n\t.release\t= single_release,\n};\n\nstatic int __init proc_dma_init(void)\n{\n\tproc_create(\"dma\", 0, NULL, &proc_dma_operations);\n\treturn 0;\n}\n\n__initcall(proc_dma_init);\n#endif\n\nEXPORT_SYMBOL(request_dma);\nEXPORT_SYMBOL(free_dma);\nEXPORT_SYMBOL(dma_spin_lock);\n\n\n\n#include <linux/mm.h>", "4821": "< MAX_LOCKDEP_SUBCLASSES; j++) {\n\t\t\n\t\tclass = look_up_lock_class(lock, j);\n\t\tif (class)\n\t\t\tzap_class(class);\n\t}\n\t\n\tlocked = graph_lock();\n\tfor (i = 0; i < CLASSHASH_SIZE; i++) {\n\t\thead = classhash_table + i;\n\t\tif (list_empty(head))\n\t\t\tcontinue;\n\t\tlist_for_each_entry_rcu(class, head, hash_entry) {\n\t\t\tint match = 0;\n\n\t\t\tfor (j = 0; j < NR_LOCKDEP_CACHING_CLASSES; j++)\n\t\t\t\tmatch |= class == lock->", "4822": "< MAX_OPTIMIZED_LENGTH; i++)\n\t\tp = get_kprobe((void *)(addr - i));\n\n\tif (p && kprobe_optready(p)) {\n\t\top = container_of(p, struct optimized_kprobe, kp);\n\t\tif (arch_within_optimized_kprobe(op, addr))\n\t\t\treturn p;\n\t}\n\n\treturn NULL;\n}\n\n\nstatic LIST_HEAD(optimizing_list);\nstatic LIST_HEAD(unoptimizing_list);\nstatic LIST_HEAD(freeing_list);\n\nstatic void kprobe_optimizer(struct work_struct *work);\nstatic DECLARE_DELAYED_WORK(optimizing_work, kprobe_optimizer);\n#define OPTIMIZE_DELAY 5\n\n\nstatic void do_optimize_kprobes(void)\n{\n\t\n\tif (kprobes_all_disarmed || !kprobes_allow_optimization ||\n\t    list_empty(&optimizing_list))\n\t\treturn;\n\n\t\n\tget_online_cpus();\n\tmutex_lock(&text_mutex);\n\tarch_optimize_kprobes(&optimizing_list);\n\tmutex_unlock(&text_mutex);\n\tput_online_cpus();\n}\n\n\nstatic void do_unoptimize_kprobes(void)\n{\n\tstruct optimized_kprobe *op, *tmp;\n\n\t\n\tif (list_empty(&unoptimizing_list))\n\t\treturn;\n\n\t\n\tget_online_cpus();\n\tmutex_lock(&text_mutex);\n\tarch_unoptimize_kprobes(&unoptimizing_list, &freeing_list);\n\t\n\tlist_for_each_entry_safe(op, tmp, &freeing_list, list) {\n\t\t\n\t\tif (kprobe_disabled(&op->", "4823": "< MAX_PINNED_INTERVAL) ||\n\t\t\t(sd->", "4824": "< MAX_RT_PRIO; i++) {\n\t\tINIT_LIST_HEAD(array->", "4825": "< MAX_RT_TEST_MUTEXES; i++)\n\t\trt_mutex_init(&mutexes[i]);\n\n\tret = subsys_system_register(&rttest_subsys, NULL);\n\tif (ret)\n\t\treturn ret;\n\n\tfor (i = 0; i < MAX_RT_TEST_THREADS; i++) {\n\t\tret = init_test_thread(i);\n\t\tif (ret)\n\t\t\tbreak;\n\t\tret = device_create_file(&thread_data[i].dev, &dev_attr_status);\n\t\tif (ret)\n\t\t\tbreak;\n\t\tret = device_create_file(&thread_data[i].dev, &dev_attr_command);\n\t\tif (ret)\n\t\t\tbreak;\n\t}\n\n\tprintk(\"Initializing RT-Tester: %s\\n\", ret ? \"Failed\" : \"OK\" );\n\n\treturn ret;\n}\n\ndevice_initcall(init_rttest);\n\n\n#include <linux/module.h>", "4826": "< MAX_RT_TEST_MUTEXES; i++) {\n\t\t\tif (td->", "4827": "< MAX_RT_TEST_THREADS; tid++) {\n\t\tif (threads[tid] == current)\n\t\t\tbreak;\n\t}\n\n\tBUG_ON(tid == MAX_RT_TEST_THREADS);\n\n\ttd = &thread_data[tid];\n\n\top = td->", "4828": "< MAX_SCAN_WINDOW)\n\t\twindows = MAX_SCAN_WINDOW / scan_size;\n\tfloor = 1000 / windows;\n\n\tscan = sysctl_numa_balancing_scan_period_min / task_nr_scan_windows(p);\n\treturn max_t(unsigned int, floor, scan);\n}\n\nstatic unsigned int task_scan_max(struct task_struct *p)\n{\n\tunsigned int smin = task_scan_min(p);\n\tunsigned int smax;\n\n\t\n\tsmax = sysctl_numa_balancing_scan_period_max / task_nr_scan_windows(p);\n\treturn max(smin, smax);\n}\n\nstatic void account_numa_enqueue(struct rq *rq, struct task_struct *p)\n{\n\trq->", "4829": "< MCOUNT_INSN_SIZE; i++)\n\t\tprintk(KERN_CONT \"%s%02x\", i ? \":\" : \"\", p[i]);\n}\n\nstatic struct ftrace_ops *\nftrace_find_tramp_ops_any(struct dyn_ftrace *rec);\n\n\nvoid ftrace_bug(int failed, struct dyn_ftrace *rec)\n{\n\tunsigned long ip = rec ? rec->", "4830": "< MINSEC)\n\t\treturn 0;\n\n\tif (!(time_status & STA_FLL) && (secs <= MAXSEC))\n\t\treturn 0;\n\n\ttime_status |= STA_MODE;\n\n\treturn div64_long(offset64 << (NTP_SCALE_SHIFT - SHIFT_FLL), secs);\n}\n\nstatic void ntp_update_offset(long offset)\n{\n\ts64 freq_adj;\n\ts64 offset64;\n\tlong secs;\n\n\tif (!(time_status & STA_PLL))\n\t\treturn;\n\n\tif (!(time_status & STA_NANO))\n\t\toffset *= NSEC_PER_USEC;\n\n\t\n\toffset = min(offset, MAXPHASE);\n\toffset = max(offset, -MAXPHASE);\n\n\t\n\tsecs = get_seconds() - time_reftime;\n\tif (unlikely(time_status & STA_FREQHOLD))\n\t\tsecs = 0;\n\n\ttime_reftime = get_seconds();\n\n\toffset64    = offset;\n\tfreq_adj    = ntp_update_offset_fll(offset64, secs);\n\n\t\n\tif (unlikely(secs >", "4831": "< MINSIGSTKSZ)\n\t\t\t\tgoto out;\n\t\t}\n\n\t\tcurrent->", "4832": "< MIN_NICE || nice >", "4833": "< MIN_SHARES)\n\t\t\twl = MIN_SHARES;\n\n\t\t\n\t\twl -= se->", "4834": "< MIN_SHARES)\n\t\tshares = MIN_SHARES;\n\tif (shares >", "4835": "< NEXT_TIMER_MAX_DELTA)) {\n\t\t\t\n\t\t\ttime_delta = min_t(u64, time_delta,\n\t\t\t\t\t   tick_period.tv64 * delta_jiffies);\n\t\t}\n\n\t\tif (time_delta < KTIME_MAX)\n\t\t\texpires = ktime_add_ns(last_update, time_delta);\n\t\telse\n\t\t\texpires.tv64 = KTIME_MAX;\n\n\t\t\n\t\tif (ts->", "4836": "< NICE_0_LOAD) {\n\t\tse->", "4837": "< NR_LOCKDEP_CACHING_CLASSES)\n\t\tclass = lock->", "4838": "< NR_LOCKDEP_CACHING_CLASSES)\n\t\tlock->", "4839": "< NR_LOCKDEP_CACHING_CLASSES; i++)\n\t\tlock->", "4840": "< NR_MM_COUNTERS; i++) {\n\t\tlong x = atomic_long_read(&mm->", "4841": "< NR_NUMA_HINT_FAULT_STATS * nr_node_ids; i++)\n\t\t\tgrp->", "4842": "< NR_NUMA_HINT_FAULT_STATS * nr_node_ids; i++) {\n\t\tmy_grp->", "4843": "< NR_NUMA_HINT_FAULT_TYPES; priv++) {\n\t\t\tlong diff, f_diff, f_weight;\n\n\t\t\tmem_idx = task_faults_idx(NUMA_MEM, nid, priv);\n\t\t\tmembuf_idx = task_faults_idx(NUMA_MEMBUF, nid, priv);\n\t\t\tcpu_idx = task_faults_idx(NUMA_CPU, nid, priv);\n\t\t\tcpubuf_idx = task_faults_idx(NUMA_CPUBUF, nid, priv);\n\n\t\t\t\n\t\t\tdiff = p->", "4844": "< NR_PROFILE_HIT; ++i) {\n\t\t\tif (!hits[i].hits) {\n\t\t\t\tif (hits[i].pc)\n\t\t\t\t\thits[i].pc = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tatomic_add(hits[i].hits, &prof_buffer[hits[i].pc]);\n\t\t\thits[i].hits = hits[i].pc = 0;\n\t\t}\n\t}\n\tmutex_unlock(&profile_flip_mutex);\n}\n\nstatic void profile_discard_flip_buffers(void)\n{\n\tint i, cpu;\n\n\tmutex_lock(&profile_flip_mutex);\n\ti = per_cpu(cpu_profile_flip, get_cpu());\n\tput_cpu();\n\ton_each_cpu(__profile_flip_buffers, NULL, 1);\n\tfor_each_online_cpu(cpu) {\n\t\tstruct profile_hit *hits = per_cpu(cpu_profile_hits, cpu)[i];\n\t\tmemset(hits, 0, NR_PROFILE_HIT*sizeof(struct profile_hit));\n\t}\n\tmutex_unlock(&profile_flip_mutex);\n}\n\nstatic void do_profile_hits(int type, void *__pc, unsigned int nr_hits)\n{\n\tunsigned long primary, secondary, flags, pc = (unsigned long)__pc;\n\tint i, j, cpu;\n\tstruct profile_hit *hits;\n\n\tpc = min((pc - (unsigned long)_stext) >", "4845": "< NR_STD_WORKER_POOLS; i++) {\n\t\tstruct workqueue_attrs *attrs;\n\n\t\tBUG_ON(!(attrs = alloc_workqueue_attrs(GFP_KERNEL)));\n\t\tattrs->", "4846": "< PAGE_SIZE / sizeof(long); j++) {\n\t\tif (unlikely(buf[j] == BM_END_OF_MAP))\n\t\t\tbreak;\n\n\t\t\n\t\tpage_key_memorize(buf + j);\n\n\t\tif (memory_bm_pfn_present(bm, buf[j]))\n\t\t\tmemory_bm_set_bit(bm, buf[j]);\n\t\telse\n\t\t\treturn -EFAULT;\n\t}\n\n\treturn 0;\n}\n\n\nstatic struct linked_page *safe_pages_list;\n\n#ifdef CONFIG_HIGHMEM\n\nstruct highmem_pbe {\n\tstruct page *copy_page;\t\n\tstruct page *orig_page;\t\n\tstruct highmem_pbe *next;\n};\n\n\nstatic struct highmem_pbe *highmem_pblist;\n\n\n\nstatic unsigned int count_highmem_image_pages(struct memory_bitmap *bm)\n{\n\tunsigned long pfn;\n\tunsigned int cnt = 0;\n\n\tmemory_bm_position_reset(bm);\n\tpfn = memory_bm_next_pfn(bm);\n\twhile (pfn != BM_END_OF_MAP) {\n\t\tif (PageHighMem(pfn_to_page(pfn)))\n\t\t\tcnt++;\n\n\t\tpfn = memory_bm_next_pfn(bm);\n\t}\n\treturn cnt;\n}\n\n\n\nstatic unsigned int safe_highmem_pages;\n\nstatic struct memory_bitmap *safe_highmem_bm;\n\nstatic int\nprepare_highmem_image(struct memory_bitmap *bm, unsigned int *nr_highmem_p)\n{\n\tunsigned int to_alloc;\n\n\tif (memory_bm_create(bm, GFP_ATOMIC, PG_SAFE))\n\t\treturn -ENOMEM;\n\n\tif (get_highmem_buffer(PG_SAFE))\n\t\treturn -ENOMEM;\n\n\tto_alloc = count_free_highmem_pages();\n\tif (to_alloc >", "4847": "< PAGE_SIZE ? len : -EINVAL;\n}\n\nstatic ssize_t store_cpumask(struct padata_instance *pinst,\n\t\t\t     struct attribute *attr,\n\t\t\t     const char *buf, size_t count)\n{\n\tcpumask_var_t new_cpumask;\n\tssize_t ret;\n\tint mask_type;\n\n\tif (!alloc_cpumask_var(&new_cpumask, GFP_KERNEL))\n\t\treturn -ENOMEM;\n\n\tret = bitmap_parse(buf, count, cpumask_bits(new_cpumask),\n\t\t\t   nr_cpumask_bits);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tmask_type = !strcmp(attr->", "4848": "< PAGE_SIZE)\n\t\t\treturn true;\n\t\tif ((*(u32 *)cred->", "4849": "< PAGE_SIZE) {\n\t\tif (error >", "4850": "< PAGE_SIZE) {\n\t\tprintk(KERN_ERR \"PM: Adding page to bio failed at %llu\\n\",\n\t\t\t(unsigned long long)sector);\n\t\tbio_put(bio);\n\t\treturn -EFAULT;\n\t}\n\n\tlock_page(page);\n\tbio_get(bio);\n\n\tif (bio_chain == NULL) {\n\t\tsubmit_bio(bio_rw, bio);\n\t\twait_on_page_locked(page);\n\t\tif (rw == READ)\n\t\t\tbio_set_pages_dirty(bio);\n\t\tbio_put(bio);\n\t} else {\n\t\tif (rw == READ)\n\t\t\tget_page(page);\t\n\t\tbio->", "4851": "< PATH_MAX);\n\n\tcgrp = cgroup_kn_lock_live(of->", "4852": "< PERF_EVENT_STATE_INACTIVE)\n\t\t\tcontinue;\n\t\tif (!event_filter_match(event))\n\t\t\tcontinue;\n\t\toutput(event, data);\n\t}\n}\n\nstatic void\nperf_event_aux(perf_event_aux_output_cb output, void *data,\n\t       struct perf_event_context *task_ctx)\n{\n\tstruct perf_cpu_context *cpuctx;\n\tstruct perf_event_context *ctx;\n\tstruct pmu *pmu;\n\tint ctxn;\n\n\trcu_read_lock();\n\tlist_for_each_entry_rcu(pmu, &pmus, entry) {\n\t\tcpuctx = get_cpu_ptr(pmu->", "4853": "< PERF_NR_CONTEXTS; i++) {\n\t\t\tbuf = (char __percpu *)alloc_percpu(perf_trace_t);\n\t\t\tif (!buf)\n\t\t\t\tgoto fail;\n\n\t\t\tperf_trace_buf[i] = buf;\n\t\t}\n\t}\n\n\tret = tp_event->", "4854": "< PERF_NR_CONTEXTS; i++) {\n\t\t\tfree_percpu(perf_trace_buf[i]);\n\t\t\tperf_trace_buf[i] = NULL;\n\t\t}\n\t}\n\n\tif (!--tp_event->", "4855": "< PERF_NR_CONTEXTS; i++) {\n\t\t\tfree_percpu(perf_trace_buf[i]);\n\t\t\tperf_trace_buf[i] = NULL;\n\t\t}\n\t}\nout:\n\tmodule_put(tp_event->", "4856": "< PIDMAP_ENTRIES; i++)\n\t\tatomic_set(&ns->", "4857": "< PIDMAP_ENTRIES; i++)\n\t\tkfree(ns->", "4858": "< PIDTYPE_MAX; ++type)\n\t\tINIT_HLIST_HEAD(&pid->", "4859": "< PIDTYPE_MAX; ++type) {\n\t\tINIT_HLIST_NODE(&links[type].node); \n\t\tlinks[type].pid = &init_struct_pid;\n\t}\n}\n\nstruct task_struct *fork_idle(int cpu)\n{\n\tstruct task_struct *task;\n\ttask = copy_process(CLONE_VM, 0, 0, NULL, &init_struct_pid, 0);\n\tif (!IS_ERR(task)) {\n\t\tinit_idle_pids(task->", "4860": "< PM_QOS_NUM_CLASSES; i++) {\n\t\tret = register_pm_qos_misc(pm_qos_array[i], d);\n\t\tif (ret < 0) {\n\t\t\tprintk(KERN_ERR \"pm_qos_param: %s setup failed\\n\",\n\t\t\t       pm_qos_array[i]->", "4861": "< PM_QOS_NUM_CLASSES; pm_qos_class++) {\n\t\tif (minor ==\n\t\t\tpm_qos_array[pm_qos_class]->", "4862": "< PM_SUSPEND_MAX)\n\t\terror = pm_suspend(state);\n\telse if (state == PM_SUSPEND_MAX)\n\t\terror = hibernate();\n\telse\n\t\terror = -EINVAL;\n\n out:\n\tpm_autosleep_unlock();\n\treturn error ? error : n;\n}\n\npower_attr(state);\n\n#ifdef CONFIG_PM_SLEEP\n\n\nstatic ssize_t wakeup_count_show(struct kobject *kobj,\n\t\t\t\tstruct kobj_attribute *attr,\n\t\t\t\tchar *buf)\n{\n\tunsigned int val;\n\n\treturn pm_get_wakeup_count(&val, true) ?\n\t\tsprintf(buf, \"%u\\n\", val) : -EINTR;\n}\n\nstatic ssize_t wakeup_count_store(struct kobject *kobj,\n\t\t\t\tstruct kobj_attribute *attr,\n\t\t\t\tconst char *buf, size_t n)\n{\n\tunsigned int val;\n\tint error;\n\n\terror = pm_autosleep_lock();\n\tif (error)\n\t\treturn error;\n\n\tif (pm_autosleep_state() >", "4863": "< PM_SUSPEND_MAX)\n\t\treturn sprintf(buf, \"%s\\n\", pm_states[state] ?\n\t\t\t\t\tpm_states[state] : \"error\");\n#endif\n#ifdef CONFIG_HIBERNATION\n\treturn sprintf(buf, \"disk\\n\");\n#else\n\treturn sprintf(buf, \"error\");\n#endif\n}\n\nstatic ssize_t autosleep_store(struct kobject *kobj,\n\t\t\t       struct kobj_attribute *attr,\n\t\t\t       const char *buf, size_t n)\n{\n\tsuspend_state_t state = decode_state(buf, n);\n\tint error;\n\n\tif (state == PM_SUSPEND_ON\n\t    && strcmp(buf, \"off\") && strcmp(buf, \"off\\n\"))\n\t\treturn -EINVAL;\n\n\terror = pm_autosleep_set_state(state);\n\treturn error ? error : n;\n}\n\npower_attr(autosleep);\n#endif \n\n#ifdef CONFIG_PM_WAKELOCKS\nstatic ssize_t wake_lock_show(struct kobject *kobj,\n\t\t\t      struct kobj_attribute *attr,\n\t\t\t      char *buf)\n{\n\treturn pm_show_wakelocks(buf, true);\n}\n\nstatic ssize_t wake_lock_store(struct kobject *kobj,\n\t\t\t       struct kobj_attribute *attr,\n\t\t\t       const char *buf, size_t n)\n{\n\tint error = pm_wake_lock(buf);\n\treturn error ? error : n;\n}\n\npower_attr(wake_lock);\n\nstatic ssize_t wake_unlock_show(struct kobject *kobj,\n\t\t\t\tstruct kobj_attribute *attr,\n\t\t\t\tchar *buf)\n{\n\treturn pm_show_wakelocks(buf, false);\n}\n\nstatic ssize_t wake_unlock_store(struct kobject *kobj,\n\t\t\t\t struct kobj_attribute *attr,\n\t\t\t\t const char *buf, size_t n)\n{\n\tint error = pm_wake_unlock(buf);\n\treturn error ? error : n;\n}\n\npower_attr(wake_unlock);\n\n#endif \n#endif \n\n#ifdef CONFIG_PM_TRACE\nint pm_trace_enabled;\n\nstatic ssize_t pm_trace_show(struct kobject *kobj, struct kobj_attribute *attr,\n\t\t\t     char *buf)\n{\n\treturn sprintf(buf, \"%d\\n\", pm_trace_enabled);\n}\n\nstatic ssize_t\npm_trace_store(struct kobject *kobj, struct kobj_attribute *attr,\n\t       const char *buf, size_t n)\n{\n\tint val;\n\n\tif (sscanf(buf, \"%d\", &val) == 1) {\n\t\tpm_trace_enabled = !!val;\n\t\tif (pm_trace_enabled) {\n\t\t\tpr_warn(\"PM: Enabling pm_trace changes system date and time during resume.\\n\"\n\t\t\t\t\"PM: Correct system time has to be restored manually after resume.\\n\");\n\t\t}\n\t\treturn n;\n\t}\n\treturn -EINVAL;\n}\n\npower_attr(pm_trace);\n\nstatic ssize_t pm_trace_dev_match_show(struct kobject *kobj,\n\t\t\t\t       struct kobj_attribute *attr,\n\t\t\t\t       char *buf)\n{\n\treturn show_trace_dev_match(buf, PAGE_SIZE);\n}\n\nstatic ssize_t\npm_trace_dev_match_store(struct kobject *kobj, struct kobj_attribute *attr,\n\t\t\t const char *buf, size_t n)\n{\n\treturn -EINVAL;\n}\n\npower_attr(pm_trace_dev_match);\n\n#endif \n\n#ifdef CONFIG_FREEZER\nstatic ssize_t pm_freeze_timeout_show(struct kobject *kobj,\n\t\t\t\t      struct kobj_attribute *attr, char *buf)\n{\n\treturn sprintf(buf, \"%u\\n\", freeze_timeout_msecs);\n}\n\nstatic ssize_t pm_freeze_timeout_store(struct kobject *kobj,\n\t\t\t\t       struct kobj_attribute *attr,\n\t\t\t\t       const char *buf, size_t n)\n{\n\tunsigned long val;\n\n\tif (kstrtoul(buf, 10, &val))\n\t\treturn -EINVAL;\n\n\tfreeze_timeout_msecs = val;\n\treturn n;\n}\n\npower_attr(pm_freeze_timeout);\n\n#endif\t\n\nstatic struct attribute * g[] = {\n\t&state_attr.attr,\n#ifdef CONFIG_PM_TRACE\n\t&pm_trace_attr.attr,\n\t&pm_trace_dev_match_attr.attr,\n#endif\n#ifdef CONFIG_PM_SLEEP\n\t&pm_async_attr.attr,\n\t&wakeup_count_attr.attr,\n#ifdef CONFIG_PM_AUTOSLEEP\n\t&autosleep_attr.attr,\n#endif\n#ifdef CONFIG_PM_WAKELOCKS\n\t&wake_lock_attr.attr,\n\t&wake_unlock_attr.attr,\n#endif\n#ifdef CONFIG_PM_DEBUG\n\t&pm_test_attr.attr,\n#endif\n#ifdef CONFIG_PM_SLEEP_DEBUG\n\t&pm_print_times_attr.attr,\n#endif\n#endif\n#ifdef CONFIG_FREEZER\n\t&pm_freeze_timeout_attr.attr,\n#endif\n\tNULL,\n};\n\nstatic struct attribute_group attr_group = {\n\t.attrs = g,\n};\n\nstruct workqueue_struct *pm_wq;\nEXPORT_SYMBOL_GPL(pm_wq);\n\nstatic int __init pm_start_workqueue(void)\n{\n\tpm_wq = alloc_workqueue(\"pm\", WQ_FREEZABLE, 0);\n\n\treturn pm_wq ? 0 : -ENOMEM;\n}\n\nstatic int __init pm_init(void)\n{\n\tint error = pm_start_workqueue();\n\tif (error)\n\t\treturn error;\n\thibernate_image_size_init();\n\thibernate_reserved_size_init();\n\tpower_kobj = kobject_create_and_add(\"power\", NULL);\n\tif (!power_kobj)\n\t\treturn -ENOMEM;\n\terror = sysfs_create_group(power_kobj, &attr_group);\n\tif (error)\n\t\treturn error;\n\tpm_print_times_init();\n\treturn pm_autosleep_init();\n}\n\ncore_initcall(pm_init);\n\n\n#include <linux/init.h>", "4864": "< PM_SUSPEND_MAX; i++)\n\t\tif (pm_states[i])\n\t\t\ts += sprintf(s,\"%s \", pm_states[i]);\n\n#endif\n\tif (hibernation_available())\n\t\ts += sprintf(s, \"disk \");\n\tif (s != buf)\n\t\t\n\t\t*(s-1) = '\\n';\n\treturn (s - buf);\n}\n\nstatic suspend_state_t decode_state(const char *buf, size_t n)\n{\n#ifdef CONFIG_SUSPEND\n\tsuspend_state_t state;\n#endif\n\tchar *p;\n\tint len;\n\n\tp = memchr(buf, '\\n', n);\n\tlen = p ? p - buf : n;\n\n\t\n\tif (len == 4 && !strncmp(buf, \"disk\", len))\n\t\treturn PM_SUSPEND_MAX;\n\n#ifdef CONFIG_SUSPEND\n\tfor (state = PM_SUSPEND_MIN; state < PM_SUSPEND_MAX; state++) {\n\t\tconst char *label = pm_states[state];\n\n\t\tif (label && len == strlen(label) && !strncmp(buf, label, len))\n\t\t\treturn state;\n\t}\n#endif\n\n\treturn PM_SUSPEND_ON;\n}\n\nstatic ssize_t state_store(struct kobject *kobj, struct kobj_attribute *attr,\n\t\t\t   const char *buf, size_t n)\n{\n\tsuspend_state_t state;\n\tint error;\n\n\terror = pm_autosleep_lock();\n\tif (error)\n\t\treturn error;\n\n\tif (pm_autosleep_state() >", "4865": "< PM_SUSPEND_MAX; test_state++) {\n\t\tconst char *state_label = pm_states[test_state];\n\n\t\tif (state_label && !strcmp(test_state_label, state_label))\n\t\t\tbreak;\n\t}\n\tif (test_state == PM_SUSPEND_MAX) {\n\t\tprintk(warn_bad_state, test_state_label);\n\t\treturn 0;\n\t}\n\n\t\n\tdev = class_find_device(rtc_class, NULL, NULL, has_wakealarm);\n\tif (dev)\n\t\trtc = rtc_class_open(dev_name(dev));\n\tif (!rtc) {\n\t\tprintk(warn_no_rtc);\n\t\treturn 0;\n\t}\n\n\t\n\ttest_wakealarm(rtc, test_state);\n\trtc_class_close(rtc);\n\treturn 0;\n}\nlate_initcall(test_suspend);\n\n\n#include <linux/errno.h>", "4866": "< PPS_INTMAX) {\n\t\t\tpps_shift++;\n\t\t\tpps_intcnt = 0;\n\t\t}\n\t}\n}\n\n\nstatic long hardpps_update_freq(struct pps_normtime freq_norm)\n{\n\tlong delta, delta_mod;\n\ts64 ftemp;\n\n\t\n\tif (freq_norm.sec >", "4867": "< PREEMPT_MASK) &&\n\t\t\t!(preempt_count() & PREEMPT_MASK)))\n\t\treturn;\n#endif\n\n\tif (preempt_count() == val)\n\t\ttrace_preempt_on(CALLER_ADDR0, get_parent_ip(CALLER_ADDR1));\n\t__preempt_count_sub(val);\n}\nEXPORT_SYMBOL(preempt_count_sub);\nNOKPROBE_SYMBOL(preempt_count_sub);\n\n#endif\n\n\nstatic noinline void __schedule_bug(struct task_struct *prev)\n{\n\tif (oops_in_progress)\n\t\treturn;\n\n\tprintk(KERN_ERR \"BUG: scheduling while atomic: %s/%d/0x%08x\\n\",\n\t\tprev->", "4868": "< PRIO_PROCESS)\n\t\tgoto out;\n\n\t\n\terror = -ESRCH;\n\tif (niceval < MIN_NICE)\n\t\tniceval = MIN_NICE;\n\tif (niceval >", "4869": "< PRIO_PROCESS)\n\t\treturn -EINVAL;\n\n\trcu_read_lock();\n\tread_lock(&tasklist_lock);\n\tswitch (which) {\n\tcase PRIO_PROCESS:\n\t\tif (who)\n\t\t\tp = find_task_by_vpid(who);\n\t\telse\n\t\t\tp = current;\n\t\tif (p) {\n\t\t\tniceval = nice_to_rlimit(task_nice(p));\n\t\t\tif (niceval >", "4870": "< RCU_NEXT_SIZE; i++)\n\t\t\tif (&rdp->", "4871": "< RCU_NEXT_SIZE; i++)\n\t\trdp->", "4872": "< RCU_NEXT_TAIL; i++)\n\t\tif (ULONG_CMP_LT(c, rdp->", "4873": "< RCU_NEXT_TAIL; i++)\n\t\tif (rdp->", "4874": "< RCU_NEXT_TAIL; i++) {\n\t\tif (ULONG_CMP_LT(rnp->", "4875": "< RCU_NEXT_TAIL; i++, j++) {\n\t\tif (rdp->", "4876": "< RCU_STALL_RAT_DELAY || !rcu_gp_in_progress(rsp)) {\n\t\traw_spin_unlock_irqrestore(&rnp->", "4877": "< RCU_TORTURE_PIPE_LEN + 1; i++)\n\t\tpr_cont(\" %ld\", pipesummary[i]);\n\tpr_cont(\"\\n\");\n\n\tpr_alert(\"%s%s \", torture_type, TORTURE_FLAG);\n\tpr_cont(\"Reader Batch: \");\n\tfor (i = 0; i < RCU_TORTURE_PIPE_LEN + 1; i++)\n\t\tpr_cont(\" %ld\", batchsummary[i]);\n\tpr_cont(\"\\n\");\n\n\tpr_alert(\"%s%s \", torture_type, TORTURE_FLAG);\n\tpr_cont(\"Free-Block Circulation: \");\n\tfor (i = 0; i < RCU_TORTURE_PIPE_LEN + 1; i++) {\n\t\tpr_cont(\" %d\", atomic_read(&rcu_torture_wcount[i]));\n\t}\n\tpr_cont(\"\\n\");\n\n\tif (cur_ops->", "4878": "< RCU_TORTURE_PIPE_LEN + 1; i++) {\n\t\t\tpipesummary[i] += per_cpu(rcu_torture_count, cpu)[i];\n\t\t\tbatchsummary[i] += per_cpu(rcu_torture_batch, cpu)[i];\n\t\t}\n\t}\n\tfor (i = RCU_TORTURE_PIPE_LEN - 1; i >", "4879": "< RWSEM_WAITING_BIAS)) {\n\t\t\t\n\t\t\tif (rwsem_atomic_update(-adjustment, sem) &\n\t\t\t\t\t\tRWSEM_ACTIVE_MASK)\n\t\t\t\tgoto out;\n\t\t\t\n\t\t\tgoto try_reader_grant;\n\t\t}\n\t}\n\n\t\n\twoken = 0;\n\tdo {\n\t\twoken++;\n\n\t\tif (waiter->", "4880": "< SCHED_ATTR_SIZE_VER0 || flags)\n\t\treturn -EINVAL;\n\n\trcu_read_lock();\n\tp = find_process_by_pid(pid);\n\tretval = -ESRCH;\n\tif (!p)\n\t\tgoto out_unlock;\n\n\tretval = security_task_getscheduler(p);\n\tif (retval)\n\t\tgoto out_unlock;\n\n\tattr.sched_policy = p->", "4881": "< SCHED_ATTR_SIZE_VER0)\n\t\tgoto err_size;\n\n\t\n\tif (size >", "4882": "< SIGRTMIN)\n\t\toverride_rlimit = (is_si_special(info) || info->", "4883": "< SIGRTMIN) && sigismember(&signals->", "4884": "< SRCU_CALLBACK_BATCH; i++) {\n\t\thead = rcu_batch_dequeue(&sp->", "4885": "< TASK_COMM_LEN);\n\n\t\n\tdelta = ktime_get_ns() - tsk->", "4886": "< TVN_SIZE; i++) {\n\t\tmigrate_timer_list(new_base, old_base->", "4887": "< TVN_SIZE; j++) {\n\t\tINIT_LIST_HEAD(base->", "4888": "< TVR_SIZE) {\n\t\tint i = expires & TVR_MASK;\n\t\tvec = base->", "4889": "< TVR_SIZE; i++)\n\t\tmigrate_timer_list(new_base, old_base->", "4890": "< TVR_SIZE; j++)\n\t\tINIT_LIST_HEAD(base->", "4891": "< UIDHASH_SZ; ++n)\n\t\tINIT_HLIST_HEAD(uidhash_table + n);\n\n\t\n\tspin_lock_irq(&uidhash_lock);\n\tuid_hash_insert(&root_user, uidhashentry(GLOBAL_ROOT_UID));\n\tspin_unlock_irq(&uidhash_lock);\n\n\treturn 0;\n}\nsubsys_initcall(uid_cache_init);\n\n\nextern int mod_verify_sig(const void *mod, unsigned long *_modlen);\n\n\n#define pr_fmt(fmt) KBUILD_MODNAME \": \" fmt\n\n#include <linux/file.h>", "4892": "< UINSNS_PER_PAGE) {\n\t\t\tif (!test_and_set_bit(slot_nr, area->", "4893": "< UINSNS_PER_PAGE));\n\t} while (slot_nr >", "4894": "< UPROBES_HASH_SZ; i++)\n\t\tmutex_init(&uprobes_mmap_mutex[i]);\n\n\tif (percpu_init_rwsem(&dup_mmap_sem))\n\t\treturn -ENOMEM;\n\n\treturn register_die_notifier(&uprobe_exception_nb);\n}\n__initcall(init_uprobes);\n\n\n#include <linux/capability.h>", "4895": "< USEC_PER_SEC))\n\nint do_setitimer(int which, struct itimerval *value, struct itimerval *ovalue)\n{\n\tstruct task_struct *tsk = current;\n\tstruct hrtimer *timer;\n\tktime_t expires;\n\n\t\n\tif (!timeval_valid(&value->", "4896": "< USER_HZ\n\treturn x * (USER_HZ / HZ);\n# else\n\treturn x / (HZ / USER_HZ);\n# endif\n#else\n\treturn div_u64((u64)x * TICK_NSEC, NSEC_PER_SEC / USER_HZ);\n#endif\n}\nEXPORT_SYMBOL(jiffies_to_clock_t);\n\nunsigned long clock_t_to_jiffies(unsigned long x)\n{\n#if (HZ % USER_HZ)==0\n\tif (x >", "4897": "< USER_HZ\n\tx = div_u64(x * USER_HZ, HZ);\n# elif HZ >", "4898": "< VMACACHE_SIZE; i++) {\n\t\t\tif (!current->", "4899": "< W)\n\t\t\twl = (w * (long)tg->", "4900": "< WORK_NR_COLORS; i++) {\n\t\t\tif (WARN_ON(pwq->", "4901": "< _KERNEL_CAPABILITY_U32S; i++)  {\n\t\tif (table->", "4902": "< _NSIG; ++i)\n\t\tt->", "4903": "< _NSIG_WORDS; ++i) {\n\t\t\tx = *++s &~ *++m;\n\t\t\tif (!x)\n\t\t\t\tcontinue;\n\t\t\tsig = ffz(~x) + i*_NSIG_BPW + 1;\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\n\tcase 2:\n\t\tx = s[1] &~ m[1];\n\t\tif (!x)\n\t\t\tbreak;\n\t\tsig = ffz(~x) + _NSIG_BPW + 1;\n\t\tbreak;\n\n\tcase 1:\n\t\t\n\t\tbreak;\n\t}\n\n\treturn sig;\n}\n\nstatic inline void print_dropped_signal(int sig)\n{\n\tstatic DEFINE_RATELIMIT_STATE(ratelimit_state, 5 * HZ, 10);\n\n\tif (!print_fatal_signals)\n\t\treturn;\n\n\tif (!__ratelimit(&ratelimit_state))\n\t\treturn;\n\n\tprintk(KERN_INFO \"%s/%d: reached RLIMIT_SIGPENDING, dropped signal %d\\n\",\n\t\t\t\tcurrent->", "4904": "< __nenv; i++) {\n\t\tif (__env[i])\n\t\t\tkdb_printf(\"%s\\n\", __env[i]);\n\t}\n\n\tif (KDB_DEBUG(MASK))\n\t\tkdb_printf(\"KDBFLAGS=0x%x\\n\", kdb_flags);\n\n\treturn 0;\n}\n\n#ifdef CONFIG_PRINTK\n\nstatic int kdb_dmesg(int argc, const char **argv)\n{\n\tint diag;\n\tint logging;\n\tint lines = 0;\n\tint adjust = 0;\n\tint n = 0;\n\tint skip = 0;\n\tstruct kmsg_dumper dumper = { .active = 1 };\n\tsize_t len;\n\tchar buf[201];\n\n\tif (argc >", "4905": "< __stop___modver; p++) {\n\t\tconst struct module_version_attribute *vattr = *p;\n\n\t\tmk = locate_module_kobject(vattr->", "4906": "< __stop___param; kp++) {\n\t\tchar *dot;\n\n\t\tif (kp->", "4907": "< a->", "4908": "< active ; i++)\n\t\tvfree(info->", "4909": "< active ; i++) {\n\t\tstruct gcov_ctr_info *ctr = &info->", "4910": "< active->", "4911": "< active; ct_idx++) {\n\n\t\t\tcv_size = sizeof(gcov_type) * sci_ptr->", "4912": "< active; ct_idx++, ci_ptr++)\n\t\t\tvfree(ci_ptr->", "4913": "< addr)\n\t\t\tcontinue;\n\t\tif (PFN_DOWN(p->", "4914": "< addr)\n\t\t\tcontinue;\n\t\tif (p->", "4915": "< align)\n\t\t\t\tbuf_align = align;\n\t\t\tbuf_sz = ALIGN(buf_sz, align);\n\t\t\tbuf_sz += sechdrs[i].sh_size;\n\t\t} else {\n\t\t\t\n\t\t\tif (bss_align < align)\n\t\t\t\tbss_align = align;\n\t\t\tbss_sz = ALIGN(bss_sz, align);\n\t\t\tbss_sz += sechdrs[i].sh_size;\n\t\t}\n\t}\n\n\t\n\tbss_pad = 0;\n\tif (buf_sz & (bss_align - 1))\n\t\tbss_pad = bss_align - (buf_sz & (bss_align - 1));\n\n\tmemsz = buf_sz + bss_pad + bss_sz;\n\n\t\n\tpurgatory_buf = vzalloc(buf_sz);\n\tif (!purgatory_buf) {\n\t\tret = -ENOMEM;\n\t\tgoto out;\n\t}\n\n\tif (buf_align < bss_align)\n\t\tbuf_align = bss_align;\n\n\t\n\tret = kexec_add_buffer(image, purgatory_buf, buf_sz, memsz,\n\t\t\t\tbuf_align, min, max, top_down,\n\t\t\t\t&pi->", "4916": "< alloc) {\n\t\t\n\t\talloc -= pages;\n\t\tpages += pages_highmem;\n\t\tpages_highmem = preallocate_image_highmem(alloc);\n\t\tif (pages_highmem < alloc)\n\t\t\tgoto err_out;\n\t\tpages += pages_highmem;\n\t\t\n\t\talloc = (count - pages) - size;\n\t\tpages += preallocate_image_highmem(alloc);\n\t} else {\n\t\t\n\t\talloc = max_size - size;\n\t\tsize = preallocate_highmem_fraction(alloc, highmem, count);\n\t\tpages_highmem += size;\n\t\talloc -= size;\n\t\tsize = preallocate_image_memory(alloc, avail_normal);\n\t\tpages_highmem += preallocate_image_highmem(alloc - size);\n\t\tpages += pages_highmem + size;\n\t}\n\n\t\n\tpages -= free_unnecessary_pages();\n\n out:\n\tstop = ktime_get();\n\tprintk(KERN_CONT \"done (allocated %lu pages)\\n\", pages);\n\tswsusp_show_speed(start, stop, pages, \"Allocated\");\n\n\treturn 0;\n\n err_out:\n\tprintk(KERN_CONT \"\\n\");\n\tswsusp_free();\n\treturn -ENOMEM;\n}\n\n#ifdef CONFIG_HIGHMEM\n\n\nstatic unsigned int count_pages_for_highmem(unsigned int nr_highmem)\n{\n\tunsigned int free_highmem = count_free_highmem_pages() + alloc_highmem;\n\n\tif (free_highmem >", "4917": "< arg.nr; ) {\n\t\tsiginfo_t info;\n\t\ts32 off = arg.off + i;\n\n\t\tspin_lock_irq(&child->", "4918": "< argc && i < MAX_TRACE_ARGS; i++) {\n\t\tstruct probe_arg *parg = &tu->", "4919": "< arrsize; j++) {\n\t\tif (fn(&arr[j], owner, data))\n\t\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n\nbool each_symbol_section(bool (*fn)(const struct symsearch *arr,\n\t\t\t\t    struct module *owner,\n\t\t\t\t    void *data),\n\t\t\t void *data)\n{\n\tstruct module *mod;\n\tstatic const struct symsearch arr[] = {\n\t\t{ __start___ksymtab, __stop___ksymtab, __start___kcrctab,\n\t\t  NOT_GPL_ONLY, false },\n\t\t{ __start___ksymtab_gpl, __stop___ksymtab_gpl,\n\t\t  __start___kcrctab_gpl,\n\t\t  GPL_ONLY, false },\n\t\t{ __start___ksymtab_gpl_future, __stop___ksymtab_gpl_future,\n\t\t  __start___kcrctab_gpl_future,\n\t\t  WILL_BE_GPL_ONLY, false },\n#ifdef CONFIG_UNUSED_SYMBOLS\n\t\t{ __start___ksymtab_unused, __stop___ksymtab_unused,\n\t\t  __start___kcrctab_unused,\n\t\t  NOT_GPL_ONLY, true },\n\t\t{ __start___ksymtab_unused_gpl, __stop___ksymtab_unused_gpl,\n\t\t  __start___kcrctab_unused_gpl,\n\t\t  GPL_ONLY, true },\n#endif\n\t};\n\n\tif (each_symbol_in_section(arr, ARRAY_SIZE(arr), NULL, fn, data))\n\t\treturn true;\n\n\tlist_for_each_entry_rcu(mod, &modules, list) {\n\t\tstruct symsearch arr[] = {\n\t\t\t{ mod->", "4920": "< attr->", "4921": "< audit_backlog_limit))\n\t\tskb_queue_tail(&audit_skb_hold_queue, skb);\n\telse\n\t\tkfree_skb(skb);\n}\n\n\nstatic void audit_printk_skb(struct sk_buff *skb)\n{\n\tstruct nlmsghdr *nlh = nlmsg_hdr(skb);\n\tchar *data = nlmsg_data(nlh);\n\n\tif (nlh->", "4922": "< audit_rate_limit) {\n\t\tretval = 1;\n\t} else {\n\t\tnow     = jiffies;\n\t\telapsed = now - last_check;\n\t\tif (elapsed >", "4923": "< aux->", "4924": "< axs->", "4925": "< az; i++) {\n\t\tif (!range[i].end) {\n\t\t\tnr_range = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t\n\tsort(range, nr_range, sizeof(struct range), cmp_range, NULL);\n\n\treturn nr_range;\n}\n\nvoid sort_range(struct range *range, int nr_range)\n{\n\t\n\tsort(range, nr_range, sizeof(struct range), cmp_range, NULL);\n}\n\n#include <linux/spinlock.h>", "4926": "< az; j++) {\n\t\tif (!range[j].end)\n\t\t\tcontinue;\n\n\t\tif (start <= range[j].start && end >", "4927": "< b->", "4928": "< bc->", "4929": "< best->", "4930": "< bits) {\n\t\t\tpfn = bm->", "4931": "< bm_min)\n\t\tbm_min = delta;\n\n\t\n\tif (bm_cnt >", "4932": "< buf_len; i++)\n\t\ttrace_seq_printf(p, \"%s%2.2x\", i == 0 ? \"\" : \" \", buf[i]);\n\n\ttrace_seq_putc(p, 0);\n\n\treturn ret;\n}\nEXPORT_SYMBOL(ftrace_print_hex_seq);\n\nconst char *\nftrace_print_array_seq(struct trace_seq *p, const void *buf, int count,\n\t\t       size_t el_size)\n{\n\tconst char *ret = trace_seq_buffer_ptr(p);\n\tconst char *prefix = \"\";\n\tvoid *ptr = (void *)buf;\n\tsize_t buf_len = count * el_size;\n\n\ttrace_seq_putc(p, '{');\n\n\twhile (ptr < buf + buf_len) {\n\t\tswitch (el_size) {\n\t\tcase 1:\n\t\t\ttrace_seq_printf(p, \"%s0x%x\", prefix,\n\t\t\t\t\t *(u8 *)ptr);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\ttrace_seq_printf(p, \"%s0x%x\", prefix,\n\t\t\t\t\t *(u16 *)ptr);\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\ttrace_seq_printf(p, \"%s0x%x\", prefix,\n\t\t\t\t\t *(u32 *)ptr);\n\t\t\tbreak;\n\t\tcase 8:\n\t\t\ttrace_seq_printf(p, \"%s0x%llx\", prefix,\n\t\t\t\t\t *(u64 *)ptr);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ttrace_seq_printf(p, \"BAD SIZE:%zu 0x%x\", el_size,\n\t\t\t\t\t *(u8 *)ptr);\n\t\t\tel_size = 1;\n\t\t}\n\t\tprefix = \",\";\n\t\tptr += el_size;\n\t}\n\n\ttrace_seq_putc(p, '}');\n\ttrace_seq_putc(p, 0);\n\n\treturn ret;\n}\nEXPORT_SYMBOL(ftrace_print_array_seq);\n\nint ftrace_raw_output_prep(struct trace_iterator *iter,\n\t\t\t   struct trace_event *trace_event)\n{\n\tstruct ftrace_event_call *event;\n\tstruct trace_seq *s = &iter->", "4933": "< buflen)\n\t\t\tpath = buf;\n\t}\n\n\tup_read(&css_set_rwsem);\n\tmutex_unlock(&cgroup_mutex);\n\treturn path;\n}\nEXPORT_SYMBOL_GPL(task_cgroup_path);\n\n\nstruct cgroup_taskset {\n\t\n\tstruct list_head\tsrc_csets;\n\tstruct list_head\tdst_csets;\n\n\t\n\tstruct list_head\t*csets;\n\tstruct css_set\t\t*cur_cset;\n\tstruct task_struct\t*cur_task;\n};\n\n\nstruct task_struct *cgroup_taskset_first(struct cgroup_taskset *tset)\n{\n\ttset->", "4934": "< busiest->", "4935": "< c->", "4936": "< call->", "4937": "< calltime)\n\t\t\tcalltime -= current->", "4938": "< capacity_of(env->", "4939": "< cbflood_n_burst; i++) {\n\t\t\tfor (j = 0; j < cbflood_n_per_burst; j++) {\n\t\t\t\tcur_ops->", "4940": "< cfs_rq->", "4941": "< chain->", "4942": "< chunk->", "4943": "< ci_ptr->", "4944": "< cnt; i++)\n\t\tfree_desc(from + i);\n\n\tmutex_lock(&sparse_irq_lock);\n\tbitmap_clear(allocated_irqs, from, cnt);\n\tmutex_unlock(&sparse_irq_lock);\n}\nEXPORT_SYMBOL_GPL(irq_free_descs);\n\n\nint __ref\n__irq_alloc_descs(int irq, unsigned int from, unsigned int cnt, int node,\n\t\t  struct module *owner)\n{\n\tint start, ret;\n\n\tif (!cnt)\n\t\treturn -EINVAL;\n\n\tif (irq >", "4945": "< cnt; i++) {\n\t\tdesc = alloc_desc(start + i, node, owner);\n\t\tif (!desc)\n\t\t\tgoto err;\n\t\tmutex_lock(&sparse_irq_lock);\n\t\tirq_insert_desc(start + i, desc);\n\t\tmutex_unlock(&sparse_irq_lock);\n\t}\n\treturn start;\n\nerr:\n\tfor (i--; i >", "4946": "< cnt; i++) {\n\t\tstruct irq_desc *desc = irq_to_desc(start + i);\n\n\t\tdesc->", "4947": "< commit && !kill_test; i += inc) {\n\n\t\t\tif (i >", "4948": "< context->", "4949": "< count) {\n\t\t\tpr_warning(\"Line length is too long: \"\n\t\t\t\t   \"Should be less than %d.\", WRITE_BUFSIZE);\n\t\t\tret = -EINVAL;\n\t\t\tgoto out;\n\t\t}\n\t\tdone += size;\n\t\t\n\t\ttmp = strchr(kbuf, '#');\n\n\t\tif (tmp)\n\t\t\t*tmp = '\\0';\n\n\t\tret = traceprobe_command(kbuf, createfn);\n\t\tif (ret)\n\t\t\tgoto out;\n\t}\n\tret = done;\n\nout:\n\tkfree(kbuf);\n\n\treturn ret;\n}\n\nstatic int __set_print_fmt(struct trace_probe *tp, char *buf, int len,\n\t\t\t   bool is_return)\n{\n\tint i;\n\tint pos = 0;\n\n\tconst char *fmt, *arg;\n\n\tif (!is_return) {\n\t\tfmt = \"(%lx)\";\n\t\targ = \"REC->", "4950": "< count) {\n\t\tsize = count - done;\n\n\t\tif (size >", "4951": "< count; i++) {\n\t\tINIT_LIST_HEAD(&chunk->", "4952": "< count; i++) {\n\t\tdesc[i].kstat_irqs = alloc_percpu(unsigned int);\n\t\talloc_masks(&desc[i], GFP_KERNEL, node);\n\t\traw_spin_lock_init(&desc[i].lock);\n\t\tlockdep_set_class(&desc[i].lock, &irq_desc_lock_class);\n\t\tdesc_set_defaults(i, &desc[i], node, NULL);\n\t}\n\treturn arch_early_irq_init();\n}\n\nstruct irq_desc *irq_to_desc(unsigned int irq)\n{\n\treturn (irq < NR_IRQS) ? irq_desc + irq : NULL;\n}\nEXPORT_SYMBOL(irq_to_desc);\n\nstatic void free_desc(unsigned int irq)\n{\n\tstruct irq_desc *desc = irq_to_desc(irq);\n\tunsigned long flags;\n\n\traw_spin_lock_irqsave(&desc->", "4953": "< count; i++) {\n\t\tirq_domain_associate(domain, irq_base + i, hwirq_base + i);\n\t}\n}\nEXPORT_SYMBOL_GPL(irq_domain_associate_many);\n\n\nunsigned int irq_create_direct_mapping(struct irq_domain *domain)\n{\n\tunsigned int virq;\n\n\tif (domain == NULL)\n\t\tdomain = irq_default_domain;\n\n\tvirq = irq_alloc_desc_from(1, of_node_to_nid(domain->", "4954": "< count; i++) {\n\t\tlink = kzalloc(sizeof(*link), GFP_KERNEL);\n\t\tif (!link) {\n\t\t\tfree_cgrp_cset_links(tmp_links);\n\t\t\treturn -ENOMEM;\n\t\t}\n\t\tlist_add(&link->", "4955": "< cp->", "4956": "< cpu)) {\n\t\tkick = true;\n\t\tgoto unlock;\n\t}\n\nunlock:\n\trcu_read_unlock();\n\treturn kick;\n}\n#else\nstatic void nohz_idle_balance(struct rq *this_rq, enum cpu_idle_type idle) { }\n#endif\n\n\nstatic void run_rebalance_domains(struct softirq_action *h)\n{\n\tstruct rq *this_rq = this_rq();\n\tenum cpu_idle_type idle = this_rq->", "4957": "< cpu_index; cpu++)\n\t\ttarget_cpu = cpumask_next(target_cpu, pd->", "4958": "< cpu_rq(target)->", "4959": "< cpumask_size())\n\t\tcpumask_clear(new_mask);\n\telse if (len >", "4960": "< cq_depth)\n\t\t\t\t\tmax_bfs_queue_depth = cq_depth;\n\t\t\t}\n\t\t}\n\t}\nexit:\n\treturn ret;\n}\n\nstatic inline int __bfs_forwards(struct lock_list *src_entry,\n\t\t\tvoid *data,\n\t\t\tint (*match)(struct lock_list *entry, void *data),\n\t\t\tstruct lock_list **target_entry)\n{\n\treturn __bfs(src_entry, data, match, target_entry, 1);\n\n}\n\nstatic inline int __bfs_backwards(struct lock_list *src_entry,\n\t\t\tvoid *data,\n\t\t\tint (*match)(struct lock_list *entry, void *data),\n\t\t\tstruct lock_list **target_entry)\n{\n\treturn __bfs(src_entry, data, match, target_entry, 0);\n\n}\n\n\n\n\nstatic noinline int\nprint_circular_bug_entry(struct lock_list *target, int depth)\n{\n\tif (debug_locks_silent)\n\t\treturn 0;\n\tprintk(\"\\n->", "4961": "< crashk_res.start) ||\n\t\t\t    (mend >", "4962": "< crashk_res.start) || (entry >", "4963": "< csn; i++)\n\t\tcsa[i]->", "4964": "< csn; i++) {\n\t\tstruct cpuset *a = csa[i];\n\t\tint apn = a->", "4965": "< csn; i++) {\n\t\tstruct cpuset *a = csa[i];\n\t\tstruct cpumask *dp;\n\t\tint apn = a->", "4966": "< csn; j++) {\n\t\t\tstruct cpuset *b = csa[j];\n\t\t\tint bpn = b->", "4967": "< csn; k++) {\n\t\t\t\t\tstruct cpuset *c = csa[k];\n\n\t\t\t\t\tif (c->", "4968": "< cur->", "4969": "< cur_dl_b->", "4970": "< curr->", "4971": "< curr_cost + sd->", "4972": "< cxt.nrealwriters_stress ||\n\t\t    j < cxt.nrealreaders_stress; i++, j++) {\n\t\tif (i >", "4973": "< cxt.nrealwriters_stress; i++)\n\t\t\ttorture_stop_kthread(lock_torture_writer,\n\t\t\t\t\t     writer_tasks[i]);\n\t\tkfree(writer_tasks);\n\t\twriter_tasks = NULL;\n\t}\n\n\tif (reader_tasks) {\n\t\tfor (i = 0; i < cxt.nrealreaders_stress; i++)\n\t\t\ttorture_stop_kthread(lock_torture_reader,\n\t\t\t\t\t     reader_tasks[i]);\n\t\tkfree(reader_tasks);\n\t\treader_tasks = NULL;\n\t}\n\n\ttorture_stop_kthread(lock_torture_stats, stats_task);\n\tlock_torture_stats_print();  \n\n\tif (atomic_read(&cxt.n_lock_torture_errors))\n\t\tlock_torture_print_module_parms(cxt.cur_ops,\n\t\t\t\t\t\t\"End of test: FAILURE\");\n\telse if (torture_onoff_failures())\n\t\tlock_torture_print_module_parms(cxt.cur_ops,\n\t\t\t\t\t\t\"End of test: LOCK_HOTPLUG\");\n\telse\n\t\tlock_torture_print_module_parms(cxt.cur_ops,\n\t\t\t\t\t\t\"End of test: SUCCESS\");\n\ttorture_cleanup_end();\n}\n\nstatic int __init lock_torture_init(void)\n{\n\tint i, j;\n\tint firsterr = 0;\n\tstatic struct lock_torture_ops *torture_ops[] = {\n\t\t&lock_busted_ops,\n\t\t&spin_lock_ops, &spin_lock_irq_ops,\n\t\t&rw_lock_ops, &rw_lock_irq_ops,\n\t\t&mutex_lock_ops,\n\t\t&rwsem_lock_ops,\n\t};\n\n\tif (!torture_init_begin(torture_type, verbose, &torture_runnable))\n\t\treturn -EBUSY;\n\n\t\n\tfor (i = 0; i < ARRAY_SIZE(torture_ops); i++) {\n\t\tcxt.cur_ops = torture_ops[i];\n\t\tif (strcmp(torture_type, cxt.cur_ops->", "4974": "< cxt.nrealwriters_stress; i++) {\n\t\tcxt.lwsa[i].n_lock_fail = 0;\n\t\tcxt.lwsa[i].n_lock_acquired = 0;\n\t}\n\n\tif (cxt.cur_ops->", "4975": "< d->", "4976": "< dah_first) {\n\t\th->", "4977": "< dah_overhead)\n\t\tgoto out;\n\tif (rem >", "4978": "< data->", "4979": "< data[thr].unc_len; off += PAGE_SIZE) {\n\t\t\t\tmemcpy(data_of(*snapshot),\n\t\t\t\t       data[thr].unc + off, PAGE_SIZE);\n\n\t\t\t\tif (!(nr_pages % m))\n\t\t\t\t\tprintk(KERN_INFO\n\t\t\t\t\t       \"PM: Image loading progress: \"\n\t\t\t\t\t       \"%3d%%\\n\",\n\t\t\t\t\t       nr_pages / m * 10);\n\t\t\t\tnr_pages++;\n\n\t\t\t\tret = snapshot_write_next(snapshot);\n\t\t\t\tif (ret <= 0) {\n\t\t\t\t\tcrc->", "4980": "< debug_alloc_pool ||\n\t    (char *)p >", "4981": "< defcmd_set_count; ++i, ++s) {\n\t\tif (strcmp(s->", "4982": "< delta)\n\t\t\t\t\tmax_offline = delta;\n\t\t\t}\n\t\t} else if (cpu_is_hotpluggable(cpu)) {\n\t\t\tif (verbose)\n\t\t\t\tpr_alert(\"%s\" TORTURE_FLAG\n\t\t\t\t\t \"torture_onoff task: onlining %d\\n\",\n\t\t\t\t\t torture_type, cpu);\n\t\t\tstarttime = jiffies;\n\t\t\tn_online_attempts++;\n\t\t\tret = cpu_up(cpu);\n\t\t\tif (ret) {\n\t\t\t\tif (verbose)\n\t\t\t\t\tpr_alert(\"%s\" TORTURE_FLAG\n\t\t\t\t\t\t \"torture_onoff task: online %d failed: errno %d\\n\",\n\t\t\t\t\t\t torture_type, cpu, ret);\n\t\t\t} else {\n\t\t\t\tif (verbose)\n\t\t\t\t\tpr_alert(\"%s\" TORTURE_FLAG\n\t\t\t\t\t\t \"torture_onoff task: onlined %d\\n\",\n\t\t\t\t\t\t torture_type, cpu);\n\t\t\t\tn_online_successes++;\n\t\t\t\tdelta = jiffies - starttime;\n\t\t\t\tsum_online += delta;\n\t\t\t\tif (min_online < 0) {\n\t\t\t\t\tmin_online = delta;\n\t\t\t\t\tmax_online = delta;\n\t\t\t\t}\n\t\t\t\tif (min_online >", "4983": "< delta)\n\t\t\t\t\tmax_online = delta;\n\t\t\t}\n\t\t}\n\t\tschedule_timeout_interruptible(onoff_interval);\n\t}\n\ttorture_kthread_stopping(\"torture_onoff\");\n\treturn 0;\n}\n\n#endif \n\n\nint torture_onoff_init(long ooholdoff, long oointerval)\n{\n\tint ret = 0;\n\n#ifdef CONFIG_HOTPLUG_CPU\n\tonoff_holdoff = ooholdoff;\n\tonoff_interval = oointerval;\n\tif (onoff_interval <= 0)\n\t\treturn 0;\n\tret = torture_create_kthread(torture_onoff, NULL, onoff_task);\n#endif \n\treturn ret;\n}\nEXPORT_SYMBOL_GPL(torture_onoff_init);\n\n\nstatic void torture_onoff_cleanup(void)\n{\n#ifdef CONFIG_HOTPLUG_CPU\n\tif (onoff_task == NULL)\n\t\treturn;\n\tVERBOSE_TOROUT_STRING(\"Stopping torture_onoff task\");\n\tkthread_stop(onoff_task);\n\tonoff_task = NULL;\n#endif \n}\nEXPORT_SYMBOL_GPL(torture_onoff_cleanup);\n\n\nvoid torture_onoff_stats(void)\n{\n#ifdef CONFIG_HOTPLUG_CPU\n\tpr_cont(\"onoff: %ld/%ld:%ld/%ld %d,%d:%d,%d %lu:%lu (HZ=%d) \",\n\t\tn_online_successes, n_online_attempts,\n\t\tn_offline_successes, n_offline_attempts,\n\t\tmin_online, max_online,\n\t\tmin_offline, max_offline,\n\t\tsum_online, sum_offline, HZ);\n#endif \n}\nEXPORT_SYMBOL_GPL(torture_onoff_stats);\n\n\nbool torture_onoff_failures(void)\n{\n#ifdef CONFIG_HOTPLUG_CPU\n\treturn n_online_successes != n_online_attempts ||\n\t       n_offline_successes != n_offline_attempts;\n#else \n\treturn false;\n#endif \n}\nEXPORT_SYMBOL_GPL(torture_onoff_failures);\n\n#define TORTURE_RANDOM_MULT\t39916801  \n#define TORTURE_RANDOM_ADD\t479001701 \n#define TORTURE_RANDOM_REFRESH\t10000\n\n\nunsigned long\ntorture_random(struct torture_random_state *trsp)\n{\n\tif (--trsp->", "4984": "< delta_jiffies) {\n\t\t\tnext_jiffies = last_jiffies + rcu_delta_jiffies;\n\t\t\tdelta_jiffies = rcu_delta_jiffies;\n\t\t}\n\t}\n\n\t\n\tif (!ts->", "4985": "< depth; i++) {\n\t\thlock = curr->", "4986": "< depth; i++) {\n\t\tprintk(\" #%d: \", i);\n\t\tprint_lock(curr->", "4987": "< desc->", "4988": "< dev->", "4989": "< dist) {\n\t\t\t\t\tfaults += group_faults(p, b);\n\t\t\t\t\tnode_set(b, this_group);\n\t\t\t\t\tnode_clear(b, nodes);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\n\t\t\tif (faults >", "4990": "< dl_b->", "4991": "< dlen)\n\t\treturn 1;\n\n\tparentlen = parentlen == AUDIT_NAME_FULL ? parent_len(path) : parentlen;\n\tif (pathlen - parentlen != dlen)\n\t\treturn 1;\n\n\tp = path + parentlen;\n\n\treturn strncmp(p, dname, dlen);\n}\n\nstatic int audit_filter_user_rules(struct audit_krule *rule, int type,\n\t\t\t\t   enum audit_state *state)\n{\n\tint i;\n\n\tfor (i = 0; i < rule->", "4992": "< domain->", "4993": "< dst->", "4994": "< dst_load * src_capacity;\n\telse\n\t\t\n\t\treturn dst_load * src_capacity < src_load * dst_capacity;\n}\n\n\nstatic void task_numa_compare(struct task_numa_env *env,\n\t\t\t      long taskimp, long groupimp)\n{\n\tstruct rq *src_rq = cpu_rq(env->", "4995": "< e->", "4996": "< ehdr->", "4997": "< elen)\n\t\treturn NULL;\n\n\tsnprintf(ptr, elen + 1, \"%ld\", map->", "4998": "< end) {\n\t\t\t\tnext_res = alloc_resource(GFP_ATOMIC);\n\t\t\t\tif (!next_res) {\n\t\t\t\t\tfree_resource(res);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tnext_res->", "4999": "< end) {\n\t\t\t*crash_size = size;\n\t\t\tbreak;\n\t\t}\n\t} while (*cur++ == ',');\n\n\tif (*crash_size >", "5000": "< end) {\n\t\t\tint mid = (index + end) / 2;\n\t\t\tif (cgroup_pid_fry(cgrp, l->", "5001": "< end) {\n\t\t\tp = &res->", "5002": "< end) {\n\t\t\n\t\tif (end - p < 4)\n\t\t\tgoto dodgy_cert;\n\t\tif (p[0] != 0x30 &&\n\t\t    p[1] != 0x82)\n\t\t\tgoto dodgy_cert;\n\t\tplen = (p[2] << 8) | p[3];\n\t\tplen += 4;\n\t\tif (plen >", "5003": "< end) {\n\t\tpr_err(\"requested range [0x%llx-0x%llx] not in root %pr\\n\",\n\t\t       (unsigned long long)start, (unsigned long long)end,\n\t\t       root);\n\t\tif (start >", "5004": "< end))\n\t\t\tbreak;\n\t}\n\n\tread_unlock(&resource_lock);\n\tif (!p)\n\t\treturn -1;\n\t\n\tif (res->", "5005": "< end))\n\t\treturn 1;\n\n\tif (arch_is_kernel_data(addr))\n\t\treturn 1;\n\n\t\n\tif (is_kernel_percpu_address(addr))\n\t\treturn 1;\n\n\t\n\treturn is_module_address(addr) || is_module_percpu_address(addr);\n}\n#endif\n\n\nstatic int count_matching_names(struct lock_class *new_class)\n{\n\tstruct lock_class *class;\n\tint count = 0;\n\n\tif (!new_class->", "5006": "< end; addr += PAGE_SIZE)\n\t\tfree_reserved_page(pfn_to_page(addr >", "5007": "< end; addr++) {\n\t\t\terr = get_user(val, addr);\n\t\t\tif (err)\n\t\t\t\treturn err;\n\t\t\tif (val)\n\t\t\t\treturn -E2BIG;\n\t\t}\n\t\tsize = sizeof(attr);\n\t}\n\n\t\n\tif (copy_from_user(&attr, uattr, size) != 0)\n\t\treturn -EFAULT;\n\n\tswitch (cmd) {\n\tcase BPF_MAP_CREATE:\n\t\terr = map_create(&attr);\n\t\tbreak;\n\tcase BPF_MAP_LOOKUP_ELEM:\n\t\terr = map_lookup_elem(&attr);\n\t\tbreak;\n\tcase BPF_MAP_UPDATE_ELEM:\n\t\terr = map_update_elem(&attr);\n\t\tbreak;\n\tcase BPF_MAP_DELETE_ELEM:\n\t\terr = map_delete_elem(&attr);\n\t\tbreak;\n\tcase BPF_MAP_GET_NEXT_KEY:\n\t\terr = map_get_next_key(&attr);\n\t\tbreak;\n\tcase BPF_PROG_LOAD:\n\t\terr = bpf_prog_load(&attr);\n\t\tbreak;\n\tdefault:\n\t\terr = -EINVAL;\n\t\tbreak;\n\t}\n\n\treturn err;\n}\n\n\n#include <linux/export.h>", "5008": "< end; addr++) {\n\t\t\tret = get_user(val, addr);\n\t\t\tif (ret)\n\t\t\t\treturn ret;\n\t\t\tif (val)\n\t\t\t\tgoto err_size;\n\t\t}\n\t\tsize = sizeof(*attr);\n\t}\n\n\tret = copy_from_user(attr, uattr, size);\n\tif (ret)\n\t\treturn -EFAULT;\n\n\t\n\tattr->", "5009": "< end; i++)\n\t\tkfree(ret_stack_list[i]);\n\treturn ret;\n}\n\nstatic void\nftrace_graph_probe_sched_switch(void *ignore,\n\t\t\tstruct task_struct *prev, struct task_struct *next)\n{\n\tunsigned long long timestamp;\n\tint index;\n\n\t\n\tif (trace_flags & TRACE_ITER_SLEEP_TIME)\n\t\treturn;\n\n\ttimestamp = trace_clock_local();\n\n\tprev->", "5010": "< end; iter++) {\n\t\tentry = arch_deref_entry_point((void *)*iter);\n\n\t\tif (!kernel_text_address(entry) ||\n\t\t    !kallsyms_lookup_size_offset(entry, &size, &offset)) {\n\t\t\tpr_err(\"Failed to find blacklist at %p\\n\",\n\t\t\t\t(void *)entry);\n\t\t\tcontinue;\n\t\t}\n\n\t\tent = kmalloc(sizeof(*ent), GFP_KERNEL);\n\t\tif (!ent)\n\t\t\treturn -ENOMEM;\n\t\tent->", "5011": "< end; iter++) {\n\t\tstruct trace_bprintk_fmt *tb_fmt = lookup_format(*iter);\n\t\tif (tb_fmt) {\n\t\t\t*iter = tb_fmt->", "5012": "< end; map++, offset = 0) {\n\t\tif (unlikely(!map->", "5013": "< end; p++) {\n\n\t\tif (trace_seq_has_overflowed(s))\n\t\t\tbreak;\n\n\t\ttrace_seq_puts(s, \" =>", "5014": "< ent->", "5015": "< entry->", "5016": "< env->", "5017": "< erule->", "5018": "< event->", "5019": "< ext->", "5020": "< extents; idx++) {\n\t\tfirst = map->", "5021": "< fcount; i++) {\n\t\tswitch (new->", "5022": "< filter->", "5023": "< first_space))\n\t\treturn parse_crashkernel_mem(ck_cmdline, system_ram,\n\t\t\t\tcrash_size, crash_base);\n\n\treturn parse_crashkernel_simple(ck_cmdline, crash_size, crash_base);\n}\n\n\nint __init parse_crashkernel(char *cmdline,\n\t\t\t     unsigned long long system_ram,\n\t\t\t     unsigned long long *crash_size,\n\t\t\t     unsigned long long *crash_base)\n{\n\treturn __parse_crashkernel(cmdline, system_ram, crash_size, crash_base,\n\t\t\t\t\t\"crashkernel=\", NULL);\n}\n\nint __init parse_crashkernel_high(char *cmdline,\n\t\t\t     unsigned long long system_ram,\n\t\t\t     unsigned long long *crash_size,\n\t\t\t     unsigned long long *crash_base)\n{\n\treturn __parse_crashkernel(cmdline, system_ram, crash_size, crash_base,\n\t\t\t\t\"crashkernel=\", suffix_tbl[SUFFIX_HIGH]);\n}\n\nint __init parse_crashkernel_low(char *cmdline,\n\t\t\t     unsigned long long system_ram,\n\t\t\t     unsigned long long *crash_size,\n\t\t\t     unsigned long long *crash_base)\n{\n\treturn __parse_crashkernel(cmdline, system_ram, crash_size, crash_base,\n\t\t\t\t\"crashkernel=\", suffix_tbl[SUFFIX_LOW]);\n}\n\nstatic void update_vmcoreinfo_note(void)\n{\n\tu32 *buf = vmcoreinfo_note;\n\n\tif (!vmcoreinfo_size)\n\t\treturn;\n\tbuf = append_elf_note(buf, VMCOREINFO_NOTE_NAME, 0, vmcoreinfo_data,\n\t\t\t      vmcoreinfo_size);\n\tfinal_note(buf);\n}\n\nvoid crash_save_vmcoreinfo(void)\n{\n\tvmcoreinfo_append_str(\"CRASHTIME=%ld\\n\", get_seconds());\n\tupdate_vmcoreinfo_note();\n}\n\nvoid vmcoreinfo_append_str(const char *fmt, ...)\n{\n\tva_list args;\n\tchar buf[0x50];\n\tsize_t r;\n\n\tva_start(args, fmt);\n\tr = vscnprintf(buf, sizeof(buf), fmt, args);\n\tva_end(args);\n\n\tr = min(r, vmcoreinfo_max_size - vmcoreinfo_size);\n\n\tmemcpy(&vmcoreinfo_data[vmcoreinfo_size], buf, r);\n\n\tvmcoreinfo_size += r;\n}\n\n\nvoid __weak arch_crash_save_vmcoreinfo(void)\n{}\n\nunsigned long __weak paddr_vmcoreinfo_note(void)\n{\n\treturn __pa((unsigned long)(char *)&vmcoreinfo_note);\n}\n\nstatic int __init crash_save_vmcoreinfo_init(void)\n{\n\tVMCOREINFO_OSRELEASE(init_uts_ns.name.release);\n\tVMCOREINFO_PAGESIZE(PAGE_SIZE);\n\n\tVMCOREINFO_SYMBOL(init_uts_ns);\n\tVMCOREINFO_SYMBOL(node_online_map);\n#ifdef CONFIG_MMU\n\tVMCOREINFO_SYMBOL(swapper_pg_dir);\n#endif\n\tVMCOREINFO_SYMBOL(_stext);\n\tVMCOREINFO_SYMBOL(vmap_area_list);\n\n#ifndef CONFIG_NEED_MULTIPLE_NODES\n\tVMCOREINFO_SYMBOL(mem_map);\n\tVMCOREINFO_SYMBOL(contig_page_data);\n#endif\n#ifdef CONFIG_SPARSEMEM\n\tVMCOREINFO_SYMBOL(mem_section);\n\tVMCOREINFO_LENGTH(mem_section, NR_SECTION_ROOTS);\n\tVMCOREINFO_STRUCT_SIZE(mem_section);\n\tVMCOREINFO_OFFSET(mem_section, section_mem_map);\n#endif\n\tVMCOREINFO_STRUCT_SIZE(page);\n\tVMCOREINFO_STRUCT_SIZE(pglist_data);\n\tVMCOREINFO_STRUCT_SIZE(zone);\n\tVMCOREINFO_STRUCT_SIZE(free_area);\n\tVMCOREINFO_STRUCT_SIZE(list_head);\n\tVMCOREINFO_SIZE(nodemask_t);\n\tVMCOREINFO_OFFSET(page, flags);\n\tVMCOREINFO_OFFSET(page, _count);\n\tVMCOREINFO_OFFSET(page, mapping);\n\tVMCOREINFO_OFFSET(page, lru);\n\tVMCOREINFO_OFFSET(page, _mapcount);\n\tVMCOREINFO_OFFSET(page, private);\n\tVMCOREINFO_OFFSET(pglist_data, node_zones);\n\tVMCOREINFO_OFFSET(pglist_data, nr_zones);\n#ifdef CONFIG_FLAT_NODE_MEM_MAP\n\tVMCOREINFO_OFFSET(pglist_data, node_mem_map);\n#endif\n\tVMCOREINFO_OFFSET(pglist_data, node_start_pfn);\n\tVMCOREINFO_OFFSET(pglist_data, node_spanned_pages);\n\tVMCOREINFO_OFFSET(pglist_data, node_id);\n\tVMCOREINFO_OFFSET(zone, free_area);\n\tVMCOREINFO_OFFSET(zone, vm_stat);\n\tVMCOREINFO_OFFSET(zone, spanned_pages);\n\tVMCOREINFO_OFFSET(free_area, free_list);\n\tVMCOREINFO_OFFSET(list_head, next);\n\tVMCOREINFO_OFFSET(list_head, prev);\n\tVMCOREINFO_OFFSET(vmap_area, va_start);\n\tVMCOREINFO_OFFSET(vmap_area, list);\n\tVMCOREINFO_LENGTH(zone.free_area, MAX_ORDER);\n\tlog_buf_kexec_setup();\n\tVMCOREINFO_LENGTH(free_area.free_list, MIGRATE_TYPES);\n\tVMCOREINFO_NUMBER(NR_FREE_PAGES);\n\tVMCOREINFO_NUMBER(PG_lru);\n\tVMCOREINFO_NUMBER(PG_private);\n\tVMCOREINFO_NUMBER(PG_swapcache);\n\tVMCOREINFO_NUMBER(PG_slab);\n#ifdef CONFIG_MEMORY_FAILURE\n\tVMCOREINFO_NUMBER(PG_hwpoison);\n#endif\n\tVMCOREINFO_NUMBER(PG_head_mask);\n\tVMCOREINFO_NUMBER(PAGE_BUDDY_MAPCOUNT_VALUE);\n#ifdef CONFIG_HUGETLBFS\n\tVMCOREINFO_SYMBOL(free_huge_page);\n#endif\n\n\tarch_crash_save_vmcoreinfo();\n\tupdate_vmcoreinfo_note();\n\n\treturn 0;\n}\n\nsubsys_initcall(crash_save_vmcoreinfo_init);\n\n#ifdef CONFIG_KEXEC_FILE\nstatic int locate_mem_hole_top_down(unsigned long start, unsigned long end,\n\t\t\t\t    struct kexec_buf *kbuf)\n{\n\tstruct kimage *image = kbuf->", "5024": "< flen; pc++) {\n\t\tstruct sock_filter *ftest = &filter[pc];\n\t\tu16 code = ftest->", "5025": "< fmt_size; i++) {\n\t\tif ((!isprint(fmt[i]) && !isspace(fmt[i])) || !isascii(fmt[i]))\n\t\t\treturn -EINVAL;\n\n\t\tif (fmt[i] != '%')\n\t\t\tcontinue;\n\n\t\tif (fmt_cnt >", "5026": "< freezer_delta.tv64))\n\t\tfreezer_delta = delta;\n\tspin_unlock_irqrestore(&freezer_delta_lock, flags);\n}\n\n\n\nvoid alarm_init(struct alarm *alarm, enum alarmtimer_type type,\n\t\tenum alarmtimer_restart (*function)(struct alarm *, ktime_t))\n{\n\ttimerqueue_init(&alarm->", "5027": "< gc->", "5028": "< gdbstub_use_prev_in_buf)\n\t\t\treturn remcom_in_buffer[gdbstub_prev_in_buf_pos++];\n\t\telse\n\t\t\tgdbstub_use_prev_in_buf = 0;\n\t}\n\n\t\n\twhile (ret < 0)\n\t\tfor (i = 0; kdb_poll_funcs[i] != NULL; i++) {\n\t\t\tret = kdb_poll_funcs[i]();\n\t\t\tif (ret >", "5029": "< get_func(iter)->", "5030": "< group_faults(p, src_nid);\n\t}\n\n\t\n\tif (src_nid == p->", "5031": "< group_first_cpu(sg)) {\n\t\tif (!sds->", "5032": "< group_info->", "5033": "< header_size) {\n\t\t\n\t\tstack_size = USHRT_MAX - header_size - sizeof(u64);\n\t\tstack_size = round_up(stack_size, sizeof(u64));\n\t}\n\n\treturn stack_size;\n}\n\nstatic void\nperf_output_sample_ustack(struct perf_output_handle *handle, u64 dump_size,\n\t\t\t  struct pt_regs *regs)\n{\n\t\n\tif (!regs) {\n\t\tu64 size = 0;\n\t\tperf_output_put(handle, size);\n\t} else {\n\t\tunsigned long sp;\n\t\tunsigned int rem;\n\t\tu64 dyn_size;\n\n\t\t\n\n\t\t\n\t\tperf_output_put(handle, dump_size);\n\n\t\t\n\t\tsp = perf_user_stack_pointer(regs);\n\t\trem = __output_copy_user(handle, (void *) sp, dump_size);\n\t\tdyn_size = dump_size - rem;\n\n\t\tperf_output_skip(handle, rem);\n\n\t\t\n\t\tperf_output_put(handle, dyn_size);\n\t}\n}\n\nstatic void __perf_event_header__init_id(struct perf_event_header *header,\n\t\t\t\t\t struct perf_sample_data *data,\n\t\t\t\t\t struct perf_event *event)\n{\n\tu64 sample_type = event->", "5034": "< highbp;\n\t    i++, bp++) {\n\t\tif (bp->", "5035": "< htab->", "5036": "< i; j++)\n\t\trdp->", "5037": "< i; j++) {\n\t\t\tunsigned long pstart, pend;\n\t\t\tpstart = image->", "5038": "< image->", "5039": "< imbalance*min_load)\n\t\treturn NULL;\n\treturn idlest;\n}\n\n\nstatic int\nfind_idlest_cpu(struct sched_group *group, struct task_struct *p, int this_cpu)\n{\n\tunsigned long load, min_load = ULONG_MAX;\n\tunsigned int min_exit_latency = UINT_MAX;\n\tu64 latest_idle_timestamp = 0;\n\tint least_loaded_cpu = this_cpu;\n\tint shallowest_idle_cpu = -1;\n\tint i;\n\n\t\n\tfor_each_cpu_and(i, sched_group_cpus(group), tsk_cpus_allowed(p)) {\n\t\tif (idle_cpu(i)) {\n\t\t\tstruct rq *rq = cpu_rq(i);\n\t\t\tstruct cpuidle_state *idle = idle_get_state(rq);\n\t\t\tif (idle && idle->", "5040": "< index)\n\t\t\t\t\tbreak;\n\t\t\t\treturn expires;\n\t\t\t}\n\t\t\tslot = (slot + 1) & TVN_MASK;\n\t\t} while (slot != index);\n\n\t\tif (index)\n\t\t\ttimer_jiffies += TVN_SIZE - index;\n\t\ttimer_jiffies >", "5041": "< index)\n\t\t\t\tgoto cascade;\n\t\t\treturn expires;\n\t\t}\n\t\tslot = (slot + 1) & TVR_MASK;\n\t} while (slot != index);\n\ncascade:\n\t\n\tif (index)\n\t\ttimer_jiffies += TVR_SIZE - index;\n\ttimer_jiffies >", "5042": "< info->", "5043": "< initcnt; i++) {\n\t\tdesc = alloc_desc(i, node, NULL);\n\t\tset_bit(i, allocated_irqs);\n\t\tirq_insert_desc(i, desc);\n\t}\n\treturn arch_early_irq_init();\n}\n\n#else \n\nstruct irq_desc irq_desc[NR_IRQS] __cacheline_aligned_in_smp = {\n\t[0 ... NR_IRQS-1] = {\n\t\t.handle_irq\t= handle_bad_irq,\n\t\t.depth\t\t= 1,\n\t\t.lock\t\t= __RAW_SPIN_LOCK_UNLOCKED(irq_desc->", "5044": "< insn_cnt; i++, insn++)\n\t\tif (insn->", "5045": "< insn_cnt; i++, insn++) {\n\t\tif (BPF_CLASS(insn->", "5046": "< insn_cnt; i++, insn++) {\n\t\tif (insn->", "5047": "< iter->", "5048": "< iter_stop) {\n\t\tif (addr_conflict(iter, start, end))\n\t\t\treturn 1;\n\t\titer++;\n\t}\n\n\treturn 0;\n}\n\n\nvoid __weak __init_or_module arch_jump_label_transform_static(struct jump_entry *entry,\n\t\t\t\t\t    enum jump_label_type type)\n{\n\tarch_jump_label_transform(entry, type);\t\n}\n\nstatic void __jump_label_update(struct static_key *key,\n\t\t\t\tstruct jump_entry *entry,\n\t\t\t\tstruct jump_entry *stop, int enable)\n{\n\tfor (; (entry < stop) &&\n\t      (entry->", "5049": "< iter_stop; iter++) {\n\t\tarch_jump_label_transform_static(iter, JUMP_LABEL_DISABLE);\n\t}\n}\n\nstatic int jump_label_add_module(struct module *mod)\n{\n\tstruct jump_entry *iter_start = mod->", "5050": "< iter_stop; iter++) {\n\t\tif (iter->", "5051": "< iter_stop; iter++) {\n\t\tif (within_module_init(iter->", "5052": "< iter_stop; iter++) {\n\t\tstruct static_key *iterk;\n\n\t\titerk = (struct static_key *)(unsigned long)iter->", "5053": "< iters; ++i) {\n\t\tstruct timespec ts1, ts2;\n\t\tint time_passed;\n\n\t\tktime_get_ts(&ts1);\n\t\tudelay(usecs);\n\t\tktime_get_ts(&ts2);\n\t\ttime_passed = timespec_to_ns(&ts2) - timespec_to_ns(&ts1);\n\n\t\tif (i == 0 || time_passed < min)\n\t\t\tmin = time_passed;\n\t\tif (i == 0 || time_passed >", "5054": "< jeb->", "5055": "< k; i++) {\n\t\tif (range[i].end)\n\t\t\tcontinue;\n\t\tfor (j = k; j >", "5056": "< kbuf->", "5057": "< kdb_max_commands) {\n\t\tint result;\n\n\t\tif (!kdb_check_flags(tp->", "5058": "< kdb_max_commands;\t\t\t\t\t\\\n\t     num++, num == KDB_BASE_CMD_MAX ? cmd = kdb_commands : cmd++)\n\ntypedef struct _kdbmsg {\n\tint\tkm_diag;\t\n\tchar\t*km_msg;\t\n} kdbmsg_t;\n\n#define KDBMSG(msgnum, text) \\\n\t{ KDB_##msgnum, text }\n\nstatic kdbmsg_t kdbmsgs[] = {\n\tKDBMSG(NOTFOUND, \"Command Not Found\"),\n\tKDBMSG(ARGCOUNT, \"Improper argument count, see usage.\"),\n\tKDBMSG(BADWIDTH, \"Illegal value for BYTESPERWORD use 1, 2, 4 or 8, \"\n\t       \"8 is only allowed on 64 bit systems\"),\n\tKDBMSG(BADRADIX, \"Illegal value for RADIX use 8, 10 or 16\"),\n\tKDBMSG(NOTENV, \"Cannot find environment variable\"),\n\tKDBMSG(NOENVVALUE, \"Environment variable should have value\"),\n\tKDBMSG(NOTIMP, \"Command not implemented\"),\n\tKDBMSG(ENVFULL, \"Environment full\"),\n\tKDBMSG(ENVBUFFULL, \"Environment buffer full\"),\n\tKDBMSG(TOOMANYBPT, \"Too many breakpoints defined\"),\n#ifdef CONFIG_CPU_XSCALE\n\tKDBMSG(TOOMANYDBREGS, \"More breakpoints than ibcr registers defined\"),\n#else\n\tKDBMSG(TOOMANYDBREGS, \"More breakpoints than db registers defined\"),\n#endif\n\tKDBMSG(DUPBPT, \"Duplicate breakpoint address\"),\n\tKDBMSG(BPTNOTFOUND, \"Breakpoint not found\"),\n\tKDBMSG(BADMODE, \"Invalid IDMODE\"),\n\tKDBMSG(BADINT, \"Illegal numeric value\"),\n\tKDBMSG(INVADDRFMT, \"Invalid symbolic address format\"),\n\tKDBMSG(BADREG, \"Invalid register name\"),\n\tKDBMSG(BADCPUNUM, \"Invalid cpu number\"),\n\tKDBMSG(BADLENGTH, \"Invalid length field\"),\n\tKDBMSG(NOBP, \"No Breakpoint exists\"),\n\tKDBMSG(BADADDR, \"Invalid address\"),\n\tKDBMSG(NOPERM, \"Permission denied\"),\n};\n#undef KDBMSG\n\nstatic const int __nkdb_err = ARRAY_SIZE(kdbmsgs);\n\n\n\n\nstatic char *__env[] = {\n#if defined(CONFIG_SMP)\n \"PROMPT=[%d]kdb>", "5059": "< key_id_len; i++) {\n\t\t*q++ = hex_asc[*key_id >", "5060": "< kj.tv64)\n\t\t\t\t\tnow = ktime_add(now, kj);\n\t\t\t}\n#endif\n\t\t\ttimr->", "5061": "< len))\n\t\tgoto out;\n\n\titem = ring_buffer_event_data(event);\n\titem->", "5062": "< len; i++)\n\t\tptr = hex_byte_pack_upper(ptr, buf[i]);\n\t*ptr = 0;\n\tskb_put(skb, len << 1); \n}\n\n\nvoid audit_log_n_string(struct audit_buffer *ab, const char *string,\n\t\t\tsize_t slen)\n{\n\tint avail, new_len;\n\tunsigned char *ptr;\n\tstruct sk_buff *skb;\n\n\tif (!ab)\n\t\treturn;\n\n\tBUG_ON(!ab->", "5063": "< len; i++) {\n\t\t\tif (call->", "5064": "< len; i++) {\n\t\tbuf += sprintf(buf, \"%s%02x\", i == 0 ? \"\" : \" \", cmd[i]);\n\t\tif (i == end && end != len - 1) {\n\t\t\tsprintf(buf, \" ..\");\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nvoid blk_fill_rwbs(char *rwbs, u32 rw, int bytes)\n{\n\tint i = 0;\n\n\tif (rw & REQ_FLUSH)\n\t\trwbs[i++] = 'F';\n\n\tif (rw & WRITE)\n\t\trwbs[i++] = 'W';\n\telse if (rw & REQ_DISCARD)\n\t\trwbs[i++] = 'D';\n\telse if (bytes)\n\t\trwbs[i++] = 'R';\n\telse\n\t\trwbs[i++] = 'N';\n\n\tif (rw & REQ_FUA)\n\t\trwbs[i++] = 'F';\n\tif (rw & REQ_RAHEAD)\n\t\trwbs[i++] = 'A';\n\tif (rw & REQ_SYNC)\n\t\trwbs[i++] = 'S';\n\tif (rw & REQ_META)\n\t\trwbs[i++] = 'M';\n\tif (rw & REQ_SECURE)\n\t\trwbs[i++] = 'E';\n\n\trwbs[i] = '\\0';\n}\nEXPORT_SYMBOL_GPL(blk_fill_rwbs);\n\n#endif \n\n\n\n#include <linux/export.h>", "5065": "< len; i++) {\n\t\tif (buff[i] == '*') {\n\t\t\tif (!i) {\n\t\t\t\t*search = buff + 1;\n\t\t\t\ttype = MATCH_END_ONLY;\n\t\t\t} else {\n\t\t\t\tif (type == MATCH_END_ONLY)\n\t\t\t\t\ttype = MATCH_MIDDLE_ONLY;\n\t\t\t\telse\n\t\t\t\t\ttype = MATCH_FRONT_ONLY;\n\t\t\t\tbuff[i] = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn type;\n}\n\nstatic void filter_build_regex(struct filter_pred *pred)\n{\n\tstruct regex *r = &pred->", "5066": "< length; src++) {\n\t\t\n\t\twhile (list[src] == list[src-1]) {\n\t\t\tsrc++;\n\t\t\tif (src == length)\n\t\t\t\tgoto after;\n\t\t}\n\t\t\n\t\tlist[dest] = list[src];\n\t\tdest++;\n\t}\nafter:\n\treturn dest;\n}\n\n\nstatic pid_t pid_fry(pid_t pid)\n{\n\tunsigned a = pid & 0x55555555;\n\tunsigned b = pid & 0xAAAAAAAA;\n\n\treturn (a << 1) | (b >", "5067": "< level; i++, j++) {\n\t\ttl[i] = (struct sched_domain_topology_level){\n\t\t\t.mask = sd_numa_mask,\n\t\t\t.sd_flags = cpu_numa_flags,\n\t\t\t.flags = SDTL_OVERLAP,\n\t\t\t.numa_level = j,\n\t\t\tSD_INIT_NAME(NUMA)\n\t\t};\n\t}\n\n\tsched_domain_topology = tl;\n\n\tsched_domains_numa_levels = level;\n\tsched_max_numa_distance = sched_domains_numa_distance[level - 1];\n\n\tinit_numa_topology_type();\n}\n\nstatic void sched_domains_numa_masks_set(int cpu)\n{\n\tint i, j;\n\tint node = cpu_to_node(cpu);\n\n\tfor (i = 0; i < sched_domains_numa_levels; i++) {\n\t\tfor (j = 0; j < nr_node_ids; j++) {\n\t\t\tif (node_distance(j, node) <= sched_domains_numa_distance[i])\n\t\t\t\tcpumask_set_cpu(cpu, sched_domains_numa_masks[i][j]);\n\t\t}\n\t}\n}\n\nstatic void sched_domains_numa_masks_clear(int cpu)\n{\n\tint i, j;\n\tfor (i = 0; i < sched_domains_numa_levels; i++) {\n\t\tfor (j = 0; j < nr_node_ids; j++)\n\t\t\tcpumask_clear_cpu(cpu, sched_domains_numa_masks[i][j]);\n\t}\n}\n\n\nstatic int sched_domains_numa_masks_update(struct notifier_block *nfb,\n\t\t\t\t\t   unsigned long action,\n\t\t\t\t\t   void *hcpu)\n{\n\tint cpu = (long)hcpu;\n\n\tswitch (action & ~CPU_TASKS_FROZEN) {\n\tcase CPU_ONLINE:\n\t\tsched_domains_numa_masks_set(cpu);\n\t\tbreak;\n\n\tcase CPU_DEAD:\n\t\tsched_domains_numa_masks_clear(cpu);\n\t\tbreak;\n\n\tdefault:\n\t\treturn NOTIFY_DONE;\n\t}\n\n\treturn NOTIFY_OK;\n}\n#else\nstatic inline void sched_init_numa(void)\n{\n}\n\nstatic int sched_domains_numa_masks_update(struct notifier_block *nfb,\n\t\t\t\t\t   unsigned long action,\n\t\t\t\t\t   void *hcpu)\n{\n\treturn 0;\n}\n#endif \n\nstatic int __sdt_alloc(const struct cpumask *cpu_map)\n{\n\tstruct sched_domain_topology_level *tl;\n\tint j;\n\n\tfor_each_sd_topology(tl) {\n\t\tstruct sd_data *sdd = &tl->", "5068": "< levels_needed; i++) {\n\t\tnode = alloc_rtree_node(gfp_mask, safe_needed, ca,\n\t\t\t\t\t&zone->", "5069": "< lhs.tv_sec || res.tv_sec < rhs.tv_sec)\n\t\tres.tv_sec = TIME_T_MAX;\n\n\treturn res;\n}\n\n\n#include <linux/proc_fs.h>", "5070": "< limit) {\n\t\tif (!lzero || *id != 0) {\n\t\t\tpkt = hex_byte_pack(pkt, *id);\n\t\t\tlzero = 0;\n\t\t}\n\t\tid++;\n\t}\n\n\tif (lzero)\n\t\tpkt = hex_byte_pack(pkt, 0);\n\n\treturn pkt;\n}\n\nstatic void int_to_threadref(unsigned char *id, int value)\n{\n\tput_unaligned_be32(value, id);\n}\n\nstatic struct task_struct *getthread(struct pt_regs *regs, int tid)\n{\n\t\n\tif (tid == 0 || tid == -1)\n\t\ttid = -atomic_read(&kgdb_active) - 2;\n\tif (tid < -1 && tid >", "5071": "< load_b)\n\t\tswap(load_a, load_b);\n\n\t\n\timb = load_a * src_capacity * 100 -\n\t\tload_b * dst_capacity * env->", "5072": "< log_next_seq) {\n\t\tif (logbuf_has_space(msg_size, false))\n\t\t\treturn 0;\n\t\t\n\t\tlog_first_idx = log_next(log_first_idx);\n\t\tlog_first_seq++;\n\t}\n\n\t\n\tif (logbuf_has_space(msg_size, true))\n\t\treturn 0;\n\n\treturn -ENOMEM;\n}\n\n\nstatic u32 msg_used_size(u16 text_len, u16 dict_len, u32 *pad_len)\n{\n\tu32 size;\n\n\tsize = sizeof(struct printk_log) + text_len + dict_len;\n\t*pad_len = (-size) & (LOG_ALIGN - 1);\n\tsize += *pad_len;\n\n\treturn size;\n}\n\n\n#define MAX_LOG_TAKE_PART 4\nstatic const char trunc_msg[] = \"<truncated>", "5073": "< loops; i++) {\n\t\t\tif (arch_read_trylock(&lock->", "5074": "< loops; i++) {\n\t\t\tif (arch_write_trylock(&lock->", "5075": "< loops; i++) {\n\t\tif (arch_spin_trylock(&lock->", "5076": "< lt->", "5077": "< map->", "5078": "< max_faults * 3 / 16)\n\t\t\tnode_clear(nid, numa_group->", "5079": "< max_stack_trace.nr_entries; i++) {\n\t\tif (stack_dump_trace[i] == ULONG_MAX)\n\t\t\tbreak;\n\t\tif (i+1 == max_stack_trace.nr_entries ||\n\t\t\t\tstack_dump_trace[i+1] == ULONG_MAX)\n\t\t\tsize = stack_dump_index[i];\n\t\telse\n\t\t\tsize = stack_dump_index[i] - stack_dump_index[i+1];\n\n\t\tpr_emerg(\"%3ld) %8d   %5d   %pS\\n\", i, stack_dump_index[i],\n\t\t\t\tsize, (void *)stack_dump_trace[i]);\n\t}\n}\n\nstatic inline void\ncheck_stack(unsigned long ip, unsigned long *stack)\n{\n\tunsigned long this_size, flags; unsigned long *p, *top, *start;\n\tstatic int tracer_frame;\n\tint frame_size = ACCESS_ONCE(tracer_frame);\n\tint i;\n\n\tthis_size = ((unsigned long)stack) & (THREAD_SIZE-1);\n\tthis_size = THREAD_SIZE - this_size;\n\t\n\tthis_size -= frame_size;\n\n\tif (this_size <= max_stack_size)\n\t\treturn;\n\n\t\n\tif (!object_is_on_stack(stack))\n\t\treturn;\n\n\tlocal_irq_save(flags);\n\tarch_spin_lock(&max_stack_lock);\n\n\t\n\tif (unlikely(!frame_size))\n\t\tthis_size -= tracer_frame;\n\n\t\n\tif (this_size <= max_stack_size)\n\t\tgoto out;\n\n\tmax_stack_size = this_size;\n\n\tmax_stack_trace.nr_entries = 0;\n\n\tif (using_ftrace_ops_list_func())\n\t\tmax_stack_trace.skip = 4;\n\telse\n\t\tmax_stack_trace.skip = 3;\n\n\tsave_stack_trace(&max_stack_trace);\n\n\t\n\tstack_dump_trace[0] = ip;\n\tmax_stack_trace.nr_entries++;\n\n\t\n\ti = 0;\n\tstart = stack;\n\ttop = (unsigned long *)\n\t\t(((unsigned long)start & ~(THREAD_SIZE-1)) + THREAD_SIZE);\n\n\t\n\twhile (i < max_stack_trace.nr_entries) {\n\t\tint found = 0;\n\n\t\tstack_dump_index[i] = this_size;\n\t\tp = start;\n\n\t\tfor (; p < top && i < max_stack_trace.nr_entries; p++) {\n\t\t\tif (*p == stack_dump_trace[i]) {\n\t\t\t\tthis_size = stack_dump_index[i++] =\n\t\t\t\t\t(top - p) * sizeof(unsigned long);\n\t\t\t\tfound = 1;\n\t\t\t\t\n\t\t\t\tstart = p + 1;\n\t\t\t\t\n\t\t\t\tif (unlikely(!tracer_frame) && i == 1) {\n\t\t\t\t\ttracer_frame = (p - stack) *\n\t\t\t\t\t\tsizeof(unsigned long);\n\t\t\t\t\tmax_stack_size -= tracer_frame;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!found)\n\t\t\ti++;\n\t}\n\n\tif (task_stack_end_corrupted(current)) {\n\t\tprint_max_stack();\n\t\tBUG();\n\t}\n\n out:\n\tarch_spin_unlock(&max_stack_lock);\n\tlocal_irq_restore(flags);\n}\n\nstatic void\nstack_trace_call(unsigned long ip, unsigned long parent_ip,\n\t\t struct ftrace_ops *op, struct pt_regs *pt_regs)\n{\n\tunsigned long stack;\n\tint cpu;\n\n\tpreempt_disable_notrace();\n\n\tcpu = raw_smp_processor_id();\n\t\n\tif (per_cpu(trace_active, cpu)++ != 0)\n\t\tgoto out;\n\n\t\n\tif (fentry)\n\t\tip = parent_ip;\n\telse\n\t\tip += MCOUNT_INSN_SIZE;\n\n\tcheck_stack(ip, &stack);\n\n out:\n\tper_cpu(trace_active, cpu)--;\n\t\n\tpreempt_enable_notrace();\n}\n\nstatic struct ftrace_ops trace_ops __read_mostly =\n{\n\t.func = stack_trace_call,\n\t.flags = FTRACE_OPS_FL_RECURSION_SAFE,\n};\n\nstatic ssize_t\nstack_max_size_read(struct file *filp, char __user *ubuf,\n\t\t    size_t count, loff_t *ppos)\n{\n\tunsigned long *ptr = filp->", "5080": "< max_zone_pfn; pfn++)\n\t\t\tif (page_is_saveable(zone, pfn))\n\t\t\t\tmemory_bm_set_bit(orig_bm, pfn);\n\t}\n\tmemory_bm_position_reset(orig_bm);\n\tmemory_bm_position_reset(copy_bm);\n\tfor(;;) {\n\t\tpfn = memory_bm_next_pfn(orig_bm);\n\t\tif (unlikely(pfn == BM_END_OF_MAP))\n\t\t\tbreak;\n\t\tcopy_data_page(memory_bm_next_pfn(copy_bm), pfn);\n\t}\n}\n\n\nstatic unsigned int nr_copy_pages;\n\nstatic unsigned int nr_meta_pages;\n\nunsigned int alloc_normal, alloc_highmem;\n\nstatic struct memory_bitmap orig_bm;\n\nstatic struct memory_bitmap copy_bm;\n\n\n\nvoid swsusp_free(void)\n{\n\tunsigned long fb_pfn, fr_pfn;\n\n\tif (!forbidden_pages_map || !free_pages_map)\n\t\tgoto out;\n\n\tmemory_bm_position_reset(forbidden_pages_map);\n\tmemory_bm_position_reset(free_pages_map);\n\nloop:\n\tfr_pfn = memory_bm_next_pfn(free_pages_map);\n\tfb_pfn = memory_bm_next_pfn(forbidden_pages_map);\n\n\t\n\tdo {\n\t\tif (fb_pfn < fr_pfn)\n\t\t\tfb_pfn = memory_bm_next_pfn(forbidden_pages_map);\n\t\tif (fr_pfn < fb_pfn)\n\t\t\tfr_pfn = memory_bm_next_pfn(free_pages_map);\n\t} while (fb_pfn != fr_pfn);\n\n\tif (fr_pfn != BM_END_OF_MAP && pfn_valid(fr_pfn)) {\n\t\tstruct page *page = pfn_to_page(fr_pfn);\n\n\t\tmemory_bm_clear_current(forbidden_pages_map);\n\t\tmemory_bm_clear_current(free_pages_map);\n\t\t__free_page(page);\n\t\tgoto loop;\n\t}\n\nout:\n\tnr_copy_pages = 0;\n\tnr_meta_pages = 0;\n\trestore_pblist = NULL;\n\tbuffer = NULL;\n\talloc_normal = 0;\n\talloc_highmem = 0;\n}\n\n\n\n#define GFP_IMAGE\t(GFP_KERNEL | __GFP_NOWARN)\n\n\nstatic unsigned long preallocate_image_pages(unsigned long nr_pages, gfp_t mask)\n{\n\tunsigned long nr_alloc = 0;\n\n\twhile (nr_pages >", "5081": "< max_zone_pfn; pfn++)\n\t\t\tif (pfn_valid(pfn))\n\t\t\t\tswsusp_unset_page_free(pfn_to_page(pfn));\n\t}\n\n\t\n\tmemory_bm_position_reset(bm);\n\tdo {\n\t\tpfn = memory_bm_next_pfn(bm);\n\t\tif (likely(pfn != BM_END_OF_MAP)) {\n\t\t\tif (likely(pfn_valid(pfn)))\n\t\t\t\tswsusp_set_page_free(pfn_to_page(pfn));\n\t\t\telse\n\t\t\t\treturn -EFAULT;\n\t\t}\n\t} while (pfn != BM_END_OF_MAP);\n\n\tallocated_unsafe_pages = 0;\n\n\treturn 0;\n}\n\nstatic void\nduplicate_memory_bitmap(struct memory_bitmap *dst, struct memory_bitmap *src)\n{\n\tunsigned long pfn;\n\n\tmemory_bm_position_reset(src);\n\tpfn = memory_bm_next_pfn(src);\n\twhile (pfn != BM_END_OF_MAP) {\n\t\tmemory_bm_set_bit(dst, pfn);\n\t\tpfn = memory_bm_next_pfn(src);\n\t}\n}\n\nstatic int check_header(struct swsusp_info *info)\n{\n\tchar *reason;\n\n\treason = check_image_kernel(info);\n\tif (!reason && info->", "5082": "< max_zone_pfn; pfn++)\n\t\t\tif (saveable_highmem_page(zone, pfn))\n\t\t\t\tn++;\n\t}\n\treturn n;\n}\n#else\nstatic inline void *saveable_highmem_page(struct zone *z, unsigned long p)\n{\n\treturn NULL;\n}\n#endif \n\n\nstatic struct page *saveable_page(struct zone *zone, unsigned long pfn)\n{\n\tstruct page *page;\n\n\tif (!pfn_valid(pfn))\n\t\treturn NULL;\n\n\tpage = pfn_to_page(pfn);\n\tif (page_zone(page) != zone)\n\t\treturn NULL;\n\n\tBUG_ON(PageHighMem(page));\n\n\tif (swsusp_page_is_forbidden(page) || swsusp_page_is_free(page))\n\t\treturn NULL;\n\n\tif (PageReserved(page)\n\t    && (!kernel_page_present(page) || pfn_is_nosave(pfn)))\n\t\treturn NULL;\n\n\tif (page_is_guard(page))\n\t\treturn NULL;\n\n\treturn page;\n}\n\n\n\nstatic unsigned int count_data_pages(void)\n{\n\tstruct zone *zone;\n\tunsigned long pfn, max_zone_pfn;\n\tunsigned int n = 0;\n\n\tfor_each_populated_zone(zone) {\n\t\tif (is_highmem(zone))\n\t\t\tcontinue;\n\n\t\tmark_free_pages(zone);\n\t\tmax_zone_pfn = zone_end_pfn(zone);\n\t\tfor (pfn = zone->", "5083": "< max_zone_pfn; pfn++)\n\t\t\tif (saveable_page(zone, pfn))\n\t\t\t\tn++;\n\t}\n\treturn n;\n}\n\n\nstatic inline void do_copy_page(long *dst, long *src)\n{\n\tint n;\n\n\tfor (n = PAGE_SIZE / sizeof(long); n; n--)\n\t\t*dst++ = *src++;\n}\n\n\n\nstatic void safe_copy_page(void *dst, struct page *s_page)\n{\n\tif (kernel_page_present(s_page)) {\n\t\tdo_copy_page(dst, page_address(s_page));\n\t} else {\n\t\tkernel_map_pages(s_page, 1, 1);\n\t\tdo_copy_page(dst, page_address(s_page));\n\t\tkernel_map_pages(s_page, 1, 0);\n\t}\n}\n\n\n#ifdef CONFIG_HIGHMEM\nstatic inline struct page *\npage_is_saveable(struct zone *zone, unsigned long pfn)\n{\n\treturn is_highmem(zone) ?\n\t\tsaveable_highmem_page(zone, pfn) : saveable_page(zone, pfn);\n}\n\nstatic void copy_data_page(unsigned long dst_pfn, unsigned long src_pfn)\n{\n\tstruct page *s_page, *d_page;\n\tvoid *src, *dst;\n\n\ts_page = pfn_to_page(src_pfn);\n\td_page = pfn_to_page(dst_pfn);\n\tif (PageHighMem(s_page)) {\n\t\tsrc = kmap_atomic(s_page);\n\t\tdst = kmap_atomic(d_page);\n\t\tdo_copy_page(dst, src);\n\t\tkunmap_atomic(dst);\n\t\tkunmap_atomic(src);\n\t} else {\n\t\tif (PageHighMem(d_page)) {\n\t\t\t\n\t\t\tsafe_copy_page(buffer, s_page);\n\t\t\tdst = kmap_atomic(d_page);\n\t\t\tcopy_page(dst, buffer);\n\t\t\tkunmap_atomic(dst);\n\t\t} else {\n\t\t\tsafe_copy_page(page_address(d_page), s_page);\n\t\t}\n\t}\n}\n#else\n#define page_is_saveable(zone, pfn)\tsaveable_page(zone, pfn)\n\nstatic inline void copy_data_page(unsigned long dst_pfn, unsigned long src_pfn)\n{\n\tsafe_copy_page(page_address(pfn_to_page(dst_pfn)),\n\t\t\t\tpfn_to_page(src_pfn));\n}\n#endif \n\nstatic void\ncopy_data_pages(struct memory_bitmap *copy_bm, struct memory_bitmap *orig_bm)\n{\n\tstruct zone *zone;\n\tunsigned long pfn;\n\n\tfor_each_populated_zone(zone) {\n\t\tunsigned long max_zone_pfn;\n\n\t\tmark_free_pages(zone);\n\t\tmax_zone_pfn = zone_end_pfn(zone);\n\t\tfor (pfn = zone->", "5084": "< maxlen);\n\n\tdst[-1] = '\\0';\n\tpagefault_enable();\n\tset_fs(old_fs);\n\n\tif (ret < 0) {\t\n\t\t((u8 *)get_rloc_data(dest))[0] = '\\0';\n\t\t*(u32 *)dest = make_data_rloc(0, get_rloc_offs(*(u32 *)dest));\n\t} else {\n\t\t*(u32 *)dest = make_data_rloc(src - (u8 *)addr,\n\t\t\t\t\t      get_rloc_offs(*(u32 *)dest));\n\t}\n}\nNOKPROBE_SYMBOL(FETCH_FUNC_NAME(memory, string));\n\n\nstatic void FETCH_FUNC_NAME(memory, string_size)(struct pt_regs *regs,\n\t\t\t\t\t\t void *addr, void *dest)\n{\n\tmm_segment_t old_fs;\n\tint ret, len = 0;\n\tu8 c;\n\n\told_fs = get_fs();\n\tset_fs(KERNEL_DS);\n\tpagefault_disable();\n\n\tdo {\n\t\tret = __copy_from_user_inatomic(&c, (u8 *)addr + len, 1);\n\t\tlen++;\n\t} while (c && ret == 0 && len < MAX_STRING_SIZE);\n\n\tpagefault_enable();\n\tset_fs(old_fs);\n\n\tif (ret < 0)\t\n\t\t*(u32 *)dest = 0;\n\telse\n\t\t*(u32 *)dest = len;\n}\nNOKPROBE_SYMBOL(FETCH_FUNC_NAME(memory, string_size));\n\n#define DEFINE_FETCH_symbol(type)\t\t\t\t\t\\\nvoid FETCH_FUNC_NAME(symbol, type)(struct pt_regs *regs, void *data, void *dest)\\\n{\t\t\t\t\t\t\t\t\t\\\n\tstruct symbol_cache *sc = data;\t\t\t\t\t\\\n\tif (sc->", "5085": "< mend))\n\t\t\treturn 1;\n\t}\n\n\treturn 0;\n}\n\nstatic struct page *kimage_alloc_pages(gfp_t gfp_mask, unsigned int order)\n{\n\tstruct page *pages;\n\n\tpages = alloc_pages(gfp_mask, order);\n\tif (pages) {\n\t\tunsigned int count, i;\n\t\tpages->", "5086": "< meta->", "5087": "< min)\n\t\t\t\tbreak;\n\t\t\tlist_add(&u->", "5088": "< min)\n\t\tres->", "5089": "< min) {\n\t\tpr_err(\"%s: needs at least %i arguments\\n\", name, min);\n\t\treturn -EINVAL;\n\t}\n\treturn 0;\n}\n\nstatic int param_array_set(const char *val, const struct kernel_param *kp)\n{\n\tconst struct kparam_array *arr = kp->", "5090": "< min.tv64))\n\t\t\tmin = delta;\n\t}\n\tif (min.tv64 == 0)\n\t\treturn 0;\n\n\tif (ktime_to_ns(min) < 2 * NSEC_PER_SEC) {\n\t\t__pm_wakeup_event(ws, 2 * MSEC_PER_SEC);\n\t\treturn -EBUSY;\n\t}\n\n\t\n\trtc_timer_cancel(rtc, &rtctimer);\n\trtc_read_time(rtc, &tm);\n\tnow = rtc_tm_to_ktime(tm);\n\tnow = ktime_add(now, min);\n\n\t\n\tret = rtc_timer_start(rtc, &rtctimer, now, ktime_set(0, 0));\n\tif (ret < 0)\n\t\t__pm_wakeup_event(ws, MSEC_PER_SEC);\n\treturn ret;\n}\n#else\nstatic int alarmtimer_suspend(struct device *dev)\n{\n\treturn 0;\n}\n#endif\n\nstatic void alarmtimer_freezerset(ktime_t absexp, enum alarmtimer_type type)\n{\n\tktime_t delta;\n\tunsigned long flags;\n\tstruct alarm_base *base = &alarm_bases[type];\n\n\tdelta = ktime_sub(absexp, base->", "5091": "< min_cfs_quota_period || period < min_cfs_quota_period)\n\t\treturn -EINVAL;\n\n\t\n\tif (period >", "5092": "< min_exit_latency) {\n\t\t\t\t\n\t\t\t\tmin_exit_latency = idle->", "5093": "< min_expire)\n\t\treturn 1;\n\n\treturn 0;\n}\n\nstatic void start_cfs_slack_bandwidth(struct cfs_bandwidth *cfs_b)\n{\n\tu64 min_left = cfs_bandwidth_slack_period + min_bandwidth_expiration;\n\n\t\n\tif (runtime_refresh_within(cfs_b, min_left))\n\t\treturn;\n\n\tstart_bandwidth_timer(&cfs_b->", "5094": "< min_load || (load == min_load && i == this_cpu)) {\n\t\t\t\tmin_load = load;\n\t\t\t\tleast_loaded_cpu = i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn shallowest_idle_cpu != -1 ? shallowest_idle_cpu : least_loaded_cpu;\n}\n\n\nstatic int select_idle_sibling(struct task_struct *p, int target)\n{\n\tstruct sched_domain *sd;\n\tstruct sched_group *sg;\n\tint i = task_cpu(p);\n\n\tif (idle_cpu(target))\n\t\treturn target;\n\n\t\n\tif (i != target && cpus_share_cache(i, target) && idle_cpu(i))\n\t\treturn i;\n\n\t\n\tsd = rcu_dereference(per_cpu(sd_llc, target));\n\tfor_each_lower_domain(sd) {\n\t\tsg = sd->", "5095": "< min_load) {\n\t\t\tmin_load = avg_load;\n\t\t\tidlest = group;\n\t\t}\n\t} while (group = group->", "5096": "< mk->", "5097": "< mmap_min_addr)\n\t\t\tgoto out;\n\t}\n\n\t\n#define __prctl_check_order(__m1, __op, __m2)\t\t\t\t\\\n\t((unsigned long)prctl_map->", "5098": "< mmap_min_addr)\n\t\treturn -EINVAL;\n\n\terror = -EINVAL;\n\n\tdown_read(&mm->", "5099": "< mod->", "5100": "< module_addr_min || addr >", "5101": "< module_addr_min)\n\t\t\tmodule_addr_min = (unsigned long)ret;\n\t\tif ((unsigned long)ret + size >", "5102": "< msecs; i++) {\n\t\ttouch_nmi_watchdog();\n\t\tmdelay(1);\n\t}\n}\n\n\nstatic void do_oops_enter_exit(void)\n{\n\tunsigned long flags;\n\tstatic int spin_counter;\n\n\tif (!pause_on_oops)\n\t\treturn;\n\n\tspin_lock_irqsave(&pause_on_oops_lock, flags);\n\tif (pause_on_oops_flag == 0) {\n\t\t\n\t\tpause_on_oops_flag = 1;\n\t} else {\n\t\t\n\t\tif (!spin_counter) {\n\t\t\t\n\t\t\tspin_counter = pause_on_oops;\n\t\t\tdo {\n\t\t\t\tspin_unlock(&pause_on_oops_lock);\n\t\t\t\tspin_msec(MSEC_PER_SEC);\n\t\t\t\tspin_lock(&pause_on_oops_lock);\n\t\t\t} while (--spin_counter);\n\t\t\tpause_on_oops_flag = 0;\n\t\t} else {\n\t\t\t\n\t\t\twhile (spin_counter) {\n\t\t\t\tspin_unlock(&pause_on_oops_lock);\n\t\t\t\tspin_msec(1);\n\t\t\t\tspin_lock(&pause_on_oops_lock);\n\t\t\t}\n\t\t}\n\t}\n\tspin_unlock_irqrestore(&pause_on_oops_lock, flags);\n}\n\n\nint oops_may_print(void)\n{\n\treturn pause_on_oops_flag == 0;\n}\n\n\nvoid oops_enter(void)\n{\n\ttracing_off();\n\t\n\tdebug_locks_off();\n\tdo_oops_enter_exit();\n}\n\n\nstatic u64 oops_id;\n\nstatic int init_oops_id(void)\n{\n\tif (!oops_id)\n\t\tget_random_bytes(&oops_id, sizeof(oops_id));\n\telse\n\t\toops_id++;\n\n\treturn 0;\n}\nlate_initcall(init_oops_id);\n\nvoid print_oops_end_marker(void)\n{\n\tinit_oops_id();\n\tpr_warn(\"---[ end trace %016llx ]---\\n\", (unsigned long long)oops_id);\n}\n\n\nvoid oops_exit(void)\n{\n\tdo_oops_enter_exit();\n\tprint_oops_end_marker();\n\tkmsg_dump(KMSG_DUMP_OOPS);\n}\n\n#ifdef WANT_WARN_ON_SLOWPATH\nstruct slowpath_args {\n\tconst char *fmt;\n\tva_list args;\n};\n\nstatic void warn_slowpath_common(const char *file, int line, void *caller,\n\t\t\t\t unsigned taint, struct slowpath_args *args)\n{\n\tdisable_trace_on_warning();\n\n\tpr_warn(\"------------[ cut here ]------------\\n\");\n\tpr_warn(\"WARNING: CPU: %d PID: %d at %s:%d %pS()\\n\",\n\t\traw_smp_processor_id(), current->", "5103": "< mult_adj)) {\n\t\t\n\t\tWARN_ON_ONCE(1);\n\t\treturn;\n\t}\n\n\ttk->", "5104": "< n; i++)\n\t\tnode = rb_next(node);\n\n\treturn node;\n}\n\nstatic void *stat_seq_next(struct seq_file *s, void *p, loff_t *pos)\n{\n\tstruct stat_session *session = s->", "5105": "< n; i++) {\n\t\tif (dash2underscore(a[i]) != dash2underscore(b[i]))\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n\nbool parameq(const char *a, const char *b)\n{\n\treturn parameqn(a, b, strlen(a)+1);\n}\n\nstatic void param_check_unsafe(const struct kernel_param *kp)\n{\n\tif (kp->", "5106": "< n_barrier_cbs; i++)\n\t\t\twake_up(&barrier_cbs_wq[i]);\n\t\twait_event(barrier_wq,\n\t\t\t   atomic_read(&barrier_cbs_count) == 0 ||\n\t\t\t   torture_must_stop());\n\t\tif (torture_must_stop())\n\t\t\tbreak;\n\t\tn_barrier_attempts++;\n\t\tcur_ops->", "5107": "< n_barrier_cbs; i++) {\n\t\tinit_waitqueue_head(&barrier_cbs_wq[i]);\n\t\tret = torture_create_kthread(rcu_torture_barrier_cbs,\n\t\t\t\t\t     (void *)(long)i,\n\t\t\t\t\t     barrier_cbs_tasks[i]);\n\t\tif (ret)\n\t\t\treturn ret;\n\t}\n\treturn torture_create_kthread(rcu_torture_barrier, NULL, barrier_task);\n}\n\n\nstatic void rcu_torture_barrier_cleanup(void)\n{\n\tint i;\n\n\ttorture_stop_kthread(rcu_torture_barrier, barrier_task);\n\tif (barrier_cbs_tasks != NULL) {\n\t\tfor (i = 0; i < n_barrier_cbs; i++)\n\t\t\ttorture_stop_kthread(rcu_torture_barrier_cbs,\n\t\t\t\t\t     barrier_cbs_tasks[i]);\n\t\tkfree(barrier_cbs_tasks);\n\t\tbarrier_cbs_tasks = NULL;\n\t}\n\tif (barrier_cbs_wq != NULL) {\n\t\tkfree(barrier_cbs_wq);\n\t\tbarrier_cbs_wq = NULL;\n\t}\n}\n\nstatic int rcutorture_cpu_notify(struct notifier_block *self,\n\t\t\t\t unsigned long action, void *hcpu)\n{\n\tlong cpu = (long)hcpu;\n\n\tswitch (action) {\n\tcase CPU_ONLINE:\n\tcase CPU_DOWN_FAILED:\n\t\t(void)rcutorture_booster_init(cpu);\n\t\tbreak;\n\tcase CPU_DOWN_PREPARE:\n\t\trcutorture_booster_cleanup(cpu);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn NOTIFY_OK;\n}\n\nstatic struct notifier_block rcutorture_cpu_nb = {\n\t.notifier_call = rcutorture_cpu_notify,\n};\n\nstatic void\nrcu_torture_cleanup(void)\n{\n\tint i;\n\n\trcutorture_record_test_transition();\n\tif (torture_cleanup_begin()) {\n\t\tif (cur_ops->", "5108": "< n_preds; i++) {\n\t\tpred = &filter->", "5109": "< n_stress; i++) {\n\t\tif (statp[i].n_lock_fail)\n\t\t\tfail = true;\n\t\tsum += statp[i].n_lock_acquired;\n\t\tif (max < statp[i].n_lock_fail)\n\t\t\tmax = statp[i].n_lock_fail;\n\t\tif (min >", "5110": "< nargs; i++)\n\t\t\taudit_log_format(ab, \" a%d=%lx\", i,\n\t\t\t\tcontext->", "5111": "< ncbflooders; i++) {\n\t\t\tfirsterr = torture_create_kthread(rcu_torture_cbflood,\n\t\t\t\t\t\t\t  NULL,\n\t\t\t\t\t\t\t  cbflood_task[i]);\n\t\t\tif (firsterr)\n\t\t\t\tgoto unwind;\n\t\t}\n\t}\n\trcutorture_record_test_transition();\n\ttorture_init_end();\n\treturn 0;\n\nunwind:\n\ttorture_init_end();\n\trcu_torture_cleanup();\n\treturn firsterr;\n}\n\nmodule_init(rcu_torture_init);\nmodule_exit(rcu_torture_cleanup);\n\n\n#define pr_fmt(fmt) \"KGDB: \" fmt\n\n#include <linux/pid_namespace.h>", "5112": "< ndoms; i++) {\n\t\tif (!alloc_cpumask_var(&doms[i], GFP_KERNEL)) {\n\t\t\tfree_sched_domains(doms, i);\n\t\t\treturn NULL;\n\t\t}\n\t}\n\treturn doms;\n}\n\nvoid free_sched_domains(cpumask_var_t doms[], unsigned int ndoms)\n{\n\tunsigned int i;\n\tfor (i = 0; i < ndoms; i++)\n\t\tfree_cpumask_var(doms[i]);\n\tkfree(doms);\n}\n\n\nstatic int init_sched_domains(const struct cpumask *cpu_map)\n{\n\tint err;\n\n\tarch_update_cpu_topology();\n\tndoms_cur = 1;\n\tdoms_cur = alloc_sched_domains(ndoms_cur);\n\tif (!doms_cur)\n\t\tdoms_cur = &fallback_doms;\n\tcpumask_andnot(doms_cur[0], cpu_map, cpu_isolated_map);\n\terr = build_sched_domains(doms_cur[0], NULL);\n\tregister_sched_domain_sysctl();\n\n\treturn err;\n}\n\n\nstatic void detach_destroy_domains(const struct cpumask *cpu_map)\n{\n\tint i;\n\n\trcu_read_lock();\n\tfor_each_cpu(i, cpu_map)\n\t\tcpu_attach_domain(NULL, &def_root_domain, i);\n\trcu_read_unlock();\n}\n\n\nstatic int dattrs_equal(struct sched_domain_attr *cur, int idx_cur,\n\t\t\tstruct sched_domain_attr *new, int idx_new)\n{\n\tstruct sched_domain_attr tmp;\n\n\t\n\tif (!new && !cur)\n\t\treturn 1;\n\n\ttmp = SD_ATTR_INIT;\n\treturn !memcmp(cur ? (cur + idx_cur) : &tmp,\n\t\t\tnew ? (new + idx_new) : &tmp,\n\t\t\tsizeof(struct sched_domain_attr));\n}\n\n\nvoid partition_sched_domains(int ndoms_new, cpumask_var_t doms_new[],\n\t\t\t     struct sched_domain_attr *dattr_new)\n{\n\tint i, j, n;\n\tint new_topology;\n\n\tmutex_lock(&sched_domains_mutex);\n\n\t\n\tunregister_sched_domain_sysctl();\n\n\t\n\tnew_topology = arch_update_cpu_topology();\n\n\tn = doms_new ? ndoms_new : 0;\n\n\t\n\tfor (i = 0; i < ndoms_cur; i++) {\n\t\tfor (j = 0; j < n && !new_topology; j++) {\n\t\t\tif (cpumask_equal(doms_cur[i], doms_new[j])\n\t\t\t    && dattrs_equal(dattr_cur, i, dattr_new, j))\n\t\t\t\tgoto match1;\n\t\t}\n\t\t\n\t\tdetach_destroy_domains(doms_cur[i]);\nmatch1:\n\t\t;\n\t}\n\n\tn = ndoms_cur;\n\tif (doms_new == NULL) {\n\t\tn = 0;\n\t\tdoms_new = &fallback_doms;\n\t\tcpumask_andnot(doms_new[0], cpu_active_mask, cpu_isolated_map);\n\t\tWARN_ON_ONCE(dattr_new);\n\t}\n\n\t\n\tfor (i = 0; i < ndoms_new; i++) {\n\t\tfor (j = 0; j < n && !new_topology; j++) {\n\t\t\tif (cpumask_equal(doms_new[i], doms_cur[j])\n\t\t\t    && dattrs_equal(dattr_new, i, dattr_cur, j))\n\t\t\t\tgoto match2;\n\t\t}\n\t\t\n\t\tbuild_sched_domains(doms_new[i], dattr_new ? dattr_new + i : NULL);\nmatch2:\n\t\t;\n\t}\n\n\t\n\tif (doms_cur != &fallback_doms)\n\t\tfree_sched_domains(doms_cur, ndoms_cur);\n\tkfree(dattr_cur);\t\n\tdoms_cur = doms_new;\n\tdattr_cur = dattr_new;\n\tndoms_cur = ndoms_new;\n\n\tregister_sched_domain_sysctl();\n\n\tmutex_unlock(&sched_domains_mutex);\n}\n\nstatic int num_cpus_frozen;\t\n\n\nstatic int cpuset_cpu_active(struct notifier_block *nfb, unsigned long action,\n\t\t\t     void *hcpu)\n{\n\tswitch (action) {\n\tcase CPU_ONLINE_FROZEN:\n\tcase CPU_DOWN_FAILED_FROZEN:\n\n\t\t\n\t\tnum_cpus_frozen--;\n\t\tif (likely(num_cpus_frozen)) {\n\t\t\tpartition_sched_domains(1, NULL, NULL);\n\t\t\tbreak;\n\t\t}\n\n\t\t\n\n\tcase CPU_ONLINE:\n\t\tcpuset_update_active_cpus(true);\n\t\tbreak;\n\tdefault:\n\t\treturn NOTIFY_DONE;\n\t}\n\treturn NOTIFY_OK;\n}\n\nstatic int cpuset_cpu_inactive(struct notifier_block *nfb, unsigned long action,\n\t\t\t       void *hcpu)\n{\n\tunsigned long flags;\n\tlong cpu = (long)hcpu;\n\tstruct dl_bw *dl_b;\n\n\tswitch (action & ~CPU_TASKS_FROZEN) {\n\tcase CPU_DOWN_PREPARE:\n\t\t\n\t\tif (!(action & CPU_TASKS_FROZEN)) {\n\t\t\tbool overflow;\n\t\t\tint cpus;\n\n\t\t\trcu_read_lock_sched();\n\t\t\tdl_b = dl_bw_of(cpu);\n\n\t\t\traw_spin_lock_irqsave(&dl_b->", "5113": "< new->", "5114": "< new_map->", "5115": "< new_map.nr_extents; idx++) {\n\t\tu32 lower_first;\n\t\textent = &new_map.extent[idx];\n\n\t\tlower_first = map_id_range_down(parent_map,\n\t\t\t\t\t\textent->", "5116": "< next_distance ||\n\t\t\t\t     next_distance == curr_distance))\n\t\t\t\t\tnext_distance = distance;\n\n\t\t\t\t\n\t\t\t\tif (sched_debug() && node_distance(k, i) != distance)\n\t\t\t\t\tsched_numa_warn(\"Node-distance not symmetric\");\n\n\t\t\t\tif (sched_debug() && i && !find_numa_distance(distance))\n\t\t\t\t\tsched_numa_warn(\"Node-0 not representative\");\n\t\t\t}\n\t\t\tif (next_distance != curr_distance) {\n\t\t\t\tsched_domains_numa_distance[level++] = next_distance;\n\t\t\t\tsched_domains_numa_levels = level;\n\t\t\t\tcurr_distance = next_distance;\n\t\t\t} else break;\n\t\t}\n\n\t\t\n\t\tif (!sched_debug())\n\t\t\tbreak;\n\t}\n\n\tif (!level)\n\t\treturn;\n\n\t\n\n\t\n\tsched_domains_numa_levels = 0;\n\n\tsched_domains_numa_masks = kzalloc(sizeof(void *) * level, GFP_KERNEL);\n\tif (!sched_domains_numa_masks)\n\t\treturn;\n\n\t\n\tfor (i = 0; i < level; i++) {\n\t\tsched_domains_numa_masks[i] =\n\t\t\tkzalloc(nr_node_ids * sizeof(void *), GFP_KERNEL);\n\t\tif (!sched_domains_numa_masks[i])\n\t\t\treturn;\n\n\t\tfor (j = 0; j < nr_node_ids; j++) {\n\t\t\tstruct cpumask *mask = kzalloc(cpumask_size(), GFP_KERNEL);\n\t\t\tif (!mask)\n\t\t\t\treturn;\n\n\t\t\tsched_domains_numa_masks[i][j] = mask;\n\n\t\t\tfor (k = 0; k < nr_node_ids; k++) {\n\t\t\t\tif (node_distance(j, k) >", "5117": "< next_event.tv64) {\n\t\t\tnext_event.tv64 = td->", "5118": "< nextval\n\t\t    && *(mod->", "5119": "< nlen; i++)\n\t\t\tprintk(\"%d.\", name[i]);\n\t\tprintk(\"\\n\");\n\t}\n\treturn;\n}\n\n#define WARN_ONCE_HASH_BITS 8\n#define WARN_ONCE_HASH_SIZE (1<<WARN_ONCE_HASH_BITS)\n\nstatic DECLARE_BITMAP(warn_once_bitmap, WARN_ONCE_HASH_SIZE);\n\n#define FNV32_OFFSET 2166136261U\n#define FNV32_PRIME 0x01000193\n\n\nstatic void warn_on_bintable(const int *name, int nlen)\n{\n\tint i;\n\tu32 hash = FNV32_OFFSET;\n\n\tfor (i = 0; i < nlen; i++)\n\t\thash = (hash ^ name[i]) * FNV32_PRIME;\n\thash %= WARN_ONCE_HASH_SIZE;\n\tif (__test_and_set_bit(hash, warn_once_bitmap))\n\t\treturn;\n\tdeprecated_sysctl_warning(name, nlen);\n}\n\nstatic ssize_t do_sysctl(int __user *args_name, int nlen,\n\tvoid __user *oldval, size_t oldlen, void __user *newval, size_t newlen)\n{\n\tint name[CTL_MAXNAME];\n\tint i;\n\n\t\n\tif (nlen < 0 || nlen >", "5120": "< nlen; i++)\n\t\tif (get_user(name[i], args_name + i))\n\t\t\treturn -EFAULT;\n\n\twarn_on_bintable(name, nlen);\n\n\treturn binary_sysctl(name, nlen, oldval, oldlen, newval, newlen);\n}\n\nSYSCALL_DEFINE1(sysctl, struct __sysctl_args __user *, args)\n{\n\tstruct __sysctl_args tmp;\n\tsize_t oldlen = 0;\n\tssize_t result;\n\n\tif (copy_from_user(&tmp, args, sizeof(tmp)))\n\t\treturn -EFAULT;\n\n\tif (tmp.oldval && !tmp.oldlenp)\n\t\treturn -EFAULT;\n\n\tif (tmp.oldlenp && get_user(oldlen, tmp.oldlenp))\n\t\treturn -EFAULT;\n\n\tresult = do_sysctl(tmp.name, tmp.nlen, tmp.oldval, oldlen,\n\t\t\t   tmp.newval, tmp.newlen);\n\n\tif (result >", "5121": "< node->", "5122": "< notes; ++i)\n\t\tif (sysfs_create_bin_file(notes_attrs->", "5123": "< nr_blocks; i++) {\n\t\tif (add_rtree_block(zone, gfp_mask, safe_needed, ca)) {\n\t\t\tfree_zone_bm_rtree(zone, PG_UNSAFE_CLEAR);\n\t\t\treturn NULL;\n\t\t}\n\t}\n\n\treturn zone;\n}\n\n\nstatic void free_zone_bm_rtree(struct mem_zone_bm_rtree *zone,\n\t\t\t       int clear_nosave_free)\n{\n\tstruct rtree_node *node;\n\n\tlist_for_each_entry(node, &zone->", "5124": "< nr_cpu_ids && idle_cpu(ilb))\n\t\treturn ilb;\n\n\treturn nr_cpu_ids;\n}\n\n\nstatic void nohz_balancer_kick(void)\n{\n\tint ilb_cpu;\n\n\tnohz.next_balance++;\n\n\tilb_cpu = find_new_ilb();\n\n\tif (ilb_cpu >", "5125": "< nr_cpu_ids)\n\t\tirq_do_set_affinity(&desc->", "5126": "< nr_cpu_ids)\n\t\tnr_cpu_ids = nr_cpus;\n\n\treturn 0;\n}\n\nearly_param(\"nr_cpus\", nrcpus);\n\nstatic int __init maxcpus(char *str)\n{\n\tget_option(&str, &setup_max_cpus);\n\tif (setup_max_cpus == 0)\n\t\tarch_disable_smp_support();\n\n\treturn 0;\n}\n\nearly_param(\"maxcpus\", maxcpus);\n\n\nint nr_cpu_ids __read_mostly = NR_CPUS;\nEXPORT_SYMBOL(nr_cpu_ids);\n\n\nvoid __init setup_nr_cpu_ids(void)\n{\n\tnr_cpu_ids = find_last_bit(cpumask_bits(cpu_possible_mask),NR_CPUS) + 1;\n}\n\nvoid __weak smp_announce(void)\n{\n\tprintk(KERN_INFO \"Brought up %d CPUs\\n\", num_online_cpus());\n}\n\n\nvoid __init smp_init(void)\n{\n\tunsigned int cpu;\n\n\tidle_threads_init();\n\n\t\n\tfor_each_present_cpu(cpu) {\n\t\tif (num_online_cpus() >", "5127": "< nr_cpu_ids)\n\t\treturn (void *)(unsigned long)(n + 2);\n\treturn NULL;\n}\n\nstatic void *sched_debug_next(struct seq_file *file, void *data, loff_t *offset)\n{\n\t(*offset)++;\n\treturn sched_debug_start(file, offset);\n}\n\nstatic void sched_debug_stop(struct seq_file *file, void *data)\n{\n}\n\nstatic const struct seq_operations sched_debug_sops = {\n\t.start = sched_debug_start,\n\t.next = sched_debug_next,\n\t.stop = sched_debug_stop,\n\t.show = sched_debug_show,\n};\n\nstatic int sched_debug_release(struct inode *inode, struct file *file)\n{\n\tseq_release(inode, file);\n\n\treturn 0;\n}\n\nstatic int sched_debug_open(struct inode *inode, struct file *filp)\n{\n\tint ret = 0;\n\n\tret = seq_open(filp, &sched_debug_sops);\n\n\treturn ret;\n}\n\nstatic const struct file_operations sched_debug_fops = {\n\t.open\t\t= sched_debug_open,\n\t.read\t\t= seq_read,\n\t.llseek\t\t= seq_lseek,\n\t.release\t= sched_debug_release,\n};\n\nstatic int __init init_sched_debug_procfs(void)\n{\n\tstruct proc_dir_entry *pe;\n\n\tpe = proc_create(\"sched_debug\", 0444, NULL, &sched_debug_fops);\n\tif (!pe)\n\t\treturn -ENOMEM;\n\treturn 0;\n}\n\n__initcall(init_sched_debug_procfs);\n\n#define __P(F) \\\n\tSEQ_printf(m, \"%-45s:%21Ld\\n\", #F, (long long)F)\n#define P(F) \\\n\tSEQ_printf(m, \"%-45s:%21Ld\\n\", #F, (long long)p->", "5128": "< nr_cpu_ids)\n\t\treturn (void *)(unsigned long)(n + 2);\n\treturn NULL;\n}\n\nstatic void *schedstat_next(struct seq_file *file, void *data, loff_t *offset)\n{\n\t(*offset)++;\n\treturn schedstat_start(file, offset);\n}\n\nstatic void schedstat_stop(struct seq_file *file, void *data)\n{\n}\n\nstatic const struct seq_operations schedstat_sops = {\n\t.start = schedstat_start,\n\t.next  = schedstat_next,\n\t.stop  = schedstat_stop,\n\t.show  = show_schedstat,\n};\n\nstatic int schedstat_open(struct inode *inode, struct file *file)\n{\n\treturn seq_open(file, &schedstat_sops);\n}\n\nstatic const struct file_operations proc_schedstat_operations = {\n\t.open    = schedstat_open,\n\t.read    = seq_read,\n\t.llseek  = seq_lseek,\n\t.release = seq_release,\n};\n\nstatic int __init proc_schedstat_init(void)\n{\n\tproc_create(\"schedstat\", 0, NULL, &proc_schedstat_operations);\n\treturn 0;\n}\nsubsys_initcall(proc_schedstat_init);\n\n\n#include <linux/export.h>", "5129": "< nr_cpu_ids)\n\t\treturn -EINVAL;\n\tif (len & (sizeof(compat_ulong_t)-1))\n\t\treturn -EINVAL;\n\n\tif (!alloc_cpumask_var(&mask, GFP_KERNEL))\n\t\treturn -ENOMEM;\n\n\tret = sched_getaffinity(pid, mask);\n\tif (ret == 0) {\n\t\tsize_t retlen = min_t(size_t, len, cpumask_size());\n\n\t\tif (compat_put_bitmap(user_mask_ptr, cpumask_bits(mask), retlen * 8))\n\t\t\tret = -EFAULT;\n\t\telse\n\t\t\tret = retlen;\n\t}\n\tfree_cpumask_var(mask);\n\n\treturn ret;\n}\n\nint get_compat_itimerspec(struct itimerspec *dst,\n\t\t\t  const struct compat_itimerspec __user *src)\n{\n\tif (__compat_get_timespec(&dst->", "5130": "< nr_cpu_ids)\n\t\treturn -EINVAL;\n\tif (len & (sizeof(unsigned long)-1))\n\t\treturn -EINVAL;\n\n\tif (!alloc_cpumask_var(&mask, GFP_KERNEL))\n\t\treturn -ENOMEM;\n\n\tret = sched_getaffinity(pid, mask);\n\tif (ret == 0) {\n\t\tsize_t retlen = min_t(size_t, len, cpumask_size());\n\n\t\tif (copy_to_user(user_mask_ptr, mask, retlen))\n\t\t\tret = -EFAULT;\n\t\telse\n\t\t\tret = retlen;\n\t}\n\tfree_cpumask_var(mask);\n\n\treturn ret;\n}\n\n\nSYSCALL_DEFINE0(sched_yield)\n{\n\tstruct rq *rq = this_rq_lock();\n\n\tschedstat_inc(rq, yld_count);\n\tcurrent->", "5131": "< nr_cpu_ids)\n\t\treturn per_cpu_ptr(rsp->", "5132": "< nr_cpu_ids)\n\t\tset_cpus_allowed_ptr(current, cpumask_of(cpu));\n#else \n\thousekeeping_affine(current);\n#endif \n}\n\n\nstatic void rcu_dynticks_task_enter(void)\n{\n#if defined(CONFIG_TASKS_RCU) && defined(CONFIG_NO_HZ_FULL)\n\tACCESS_ONCE(current->", "5133": "< nr_cpu_ids) {\n\t\t\t\trcu_read_unlock();\n\t\t\t\treturn best_cpu;\n\t\t\t}\n\t\t}\n\t}\n\trcu_read_unlock();\n\n\t\n\tif (this_cpu != -1)\n\t\treturn this_cpu;\n\n\tcpu = cpumask_any(lowest_mask);\n\tif (cpu < nr_cpu_ids)\n\t\treturn cpu;\n\treturn -1;\n}\n\n\nstatic struct rq *find_lock_lowest_rq(struct task_struct *task, struct rq *rq)\n{\n\tstruct rq *lowest_rq = NULL;\n\tint tries;\n\tint cpu;\n\n\tfor (tries = 0; tries < RT_MAX_TRIES; tries++) {\n\t\tcpu = find_lowest_rq(task);\n\n\t\tif ((cpu == -1) || (cpu == rq->", "5134": "< nr_cpu_ids;\n\t     cpu = cpumask_next_and(cpu, nodemask, mask)) {\n\t\tif (cpu_online(cpu))\n\t\t\tgoto call;\n\t}\n\n\t\n\tcpu = cpumask_any_and(mask, cpu_online_mask);\ncall:\n\tret = smp_call_function_single(cpu, func, info, wait);\n\tput_cpu();\n\treturn ret;\n}\nEXPORT_SYMBOL_GPL(smp_call_function_any);\n\n\nvoid smp_call_function_many(const struct cpumask *mask,\n\t\t\t    smp_call_func_t func, void *info, bool wait)\n{\n\tstruct call_function_data *cfd;\n\tint cpu, next_cpu, this_cpu = smp_processor_id();\n\n\t\n\tWARN_ON_ONCE(cpu_online(this_cpu) && irqs_disabled()\n\t\t     && !oops_in_progress && !early_boot_irqs_disabled);\n\n\t\n\tcpu = cpumask_first_and(mask, cpu_online_mask);\n\tif (cpu == this_cpu)\n\t\tcpu = cpumask_next_and(cpu, mask, cpu_online_mask);\n\n\t\n\tif (cpu >", "5135": "< nr_irqs; i++)\n\t\t\tinfo->", "5136": "< nr_lock_chains)\n\t\treturn lock_chains + (*pos - 1);\n\n\treturn NULL;\n}\n\nstatic void *lc_next(struct seq_file *m, void *v, loff_t *pos)\n{\n\t(*pos)++;\n\treturn lc_start(m, pos);\n}\n\nstatic void lc_stop(struct seq_file *m, void *v)\n{\n}\n\nstatic int lc_show(struct seq_file *m, void *v)\n{\n\tstruct lock_chain *chain = v;\n\tstruct lock_class *class;\n\tint i;\n\n\tif (v == SEQ_START_TOKEN) {\n\t\tseq_printf(m, \"all lock chains:\\n\");\n\t\treturn 0;\n\t}\n\n\tseq_printf(m, \"irq_context: %d\\n\", chain->", "5137": "< nr_node_ids; i++) {\n\t\tprintk(KERN_WARNING \"  \");\n\t\tfor (j = 0; j < nr_node_ids; j++)\n\t\t\tprintk(KERN_CONT \"%02d \", node_distance(i,j));\n\t\tprintk(KERN_CONT \"\\n\");\n\t}\n\tprintk(KERN_WARNING \"\\n\");\n}\n\nbool find_numa_distance(int distance)\n{\n\tint i;\n\n\tif (distance == node_distance(0, 0))\n\t\treturn true;\n\n\tfor (i = 0; i < sched_domains_numa_levels; i++) {\n\t\tif (sched_domains_numa_distance[i] == distance)\n\t\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n\nstatic void init_numa_topology_type(void)\n{\n\tint a, b, c, n;\n\n\tn = sched_max_numa_distance;\n\n\tif (n <= 1)\n\t\tsched_numa_topology_type = NUMA_DIRECT;\n\n\tfor_each_online_node(a) {\n\t\tfor_each_online_node(b) {\n\t\t\t\n\t\t\tif (node_distance(a, b) < n)\n\t\t\t\tcontinue;\n\n\t\t\t\n\t\t\tfor_each_online_node(c) {\n\t\t\t\tif (node_distance(a, c) < n &&\n\t\t\t\t    node_distance(b, c) < n) {\n\t\t\t\t\tsched_numa_topology_type =\n\t\t\t\t\t\t\tNUMA_GLUELESS_MESH;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsched_numa_topology_type = NUMA_BACKPLANE;\n\t\t\treturn;\n\t\t}\n\t}\n}\n\nstatic void sched_init_numa(void)\n{\n\tint next_distance, curr_distance = node_distance(0, 0);\n\tstruct sched_domain_topology_level *tl;\n\tint level = 0;\n\tint i, j, k;\n\n\tsched_domains_numa_distance = kzalloc(sizeof(int) * nr_node_ids, GFP_KERNEL);\n\tif (!sched_domains_numa_distance)\n\t\treturn;\n\n\t\n\tnext_distance = curr_distance;\n\tfor (i = 0; i < nr_node_ids; i++) {\n\t\tfor (j = 0; j < nr_node_ids; j++) {\n\t\t\tfor (k = 0; k < nr_node_ids; k++) {\n\t\t\t\tint distance = node_distance(i, k);\n\n\t\t\t\tif (distance >", "5138": "< nr_pages; i++) {\n\t\tcompat_uptr_t p;\n\n\t\tif (get_user(p, pages32 + i) ||\n\t\t\tput_user(compat_ptr(p), pages + i))\n\t\t\treturn -EFAULT;\n\t}\n\treturn sys_move_pages(pid, nr_pages, pages, nodes, status, flags);\n}\n\nCOMPAT_SYSCALL_DEFINE4(migrate_pages, compat_pid_t, pid,\n\t\t       compat_ulong_t, maxnode,\n\t\t       const compat_ulong_t __user *, old_nodes,\n\t\t       const compat_ulong_t __user *, new_nodes)\n{\n\tunsigned long __user *old = NULL;\n\tunsigned long __user *new = NULL;\n\tnodemask_t tmp_mask;\n\tunsigned long nr_bits;\n\tunsigned long size;\n\n\tnr_bits = min_t(unsigned long, maxnode - 1, MAX_NUMNODES);\n\tsize = ALIGN(nr_bits, BITS_PER_LONG) / 8;\n\tif (old_nodes) {\n\t\tif (compat_get_bitmap(nodes_addr(tmp_mask), old_nodes, nr_bits))\n\t\t\treturn -EFAULT;\n\t\told = compat_alloc_user_space(new_nodes ? size * 2 : size);\n\t\tif (new_nodes)\n\t\t\tnew = old + size / sizeof(unsigned long);\n\t\tif (copy_to_user(old, nodes_addr(tmp_mask), size))\n\t\t\treturn -EFAULT;\n\t}\n\tif (new_nodes) {\n\t\tif (compat_get_bitmap(nodes_addr(tmp_mask), new_nodes, nr_bits))\n\t\t\treturn -EFAULT;\n\t\tif (new == NULL)\n\t\t\tnew = compat_alloc_user_space(size);\n\t\tif (copy_to_user(new, nodes_addr(tmp_mask), size))\n\t\t\treturn -EFAULT;\n\t}\n\treturn sys_migrate_pages(pid, nr_bits + 1, old, new);\n}\n#endif\n\nCOMPAT_SYSCALL_DEFINE2(sched_rr_get_interval,\n\t\t       compat_pid_t, pid,\n\t\t       struct compat_timespec __user *, interval)\n{\n\tstruct timespec t;\n\tint ret;\n\tmm_segment_t old_fs = get_fs();\n\n\tset_fs(KERNEL_DS);\n\tret = sys_sched_rr_get_interval(pid, (struct timespec __user *)&t);\n\tset_fs(old_fs);\n\tif (compat_put_timespec(&t, interval))\n\t\treturn -EFAULT;\n\treturn ret;\n}\n\n\nvoid __user *compat_alloc_user_space(unsigned long len)\n{\n\tvoid __user *ptr;\n\n\t\n\tif (unlikely(len >", "5139": "< nr_pages; i++) {\n\t\trb->", "5140": "< nr_pages; i++) {\n\t\tstruct page *page;\n\t\t\n\t\tbpage = kzalloc_node(ALIGN(sizeof(*bpage), cache_line_size()),\n\t\t\t\t    GFP_KERNEL | __GFP_NORETRY,\n\t\t\t\t    cpu_to_node(cpu));\n\t\tif (!bpage)\n\t\t\tgoto free_pages;\n\n\t\tlist_add(&bpage->", "5141": "< nr_pages; nr_removed++) {\n\t\tto_remove = rb_list_head(to_remove)->", "5142": "< nr_pages;) {\n\t\tstruct page *page;\n\t\tint last, order;\n\n\t\torder = min(max_order, ilog2(nr_pages - rb->", "5143": "< nr_range; i++) {\n\t\tu64 common_start, common_end;\n\n\t\tif (!range[i].end)\n\t\t\tcontinue;\n\n\t\tcommon_start = max(range[i].start, start);\n\t\tcommon_end = min(range[i].end, end);\n\t\tif (common_start >", "5144": "< nr_segments; i++) {\n\t\t\tresult = kimage_load_segment(image, &image->", "5145": "< nr_segments; i++) {\n\t\t\tunsigned long mstart, mend;\n\n\t\t\tmstart = image->", "5146": "< nr_segments; i++) {\n\t\tresult = copy_from_user(&in, &segments[i], sizeof(in));\n\t\tif (result)\n\t\t\treturn -EFAULT;\n\n\t\tout.buf   = compat_ptr(in.buf);\n\t\tout.bufsz = in.bufsz;\n\t\tout.mem   = in.mem;\n\t\tout.memsz = in.memsz;\n\n\t\tresult = copy_to_user(&ksegments[i], &out, sizeof(out));\n\t\tif (result)\n\t\t\treturn -EFAULT;\n\t}\n\n\treturn sys_kexec_load(entry, nr_segments, ksegments, flags);\n}\n#endif\n\n#ifdef CONFIG_KEXEC_FILE\nSYSCALL_DEFINE5(kexec_file_load, int, kernel_fd, int, initrd_fd,\n\t\tunsigned long, cmdline_len, const char __user *, cmdline_ptr,\n\t\tunsigned long, flags)\n{\n\tint ret = 0, i;\n\tstruct kimage **dest_image, *image;\n\n\t\n\tif (!capable(CAP_SYS_BOOT) || kexec_load_disabled)\n\t\treturn -EPERM;\n\n\t\n\tif (flags != (flags & KEXEC_FILE_FLAGS))\n\t\treturn -EINVAL;\n\n\timage = NULL;\n\n\tif (!mutex_trylock(&kexec_mutex))\n\t\treturn -EBUSY;\n\n\tdest_image = &kexec_image;\n\tif (flags & KEXEC_FILE_ON_CRASH)\n\t\tdest_image = &kexec_crash_image;\n\n\tif (flags & KEXEC_FILE_UNLOAD)\n\t\tgoto exchange;\n\n\t\n\tif (flags & KEXEC_FILE_ON_CRASH)\n\t\tkimage_free(xchg(&kexec_crash_image, NULL));\n\n\tret = kimage_file_alloc_init(&image, kernel_fd, initrd_fd, cmdline_ptr,\n\t\t\t\t     cmdline_len, flags);\n\tif (ret)\n\t\tgoto out;\n\n\tret = machine_kexec_prepare(image);\n\tif (ret)\n\t\tgoto out;\n\n\tret = kexec_calculate_store_digests(image);\n\tif (ret)\n\t\tgoto out;\n\n\tfor (i = 0; i < image->", "5147": "< nr_segments; i++) {\n\t\tunsigned long mstart, mend;\n\t\tunsigned long j;\n\n\t\tmstart = image->", "5148": "< nr_segments; i++) {\n\t\tunsigned long mstart, mend;\n\n\t\tmstart = image->", "5149": "< nr_threads; thr++)\n\t\t\tif (data[thr].thr)\n\t\t\t\tkthread_stop(data[thr].thr);\n\t\tvfree(data);\n\t}\n\tif (page) free_page((unsigned long)page);\n\n\treturn ret;\n}\n\n\n\nstatic int enough_swap(unsigned int nr_pages, unsigned int flags)\n{\n\tunsigned int free_swap = count_swap_pages(root_swap, 1);\n\tunsigned int required;\n\n\tpr_debug(\"PM: Free swap pages: %u\\n\", free_swap);\n\n\trequired = PAGES_FOR_IO + nr_pages;\n\treturn free_swap >", "5150": "< nr_threads; thr++)\n\t\t\tif (data[thr].thr)\n\t\t\t\tkthread_stop(data[thr].thr);\n\t\tvfree(data);\n\t}\n\tvfree(page);\n\n\treturn ret;\n}\n\n\n\nint swsusp_read(unsigned int *flags_p)\n{\n\tint error;\n\tstruct swap_map_handle handle;\n\tstruct snapshot_handle snapshot;\n\tstruct swsusp_info *header;\n\n\tmemset(&snapshot, 0, sizeof(struct snapshot_handle));\n\terror = snapshot_write_next(&snapshot);\n\tif (error < PAGE_SIZE)\n\t\treturn error < 0 ? error : -EFAULT;\n\theader = (struct swsusp_info *)data_of(snapshot);\n\terror = get_swap_reader(&handle, flags_p);\n\tif (error)\n\t\tgoto end;\n\tif (!error)\n\t\terror = swap_read_page(&handle, header, NULL);\n\tif (!error) {\n\t\terror = (*flags_p & SF_NOCOMPRESS_MODE) ?\n\t\t\tload_image(&handle, &snapshot, header->", "5151": "< nr_threads; thr++)\n\t\tmemset(&data[thr], 0, offsetof(struct cmp_data, go));\n\n\tcrc = kmalloc(sizeof(*crc), GFP_KERNEL);\n\tif (!crc) {\n\t\tprintk(KERN_ERR \"PM: Failed to allocate crc\\n\");\n\t\tret = -ENOMEM;\n\t\tgoto out_clean;\n\t}\n\tmemset(crc, 0, offsetof(struct crc_data, go));\n\n\t\n\tfor (thr = 0; thr < nr_threads; thr++) {\n\t\tinit_waitqueue_head(&data[thr].go);\n\t\tinit_waitqueue_head(&data[thr].done);\n\n\t\tdata[thr].thr = kthread_run(lzo_compress_threadfn,\n\t\t                            &data[thr],\n\t\t                            \"image_compress/%u\", thr);\n\t\tif (IS_ERR(data[thr].thr)) {\n\t\t\tdata[thr].thr = NULL;\n\t\t\tprintk(KERN_ERR\n\t\t\t       \"PM: Cannot start compression threads\\n\");\n\t\t\tret = -ENOMEM;\n\t\t\tgoto out_clean;\n\t\t}\n\t}\n\n\t\n\tinit_waitqueue_head(&crc->", "5152": "< nr_threads; thr++)\n\t\tmemset(&data[thr], 0, offsetof(struct dec_data, go));\n\n\tcrc = kmalloc(sizeof(*crc), GFP_KERNEL);\n\tif (!crc) {\n\t\tprintk(KERN_ERR \"PM: Failed to allocate crc\\n\");\n\t\tret = -ENOMEM;\n\t\tgoto out_clean;\n\t}\n\tmemset(crc, 0, offsetof(struct crc_data, go));\n\n\t\n\tfor (thr = 0; thr < nr_threads; thr++) {\n\t\tinit_waitqueue_head(&data[thr].go);\n\t\tinit_waitqueue_head(&data[thr].done);\n\n\t\tdata[thr].thr = kthread_run(lzo_decompress_threadfn,\n\t\t                            &data[thr],\n\t\t                            \"image_decompress/%u\", thr);\n\t\tif (IS_ERR(data[thr].thr)) {\n\t\t\tdata[thr].thr = NULL;\n\t\t\tprintk(KERN_ERR\n\t\t\t       \"PM: Cannot start decompression threads\\n\");\n\t\t\tret = -ENOMEM;\n\t\t\tgoto out_clean;\n\t\t}\n\t}\n\n\t\n\tinit_waitqueue_head(&crc->", "5153": "< nr_threads; thr++) {\n\t\t\tdata[thr].cmp_len = *(size_t *)page[pg];\n\t\t\tif (unlikely(!data[thr].cmp_len ||\n\t\t\t             data[thr].cmp_len >", "5154": "< nr_threads; thr++) {\n\t\t\tfor (off = 0; off < LZO_UNC_SIZE; off += PAGE_SIZE) {\n\t\t\t\tret = snapshot_read_next(snapshot);\n\t\t\t\tif (ret < 0)\n\t\t\t\t\tgoto out_finish;\n\n\t\t\t\tif (!ret)\n\t\t\t\t\tbreak;\n\n\t\t\t\tmemcpy(data[thr].unc + off,\n\t\t\t\t       data_of(*snapshot), PAGE_SIZE);\n\n\t\t\t\tif (!(nr_pages % m))\n\t\t\t\t\tprintk(KERN_INFO\n\t\t\t\t\t       \"PM: Image saving progress: \"\n\t\t\t\t\t       \"%3d%%\\n\",\n\t\t\t\t               nr_pages / m * 10);\n\t\t\t\tnr_pages++;\n\t\t\t}\n\t\t\tif (!off)\n\t\t\t\tbreak;\n\n\t\t\tdata[thr].unc_len = off;\n\n\t\t\tatomic_set(&data[thr].ready, 1);\n\t\t\twake_up(&data[thr].go);\n\t\t}\n\n\t\tif (!thr)\n\t\t\tbreak;\n\n\t\tcrc->", "5155": "< nr_threads; thr++) {\n\t\tcrc->", "5156": "< nrealreaders; i++)\n\t\t\ttorture_stop_kthread(rcu_torture_reader,\n\t\t\t\t\t     reader_tasks[i]);\n\t\tkfree(reader_tasks);\n\t}\n\trcu_torture_current = NULL;\n\n\tif (fakewriter_tasks) {\n\t\tfor (i = 0; i < nfakewriters; i++) {\n\t\t\ttorture_stop_kthread(rcu_torture_fakewriter,\n\t\t\t\t\t     fakewriter_tasks[i]);\n\t\t}\n\t\tkfree(fakewriter_tasks);\n\t\tfakewriter_tasks = NULL;\n\t}\n\n\ttorture_stop_kthread(rcu_torture_stats, stats_task);\n\ttorture_stop_kthread(rcu_torture_fqs, fqs_task);\n\tfor (i = 0; i < ncbflooders; i++)\n\t\ttorture_stop_kthread(rcu_torture_cbflood, cbflood_task[i]);\n\tif ((test_boost == 1 && cur_ops->", "5157": "< ns->", "5158": "< nsrc; i++) {\n\t\tif (i == 0 ||\n\t\t    is_core_symbol(src+i, info->", "5159": "< num; i++)\n\t\tif (kps[i]->", "5160": "< num; i++)\n\t\tif (params[i].ops->", "5161": "< num; i++) {\n\t\tif (jps[i]->", "5162": "< num; i++) {\n\t\tif (rps[i]->", "5163": "< num; i++) {\n\t\ttarget = get_link_target(\n\t\t\t\tgcov_info_filename(get_node_info(node)),\n\t\t\t\t&gcov_link[i]);\n\t\tif (!target)\n\t\t\tgoto out_err;\n\t\tbasename = kbasename(target);\n\t\tif (basename == target)\n\t\t\tgoto out_err;\n\t\tnode->", "5164": "< num_counter_active(dest); i++) {\n\t\tfor (j = 0; j < dest->", "5165": "< num_params; i++) {\n\t\tif (kparam[i].perm == 0)\n\t\t\tcontinue;\n\t\terr = add_sysfs_param(&mod->", "5166": "< num_params; i++) {\n\t\tif (parameq(param, params[i].name)) {\n\t\t\tif (params[i].level < min_level\n\t\t\t    || params[i].level >", "5167": "< num_versions; i++) {\n\t\tif (strcmp(versions[i].name, symname) != 0)\n\t\t\tcontinue;\n\n\t\tif (versions[i].crc == maybe_relocated(*crc, crc_owner))\n\t\t\treturn 1;\n\t\tpr_debug(\"Found checksum %lX vs module %lX\\n\",\n\t\t       maybe_relocated(*crc, crc_owner), versions[i].crc);\n\t\tgoto bad_version;\n\t}\n\n\tpr_warn(\"%s: no symbol version for %s\\n\", mod->", "5168": "< numchips; i++) {\n\t\t\n\t\tdgc->", "5169": "< offset; i++)\n\t\tseq_puts(m, \" \");\n\tfor (i = 0; i < length; i++)\n\t\tseq_printf(m, \"%c\", c);\n\tseq_puts(m, \"\\n\");\n}\n\nstatic void snprint_time(char *buf, size_t bufsiz, s64 nr)\n{\n\ts64 div;\n\ts32 rem;\n\n\tnr += 5; \n\tdiv = div_s64_rem(nr, 1000, &rem);\n\tsnprintf(buf, bufsiz, \"%lld.%02d\", (long long)div, (int)rem/10);\n}\n\nstatic void seq_time(struct seq_file *m, s64 time)\n{\n\tchar num[15];\n\n\tsnprint_time(num, sizeof(num), time);\n\tseq_printf(m, \" %14s\", num);\n}\n\nstatic void seq_lock_time(struct seq_file *m, struct lock_time *lt)\n{\n\tseq_printf(m, \"%14lu\", lt->", "5170": "< old->", "5171": "< op->", "5172": "< p->", "5173": "< pages)\n\t\tsize = min_t(unsigned long, pages, max_size);\n\n\t\n\tshrink_all_memory(saveable - size);\n\n\t\n\tpages_highmem = preallocate_image_highmem(highmem / 2);\n\talloc = count - max_size;\n\tif (alloc >", "5174": "< pages; i++) {\n\t\tpg->", "5175": "< panic_timeout * 1000; i += PANIC_TIMER_STEP) {\n\t\t\ttouch_nmi_watchdog();\n\t\t\tif (i >", "5176": "< parent->", "5177": "< parser->", "5178": "< pdu_len; i++) {\n\n\t\ttrace_seq_printf(s, \"%s%02x\",\n\t\t\t\t i == 0 ? \"\" : \" \", pdu_buf[i]);\n\n\t\t\n\t\tif (i == end && end != pdu_len - 1) {\n\t\t\ttrace_seq_puts(s, \" ..) \");\n\t\t\treturn;\n\t\t}\n\t}\n\n\ttrace_seq_puts(s, \") \");\n}\n\nstatic void blk_log_generic(struct trace_seq *s, const struct trace_entry *ent)\n{\n\tchar cmd[TASK_COMM_LEN];\n\n\ttrace_find_cmdline(ent->", "5179": "< pend))\n\t\t\t\treturn result;\n\t\t}\n\t}\n\n\t\n\tresult = -EINVAL;\n\tfor (i = 0; i < nr_segments; i++) {\n\t\tif (image->", "5180": "< percent_b)\n\t\treturn -1;\n\tif (percent_a >", "5181": "< perf_aux_size(rb))\n\t\t\thandle->", "5182": "< perf_data_size(rb) + PAGE_SIZE)\n\t\t\tgoto aux_unlock;\n\n\t\tif (aux_offset != vma->", "5183": "< perf_nr_task_contexts; (ctxn)++)\n\n\nvoid __perf_event_task_sched_out(struct task_struct *task,\n\t\t\t\t struct task_struct *next)\n{\n\tint ctxn;\n\n\tif (__this_cpu_read(perf_sched_cb_usages))\n\t\tperf_pmu_sched_task(task, next, false);\n\n\tfor_each_task_context_nr(ctxn)\n\t\tperf_event_context_sched_out(task, ctxn, next);\n\n\t\n\tif (atomic_read(this_cpu_ptr(&perf_cgroup_events)))\n\t\tperf_cgroup_sched_out(task, next);\n}\n\nstatic void task_ctx_sched_out(struct perf_event_context *ctx)\n{\n\tstruct perf_cpu_context *cpuctx = __get_cpu_context(ctx);\n\n\tif (!cpuctx->", "5184": "< pg->", "5185": "< pi->", "5186": "< pos && i + insn->", "5187": "< pos)\n\t\t\tinsn->", "5188": "< prev_prio)\n\t\tcpupri_set(&rq->", "5189": "< prev_prio)\n\t\trt_rq->", "5190": "< prev_prio);\n\n\t\t\n\t\tif (prio == prev_prio) {\n\t\t\tstruct rt_prio_array *array = &rt_rq->", "5191": "< prio)\n\t\t\tenqueue_flag = ENQUEUE_HEAD;\n\t\tp->", "5192": "< prog->", "5193": "< ps->", "5194": "< pwq->", "5195": "< r->", "5196": "< r2->", "5197": "< range[j].end) {\n\t\t\t\n\t\t\tfor (i = 0; i < az; i++) {\n\t\t\t\tif (range[i].end == 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (i < az) {\n\t\t\t\trange[i].end = range[j].end;\n\t\t\t\trange[i].start = end;\n\t\t\t} else {\n\t\t\t\tpr_err(\"%s: run out of slot in ranges\\n\",\n\t\t\t\t\t__func__);\n\t\t\t}\n\t\t\trange[j].end = start;\n\t\t\tcontinue;\n\t\t}\n\t}\n}\n\nstatic int cmp_range(const void *x1, const void *x2)\n{\n\tconst struct range *r1 = x1;\n\tconst struct range *r2 = x2;\n\n\tif (r1->", "5198": "< rb->", "5199": "< rb_page_size(reader))\n\t\tgoto out;\n\n\t\n\tif (RB_WARN_ON(cpu_buffer,\n\t\t       cpu_buffer->", "5200": "< rcu_num_lvls; i++)\n\t\trsp->", "5201": "< rcu_num_nodes; rnp++) {\n\t\tif (rnp->", "5202": "< rdp->", "5203": "< re_cnt; i++) {\n\t\tret = ftrace_function_set_regexp(data->", "5204": "< read_pages; i++) {\n\t\tpage[i] = (void *)__get_free_page(i < LZO_CMP_PAGES ?\n\t\t                                  __GFP_WAIT | __GFP_HIGH :\n\t\t                                  __GFP_WAIT | __GFP_NOWARN |\n\t\t                                  __GFP_NORETRY);\n\n\t\tif (!page[i]) {\n\t\t\tif (i < LZO_CMP_PAGES) {\n\t\t\t\tring_size = i;\n\t\t\t\tprintk(KERN_ERR\n\t\t\t\t       \"PM: Failed to allocate LZO pages\\n\");\n\t\t\t\tret = -ENOMEM;\n\t\t\t\tgoto out_clean;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\twant = ring_size = i;\n\n\tprintk(KERN_INFO\n\t\t\"PM: Using %u thread(s) for decompression.\\n\"\n\t\t\"PM: Loading and decompressing image data (%u pages)...\\n\",\n\t\tnr_threads, nr_to_read);\n\tm = nr_to_read / 10;\n\tif (!m)\n\t\tm = 1;\n\tnr_pages = 0;\n\tbio = NULL;\n\tstart = ktime_get();\n\n\tret = snapshot_write_next(snapshot);\n\tif (ret <= 0)\n\t\tgoto out_finish;\n\n\tfor(;;) {\n\t\tfor (i = 0; !eof && i < want; i++) {\n\t\t\tret = swap_read_page(handle, page[ring], &bio);\n\t\t\tif (ret) {\n\t\t\t\t\n\t\t\t\tif (handle->", "5205": "< real_tk->", "5206": "< rec->", "5207": "< region->", "5208": "< regnum; i++)\n\t\toffset += dbg_reg_def[i].size;\n\treturn kgdb_mem2hex((char *)gdb_regs + offset, out,\n\t\t\t    dbg_reg_def[i].size);\n}\n\n\nstatic void gdb_cmd_reg_get(struct kgdb_state *ks)\n{\n\tunsigned long regnum;\n\tchar *ptr = &remcom_in_buffer[1];\n\n\tkgdb_hex2long(&ptr, &regnum);\n\tif (regnum >", "5209": "< repeat; a += bytesperword, ++z) {\n\t\t\tif (phys) {\n\t\t\t\tif (kdb_getphysword(&word, a, bytesperword)\n\t\t\t\t\t\t|| word)\n\t\t\t\t\tbreak;\n\t\t\t} else if (kdb_getword(&word, a, bytesperword) || word)\n\t\t\t\tbreak;\n\t\t}\n\t\tn = min(num, repeat);\n\t\tkdb_md_line(fmtstr, addr, symbolic, nosect, bytesperword,\n\t\t\t    num, repeat, phys);\n\t\taddr += bytesperword * n;\n\t\trepeat -= n;\n\t\tz = (z + num - 1) / num;\n\t\tif (z >", "5210": "< res.end) &&\n\t\t(!find_next_iomem_res(&res, name, false))) {\n\t\tret = (*func)(res.start, res.end, arg);\n\t\tif (ret)\n\t\t\tbreak;\n\t\tres.start = res.end + 1;\n\t\tres.end = orig_end;\n\t}\n\treturn ret;\n}\n\n\nint walk_system_ram_res(u64 start, u64 end, void *arg,\n\t\t\t\tint (*func)(u64, u64, void *))\n{\n\tstruct resource res;\n\tu64 orig_end;\n\tint ret = -1;\n\n\tres.start = start;\n\tres.end = end;\n\tres.flags = IORESOURCE_MEM | IORESOURCE_BUSY;\n\torig_end = res.end;\n\twhile ((res.start < res.end) &&\n\t\t(!find_next_iomem_res(&res, \"System RAM\", true))) {\n\t\tret = (*func)(res.start, res.end, arg);\n\t\tif (ret)\n\t\t\tbreak;\n\t\tres.start = res.end + 1;\n\t\tres.end = orig_end;\n\t}\n\treturn ret;\n}\n\n#if !defined(CONFIG_ARCH_HAS_WALK_MEMORY)\n\n\nint walk_system_ram_range(unsigned long start_pfn, unsigned long nr_pages,\n\t\tvoid *arg, int (*func)(unsigned long, unsigned long, void *))\n{\n\tstruct resource res;\n\tunsigned long pfn, end_pfn;\n\tu64 orig_end;\n\tint ret = -1;\n\n\tres.start = (u64) start_pfn << PAGE_SHIFT;\n\tres.end = ((u64)(start_pfn + nr_pages) << PAGE_SHIFT) - 1;\n\tres.flags = IORESOURCE_MEM | IORESOURCE_BUSY;\n\torig_end = res.end;\n\twhile ((res.start < res.end) &&\n\t\t(find_next_iomem_res(&res, \"System RAM\", true) >", "5211": "< right);\n\tcase Audit_le:\n\t\treturn (left <= right);\n\tcase Audit_gt:\n\t\treturn (left >", "5212": "< ring_size; i++)\n\t\tfree_page((unsigned long)page[i]);\n\tif (crc) {\n\t\tif (crc->", "5213": "< root->", "5214": "< rp->", "5215": "< rq->", "5216": "< rq2) {\n\t\t\traw_spin_lock(&rq1->", "5217": "< rsp->", "5218": "< rt_b->", "5219": "< rule->", "5220": "< run_threads; thr++) {\n\t\t\twait_event(data[thr].done,\n\t\t\t           atomic_read(&data[thr].stop));\n\t\t\tatomic_set(&data[thr].stop, 0);\n\n\t\t\tret = data[thr].ret;\n\n\t\t\tif (ret < 0) {\n\t\t\t\tprintk(KERN_ERR \"PM: LZO compression failed\\n\");\n\t\t\t\tgoto out_finish;\n\t\t\t}\n\n\t\t\tif (unlikely(!data[thr].cmp_len ||\n\t\t\t             data[thr].cmp_len >", "5221": "< runtime) {\n\t\t\t\trt_rq->", "5222": "< s->", "5223": "< sched_nr_latency)\n\t\thrtick_start_fair(rq, curr);\n}\n#else \nstatic inline void\nhrtick_start_fair(struct rq *rq, struct task_struct *p)\n{\n}\n\nstatic inline void hrtick_update(struct rq *rq)\n{\n}\n#endif\n\n\nstatic void\nenqueue_task_fair(struct rq *rq, struct task_struct *p, int flags)\n{\n\tstruct cfs_rq *cfs_rq;\n\tstruct sched_entity *se = &p->", "5224": "< sd->", "5225": "< sechdrs[i].sh_size/sizeof(Elf_Sym); k++) {\n\t\t\tif (ELF_ST_BIND(syms[k].st_info) != STB_GLOBAL)\n\t\t\t\tcontinue;\n\n\t\t\tif (strcmp(strtab + syms[k].st_name, name) != 0)\n\t\t\t\tcontinue;\n\n\t\t\tif (syms[k].st_shndx == SHN_UNDEF ||\n\t\t\t    syms[k].st_shndx >", "5226": "< sect_attrs->", "5227": "< sgs->", "5228": "< shdr->", "5229": "< size)\n\t\t\tgoto out_unlock;\n\n\t\t\n\t\tsave_timestamp = cpu_buffer->", "5230": "< size) {\n\t\tstruct linked_page *lp;\n\n\t\tlp = get_image_page(ca->", "5231": "< size))\n\t\t\tgoto fail;\n\n\t\t\n\n\t\thead += size;\n\t} while (local_cmpxchg(&rb->", "5232": "< size; i++)\n\t\t\tstate->", "5233": "< size; i++) {\n\t\t\tif (slot_type[i] != STACK_MISC) {\n\t\t\t\tverbose(\"invalid read from stack off %d+%d size %d\\n\",\n\t\t\t\t\toff, i, size);\n\t\t\t\treturn -EACCES;\n\t\t\t}\n\t\t}\n\t\tif (value_regno >", "5234": "< size; i++) {\n\t\thhd = &hash->", "5235": "< size; i++) {\n\t\thhd = &src->", "5236": "< size; i++) {\n\t\thlist_for_each_entry(entry, &hash->", "5237": "< size; i++) {\n\t\tif (d >", "5238": "< sizeof(*(info->", "5239": "< sizeof(*attr)) {\n\t\tunsigned char *addr;\n\t\tunsigned char *end;\n\n\t\taddr = (void *)attr + usize;\n\t\tend  = (void *)attr + sizeof(*attr);\n\n\t\tfor (; addr < end; addr++) {\n\t\t\tif (*addr)\n\t\t\t\treturn -EFBIG;\n\t\t}\n\n\t\tattr->", "5240": "< sizeof(gdb_regs) * 2)\n\t\tif (hex_to_bin(ptr[i]) >", "5241": "< sizeof(stat_nam) - 1 ? stat_nam[state] : '?');\n#if BITS_PER_LONG == 32\n\tif (state == TASK_RUNNING)\n\t\tprintk(KERN_CONT \" running  \");\n\telse\n\t\tprintk(KERN_CONT \" %08lx \", thread_saved_pc(p));\n#else\n\tif (state == TASK_RUNNING)\n\t\tprintk(KERN_CONT \"  running task    \");\n\telse\n\t\tprintk(KERN_CONT \" %016lx \", thread_saved_pc(p));\n#endif\n#ifdef CONFIG_DEBUG_STACK_USAGE\n\tfree = stack_not_used(p);\n#endif\n\tppid = 0;\n\trcu_read_lock();\n\tif (pid_alive(p))\n\t\tppid = task_pid_nr(rcu_dereference(p->", "5242": "< sizeof(state_to_char) - 1 ? state_to_char[bit] : '?';\n}\n\n\nstruct trace_event *ftrace_find_event(int type)\n{\n\tstruct trace_event *event;\n\tunsigned key;\n\n\tkey = type & (EVENT_HASHSIZE - 1);\n\n\thlist_for_each_entry(event, &event_hash[key], node) {\n\t\tif (event->", "5243": "< sizeof(struct audit_rule_data))\n\t\t\treturn -EINVAL;\n\t\tif (audit_enabled == AUDIT_LOCKED) {\n\t\t\taudit_log_common_recv_msg(&ab, AUDIT_CONFIG_CHANGE);\n\t\t\taudit_log_format(ab, \" audit_enabled=%d res=0\", audit_enabled);\n\t\t\taudit_log_end(ab);\n\t\t\treturn -EPERM;\n\t\t}\n\t\terr = audit_rule_change(msg_type, NETLINK_CB(skb).portid,\n\t\t\t\t\t   seq, data, nlmsg_len(nlh));\n\t\tbreak;\n\tcase AUDIT_LIST_RULES:\n\t\terr = audit_list_rules_send(skb, seq);\n\t\tbreak;\n\tcase AUDIT_TRIM:\n\t\taudit_trim_trees();\n\t\taudit_log_common_recv_msg(&ab, AUDIT_CONFIG_CHANGE);\n\t\taudit_log_format(ab, \" op=trim res=1\");\n\t\taudit_log_end(ab);\n\t\tbreak;\n\tcase AUDIT_MAKE_EQUIV: {\n\t\tvoid *bufp = data;\n\t\tu32 sizes[2];\n\t\tsize_t msglen = nlmsg_len(nlh);\n\t\tchar *old, *new;\n\n\t\terr = -EINVAL;\n\t\tif (msglen < 2 * sizeof(u32))\n\t\t\tbreak;\n\t\tmemcpy(sizes, bufp, 2 * sizeof(u32));\n\t\tbufp += 2 * sizeof(u32);\n\t\tmsglen -= 2 * sizeof(u32);\n\t\told = audit_unpack_string(&bufp, &msglen, sizes[0]);\n\t\tif (IS_ERR(old)) {\n\t\t\terr = PTR_ERR(old);\n\t\t\tbreak;\n\t\t}\n\t\tnew = audit_unpack_string(&bufp, &msglen, sizes[1]);\n\t\tif (IS_ERR(new)) {\n\t\t\terr = PTR_ERR(new);\n\t\t\tkfree(old);\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\terr = audit_tag_tree(old, new);\n\n\t\taudit_log_common_recv_msg(&ab, AUDIT_CONFIG_CHANGE);\n\n\t\taudit_log_format(ab, \" op=make_equiv old=\");\n\t\taudit_log_untrustedstring(ab, old);\n\t\taudit_log_format(ab, \" new=\");\n\t\taudit_log_untrustedstring(ab, new);\n\t\taudit_log_format(ab, \" res=%d\", !err);\n\t\taudit_log_end(ab);\n\t\tkfree(old);\n\t\tkfree(new);\n\t\tbreak;\n\t}\n\tcase AUDIT_SIGNAL_INFO:\n\t\tlen = 0;\n\t\tif (audit_sig_sid) {\n\t\t\terr = security_secid_to_secctx(audit_sig_sid, &ctx, &len);\n\t\t\tif (err)\n\t\t\t\treturn err;\n\t\t}\n\t\tsig_data = kmalloc(sizeof(*sig_data) + len, GFP_KERNEL);\n\t\tif (!sig_data) {\n\t\t\tif (audit_sig_sid)\n\t\t\t\tsecurity_release_secctx(ctx, len);\n\t\t\treturn -ENOMEM;\n\t\t}\n\t\tsig_data->", "5244": "< sizeof(struct sock_filter));\n\tfp_size = fprog->", "5245": "< sizeof(unsigned int) && count >", "5246": "< slots_per_page(c)) {\n\t\t\tWARN_ON(kip->", "5247": "< slots_per_page(c)) {\n\t\t\tint i;\n\t\t\tfor (i = 0; i < slots_per_page(c); i++) {\n\t\t\t\tif (kip->", "5248": "< slots_per_page(c); i++) {\n\t\t\tif (kip->", "5249": "< src->", "5250": "< src_rq->", "5251": "< start + mod->", "5252": "< start + size));\n}\n\n\nstatic int gcov_module_notifier(struct notifier_block *nb, unsigned long event,\n\t\t\t\tvoid *data)\n{\n\tstruct module *mod = data;\n\tstruct gcov_info *info = NULL;\n\tstruct gcov_info *prev = NULL;\n\n\tif (event != MODULE_STATE_GOING)\n\t\treturn NOTIFY_OK;\n\tmutex_lock(&gcov_lock);\n\n\t\n\twhile ((info = gcov_info_next(info))) {\n\t\tif (within(info, mod->", "5253": "< start + size);\n}\n\n#ifdef CONFIG_KALLSYMS\n\nstatic inline int is_arm_mapping_symbol(const char *str)\n{\n\tif (str[0] == '.' && str[1] == 'L')\n\t\treturn true;\n\treturn str[0] == '$' && strchr(\"axtd\", str[1])\n\t       && (str[2] == '\\0' || str[2] == '.');\n}\n\nstatic const char *get_ksymbol(struct module *mod,\n\t\t\t       unsigned long addr,\n\t\t\t       unsigned long *size,\n\t\t\t       unsigned long *offset)\n{\n\tunsigned int i, best = 0;\n\tunsigned long nextval;\n\n\t\n\tif (within_module_init(addr, mod))\n\t\tnextval = (unsigned long)mod->", "5254": "< start + size;\n}\n\n\nvoid lockdep_free_key_range(void *start, unsigned long size)\n{\n\tstruct lock_class *class;\n\tstruct list_head *head;\n\tunsigned long flags;\n\tint i;\n\tint locked;\n\n\traw_local_irq_save(flags);\n\tlocked = graph_lock();\n\n\t\n\tfor (i = 0; i < CLASSHASH_SIZE; i++) {\n\t\thead = classhash_table + i;\n\t\tif (list_empty(head))\n\t\t\tcontinue;\n\t\tlist_for_each_entry_rcu(class, head, hash_entry) {\n\t\t\tif (within(class->", "5255": "< start || temp_start < kbuf->", "5256": "< start)\n\t\t\tbreak;\t\n\t}\n\tread_unlock(&resource_lock);\n\treturn ret;\n}\n\nvoid __weak arch_remove_reservations(struct resource *avail)\n{\n}\n\nstatic resource_size_t simple_align_resource(void *data,\n\t\t\t\t\t     const struct resource *avail,\n\t\t\t\t\t     resource_size_t size,\n\t\t\t\t\t     resource_size_t align)\n{\n\treturn avail->", "5257": "< start)\n\t\t\tcontinue;\n\t\treturn tmp;\n\t}\n}\n\nstatic int __release_resource(struct resource *old)\n{\n\tstruct resource *tmp, **p;\n\n\tp = &old->", "5258": "< start)\n\t\treturn root;\n\tif (start < root->", "5259": "< start) || (tmp->", "5260": "< start_index)\n\t\treturn __start___trace_bprintk_fmt + *pos;\n\n\t\n\tlast_index = start_index;\n\tstart_index = __stop___tracepoint_str - __start___tracepoint_str;\n\n\tif (*pos < last_index + start_index)\n\t\treturn __start___tracepoint_str + (*pos - last_index);\n\n\treturn find_next_mod_format(start_index, v, fmt, pos);\n}\n\nstatic void *\nt_start(struct seq_file *m, loff_t *pos)\n{\n\tformat_mod_start();\n\treturn find_next(NULL, pos);\n}\n\nstatic void *t_next(struct seq_file *m, void * v, loff_t *pos)\n{\n\t(*pos)++;\n\treturn find_next(v, pos);\n}\n\nstatic int t_show(struct seq_file *m, void *v)\n{\n\tconst char **fmt = v;\n\tconst char *str = *fmt;\n\tint i;\n\n\tseq_printf(m, \"0x%lx : \\\"\", *(unsigned long *)fmt);\n\n\t\n\tfor (i = 0; str[i]; i++) {\n\t\tswitch (str[i]) {\n\t\tcase '\\n':\n\t\t\tseq_puts(m, \"\\\\n\");\n\t\t\tbreak;\n\t\tcase '\\t':\n\t\t\tseq_puts(m, \"\\\\t\");\n\t\t\tbreak;\n\t\tcase '\\\\':\n\t\t\tseq_putc(m, '\\\\');\n\t\t\tbreak;\n\t\tcase '\"':\n\t\t\tseq_puts(m, \"\\\\\\\"\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tseq_putc(m, str[i]);\n\t\t}\n\t}\n\tseq_puts(m, \"\\\"\\n\");\n\n\treturn 0;\n}\n\nstatic void t_stop(struct seq_file *m, void *p)\n{\n\tformat_mod_stop();\n}\n\nstatic const struct seq_operations show_format_seq_ops = {\n\t.start = t_start,\n\t.next = t_next,\n\t.show = t_show,\n\t.stop = t_stop,\n};\n\nstatic int\nftrace_formats_open(struct inode *inode, struct file *file)\n{\n\treturn seq_open(file, &show_format_seq_ops);\n}\n\nstatic const struct file_operations ftrace_formats_fops = {\n\t.open = ftrace_formats_open,\n\t.read = seq_read,\n\t.llseek = seq_lseek,\n\t.release = seq_release,\n};\n\nstatic __init int init_trace_printk_function_export(void)\n{\n\tstruct dentry *d_tracer;\n\n\td_tracer = tracing_init_dentry();\n\tif (IS_ERR(d_tracer))\n\t\treturn 0;\n\n\ttrace_create_file(\"printk_formats\", 0444, d_tracer,\n\t\t\t\t    NULL, &ftrace_formats_fops);\n\n\treturn 0;\n}\n\nfs_initcall(init_trace_printk_function_export);\n\nstatic __init int init_trace_printk(void)\n{\n\treturn register_module_notifier(&module_trace_bprintk_format_nb);\n}\n\nearly_initcall(init_trace_printk);\n\n#include <linux/rwsem.h>", "5261": "< stat.size) {\n\t\tbytes = kernel_read(f.file, pos, (char *)(*buf) + pos,\n\t\t\t\t    stat.size - pos);\n\t\tif (bytes < 0) {\n\t\t\tvfree(*buf);\n\t\t\tret = bytes;\n\t\t\tgoto out;\n\t\t}\n\n\t\tif (bytes == 0)\n\t\t\tbreak;\n\t\tpos += bytes;\n\t}\n\n\tif (pos != stat.size) {\n\t\tret = -EBADF;\n\t\tvfree(*buf);\n\t\tgoto out;\n\t}\n\n\t*buf_len = pos;\nout:\n\tfdput(f);\n\treturn ret;\n}\n\n\nint __weak arch_kexec_kernel_image_probe(struct kimage *image, void *buf,\n\t\t\t\t\t unsigned long buf_len)\n{\n\treturn -ENOEXEC;\n}\n\nvoid * __weak arch_kexec_kernel_image_load(struct kimage *image)\n{\n\treturn ERR_PTR(-ENOEXEC);\n}\n\nvoid __weak arch_kimage_file_post_load_cleanup(struct kimage *image)\n{\n}\n\nint __weak arch_kexec_kernel_verify_sig(struct kimage *image, void *buf,\n\t\t\t\t\tunsigned long buf_len)\n{\n\treturn -EKEYREJECTED;\n}\n\n\nint __weak\narch_kexec_apply_relocations_add(const Elf_Ehdr *ehdr, Elf_Shdr *sechdrs,\n\t\t\t\t unsigned int relsec)\n{\n\tpr_err(\"RELA relocation unsupported.\\n\");\n\treturn -ENOEXEC;\n}\n\n\nint __weak\narch_kexec_apply_relocations(const Elf_Ehdr *ehdr, Elf_Shdr *sechdrs,\n\t\t\t     unsigned int relsec)\n{\n\tpr_err(\"REL relocation unsupported.\\n\");\n\treturn -ENOEXEC;\n}\n\n\nstatic void kimage_file_post_load_cleanup(struct kimage *image)\n{\n\tstruct purgatory_info *pi = &image->", "5262": "< stat.size) {\n\t\tbytes = kernel_read(f.file, pos, (char *)(info->", "5263": "< stop; start++) {\n\t\tif ((*start)->", "5264": "< strlen(buts->", "5265": "< strlen(name); i++) {\n\t\t\t\tchar c = name[i];\n\t\t\t\tif (isalnum(c))\n\t\t\t\t\tcontinue;\n\t\t\t\tif ((c == '.') || (c == '-') || (c == '_'))\n\t\t\t\t\tcontinue;\n\t\t\t\treturn -EINVAL;\n\t\t\t}\n\t\t\t\n\t\t\tif (opts->", "5266": "< symsec->", "5267": "< sysctl_sched_migration_cost ||\n\t    !this_rq->", "5268": "< sysctl_sched_min_granularity)\n\t\treturn;\n\n\tse = __pick_first_entity(cfs_rq);\n\tdelta = curr->", "5269": "< t)\n\t\t\t\n\t\t\tcval = cputime_one_jiffy;\n\t\telse\n\t\t\tcval = cval - t;\n\t}\n\n\tspin_unlock_irq(&tsk->", "5270": "< t2) | ((t1 >", "5271": "< task_faults(p, src_nid);\n}\n\n#else\nstatic inline bool migrate_improves_locality(struct task_struct *p,\n\t\t\t\t\t     struct lb_env *env)\n{\n\treturn false;\n}\n\nstatic inline bool migrate_degrades_locality(struct task_struct *p,\n\t\t\t\t\t     struct lb_env *env)\n{\n\treturn false;\n}\n#endif\n\n\nstatic\nint can_migrate_task(struct task_struct *p, struct lb_env *env)\n{\n\tint tsk_cache_hot = 0;\n\n\tlockdep_assert_held(&env->", "5272": "< task_nice(p) &&\n\t\t\t    !can_nice(p, attr->", "5273": "< task_nice(p) && !can_nice(p, niceval)) {\n\t\terror = -EACCES;\n\t\tgoto out;\n\t}\n\tno_nice = security_task_setnice(p, niceval);\n\tif (no_nice) {\n\t\terror = no_nice;\n\t\tgoto out;\n\t}\n\tif (error == -ESRCH)\n\t\terror = 0;\n\tset_user_nice(p, niceval);\nout:\n\treturn error;\n}\n\nSYSCALL_DEFINE3(setpriority, int, which, int, who, int, niceval)\n{\n\tstruct task_struct *g, *p;\n\tstruct user_struct *user;\n\tconst struct cred *cred = current_cred();\n\tint error = -EINVAL;\n\tstruct pid *pgrp;\n\tkuid_t uid;\n\n\tif (which >", "5274": "< this_rq) {\n\t\t\traw_spin_unlock(&this_rq->", "5275": "< this_rq->", "5276": "< tick_period.tv64)\n\t\treturn;\n\n\t\n\twrite_seqlock(&jiffies_lock);\n\n\tdelta = ktime_sub(now, last_jiffies_update);\n\tif (delta.tv64 >", "5277": "< tk->", "5278": "< tmp.start)\n\t\t\tgoto next;\n\n\t\tresource_clip(&tmp, constraint->", "5279": "< tocopy; i++) {\n\t\teffective.cap[i] = kdata[i].effective;\n\t\tpermitted.cap[i] = kdata[i].permitted;\n\t\tinheritable.cap[i] = kdata[i].inheritable;\n\t}\n\twhile (i < _KERNEL_CAPABILITY_U32S) {\n\t\teffective.cap[i] = 0;\n\t\tpermitted.cap[i] = 0;\n\t\tinheritable.cap[i] = 0;\n\t\ti++;\n\t}\n\n\teffective.cap[CAP_LAST_U32] &= CAP_LAST_U32_VALID_MASK;\n\tpermitted.cap[CAP_LAST_U32] &= CAP_LAST_U32_VALID_MASK;\n\tinheritable.cap[CAP_LAST_U32] &= CAP_LAST_U32_VALID_MASK;\n\n\tnew = prepare_creds();\n\tif (!new)\n\t\treturn -ENOMEM;\n\n\tret = security_capset(new, current_cred(),\n\t\t\t      &effective, &inheritable, &permitted);\n\tif (ret < 0)\n\t\tgoto error;\n\n\taudit_log_capset(new, current_cred());\n\n\treturn commit_creds(new);\n\nerror:\n\tabort_creds(new);\n\treturn ret;\n}\n\n\nbool has_ns_capability(struct task_struct *t,\n\t\t       struct user_namespace *ns, int cap)\n{\n\tint ret;\n\n\trcu_read_lock();\n\tret = security_capable(__task_cred(t), ns, cap);\n\trcu_read_unlock();\n\n\treturn (ret == 0);\n}\n\n\nbool has_capability(struct task_struct *t, int cap)\n{\n\treturn has_ns_capability(t, &init_user_ns, cap);\n}\n\n\nbool has_ns_capability_noaudit(struct task_struct *t,\n\t\t\t       struct user_namespace *ns, int cap)\n{\n\tint ret;\n\n\trcu_read_lock();\n\tret = security_capable_noaudit(__task_cred(t), ns, cap);\n\trcu_read_unlock();\n\n\treturn (ret == 0);\n}\n\n\nbool has_capability_noaudit(struct task_struct *t, int cap)\n{\n\treturn has_ns_capability_noaudit(t, &init_user_ns, cap);\n}\n\n\nbool ns_capable(struct user_namespace *ns, int cap)\n{\n\tif (unlikely(!cap_valid(cap))) {\n\t\tpr_crit(\"capable() called with invalid cap=%u\\n\", cap);\n\t\tBUG();\n\t}\n\n\tif (security_capable(current_cred(), ns, cap) == 0) {\n\t\tcurrent->", "5280": "< tp->", "5281": "< trace->", "5282": "< tracing_thresh)\n\t\t\treturn 0;\n\t} else {\n\t\tif (delta <= tr->", "5283": "< tracing_thresh))\n\t\treturn;\n\telse\n\t\ttrace_graph_return(trace);\n}\n\nstatic int graph_trace_init(struct trace_array *tr)\n{\n\tint ret;\n\n\tset_graph_array(tr);\n\tif (tracing_thresh)\n\t\tret = register_ftrace_graph(&trace_graph_thresh_return,\n\t\t\t\t\t    &trace_graph_thresh_entry);\n\telse\n\t\tret = register_ftrace_graph(&trace_graph_return,\n\t\t\t\t\t    &trace_graph_entry);\n\tif (ret)\n\t\treturn ret;\n\ttracing_start_cmdline_record();\n\n\treturn 0;\n}\n\nstatic void graph_trace_reset(struct trace_array *tr)\n{\n\ttracing_stop_cmdline_record();\n\tunregister_ftrace_graph();\n}\n\nstatic int graph_trace_update_thresh(struct trace_array *tr)\n{\n\tgraph_trace_reset(tr);\n\treturn graph_trace_init(tr);\n}\n\nstatic int max_bytes_for_cpu;\n\nstatic void print_graph_cpu(struct trace_seq *s, int cpu)\n{\n\t\n\ttrace_seq_printf(s, \" %*d) \", max_bytes_for_cpu, cpu);\n}\n\n#define TRACE_GRAPH_PROCINFO_LENGTH\t14\n\nstatic void print_graph_proc(struct trace_seq *s, pid_t pid)\n{\n\tchar comm[TASK_COMM_LEN];\n\t\n\tchar pid_str[11];\n\tint spaces = 0;\n\tint len;\n\tint i;\n\n\ttrace_find_cmdline(pid, comm);\n\tcomm[7] = '\\0';\n\tsprintf(pid_str, \"%d\", pid);\n\n\t\n\tlen = strlen(comm) + strlen(pid_str) + 1;\n\n\tif (len < TRACE_GRAPH_PROCINFO_LENGTH)\n\t\tspaces = TRACE_GRAPH_PROCINFO_LENGTH - len;\n\n\t\n\tfor (i = 0; i < spaces / 2; i++)\n\t\ttrace_seq_putc(s, ' ');\n\n\ttrace_seq_printf(s, \"%s-%s\", comm, pid_str);\n\n\t\n\tfor (i = 0; i < spaces - (spaces / 2); i++)\n\t\ttrace_seq_putc(s, ' ');\n}\n\n\nstatic void print_graph_lat_fmt(struct trace_seq *s, struct trace_entry *entry)\n{\n\ttrace_seq_putc(s, ' ');\n\ttrace_print_lat_fmt(s, entry);\n}\n\n\nstatic void\nverif_pid(struct trace_seq *s, pid_t pid, int cpu, struct fgraph_data *data)\n{\n\tpid_t prev_pid;\n\tpid_t *last_pid;\n\n\tif (!data)\n\t\treturn;\n\n\tlast_pid = &(per_cpu_ptr(data->", "5284": "< tsk->", "5285": "< tu->", "5286": "< txc->", "5287": "< u->", "5288": "< usecs)\n\t\t\t++fail_count;\n\t\tWARN_ON(time_passed < 0);\n\t\tsum += time_passed;\n\t}\n\n\tavg = sum;\n\tdo_div(avg, iters);\n\tseq_printf(s, \"%d usecs x %d: exp=%d allowed=%d min=%d avg=%lld max=%d\",\n\t\t\tusecs, iters, usecs * 1000,\n\t\t\t(usecs * 1000) - allowed_error_ns, min, avg, max);\n\tif (fail_count)\n\t\tseq_printf(s, \" FAIL=%d\", fail_count);\n\tseq_puts(s, \"\\n\");\n\n\treturn 0;\n}\n\nstatic int udelay_test_show(struct seq_file *s, void *v)\n{\n\tint usecs;\n\tint iters;\n\tint ret = 0;\n\n\tmutex_lock(&udelay_test_lock);\n\tusecs = udelay_test_usecs;\n\titers = udelay_test_iterations;\n\tmutex_unlock(&udelay_test_lock);\n\n\tif (usecs >", "5289": "< val))\n\t\t\treturn -EINVAL;\n\t\t*valp = val;\n\t} else {\n\t\tint val = *valp;\n\t\tif (val < 0) {\n\t\t\t*negp = true;\n\t\t\t*lvalp = (unsigned long)-val;\n\t\t} else {\n\t\t\t*negp = false;\n\t\t\t*lvalp = (unsigned long)val;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\nint proc_dointvec_minmax(struct ctl_table *table, int write,\n\t\t  void __user *buffer, size_t *lenp, loff_t *ppos)\n{\n\tstruct do_proc_dointvec_minmax_conv_param param = {\n\t\t.min = (int *) table->", "5290": "< val);\t\t\t\t\t\\\n\t\tbreak;\t\t\t\t\t\t\t\\\n\tcase OP_LE:\t\t\t\t\t\t\t\\\n\t\tmatch = (*addr <= val);\t\t\t\t\t\\\n\t\tbreak;\t\t\t\t\t\t\t\\\n\tcase OP_GT:\t\t\t\t\t\t\t\\\n\t\tmatch = (*addr >", "5291": "< view->", "5292": "< wcount; i++)\n\t\t\tbufptr = hex_byte_pack(bufptr, s[i]);\n\t\t*bufptr = '\\0';\n\n\t\t\n\t\ts += wcount;\n\t\tlen -= wcount;\n\n\t\t\n\t\tput_packet(gdbmsgbuf);\n\t}\n}\n\n\nchar *kgdb_mem2hex(char *mem, char *buf, int count)\n{\n\tchar *tmp;\n\tint err;\n\n\t\n\ttmp = buf + count;\n\n\terr = probe_kernel_read(tmp, mem, count);\n\tif (err)\n\t\treturn NULL;\n\twhile (count >", "5293": "< zone->", "5294": "<%u>", "5295": "<, end_code);\n\terror |= __prctl_check_order(start_data, <, end_data);\n\terror |= __prctl_check_order(start_brk, <=, brk);\n\terror |= __prctl_check_order(arg_start, <=, arg_end);\n\terror |= __prctl_check_order(env_start, <=, env_end);\n\tif (error)\n\t\tgoto out;\n#undef __prctl_check_order\n\n\terror = -EINVAL;\n\n\t\n\tif (prctl_map->", "5296": "<- %lx)\";\n\t\targ = \"REC->", "5297": "<...>", "5298": "<<\n\t\t\t\t\t\t(tk->", "5299": "<<  1)\n#define MAX_SHARES\t(1UL << 18)\n#endif\n\ntypedef int (*tg_visitor)(struct task_group *, void *);\n\nextern int walk_tg_tree_from(struct task_group *from,\n\t\t\t     tg_visitor down, tg_visitor up, void *data);\n\n\nstatic inline int walk_tg_tree(tg_visitor down, tg_visitor up, void *data)\n{\n\treturn walk_tg_tree_from(&root_task_group, down, up, data);\n}\n\nextern int tg_nop(struct task_group *tg, void *data);\n\nextern void free_fair_sched_group(struct task_group *tg);\nextern int alloc_fair_sched_group(struct task_group *tg, struct task_group *parent);\nextern void unregister_fair_sched_group(struct task_group *tg, int cpu);\nextern void init_tg_cfs_entry(struct task_group *tg, struct cfs_rq *cfs_rq,\n\t\t\tstruct sched_entity *se, int cpu,\n\t\t\tstruct sched_entity *parent);\nextern void init_cfs_bandwidth(struct cfs_bandwidth *cfs_b);\nextern int sched_group_set_shares(struct task_group *tg, unsigned long shares);\n\nextern void __refill_cfs_bandwidth_runtime(struct cfs_bandwidth *cfs_b);\nextern void __start_cfs_bandwidth(struct cfs_bandwidth *cfs_b, bool force);\nextern void unthrottle_cfs_rq(struct cfs_rq *cfs_rq);\n\nextern void free_rt_sched_group(struct task_group *tg);\nextern int alloc_rt_sched_group(struct task_group *tg, struct task_group *parent);\nextern void init_tg_rt_entry(struct task_group *tg, struct rt_rq *rt_rq,\n\t\tstruct sched_rt_entity *rt_se, int cpu,\n\t\tstruct sched_rt_entity *parent);\n\nextern struct task_group *sched_create_group(struct task_group *parent);\nextern void sched_online_group(struct task_group *tg,\n\t\t\t       struct task_group *parent);\nextern void sched_destroy_group(struct task_group *tg);\nextern void sched_offline_group(struct task_group *tg);\n\nextern void sched_move_task(struct task_struct *tsk);\n\n#ifdef CONFIG_FAIR_GROUP_SCHED\nextern int sched_group_set_shares(struct task_group *tg, unsigned long shares);\n#endif\n\n#else \n\nstruct cfs_bandwidth { };\n\n#endif\t\n\n\nstruct cfs_rq {\n\tstruct load_weight load;\n\tunsigned int nr_running, h_nr_running;\n\n\tu64 exec_clock;\n\tu64 min_vruntime;\n#ifndef CONFIG_64BIT\n\tu64 min_vruntime_copy;\n#endif\n\n\tstruct rb_root tasks_timeline;\n\tstruct rb_node *rb_leftmost;\n\n\t\n\tstruct sched_entity *curr, *next, *last, *skip;\n\n#ifdef\tCONFIG_SCHED_DEBUG\n\tunsigned int nr_spread_over;\n#endif\n\n#ifdef CONFIG_SMP\n\t\n\tunsigned long runnable_load_avg, blocked_load_avg, utilization_load_avg;\n\tatomic64_t decay_counter;\n\tu64 last_decay;\n\tatomic_long_t removed_load;\n\n#ifdef CONFIG_FAIR_GROUP_SCHED\n\t\n\tu32 tg_runnable_contrib;\n\tunsigned long tg_load_contrib;\n\n\t\n\tunsigned long h_load;\n\tu64 last_h_load_update;\n\tstruct sched_entity *h_load_next;\n#endif \n#endif \n\n#ifdef CONFIG_FAIR_GROUP_SCHED\n\tstruct rq *rq;\t\n\n\t\n\tint on_list;\n\tstruct list_head leaf_cfs_rq_list;\n\tstruct task_group *tg;\t\n\n#ifdef CONFIG_CFS_BANDWIDTH\n\tint runtime_enabled;\n\tu64 runtime_expires;\n\ts64 runtime_remaining;\n\n\tu64 throttled_clock, throttled_clock_task;\n\tu64 throttled_clock_task_time;\n\tint throttled, throttle_count;\n\tstruct list_head throttled_list;\n#endif \n#endif \n};\n\nstatic inline int rt_bandwidth_enabled(void)\n{\n\treturn sysctl_sched_rt_runtime >", "5300": "<< !!(file->", "5301": "<< (20 - PAGE_SHIFT);\n\trss = get_mm_rss(p->", "5302": "<< (BITS_PER_LONG-1))\n\n\nDEFINE_MUTEX(module_mutex);\nEXPORT_SYMBOL_GPL(module_mutex);\nstatic LIST_HEAD(modules);\n#ifdef CONFIG_KGDB_KDB\nstruct list_head *kdb_modules = &modules; \n#endif \n\n#ifdef CONFIG_MODULE_SIG\n#ifdef CONFIG_MODULE_SIG_FORCE\nstatic bool sig_enforce = true;\n#else\nstatic bool sig_enforce = false;\n\nstatic int param_set_bool_enable_only(const char *val,\n\t\t\t\t      const struct kernel_param *kp)\n{\n\tint err;\n\tbool test;\n\tstruct kernel_param dummy_kp = *kp;\n\n\tdummy_kp.arg = &test;\n\n\terr = param_set_bool(val, &dummy_kp);\n\tif (err)\n\t\treturn err;\n\n\t\n\tif (!test && sig_enforce)\n\t\treturn -EROFS;\n\n\tif (test)\n\t\tsig_enforce = true;\n\treturn 0;\n}\n\nstatic const struct kernel_param_ops param_ops_bool_enable_only = {\n\t.flags = KERNEL_PARAM_OPS_FL_NOARG,\n\t.set = param_set_bool_enable_only,\n\t.get = param_get_bool,\n};\n#define param_check_bool_enable_only param_check_bool\n\nmodule_param(sig_enforce, bool_enable_only, 0644);\n#endif \n#endif \n\n\nint modules_disabled = 0;\ncore_param(nomodule, modules_disabled, bint, 0);\n\n\nstatic DECLARE_WAIT_QUEUE_HEAD(module_wq);\n\nstatic BLOCKING_NOTIFIER_HEAD(module_notify_list);\n\n\nstatic unsigned long module_addr_min = -1UL, module_addr_max = 0;\n\nint register_module_notifier(struct notifier_block *nb)\n{\n\treturn blocking_notifier_chain_register(&module_notify_list, nb);\n}\nEXPORT_SYMBOL(register_module_notifier);\n\nint unregister_module_notifier(struct notifier_block *nb)\n{\n\treturn blocking_notifier_chain_unregister(&module_notify_list, nb);\n}\nEXPORT_SYMBOL(unregister_module_notifier);\n\nstruct load_info {\n\tElf_Ehdr *hdr;\n\tunsigned long len;\n\tElf_Shdr *sechdrs;\n\tchar *secstrings, *strtab;\n\tunsigned long symoffs, stroffs;\n\tstruct _ddebug *debug;\n\tunsigned int num_debug;\n\tbool sig_ok;\n\tstruct {\n\t\tunsigned int sym, str, mod, vers, info, pcpu;\n\t} index;\n};\n\n\nstatic inline int strong_try_module_get(struct module *mod)\n{\n\tBUG_ON(mod && mod->", "5303": "<< (EXPSIZE - 1));\t\n\t\tvalue >", "5304": "<< (FSHIFT - 1);\n\treturn load >", "5305": "<< (MANTSIZE2+EXPSIZE2-1)) - 1;\n\t} else {\n\t\treturn (value & (MAXFRACT2>", "5306": "<< (MANTSIZE2-1));\n\t}\n}\n#endif\n\n#if ACCT_VERSION == 3\n\nstatic u32 encode_float(u64 value)\n{\n\tunsigned exp = 190;\n\tunsigned u;\n\n\tif (value == 0)\n\t\treturn 0;\n\twhile ((s64)value >", "5307": "<< (PAGE_SHIFT + page_order(rb));\n}\n\nstatic inline unsigned long perf_aux_size(struct ring_buffer *rb)\n{\n\treturn rb->", "5308": "<< (PAGE_SHIFT - 1);\n\nout:\n\tif (!ret)\n\t\trb->", "5309": "<< (PAGE_SHIFT - 10))\n\tkdb_printf(\"\\nMemTotal:       %8lu kB\\nMemFree:        %8lu kB\\n\"\n\t\t   \"Buffers:        %8lu kB\\n\",\n\t\t   K(val.totalram), K(val.freeram), K(val.bufferram));\n\treturn 0;\n}\n\n\nstatic int kdb_per_cpu(int argc, const char **argv)\n{\n\tchar fmtstr[64];\n\tint cpu, diag, nextarg = 1;\n\tunsigned long addr, symaddr, val, bytesperword = 0, whichcpu = ~0UL;\n\n\tif (argc < 1 || argc >", "5310": "<< (SHIFT_PLL + 1 + time_constant)))\n\t\tsecs = 1 << (SHIFT_PLL + 1 + time_constant);\n\n\tfreq_adj    += (offset64 * secs) <<\n\t\t\t(NTP_SCALE_SHIFT - 2 * (SHIFT_PLL + 2 + time_constant));\n\n\tfreq_adj    = min(freq_adj + time_freq, MAXFREQ_SCALED);\n\n\ttime_freq   = max(freq_adj, -MAXFREQ_SCALED);\n\n\ttime_offset = div_s64(offset64 << NTP_SCALE_SHIFT, NTP_INTERVAL_FREQ);\n}\n\n\nvoid ntp_clear(void)\n{\n\ttime_adjust\t= 0;\t\t\n\ttime_status\t|= STA_UNSYNC;\n\ttime_maxerror\t= NTP_PHASE_LIMIT;\n\ttime_esterror\t= NTP_PHASE_LIMIT;\n\n\tntp_update_frequency();\n\n\ttick_length\t= tick_length_base;\n\ttime_offset\t= 0;\n\n\t\n\tpps_clear();\n}\n\n\nu64 ntp_tick_length(void)\n{\n\treturn tick_length;\n}\n\n\n\nint second_overflow(unsigned long secs)\n{\n\ts64 delta;\n\tint leap = 0;\n\n\t\n\tswitch (time_state) {\n\tcase TIME_OK:\n\t\tif (time_status & STA_INS)\n\t\t\ttime_state = TIME_INS;\n\t\telse if (time_status & STA_DEL)\n\t\t\ttime_state = TIME_DEL;\n\t\tbreak;\n\tcase TIME_INS:\n\t\tif (!(time_status & STA_INS))\n\t\t\ttime_state = TIME_OK;\n\t\telse if (secs % 86400 == 0) {\n\t\t\tleap = -1;\n\t\t\ttime_state = TIME_OOP;\n\t\t\tprintk(KERN_NOTICE\n\t\t\t\t\"Clock: inserting leap second 23:59:60 UTC\\n\");\n\t\t}\n\t\tbreak;\n\tcase TIME_DEL:\n\t\tif (!(time_status & STA_DEL))\n\t\t\ttime_state = TIME_OK;\n\t\telse if ((secs + 1) % 86400 == 0) {\n\t\t\tleap = 1;\n\t\t\ttime_state = TIME_WAIT;\n\t\t\tprintk(KERN_NOTICE\n\t\t\t\t\"Clock: deleting leap second 23:59:59 UTC\\n\");\n\t\t}\n\t\tbreak;\n\tcase TIME_OOP:\n\t\ttime_state = TIME_WAIT;\n\t\tbreak;\n\n\tcase TIME_WAIT:\n\t\tif (!(time_status & (STA_INS | STA_DEL)))\n\t\t\ttime_state = TIME_OK;\n\t\tbreak;\n\t}\n\n\n\t\n\ttime_maxerror += MAXFREQ / NSEC_PER_USEC;\n\tif (time_maxerror >", "5311": "<< (cpu - rdp->", "5312": "<< (frac_bits - 1);\n\t\tx >", "5313": "<< (i - gc->", "5314": "<< (j * BITS_PER_COMPAT_LONG);\n\t\t}\n\t\t*mask++ = m;\n\t}\n\n\treturn 0;\n}\n\nlong compat_put_bitmap(compat_ulong_t __user *umask, unsigned long *mask,\n\t\t       unsigned long bitmap_size)\n{\n\tint i, j;\n\tunsigned long m;\n\tcompat_ulong_t um;\n\tunsigned long nr_compat_longs;\n\n\t\n\tbitmap_size = ALIGN(bitmap_size, BITS_PER_COMPAT_LONG);\n\n\tif (!access_ok(VERIFY_WRITE, umask, bitmap_size / 8))\n\t\treturn -EFAULT;\n\n\tnr_compat_longs = BITS_TO_COMPAT_LONGS(bitmap_size);\n\n\tfor (i = 0; i < BITS_TO_LONGS(bitmap_size); i++) {\n\t\tm = *mask++;\n\n\t\tfor (j = 0; j < sizeof(m)/sizeof(um); j++) {\n\t\t\tum = m;\n\n\t\t\t\n\t\t\tif (nr_compat_longs-- >", "5315": "<< (x))\n#define MASK_DECLARE_2(x)\tMASK_DECLARE_1(x), MASK_DECLARE_1(x+1)\n#define MASK_DECLARE_4(x)\tMASK_DECLARE_2(x), MASK_DECLARE_2(x+2)\n#define MASK_DECLARE_8(x)\tMASK_DECLARE_4(x), MASK_DECLARE_4(x+4)\n\nconst unsigned long cpu_bit_bitmap[BITS_PER_LONG+1][BITS_TO_LONGS(NR_CPUS)] = {\n\n\tMASK_DECLARE_8(0),\tMASK_DECLARE_8(8),\n\tMASK_DECLARE_8(16),\tMASK_DECLARE_8(24),\n#if BITS_PER_LONG >", "5316": "<< 0)\n#define TK_MIRROR\t\t(1 << 1)\n#define TK_CLOCK_WAS_SET\t(1 << 2)\n\n\nstatic struct {\n\tseqcount_t\t\tseq;\n\tstruct timekeeper\ttimekeeper;\n} tk_core ____cacheline_aligned;\n\nstatic DEFINE_RAW_SPINLOCK(timekeeper_lock);\nstatic struct timekeeper shadow_timekeeper;\n\n\nstruct tk_fast {\n\tseqcount_t\t\tseq;\n\tstruct tk_read_base\tbase[2];\n};\n\nstatic struct tk_fast tk_fast_mono ____cacheline_aligned;\nstatic struct tk_fast tk_fast_raw  ____cacheline_aligned;\n\n\nint __read_mostly timekeeping_suspended;\n\nstatic inline void tk_normalize_xtime(struct timekeeper *tk)\n{\n\twhile (tk->", "5317": "<< 0)\n#define _IRQ_DESC_PERCPU\t(1 << 1)\n\n#define IRQ_GET_DESC_CHECK_GLOBAL\t(_IRQ_DESC_CHECK)\n#define IRQ_GET_DESC_CHECK_PERCPU\t(_IRQ_DESC_CHECK | _IRQ_DESC_PERCPU)\n\nstruct irq_desc *\n__irq_get_desc_lock(unsigned int irq, unsigned long *flags, bool bus,\n\t\t    unsigned int check);\nvoid __irq_put_desc_unlock(struct irq_desc *desc, unsigned long flags, bool bus);\n\nstatic inline struct irq_desc *\nirq_get_desc_buslock(unsigned int irq, unsigned long *flags, unsigned int check)\n{\n\treturn __irq_get_desc_lock(irq, flags, true, check);\n}\n\nstatic inline void\nirq_put_desc_busunlock(struct irq_desc *desc, unsigned long flags)\n{\n\t__irq_put_desc_unlock(desc, flags, true);\n}\n\nstatic inline struct irq_desc *\nirq_get_desc_lock(unsigned int irq, unsigned long *flags, unsigned int check)\n{\n\treturn __irq_get_desc_lock(irq, flags, false, check);\n}\n\nstatic inline void\nirq_put_desc_unlock(struct irq_desc *desc, unsigned long flags)\n{\n\t__irq_put_desc_unlock(desc, flags, false);\n}\n\n\nstatic inline void irqd_set_move_pending(struct irq_data *d)\n{\n\td->", "5318": "<< 0)\n};\n\nextern struct list_head ftrace_trace_arrays;\n\nextern struct mutex trace_types_lock;\n\nextern int trace_array_get(struct trace_array *tr);\nextern void trace_array_put(struct trace_array *tr);\n\n\nstatic inline struct trace_array *top_trace_array(void)\n{\n\tstruct trace_array *tr;\n\n\tif (list_empty(&ftrace_trace_arrays))\n\t\treturn NULL;\n\n\ttr = list_entry(ftrace_trace_arrays.prev,\n\t\t\ttypeof(*tr), list);\n\tWARN_ON(!(tr->", "5319": "<< 0), \n\tCGROUP_FREEZING_SELF\t= (1 << 1), \n\tCGROUP_FREEZING_PARENT\t= (1 << 2), \n\tCGROUP_FROZEN\t\t= (1 << 3), \n\n\t\n\tCGROUP_FREEZING\t\t= CGROUP_FREEZING_SELF | CGROUP_FREEZING_PARENT,\n};\n\nstruct freezer {\n\tstruct cgroup_subsys_state\tcss;\n\tunsigned int\t\t\tstate;\n};\n\nstatic DEFINE_MUTEX(freezer_mutex);\n\nstatic inline struct freezer *css_freezer(struct cgroup_subsys_state *css)\n{\n\treturn css ? container_of(css, struct freezer, css) : NULL;\n}\n\nstatic inline struct freezer *task_freezer(struct task_struct *task)\n{\n\treturn css_freezer(task_css(task, freezer_cgrp_id));\n}\n\nstatic struct freezer *parent_freezer(struct freezer *freezer)\n{\n\treturn css_freezer(freezer->", "5320": "<< 1) + 1;\n}\n\nstatic inline int right_child(int i)\n{\n\treturn (i << 1) + 2;\n}\n\nstatic inline int dl_time_before(u64 a, u64 b)\n{\n\treturn (s64)(a - b) < 0;\n}\n\nstatic void cpudl_exchange(struct cpudl *cp, int a, int b)\n{\n\tint cpu_a = cp->", "5321": "<< 1) >", "5322": "<< 1),\n\tTRACER_PREEMPT_OFF\t= (1 << 2),\n};\n\nstatic int trace_type __read_mostly;\n\nstatic int save_flags;\nstatic bool function_enabled;\n\nstatic void stop_irqsoff_tracer(struct trace_array *tr, int graph);\nstatic int start_irqsoff_tracer(struct trace_array *tr, int graph);\n\n#ifdef CONFIG_PREEMPT_TRACER\nstatic inline int\npreempt_trace(void)\n{\n\treturn ((trace_type & TRACER_PREEMPT_OFF) && preempt_count());\n}\n#else\n# define preempt_trace() (0)\n#endif\n\n#ifdef CONFIG_IRQSOFF_TRACER\nstatic inline int\nirq_trace(void)\n{\n\treturn ((trace_type & TRACER_IRQS_OFF) &&\n\t\tirqs_disabled());\n}\n#else\n# define irq_trace() (0)\n#endif\n\n#define TRACE_DISPLAY_GRAPH\t1\n\nstatic struct tracer_opt trace_opts[] = {\n#ifdef CONFIG_FUNCTION_GRAPH_TRACER\n\t\n\t{ TRACER_OPT(display-graph, TRACE_DISPLAY_GRAPH) },\n#endif\n\t{ } \n};\n\nstatic struct tracer_flags tracer_flags = {\n\t.val  = 0,\n\t.opts = trace_opts,\n};\n\n#define is_graph() (tracer_flags.val & TRACE_DISPLAY_GRAPH)\n\n\nstatic __cacheline_aligned_in_smp\tunsigned long max_sequence;\n\n#ifdef CONFIG_FUNCTION_TRACER\n\nstatic int func_prolog_dec(struct trace_array *tr,\n\t\t\t   struct trace_array_cpu **data,\n\t\t\t   unsigned long *flags)\n{\n\tlong disabled;\n\tint cpu;\n\n\t\n\tcpu = raw_smp_processor_id();\n\tif (likely(!per_cpu(tracing_cpu, cpu)))\n\t\treturn 0;\n\n\tlocal_save_flags(*flags);\n\t\n\tif (!irqs_disabled_flags(*flags))\n\t\treturn 0;\n\n\t*data = per_cpu_ptr(tr->", "5323": "<< 1);\n\n\t\tp->", "5324": "<< 1);\n}\n\n\nstatic struct file *\nget_file_raw_ptr(struct task_struct *task, unsigned int idx)\n{\n\tstruct file *file = NULL;\n\n\ttask_lock(task);\n\trcu_read_lock();\n\n\tif (task->", "5325": "<< 10) | node);\n\n\t\tresult = -EFAULT;\n\t\tif (put_user(dnaddr, (__le16 __user *)oldval))\n\t\t\tgoto out;\n\n\t\tcopied = sizeof(dnaddr);\n\t}\n\n\tif (newval && newlen) {\n\t\t__le16 dnaddr;\n\t\tchar buf[15];\n\t\tint len;\n\n\t\tresult = -EINVAL;\n\t\tif (newlen != sizeof(dnaddr))\n\t\t\tgoto out;\n\n\t\tresult = -EFAULT;\n\t\tif (get_user(dnaddr, (__le16 __user *)newval))\n\t\t\tgoto out;\n\n\t\tlen = scnprintf(buf, sizeof(buf), \"%hu.%hu\",\n\t\t\t\tle16_to_cpu(dnaddr) >", "5326": "<< 15)\n#define FILTER_PRED_FOLD\t(1 << 15)\n\n\n#define MAX_FILTER_PRED\t\t16384\n\nstruct filter_pred;\nstruct regex;\n\ntypedef int (*filter_pred_fn_t) (struct filter_pred *pred, void *event);\n\ntypedef int (*regex_match_func)(char *str, struct regex *r, int len);\n\nenum regex_type {\n\tMATCH_FULL = 0,\n\tMATCH_FRONT_ONLY,\n\tMATCH_MIDDLE_ONLY,\n\tMATCH_END_ONLY,\n};\n\nstruct regex {\n\tchar\t\t\tpattern[MAX_FILTER_STR_VAL];\n\tint\t\t\tlen;\n\tint\t\t\tfield_len;\n\tregex_match_func\tmatch;\n};\n\nstruct filter_pred {\n\tfilter_pred_fn_t \tfn;\n\tu64 \t\t\tval;\n\tstruct regex\t\tregex;\n\tunsigned short\t\t*ops;\n\tstruct ftrace_event_field *field;\n\tint \t\t\toffset;\n\tint \t\t\tnot;\n\tint \t\t\top;\n\tunsigned short\t\tindex;\n\tunsigned short\t\tparent;\n\tunsigned short\t\tleft;\n\tunsigned short\t\tright;\n};\n\nextern enum regex_type\nfilter_parse_regex(char *buff, int len, char **search, int *not);\nextern void print_event_filter(struct ftrace_event_file *file,\n\t\t\t       struct trace_seq *s);\nextern int apply_event_filter(struct ftrace_event_file *file,\n\t\t\t      char *filter_string);\nextern int apply_subsystem_event_filter(struct ftrace_subsystem_dir *dir,\n\t\t\t\t\tchar *filter_string);\nextern void print_subsystem_event_filter(struct event_subsystem *system,\n\t\t\t\t\t struct trace_seq *s);\nextern int filter_assign_type(const char *type);\nextern int create_event_filter(struct ftrace_event_call *call,\n\t\t\t       char *filter_str, bool set_str,\n\t\t\t       struct event_filter **filterp);\nextern void free_event_filter(struct event_filter *filter);\n\nstruct ftrace_event_field *\ntrace_find_event_field(struct ftrace_event_call *call, char *name);\n\nextern void trace_event_enable_cmd_record(bool enable);\nextern int event_trace_add_tracer(struct dentry *parent, struct trace_array *tr);\nextern int event_trace_del_tracer(struct trace_array *tr);\n\nextern struct ftrace_event_file *find_event_file(struct trace_array *tr,\n\t\t\t\t\t\t const char *system,\n\t\t\t\t\t\t const char *event);\n\nstatic inline void *event_file_data(struct file *filp)\n{\n\treturn ACCESS_ONCE(file_inode(filp)->", "5327": "<< 16) | ((u32)(roffs) & 0xffff))\n#define get_rloc_len(dl)\t\t((u32)(dl) >", "5328": "<< 16, period + 1);\n\t\t\tf_weight = (f_weight * p->", "5329": "<< 17))\n\n#if BITS_PER_LONG >", "5330": "<< 18) / sizeof(struct sock_filter))\n\n\nstatic void populate_seccomp_data(struct seccomp_data *sd)\n{\n\tstruct task_struct *task = current;\n\tstruct pt_regs *regs = task_pt_regs(task);\n\tunsigned long args[6];\n\n\tsd->", "5331": "<< 2); \n\t\tif (hlock->", "5332": "<< 2,\t\n\n\t\n\tWORKER_DIE\t\t= 1 << 1,\t\n\tWORKER_IDLE\t\t= 1 << 2,\t\n\tWORKER_PREP\t\t= 1 << 3,\t\n\tWORKER_CPU_INTENSIVE\t= 1 << 6,\t\n\tWORKER_UNBOUND\t\t= 1 << 7,\t\n\tWORKER_REBOUND\t\t= 1 << 8,\t\n\n\tWORKER_NOT_RUNNING\t= WORKER_PREP | WORKER_CPU_INTENSIVE |\n\t\t\t\t  WORKER_UNBOUND | WORKER_REBOUND,\n\n\tNR_STD_WORKER_POOLS\t= 2,\t\t\n\n\tUNBOUND_POOL_HASH_ORDER\t= 6,\t\t\n\tBUSY_WORKER_HASH_ORDER\t= 6,\t\t\n\n\tMAX_IDLE_WORKERS_RATIO\t= 4,\t\t\n\tIDLE_WORKER_TIMEOUT\t= 300 * HZ,\t\n\n\tMAYDAY_INITIAL_TIMEOUT  = HZ / 100 >", "5333": "<< 20));\n#ifndef CONFIG_64BIT\n\tcfs_rq->", "5334": "<< 20;\n\t\t\tupdate_entity_load_avg(se, 0);\n\t\t\t\n\t\t\tse->", "5335": "<< 20;\n\n\t\n\tif (period == 0)\n\t\treturn 0;\n\n\treturn div64_u64(runtime << 20, period);\n}\n\n#ifdef CONFIG_SMP\ninline struct dl_bw *dl_bw_of(int i)\n{\n\trcu_lockdep_assert(rcu_read_lock_sched_held(),\n\t\t\t   \"sched RCU must be held\");\n\treturn &cpu_rq(i)->", "5336": "<< 23);\n}\n#endif\n\n\n\nstatic void fill_ac(acct_t *ac)\n{\n\tstruct pacct_struct *pacct = &current->", "5337": "<< 24 | POISON_FREE << 16 | POISON_FREE << 8))\n\t\t\treturn true;\n\t}\n#endif\n\treturn false;\n}\nEXPORT_SYMBOL(creds_are_invalid);\n\n\nstatic void dump_invalid_creds(const struct cred *cred, const char *label,\n\t\t\t       const struct task_struct *tsk)\n{\n\tprintk(KERN_ERR \"CRED: %s credentials: %p %s%s%s\\n\",\n\t       label, cred,\n\t       cred == &init_cred ? \"[init]\" : \"\",\n\t       cred == tsk->", "5338": "<< 24 | POISON_FREE << 16 | POISON_FREE << 8)))\n\t\tprintk(KERN_ERR \"CRED: ->", "5339": "<< 31)\n\nstatic inline int system_refcount(struct event_subsystem *system)\n{\n\treturn system->", "5340": "<< 31);\n\tchunk->", "5341": "<< 32 );\n\tcase 1: set->", "5342": "<< 32 );\n\tcase 2: set->", "5343": "<< 32 );\n\tcase 3: set->", "5344": "<< 32 );\n\t}\n}\nEXPORT_SYMBOL_GPL(sigset_from_compat);\n\nvoid\nsigset_to_compat(compat_sigset_t *compat, const sigset_t *set)\n{\n\tswitch (_NSIG_WORDS) {\n\tcase 4: compat->", "5345": "<< 32;\n\t\tinsn++;\n\t\tCONT;\n\tALU64_ARSH_X:\n\t\t(*(s64 *) &DST) >", "5346": "<< 32;\n\n\treturn (struct bpf_map *) (unsigned long) imm64;\n}\n\n\nstatic int check_ld_imm(struct verifier_env *env, struct bpf_insn *insn)\n{\n\tstruct reg_state *regs = env->", "5347": "<< 4;\n\t}\n\n\treturn probe_kernel_write(mem, tmp_raw, count);\n}\n\n\nint kgdb_hex2long(char **ptr, unsigned long *long_val)\n{\n\tint hex_val;\n\tint num = 0;\n\tint negate = 0;\n\n\t*long_val = 0;\n\n\tif (**ptr == '-') {\n\t\tnegate = 1;\n\t\t(*ptr)++;\n\t}\n\twhile (**ptr) {\n\t\thex_val = hex_to_bin(**ptr);\n\t\tif (hex_val < 0)\n\t\t\tbreak;\n\n\t\t*long_val = (*long_val << 4) | hex_val;\n\t\tnum++;\n\t\t(*ptr)++;\n\t}\n\n\tif (negate)\n\t\t*long_val = -*long_val;\n\n\treturn num;\n}\n\n\nstatic int kgdb_ebin2mem(char *buf, char *mem, int count)\n{\n\tint size = 0;\n\tchar *c = buf;\n\n\twhile (count-- >", "5348": "<< 59),\n\t\t\t\t  KERN_WARNING \"Delta way too big! %llu ts=%llu write stamp = %llu\\n%s\",\n\t\t\t\t  (unsigned long long)delta,\n\t\t\t\t  (unsigned long long)ts,\n\t\t\t\t  (unsigned long long)cpu_buffer->", "5349": "<< 63) ||\n\t    attr->", "5350": "<< 63))\n\t\treturn false;\n\n\t\n\tif ((attr->", "5351": "<< 8),\n\t\t\t\t CLD_STOPPED);\n\t} else {\n\t\tWARN_ON_ONCE(!signr);\n\t\tptrace_stop(signr, CLD_STOPPED, 0, NULL);\n\t\tcurrent->", "5352": "<< BLK_TC_SHIFT) & what) == 0)\n\t\treturn 1;\n\tif (sector && (sector < bt->", "5353": "<< BLK_TC_SHIFT) - 1);\n\tlong_act   = !!(trace_flags & TRACE_ITER_VERBOSE);\n\tlog_action = classic ? &blk_log_action_classic : &blk_log_action;\n\n\tif (t->", "5354": "<< BM_BLOCK_SHIFT) - 1)\n\n\nstruct rtree_node {\n\tstruct list_head list;\n\tunsigned long *data;\n};\n\n\nstruct mem_zone_bm_rtree {\n\tstruct list_head list;\t\t\n\tstruct list_head nodes;\t\t\n\tstruct list_head leaves;\t\n\tunsigned long start_pfn;\t\n\tunsigned long end_pfn;\t\t\n\tstruct rtree_node *rtree;\t\n\tint levels;\t\t\t\n\tunsigned int blocks;\t\t\n};\n\n\n\nstruct bm_position {\n\tstruct mem_zone_bm_rtree *zone;\n\tstruct rtree_node *node;\n\tunsigned long node_pfn;\n\tint node_bit;\n};\n\nstruct memory_bitmap {\n\tstruct list_head zones;\n\tstruct linked_page *p_list;\t\n\tstruct bm_position cur;\t\n};\n\n\n\n#define BM_ENTRIES_PER_LEVEL\t(PAGE_SIZE / sizeof(unsigned long))\n#if BITS_PER_LONG == 32\n#define BM_RTREE_LEVEL_SHIFT\t(PAGE_SHIFT - 2)\n#else\n#define BM_RTREE_LEVEL_SHIFT\t(PAGE_SHIFT - 3)\n#endif\n#define BM_RTREE_LEVEL_MASK\t((1UL << BM_RTREE_LEVEL_SHIFT) - 1)\n\n\nstatic struct rtree_node *alloc_rtree_node(gfp_t gfp_mask, int safe_needed,\n\t\t\t\t\t   struct chain_allocator *ca,\n\t\t\t\t\t   struct list_head *list)\n{\n\tstruct rtree_node *node;\n\n\tnode = chain_alloc(ca, sizeof(struct rtree_node));\n\tif (!node)\n\t\treturn NULL;\n\n\tnode->", "5355": "<< CLASSHASH_BITS)\n#define __classhashfn(key)\thash_long((unsigned long)key, CLASSHASH_BITS)\n#define classhashentry(key)\t(classhash_table + __classhashfn((key)))\n\nstatic struct list_head classhash_table[CLASSHASH_SIZE];\n\n\n#define CHAINHASH_BITS\t\t(MAX_LOCKDEP_CHAINS_BITS-1)\n#define CHAINHASH_SIZE\t\t(1UL << CHAINHASH_BITS)\n#define __chainhashfn(chain)\thash_long(chain, CHAINHASH_BITS)\n#define chainhashentry(chain)\t(chainhash_table + __chainhashfn((chain)))\n\nstatic struct list_head chainhash_table[CHAINHASH_SIZE];\n\n\n#define iterate_chain_key(key1, key2) \\\n\t(((key1) << MAX_LOCKDEP_KEYS_BITS) ^ \\\n\t((key1) >", "5356": "<< CONFIG_LOG_BUF_SHIFT)\nstatic char __log_buf[__LOG_BUF_LEN] __aligned(LOG_ALIGN);\nstatic char *log_buf = __log_buf;\nstatic u32 log_buf_len = __LOG_BUF_LEN;\n\n\nchar *log_buf_addr_get(void)\n{\n\treturn log_buf;\n}\n\n\nu32 log_buf_len_get(void)\n{\n\treturn log_buf_len;\n}\n\n\nstatic char *log_text(const struct printk_log *msg)\n{\n\treturn (char *)msg + sizeof(struct printk_log);\n}\n\n\nstatic char *log_dict(const struct printk_log *msg)\n{\n\treturn (char *)msg + sizeof(struct printk_log) + msg->", "5357": "<< CS_ONLINE) | (1 << CS_CPU_EXCLUSIVE) |\n\t\t  (1 << CS_MEM_EXCLUSIVE)),\n};\n\n\n#define cpuset_for_each_child(child_cs, pos_css, parent_cs)\t\t\\\n\tcss_for_each_child((pos_css), &(parent_cs)->", "5358": "<< DEBUG_SHIFT;\n}\n\nu64 ring_buffer_time_stamp(struct ring_buffer *buffer, int cpu)\n{\n\tu64 time;\n\n\tpreempt_disable_notrace();\n\ttime = rb_time_stamp(buffer);\n\tpreempt_enable_no_resched_notrace();\n\n\treturn time;\n}\nEXPORT_SYMBOL_GPL(ring_buffer_time_stamp);\n\nvoid ring_buffer_normalize_time_stamp(struct ring_buffer *buffer,\n\t\t\t\t      int cpu, u64 *ts)\n{\n\t\n\t*ts >", "5359": "<< FTRACE_HASH_BITS)\n#define FTRACE_HASH_DEFAULT_BITS 10\n#define FTRACE_HASH_MAX_BITS 12\n\n#define FL_GLOBAL_CONTROL_MASK (FTRACE_OPS_FL_CONTROL)\n\n#ifdef CONFIG_DYNAMIC_FTRACE\n#define INIT_OPS_HASH(opsname)\t\\\n\t.func_hash\t\t= &opsname.local_hash,\t\t\t\\\n\t.local_hash.regex_lock\t= __MUTEX_INITIALIZER(opsname.local_hash.regex_lock),\n#define ASSIGN_OPS_HASH(opsname, val) \\\n\t.func_hash\t\t= val, \\\n\t.local_hash.regex_lock\t= __MUTEX_INITIALIZER(opsname.local_hash.regex_lock),\n#else\n#define INIT_OPS_HASH(opsname)\n#define ASSIGN_OPS_HASH(opsname, val)\n#endif\n\nstatic struct ftrace_ops ftrace_list_end __read_mostly = {\n\t.func\t\t= ftrace_stub,\n\t.flags\t\t= FTRACE_OPS_FL_RECURSION_SAFE | FTRACE_OPS_FL_STUB,\n\tINIT_OPS_HASH(ftrace_list_end)\n};\n\n\nint ftrace_enabled __read_mostly;\nstatic int last_ftrace_enabled;\n\n\nstruct ftrace_ops *function_trace_op __read_mostly = &ftrace_list_end;\n\nstatic struct ftrace_ops *set_function_trace_op;\n\n\nLIST_HEAD(ftrace_pids);\nstruct ftrace_pid {\n\tstruct list_head list;\n\tstruct pid *pid;\n};\n\n\nstatic int ftrace_disabled __read_mostly;\n\nstatic DEFINE_MUTEX(ftrace_lock);\n\nstatic struct ftrace_ops *ftrace_control_list __read_mostly = &ftrace_list_end;\nstatic struct ftrace_ops *ftrace_ops_list __read_mostly = &ftrace_list_end;\nftrace_func_t ftrace_trace_function __read_mostly = ftrace_stub;\nftrace_func_t ftrace_pid_function __read_mostly = ftrace_stub;\nstatic struct ftrace_ops global_ops;\nstatic struct ftrace_ops control_ops;\n\nstatic void ftrace_ops_recurs_func(unsigned long ip, unsigned long parent_ip,\n\t\t\t\t   struct ftrace_ops *op, struct pt_regs *regs);\n\n#if ARCH_SUPPORTS_FTRACE_OPS\nstatic void ftrace_ops_list_func(unsigned long ip, unsigned long parent_ip,\n\t\t\t\t struct ftrace_ops *op, struct pt_regs *regs);\n#else\n\nstatic void ftrace_ops_no_ops(unsigned long ip, unsigned long parent_ip);\n#define ftrace_ops_list_func ((ftrace_func_t)ftrace_ops_no_ops)\n#endif\n\n\n#define do_for_each_ftrace_op(op, list)\t\t\t\\\n\top = rcu_dereference_raw_notrace(list);\t\t\t\\\n\tdo\n\n\n#define while_for_each_ftrace_op(op)\t\t\t\t\\\n\twhile (likely(op = rcu_dereference_raw_notrace((op)->", "5360": "<< IOCSIZE_SHIFT;\n\t\t}\n\t\tbreak;\n\t}\n\treturn perf_ioctl(file, cmd, arg);\n}\n#else\n# define perf_compat_ioctl NULL\n#endif\n\nint perf_event_task_enable(void)\n{\n\tstruct perf_event_context *ctx;\n\tstruct perf_event *event;\n\n\tmutex_lock(&current->", "5361": "<< KDB_DEBUG_FLAG_SHIFT))\n#define KDB_DEBUG_STATE(text, value) if (KDB_DEBUG(STATE)) \\\n\t\tkdb_print_state(text, value)\n\n#if BITS_PER_LONG == 32\n\n#define KDB_PLATFORM_ENV\t\"BYTESPERWORD=4\"\n\n#define kdb_machreg_fmt\t\t\"0x%lx\"\n#define kdb_machreg_fmt0\t\"0x%08lx\"\n#define kdb_bfd_vma_fmt\t\t\"0x%lx\"\n#define kdb_bfd_vma_fmt0\t\"0x%08lx\"\n#define kdb_elfw_addr_fmt\t\"0x%x\"\n#define kdb_elfw_addr_fmt0\t\"0x%08x\"\n#define kdb_f_count_fmt\t\t\"%d\"\n\n#elif BITS_PER_LONG == 64\n\n#define KDB_PLATFORM_ENV\t\"BYTESPERWORD=8\"\n\n#define kdb_machreg_fmt\t\t\"0x%lx\"\n#define kdb_machreg_fmt0\t\"0x%016lx\"\n#define kdb_bfd_vma_fmt\t\t\"0x%lx\"\n#define kdb_bfd_vma_fmt0\t\"0x%016lx\"\n#define kdb_elfw_addr_fmt\t\"0x%x\"\n#define kdb_elfw_addr_fmt0\t\"0x%016x\"\n#define kdb_f_count_fmt\t\t\"%ld\"\n\n#endif\n\n\n#define KDB_MAXBPT\t16\n\n\ntypedef struct __ksymtab {\n\t\tunsigned long value;\t\n\t\tconst char *mod_name;\t\n\t\tunsigned long mod_start;\n\t\tunsigned long mod_end;\n\t\tconst char *sec_name;\t\n\t\tunsigned long sec_start;\n\t\tunsigned long sec_end;\n\t\tconst char *sym_name;\t\n\t\tunsigned long sym_start;\n\t\tunsigned long sym_end;\n\t\t} kdb_symtab_t;\nextern int kallsyms_symbol_next(char *prefix_name, int flag);\nextern int kallsyms_symbol_complete(char *prefix_name, int max_len);\n\n\nextern int kdb_getarea_size(void *, unsigned long, size_t);\nextern int kdb_putarea_size(unsigned long, void *, size_t);\n\n\n#define kdb_getarea(x, addr) kdb_getarea_size(&(x), addr, sizeof((x)))\n#define kdb_putarea(addr, x) kdb_putarea_size(addr, &(x), sizeof((x)))\n\nextern int kdb_getphysword(unsigned long *word,\n\t\t\tunsigned long addr, size_t size);\nextern int kdb_getword(unsigned long *, unsigned long, size_t);\nextern int kdb_putword(unsigned long, unsigned long, size_t);\n\nextern int kdbgetularg(const char *, unsigned long *);\nextern int kdbgetu64arg(const char *, u64 *);\nextern char *kdbgetenv(const char *);\nextern int kdbgetaddrarg(int, const char **, int*, unsigned long *,\n\t\t\t long *, char **);\nextern int kdbgetsymval(const char *, kdb_symtab_t *);\nextern int kdbnearsym(unsigned long, kdb_symtab_t *);\nextern void kdbnearsym_cleanup(void);\nextern char *kdb_strdup(const char *str, gfp_t type);\nextern void kdb_symbol_print(unsigned long, const kdb_symtab_t *, unsigned int);\n\n\nextern void kdb_print_state(const char *, int);\n\nextern int kdb_state;\n#define KDB_STATE_KDB\t\t0x00000001\t\n#define KDB_STATE_LEAVING\t0x00000002\t\n#define KDB_STATE_CMD\t\t0x00000004\t\n#define KDB_STATE_KDB_CONTROL\t0x00000008\t\n#define KDB_STATE_HOLD_CPU\t0x00000010\t\n#define KDB_STATE_DOING_SS\t0x00000020\t\n#define KDB_STATE_SSBPT\t\t0x00000080\t\n#define KDB_STATE_REENTRY\t0x00000100\t\n#define KDB_STATE_SUPPRESS\t0x00000200\t\n#define KDB_STATE_PAGER\t\t0x00000400\t\n#define KDB_STATE_GO_SWITCH\t0x00000800\t\n#define KDB_STATE_PRINTF_LOCK\t0x00001000\t\n#define KDB_STATE_WAIT_IPI\t0x00002000\t\n#define KDB_STATE_RECURSE\t0x00004000\t\n#define KDB_STATE_IP_ADJUSTED\t0x00008000\t\n#define KDB_STATE_GO1\t\t0x00010000\t\n#define KDB_STATE_KEYBOARD\t0x00020000\t\n#define KDB_STATE_KEXEC\t\t0x00040000\t\n#define KDB_STATE_DOING_KGDB\t0x00080000\t\n#define KDB_STATE_KGDB_TRANS\t0x00200000\t\n#define KDB_STATE_ARCH\t\t0xff000000\t\n\n#define KDB_STATE(flag) (kdb_state & KDB_STATE_##flag)\n#define KDB_STATE_SET(flag) ((void)(kdb_state |= KDB_STATE_##flag))\n#define KDB_STATE_CLEAR(flag) ((void)(kdb_state &= ~KDB_STATE_##flag))\n\nextern int kdb_nextline; \n\ntypedef struct _kdb_bp {\n\tunsigned long\tbp_addr;\t\n\tunsigned int\tbp_free:1;\t\n\tunsigned int\tbp_enabled:1;\t\n\tunsigned int\tbp_type:4;\t\n\tunsigned int\tbp_installed:1;\t\n\tunsigned int\tbp_delay:1;\t\n\tunsigned int\tbp_delayed:1;\t\n\tunsigned int\tbph_length;\t\n} kdb_bp_t;\n\n#ifdef CONFIG_KGDB_KDB\nextern kdb_bp_t kdb_breakpoints[];\n\n\ntypedef struct _kdbtab {\n\tchar    *cmd_name;\t\t\n\tkdb_func_t cmd_func;\t\t\n\tchar    *cmd_usage;\t\t\n\tchar    *cmd_help;\t\t\n\tshort    cmd_minlen;\t\t\n\tkdb_cmdflags_t cmd_flags;\t\n} kdbtab_t;\n\nextern int kdb_bt(int, const char **);\t\n\n\nextern void kdb_initbptab(void);\nextern void kdb_bp_install(struct pt_regs *);\nextern void kdb_bp_remove(void);\n\ntypedef enum {\n\tKDB_DB_BPT,\t\n\tKDB_DB_SS,\t\n\tKDB_DB_SSBPT,\t\n\tKDB_DB_NOBPT\t\n} kdb_dbtrap_t;\n\nextern int kdb_main_loop(kdb_reason_t, kdb_reason_t,\n\t\t\t int, kdb_dbtrap_t, struct pt_regs *);\n\n\nextern int kdb_grepping_flag;\n#define KDB_GREPPING_FLAG_SEARCH 0x8000\nextern char kdb_grep_string[];\n#define KDB_GREP_STRLEN 256\nextern int kdb_grep_leading;\nextern int kdb_grep_trailing;\nextern char *kdb_cmds[];\nextern unsigned long kdb_task_state_string(const char *);\nextern char kdb_task_state_char (const struct task_struct *);\nextern unsigned long kdb_task_state(const struct task_struct *p,\n\t\t\t\t    unsigned long mask);\nextern void kdb_ps_suppressed(void);\nextern void kdb_ps1(const struct task_struct *p);\nextern void kdb_print_nameval(const char *name, unsigned long val);\nextern void kdb_send_sig_info(struct task_struct *p, struct siginfo *info);\nextern void kdb_meminfo_proc_show(void);\nextern char *kdb_getstr(char *, size_t, const char *);\nextern void kdb_gdb_state_pass(char *buf);\n\n\n#define KDB_SP_SPACEB\t0x0001\t\t\n#define KDB_SP_SPACEA\t0x0002\t\t\n#define KDB_SP_PAREN\t0x0004\t\t\n#define KDB_SP_VALUE\t0x0008\t\t\n#define KDB_SP_SYMSIZE\t0x0010\t\t\n#define KDB_SP_NEWLINE\t0x0020\t\t\n#define KDB_SP_DEFAULT (KDB_SP_VALUE|KDB_SP_PAREN)\n\n#define KDB_TSK(cpu) kgdb_info[cpu].task\n#define KDB_TSKREGS(cpu) kgdb_info[cpu].debuggerinfo\n\nextern struct task_struct *kdb_curr_task(int);\n\n#define kdb_task_has_cpu(p) (task_curr(p))\n\n\n#define\tkdb_do_each_thread(g, p) do_each_thread(g, p)\n#define\tkdb_while_each_thread(g, p) while_each_thread(g, p)\n\n#define GFP_KDB (in_interrupt() ? GFP_ATOMIC : GFP_KERNEL)\n\nextern void *debug_kmalloc(size_t size, gfp_t flags);\nextern void debug_kfree(void *);\nextern void debug_kusage(void);\n\nextern void kdb_set_current_task(struct task_struct *);\nextern struct task_struct *kdb_current_task;\n\n#ifdef CONFIG_KDB_KEYBOARD\nextern void kdb_kbd_cleanup_state(void);\n#else \n#define kdb_kbd_cleanup_state()\n#endif \n\n#ifdef CONFIG_MODULES\nextern struct list_head *kdb_modules;\n#endif \n\nextern char kdb_prompt_str[];\n\n#define\tKDB_WORD_SIZE\t((int)sizeof(unsigned long))\n\n#endif \n#endif\t\n\n#include <linux/interrupt.h>", "5362": "<< KPROBE_HASH_BITS)\n\n\n\n#ifndef kprobe_lookup_name\n#define kprobe_lookup_name(name, addr) \\\n\taddr = ((kprobe_opcode_t *)(kallsyms_lookup_name(name)))\n#endif\n\nstatic int kprobes_initialized;\nstatic struct hlist_head kprobe_table[KPROBE_TABLE_SIZE];\nstatic struct hlist_head kretprobe_inst_table[KPROBE_TABLE_SIZE];\n\n\nstatic bool kprobes_all_disarmed;\n\n\nstatic DEFINE_MUTEX(kprobe_mutex);\nstatic DEFINE_PER_CPU(struct kprobe *, kprobe_instance) = NULL;\nstatic struct {\n\traw_spinlock_t lock ____cacheline_aligned_in_smp;\n} kretprobe_table_locks[KPROBE_TABLE_SIZE];\n\nstatic raw_spinlock_t *kretprobe_table_lock_ptr(unsigned long hash)\n{\n\treturn &(kretprobe_table_locks[hash].lock);\n}\n\n\nstatic LIST_HEAD(kprobe_blacklist);\n\n#ifdef __ARCH_WANT_KPROBES_INSN_SLOT\n\nstruct kprobe_insn_page {\n\tstruct list_head list;\n\tkprobe_opcode_t *insns;\t\t\n\tstruct kprobe_insn_cache *cache;\n\tint nused;\n\tint ngarbage;\n\tchar slot_used[];\n};\n\n#define KPROBE_INSN_PAGE_SIZE(slots)\t\t\t\\\n\t(offsetof(struct kprobe_insn_page, slot_used) +\t\\\n\t (sizeof(char) * (slots)))\n\nstatic int slots_per_page(struct kprobe_insn_cache *c)\n{\n\treturn PAGE_SIZE/(c->", "5363": "<< LOCK_##__STATE),\n\nenum {\n#define LOCKDEP_STATE(__STATE)\t\t\t\t\t\t\\\n\t__LOCKF(USED_IN_##__STATE)\t\t\t\t\t\\\n\t__LOCKF(USED_IN_##__STATE##_READ)\t\t\t\t\\\n\t__LOCKF(ENABLED_##__STATE)\t\t\t\t\t\\\n\t__LOCKF(ENABLED_##__STATE##_READ)\n#include \"lockdep_states.h\"\n#undef LOCKDEP_STATE\n\t__LOCKF(USED)\n};\n\n#define LOCKF_ENABLED_IRQ (LOCKF_ENABLED_HARDIRQ | LOCKF_ENABLED_SOFTIRQ)\n#define LOCKF_USED_IN_IRQ (LOCKF_USED_IN_HARDIRQ | LOCKF_USED_IN_SOFTIRQ)\n\n#define LOCKF_ENABLED_IRQ_READ \\\n\t\t(LOCKF_ENABLED_HARDIRQ_READ | LOCKF_ENABLED_SOFTIRQ_READ)\n#define LOCKF_USED_IN_IRQ_READ \\\n\t\t(LOCKF_USED_IN_HARDIRQ_READ | LOCKF_USED_IN_SOFTIRQ_READ)\n\n\n#define MAX_LOCKDEP_ENTRIES\t32768UL\n\n#define MAX_LOCKDEP_CHAINS_BITS\t16\n#define MAX_LOCKDEP_CHAINS\t(1UL << MAX_LOCKDEP_CHAINS_BITS)\n\n#define MAX_LOCKDEP_CHAIN_HLOCKS (MAX_LOCKDEP_CHAINS*5)\n\n\n#define MAX_STACK_TRACE_ENTRIES\t524288UL\n\nextern struct list_head all_lock_classes;\nextern struct lock_chain lock_chains[];\n\n#define LOCK_USAGE_CHARS (1+LOCK_USAGE_STATES/2)\n\nextern void get_usage_chars(struct lock_class *class,\n\t\t\t    char usage[LOCK_USAGE_CHARS]);\n\nextern const char * __get_key_name(struct lockdep_subclass_key *key, char *str);\n\nstruct lock_class *lock_chain_get_class(struct lock_chain *chain, int i);\n\nextern unsigned long nr_lock_classes;\nextern unsigned long nr_list_entries;\nextern unsigned long nr_lock_chains;\nextern int nr_chain_hlocks;\nextern unsigned long nr_stack_trace_entries;\n\nextern unsigned int nr_hardirq_chains;\nextern unsigned int nr_softirq_chains;\nextern unsigned int nr_process_chains;\nextern unsigned int max_lockdep_depth;\nextern unsigned int max_recursion_depth;\n\nextern unsigned int max_bfs_queue_depth;\n\n#ifdef CONFIG_PROVE_LOCKING\nextern unsigned long lockdep_count_forward_deps(struct lock_class *);\nextern unsigned long lockdep_count_backward_deps(struct lock_class *);\n#else\nstatic inline unsigned long\nlockdep_count_forward_deps(struct lock_class *class)\n{\n\treturn 0;\n}\nstatic inline unsigned long\nlockdep_count_backward_deps(struct lock_class *class)\n{\n\treturn 0;\n}\n#endif\n\n#ifdef CONFIG_DEBUG_LOCKDEP\n\n#include <asm/local.h>", "5364": "<< MANTSIZE) - 1)\t\n\nstatic comp_t encode_comp_t(unsigned long value)\n{\n\tint exp, rnd;\n\n\texp = rnd = 0;\n\twhile (value >", "5365": "<< MAX_ENTRIES_BITS)\n\nstatic unsigned long nr_entries;\nstatic struct entry entries[MAX_ENTRIES];\n\nstatic atomic_t overflow_count;\n\n\n#define TSTAT_HASH_BITS\t\t(MAX_ENTRIES_BITS - 1)\n#define TSTAT_HASH_SIZE\t\t(1UL << TSTAT_HASH_BITS)\n#define TSTAT_HASH_MASK\t\t(TSTAT_HASH_SIZE - 1)\n\n#define __tstat_hashfn(entry)\t\t\t\t\t\t\\\n\t(((unsigned long)(entry)->", "5366": "<< MMF_DUMP_FILTER_SHIFT) &\n\t\tMMF_DUMP_FILTER_MASK;\n\treturn 1;\n}\n\n__setup(\"coredump_filter=\", coredump_filter_setup);\n\n#include <linux/init_task.h>", "5367": "<< NICE_0_SHIFT,\n\t\t\t  sa->", "5368": "<< NMI_WATCHDOG_ENABLED_BIT)\n#define SOFT_WATCHDOG_ENABLED     (1 << SOFT_WATCHDOG_ENABLED_BIT)\n\n#ifdef CONFIG_HARDLOCKUP_DETECTOR\nstatic unsigned long __read_mostly watchdog_enabled = SOFT_WATCHDOG_ENABLED|NMI_WATCHDOG_ENABLED;\n#else\nstatic unsigned long __read_mostly watchdog_enabled = SOFT_WATCHDOG_ENABLED;\n#endif\nint __read_mostly nmi_watchdog_enabled;\nint __read_mostly soft_watchdog_enabled;\nint __read_mostly watchdog_user_enabled;\nint __read_mostly watchdog_thresh = 10;\n\n#ifdef CONFIG_SMP\nint __read_mostly sysctl_softlockup_all_cpu_backtrace;\n#else\n#define sysctl_softlockup_all_cpu_backtrace 0\n#endif\n\nstatic int __read_mostly watchdog_running;\nstatic u64 __read_mostly sample_period;\n\nstatic DEFINE_PER_CPU(unsigned long, watchdog_touch_ts);\nstatic DEFINE_PER_CPU(struct task_struct *, softlockup_watchdog);\nstatic DEFINE_PER_CPU(struct hrtimer, watchdog_hrtimer);\nstatic DEFINE_PER_CPU(bool, softlockup_touch_sync);\nstatic DEFINE_PER_CPU(bool, soft_watchdog_warn);\nstatic DEFINE_PER_CPU(unsigned long, hrtimer_interrupts);\nstatic DEFINE_PER_CPU(unsigned long, soft_lockup_hrtimer_cnt);\nstatic DEFINE_PER_CPU(struct task_struct *, softlockup_task_ptr_saved);\n#ifdef CONFIG_HARDLOCKUP_DETECTOR\nstatic DEFINE_PER_CPU(bool, hard_watchdog_warn);\nstatic DEFINE_PER_CPU(bool, watchdog_nmi_touch);\nstatic DEFINE_PER_CPU(unsigned long, hrtimer_interrupts_saved);\nstatic DEFINE_PER_CPU(struct perf_event *, watchdog_ev);\n#endif\nstatic unsigned long soft_lockup_nmi_warn;\n\n\n\n#ifdef CONFIG_HARDLOCKUP_DETECTOR\nstatic int hardlockup_panic =\n\t\t\tCONFIG_BOOTPARAM_HARDLOCKUP_PANIC_VALUE;\n\nvoid hardlockup_detector_disable(void)\n{\n\twatchdog_enabled &= ~NMI_WATCHDOG_ENABLED;\n}\n\nstatic int __init hardlockup_panic_setup(char *str)\n{\n\tif (!strncmp(str, \"panic\", 5))\n\t\thardlockup_panic = 1;\n\telse if (!strncmp(str, \"nopanic\", 7))\n\t\thardlockup_panic = 0;\n\telse if (!strncmp(str, \"0\", 1))\n\t\twatchdog_enabled &= ~NMI_WATCHDOG_ENABLED;\n\telse if (!strncmp(str, \"1\", 1))\n\t\twatchdog_enabled |= NMI_WATCHDOG_ENABLED;\n\treturn 1;\n}\n__setup(\"nmi_watchdog=\", hardlockup_panic_setup);\n#endif\n\nunsigned int __read_mostly softlockup_panic =\n\t\t\tCONFIG_BOOTPARAM_SOFTLOCKUP_PANIC_VALUE;\n\nstatic int __init softlockup_panic_setup(char *str)\n{\n\tsoftlockup_panic = simple_strtoul(str, NULL, 0);\n\n\treturn 1;\n}\n__setup(\"softlockup_panic=\", softlockup_panic_setup);\n\nstatic int __init nowatchdog_setup(char *str)\n{\n\twatchdog_enabled = 0;\n\treturn 1;\n}\n__setup(\"nowatchdog\", nowatchdog_setup);\n\nstatic int __init nosoftlockup_setup(char *str)\n{\n\twatchdog_enabled &= ~SOFT_WATCHDOG_ENABLED;\n\treturn 1;\n}\n__setup(\"nosoftlockup\", nosoftlockup_setup);\n\n#ifdef CONFIG_SMP\nstatic int __init softlockup_all_cpu_backtrace_setup(char *str)\n{\n\tsysctl_softlockup_all_cpu_backtrace =\n\t\t!!simple_strtol(str, NULL, 0);\n\treturn 1;\n}\n__setup(\"softlockup_all_cpu_backtrace=\", softlockup_all_cpu_backtrace_setup);\n#endif\n\n\nstatic int get_softlockup_thresh(void)\n{\n\treturn watchdog_thresh * 2;\n}\n\n\nstatic unsigned long get_timestamp(void)\n{\n\treturn running_clock() >", "5369": "<< NTP_SCALE_SHIFT) / NTP_INTERVAL_FREQ)\n\n\n\n\nstatic int\t\t\ttime_state = TIME_OK;\n\n\nstatic int\t\t\ttime_status = STA_UNSYNC;\n\n\nstatic s64\t\t\ttime_offset;\n\n\nstatic long\t\t\ttime_constant = 2;\n\n\nstatic long\t\t\ttime_maxerror = NTP_PHASE_LIMIT;\n\n\nstatic long\t\t\ttime_esterror = NTP_PHASE_LIMIT;\n\n\nstatic s64\t\t\ttime_freq;\n\n\nstatic long\t\t\ttime_reftime;\n\nstatic long\t\t\ttime_adjust;\n\n\nstatic s64\t\t\tntp_tick_adj;\n\n#ifdef CONFIG_NTP_PPS\n\n\n#define PPS_VALID\t10\t\n#define PPS_POPCORN\t4\t\n#define PPS_INTMIN\t2\t\n#define PPS_INTMAX\t8\t\n#define PPS_INTCOUNT\t4\t\n#define PPS_MAXWANDER\t100000\t\n\nstatic int pps_valid;\t\t\nstatic long pps_tf[3];\t\t\nstatic long pps_jitter;\t\t\nstatic struct timespec pps_fbase; \nstatic int pps_shift;\t\t\nstatic int pps_intcnt;\t\t\nstatic s64 pps_freq;\t\t\nstatic long pps_stabil;\t\t\n\n\nstatic long pps_calcnt;\t\t\nstatic long pps_jitcnt;\t\t\nstatic long pps_stbcnt;\t\t\nstatic long pps_errcnt;\t\t\n\n\n\nstatic inline s64 ntp_offset_chunk(s64 offset)\n{\n\tif (time_status & STA_PPSTIME && time_status & STA_PPSSIGNAL)\n\t\treturn offset;\n\telse\n\t\treturn shift_right(offset, SHIFT_PLL + time_constant);\n}\n\nstatic inline void pps_reset_freq_interval(void)\n{\n\t\n\tpps_shift = PPS_INTMIN;\n\tpps_intcnt = 0;\n}\n\n\nstatic inline void pps_clear(void)\n{\n\tpps_reset_freq_interval();\n\tpps_tf[0] = 0;\n\tpps_tf[1] = 0;\n\tpps_tf[2] = 0;\n\tpps_fbase.tv_sec = pps_fbase.tv_nsec = 0;\n\tpps_freq = 0;\n}\n\n\nstatic inline void pps_dec_valid(void)\n{\n\tif (pps_valid >", "5370": "<< NTP_SCALE_SHIFT;\n\n\tsecond_length\t\t+= ntp_tick_adj;\n\tsecond_length\t\t+= time_freq;\n\n\ttick_nsec\t\t = div_u64(second_length, HZ) >", "5371": "<< PAGE_SHIFT)\n\t\t\t\t- 1);\n\n\t\tfor (pfn = region->", "5372": "<< PAGE_SHIFT)\n\t\t\tgoto aux_unlock;\n\n\t\t\n\t\tif (rb_has_aux(rb) && rb->", "5373": "<< PAGE_SHIFT) + (vaddr - vma->", "5374": "<< PAGE_SHIFT), HPAGE_SIZE);\n\t\t\tend = min(end, vma->", "5375": "<< PAGE_SHIFT);\n\tzero_buf_sz = PAGE_SIZE;\n\n\ttfm = crypto_alloc_shash(\"sha256\", 0, 0);\n\tif (IS_ERR(tfm)) {\n\t\tret = PTR_ERR(tfm);\n\t\tgoto out;\n\t}\n\n\tdesc_size = crypto_shash_descsize(tfm) + sizeof(*desc);\n\tdesc = kzalloc(desc_size, GFP_KERNEL);\n\tif (!desc) {\n\t\tret = -ENOMEM;\n\t\tgoto out_free_tfm;\n\t}\n\n\tsha_region_sz = KEXEC_SEGMENT_MAX * sizeof(struct kexec_sha_region);\n\tsha_regions = vzalloc(sha_region_sz);\n\tif (!sha_regions)\n\t\tgoto out_free_desc;\n\n\tdesc->", "5376": "<< PAGE_SHIFT);\n}\n\nstatic loff_t vaddr_to_offset(struct vm_area_struct *vma, unsigned long vaddr)\n{\n\treturn ((loff_t)vma->", "5377": "<< PAGE_SHIFT,\n\t\t\t ((unsigned long long) region->", "5378": "<< PAGE_SHIFT,\n\t\t((unsigned long long) end_pfn << PAGE_SHIFT) - 1);\n}\n\n\nstatic struct memory_bitmap *forbidden_pages_map;\n\n\nstatic struct memory_bitmap *free_pages_map;\n\n\n\nvoid swsusp_set_page_free(struct page *page)\n{\n\tif (free_pages_map)\n\t\tmemory_bm_set_bit(free_pages_map, page_to_pfn(page));\n}\n\nstatic int swsusp_page_is_free(struct page *page)\n{\n\treturn free_pages_map ?\n\t\tmemory_bm_test_bit(free_pages_map, page_to_pfn(page)) : 0;\n}\n\nvoid swsusp_unset_page_free(struct page *page)\n{\n\tif (free_pages_map)\n\t\tmemory_bm_clear_bit(free_pages_map, page_to_pfn(page));\n}\n\nstatic void swsusp_set_page_forbidden(struct page *page)\n{\n\tif (forbidden_pages_map)\n\t\tmemory_bm_set_bit(forbidden_pages_map, page_to_pfn(page));\n}\n\nint swsusp_page_is_forbidden(struct page *page)\n{\n\treturn forbidden_pages_map ?\n\t\tmemory_bm_test_bit(forbidden_pages_map, page_to_pfn(page)) : 0;\n}\n\nstatic void swsusp_unset_page_forbidden(struct page *page)\n{\n\tif (forbidden_pages_map)\n\t\tmemory_bm_clear_bit(forbidden_pages_map, page_to_pfn(page));\n}\n\n\n\nstatic void mark_nosave_pages(struct memory_bitmap *bm)\n{\n\tstruct nosave_region *region;\n\n\tif (list_empty(&nosave_regions))\n\t\treturn;\n\n\tlist_for_each_entry(region, &nosave_regions, list) {\n\t\tunsigned long pfn;\n\n\t\tpr_debug(\"PM: Marking nosave pages: [mem %#010llx-%#010llx]\\n\",\n\t\t\t (unsigned long long) region->", "5379": "<< PAGE_SHIFT, end_pfn - begin_pfn);\n\t}\n}\n\nstatic void unset_module_core_ro_nx(struct module *mod)\n{\n\tset_page_attributes(mod->", "5380": "<< PAGE_SHIFT, end_pfn - begin_pfn);\n}\n\nstatic void set_section_ro_nx(void *base,\n\t\t\tunsigned long text_size,\n\t\t\tunsigned long ro_size,\n\t\t\tunsigned long total_size)\n{\n\t\n\tunsigned long begin_pfn;\n\tunsigned long end_pfn;\n\n\t\n\tif (ro_size >", "5381": "<< PAGE_SHIFT;\n\t\tif (addr == destination) {\n\t\t\tlist_del(&page->", "5382": "<< PAGE_SHIFT;\n\t\tif (uprobe->", "5383": "<< PAGE_SHIFT;\n\n\t\t\n\t\tif (addr == destination)\n\t\t\tbreak;\n\n\t\t\n\t\tif (!kimage_is_destination_range(image, addr,\n\t\t\t\t\t\t  addr + PAGE_SIZE))\n\t\t\tbreak;\n\n\t\t\n\t\told = kimage_dst_used(image, addr);\n\t\tif (old) {\n\t\t\t\n\t\t\tunsigned long old_addr;\n\t\t\tstruct page *old_page;\n\n\t\t\told_addr = *old & PAGE_MASK;\n\t\t\told_page = pfn_to_page(old_addr >", "5384": "<< PAGE_SHIFT;\n}\n\n#define DEFINE_OUTPUT_COPY(func_name, memcpy_func)\t\t\t\\\nstatic inline unsigned long\t\t\t\t\t\t\\\nfunc_name(struct perf_output_handle *handle,\t\t\t\t\\\n\t  const void *buf, unsigned long len)\t\t\t\t\\\n{\t\t\t\t\t\t\t\t\t\\\n\tunsigned long size, written;\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n\tdo {\t\t\t\t\t\t\t\t\\\n\t\tsize    = min(handle->", "5385": "<< PPS_POPCORN)) {\n\t\tprintk_deferred(KERN_WARNING\n\t\t\t\t\"hardpps: PPSJITTER: jitter=%ld, limit=%ld\\n\",\n\t\t\t\tjitter, (pps_jitter << PPS_POPCORN));\n\t\ttime_status |= STA_PPSJITTER;\n\t\tpps_jitcnt++;\n\t} else if (time_status & STA_PPSTIME) {\n\t\t\n\t\ttime_offset = div_s64(((s64)correction) << NTP_SCALE_SHIFT,\n\t\t\t\tNTP_INTERVAL_FREQ);\n\t\t\n\t\ttime_adjust = 0;\n\t}\n\t\n\tpps_jitter += (jitter - pps_jitter) >", "5386": "<< PROFILE_GRPSHIFT)\n#define NR_PROFILE_HIT\t\t(PAGE_SIZE/sizeof(struct profile_hit))\n#define NR_PROFILE_GRP\t\t(NR_PROFILE_HIT/PROFILE_GRPSZ)\n\nstatic atomic_t *prof_buffer;\nstatic unsigned long prof_len, prof_shift;\n\nint prof_on __read_mostly;\nEXPORT_SYMBOL_GPL(prof_on);\n\nstatic cpumask_var_t prof_cpu_mask;\n#ifdef CONFIG_SMP\nstatic DEFINE_PER_CPU(struct profile_hit *[2], cpu_profile_hits);\nstatic DEFINE_PER_CPU(int, cpu_profile_flip);\nstatic DEFINE_MUTEX(profile_flip_mutex);\n#endif \n\nint profile_setup(char *str)\n{\n\tstatic const char schedstr[] = \"schedule\";\n\tstatic const char sleepstr[] = \"sleep\";\n\tstatic const char kvmstr[] = \"kvm\";\n\tint par;\n\n\tif (!strncmp(str, sleepstr, strlen(sleepstr))) {\n#ifdef CONFIG_SCHEDSTATS\n\t\tprof_on = SLEEP_PROFILING;\n\t\tif (str[strlen(sleepstr)] == ',')\n\t\t\tstr += strlen(sleepstr) + 1;\n\t\tif (get_option(&str, &par))\n\t\t\tprof_shift = par;\n\t\tpr_info(\"kernel sleep profiling enabled (shift: %ld)\\n\",\n\t\t\tprof_shift);\n#else\n\t\tpr_warn(\"kernel sleep profiling requires CONFIG_SCHEDSTATS\\n\");\n#endif \n\t} else if (!strncmp(str, schedstr, strlen(schedstr))) {\n\t\tprof_on = SCHED_PROFILING;\n\t\tif (str[strlen(schedstr)] == ',')\n\t\t\tstr += strlen(schedstr) + 1;\n\t\tif (get_option(&str, &par))\n\t\t\tprof_shift = par;\n\t\tpr_info(\"kernel schedule profiling enabled (shift: %ld)\\n\",\n\t\t\tprof_shift);\n\t} else if (!strncmp(str, kvmstr, strlen(kvmstr))) {\n\t\tprof_on = KVM_PROFILING;\n\t\tif (str[strlen(kvmstr)] == ',')\n\t\t\tstr += strlen(kvmstr) + 1;\n\t\tif (get_option(&str, &par))\n\t\t\tprof_shift = par;\n\t\tpr_info(\"kernel KVM profiling enabled (shift: %ld)\\n\",\n\t\t\tprof_shift);\n\t} else if (get_option(&str, &par)) {\n\t\tprof_shift = par;\n\t\tprof_on = CPU_PROFILING;\n\t\tpr_info(\"kernel profiling enabled (shift: %ld)\\n\",\n\t\t\tprof_shift);\n\t}\n\treturn 1;\n}\n__setup(\"profile=\", profile_setup);\n\n\nint __ref profile_init(void)\n{\n\tint buffer_bytes;\n\tif (!prof_on)\n\t\treturn 0;\n\n\t\n\tprof_len = (_etext - _stext) >", "5387": "<< PROFILE_GRPSHIFT;\n\tsecondary = (~(pc << 1) & (NR_PROFILE_GRP - 1)) << PROFILE_GRPSHIFT;\n\tcpu = get_cpu();\n\thits = per_cpu(cpu_profile_hits, cpu)[per_cpu(cpu_profile_flip, cpu)];\n\tif (!hits) {\n\t\tput_cpu();\n\t\treturn;\n\t}\n\t\n\tlocal_irq_save(flags);\n\tdo {\n\t\tfor (j = 0; j < PROFILE_GRPSZ; ++j) {\n\t\t\tif (hits[i + j].pc == pc) {\n\t\t\t\thits[i + j].hits += nr_hits;\n\t\t\t\tgoto out;\n\t\t\t} else if (!hits[i + j].hits) {\n\t\t\t\thits[i + j].pc = pc;\n\t\t\t\thits[i + j].hits = nr_hits;\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t}\n\t\ti = (i + secondary) & (NR_PROFILE_HIT - 1);\n\t} while (i != primary);\n\n\t\n\tatomic_add(nr_hits, &prof_buffer[pc]);\n\tfor (i = 0; i < NR_PROFILE_HIT; ++i) {\n\t\tatomic_add(hits[i].hits, &prof_buffer[hits[i].pc]);\n\t\thits[i].pc = hits[i].hits = 0;\n\t}\nout:\n\tlocal_irq_restore(flags);\n\tput_cpu();\n}\n\nstatic int profile_cpu_callback(struct notifier_block *info,\n\t\t\t\t\tunsigned long action, void *__cpu)\n{\n\tint node, cpu = (unsigned long)__cpu;\n\tstruct page *page;\n\n\tswitch (action) {\n\tcase CPU_UP_PREPARE:\n\tcase CPU_UP_PREPARE_FROZEN:\n\t\tnode = cpu_to_mem(cpu);\n\t\tper_cpu(cpu_profile_flip, cpu) = 0;\n\t\tif (!per_cpu(cpu_profile_hits, cpu)[1]) {\n\t\t\tpage = alloc_pages_exact_node(node,\n\t\t\t\t\tGFP_KERNEL | __GFP_ZERO,\n\t\t\t\t\t0);\n\t\t\tif (!page)\n\t\t\t\treturn notifier_from_errno(-ENOMEM);\n\t\t\tper_cpu(cpu_profile_hits, cpu)[1] = page_address(page);\n\t\t}\n\t\tif (!per_cpu(cpu_profile_hits, cpu)[0]) {\n\t\t\tpage = alloc_pages_exact_node(node,\n\t\t\t\t\tGFP_KERNEL | __GFP_ZERO,\n\t\t\t\t\t0);\n\t\t\tif (!page)\n\t\t\t\tgoto out_free;\n\t\t\tper_cpu(cpu_profile_hits, cpu)[0] = page_address(page);\n\t\t}\n\t\tbreak;\nout_free:\n\t\tpage = virt_to_page(per_cpu(cpu_profile_hits, cpu)[1]);\n\t\tper_cpu(cpu_profile_hits, cpu)[1] = NULL;\n\t\t__free_page(page);\n\t\treturn notifier_from_errno(-ENOMEM);\n\tcase CPU_ONLINE:\n\tcase CPU_ONLINE_FROZEN:\n\t\tif (prof_cpu_mask != NULL)\n\t\t\tcpumask_set_cpu(cpu, prof_cpu_mask);\n\t\tbreak;\n\tcase CPU_UP_CANCELED:\n\tcase CPU_UP_CANCELED_FROZEN:\n\tcase CPU_DEAD:\n\tcase CPU_DEAD_FROZEN:\n\t\tif (prof_cpu_mask != NULL)\n\t\t\tcpumask_clear_cpu(cpu, prof_cpu_mask);\n\t\tif (per_cpu(cpu_profile_hits, cpu)[0]) {\n\t\t\tpage = virt_to_page(per_cpu(cpu_profile_hits, cpu)[0]);\n\t\t\tper_cpu(cpu_profile_hits, cpu)[0] = NULL;\n\t\t\t__free_page(page);\n\t\t}\n\t\tif (per_cpu(cpu_profile_hits, cpu)[1]) {\n\t\t\tpage = virt_to_page(per_cpu(cpu_profile_hits, cpu)[1]);\n\t\t\tper_cpu(cpu_profile_hits, cpu)[1] = NULL;\n\t\t\t__free_page(page);\n\t\t}\n\t\tbreak;\n\t}\n\treturn NOTIFY_OK;\n}\n#else \n#define profile_flip_buffers()\t\tdo { } while (0)\n#define profile_discard_flip_buffers()\tdo { } while (0)\n#define profile_cpu_callback\t\tNULL\n\nstatic void do_profile_hits(int type, void *__pc, unsigned int nr_hits)\n{\n\tunsigned long pc;\n\tpc = ((unsigned long)__pc - (unsigned long)_stext) >", "5388": "<< PT_OPT_FLAG_SHIFT);\n\tflags |= (data << PT_OPT_FLAG_SHIFT);\n\tchild->", "5389": "<< PT_OPT_FLAG_SHIFT);\n\t} else {\n\t\tflags = PT_PTRACED;\n\t}\n\n\taudit_ptrace(task);\n\n\tretval = -EPERM;\n\tif (unlikely(task->", "5390": "<< RB_BUFFERS_ON_BIT,\n\tRB_BUFFERS_DISABLED\t= 1 << RB_BUFFERS_DISABLED_BIT,\n};\n\nstatic unsigned long ring_buffer_flags __read_mostly = RB_BUFFERS_ON;\n\n\n#define RB_BUFFER_OFF\t\t(1 << 20)\n\n#define BUF_PAGE_HDR_SIZE offsetof(struct buffer_data_page, data)\n\n\nvoid tracing_off_permanent(void)\n{\n\tset_bit(RB_BUFFERS_DISABLED_BIT, &ring_buffer_flags);\n}\n\n#define RB_EVNT_HDR_SIZE (offsetof(struct ring_buffer_event, array))\n#define RB_ALIGNMENT\t\t4U\n#define RB_MAX_SMALL_DATA\t(RB_ALIGNMENT * RINGBUF_TYPE_DATA_TYPE_LEN_MAX)\n#define RB_EVNT_MIN_SIZE\t8U\t\n\n#ifndef CONFIG_HAVE_64BIT_ALIGNED_ACCESS\n# define RB_FORCE_8BYTE_ALIGNMENT\t0\n# define RB_ARCH_ALIGNMENT\t\tRB_ALIGNMENT\n#else\n# define RB_FORCE_8BYTE_ALIGNMENT\t1\n# define RB_ARCH_ALIGNMENT\t\t8U\n#endif\n\n#define RB_ALIGN_DATA\t\t__aligned(RB_ARCH_ALIGNMENT)\n\n\n#define RINGBUF_TYPE_DATA 0 ... RINGBUF_TYPE_DATA_TYPE_LEN_MAX\n\nenum {\n\tRB_LEN_TIME_EXTEND = 8,\n\tRB_LEN_TIME_STAMP = 16,\n};\n\n#define skip_time_extend(event) \\\n\t((struct ring_buffer_event *)((char *)event + RB_LEN_TIME_EXTEND))\n\nstatic inline int rb_null_event(struct ring_buffer_event *event)\n{\n\treturn event->", "5391": "<< SCHED_LOAD_RESOLUTION)\n# define scale_load_down(w)\t((w) >", "5392": "<< SCHED_LOAD_SHIFT)\n\n#define NICE_0_LOAD\t\tSCHED_LOAD_SCALE\n#define NICE_0_SHIFT\t\tSCHED_LOAD_SHIFT\n\n\n#define DL_SCALE (10)\n\n\n\n\n#define RUNTIME_INF\t((u64)~0ULL)\n\nstatic inline int fair_policy(int policy)\n{\n\treturn policy == SCHED_NORMAL || policy == SCHED_BATCH;\n}\n\nstatic inline int rt_policy(int policy)\n{\n\treturn policy == SCHED_FIFO || policy == SCHED_RR;\n}\n\nstatic inline int dl_policy(int policy)\n{\n\treturn policy == SCHED_DEADLINE;\n}\n\nstatic inline int task_has_rt_policy(struct task_struct *p)\n{\n\treturn rt_policy(p->", "5393": "<< TAINT_CRAP))\n\t\tbuf[l++] = 'C';\n\tif (mod->", "5394": "<< TAINT_FORCED_MODULE))\n\t\tbuf[l++] = 'F';\n\tif (mod->", "5395": "<< TAINT_OOT_MODULE))\n\t\tbuf[l++] = 'O';\n\tif (mod->", "5396": "<< TAINT_PROPRIETARY_MODULE))\n\t\tbuf[l++] = 'P';\n\tif (mod->", "5397": "<< TAINT_PROPRIETARY_MODULE)), true);\n\tif (!sym)\n\t\tgoto unlock;\n\n\tif (!check_version(info->", "5398": "<< TAINT_UNSIGNED_MODULE))\n\t\tbuf[l++] = 'E';\n\t\n\treturn l;\n}\n\nstatic ssize_t show_initstate(struct module_attribute *mattr,\n\t\t\t      struct module_kobject *mk, char *buffer)\n{\n\tconst char *state = \"unknown\";\n\n\tswitch (mk->", "5399": "<< TRACE_GRAPH_PRINT_FILL_SHIFT)\n\nextern enum print_line_t\nprint_graph_function_flags(struct trace_iterator *iter, u32 flags);\nextern void print_graph_headers_flags(struct seq_file *s, u32 flags);\nextern void\ntrace_print_graph_duration(unsigned long long duration, struct trace_seq *s);\nextern void graph_trace_open(struct trace_iterator *iter);\nextern void graph_trace_close(struct trace_iterator *iter);\nextern int __trace_graph_entry(struct trace_array *tr,\n\t\t\t       struct ftrace_graph_ent *trace,\n\t\t\t       unsigned long flags, int pc);\nextern void __trace_graph_return(struct trace_array *tr,\n\t\t\t\t struct ftrace_graph_ret *trace,\n\t\t\t\t unsigned long flags, int pc);\n\n\n#ifdef CONFIG_DYNAMIC_FTRACE\n\n#define FTRACE_GRAPH_MAX_FUNCS\t\t32\nextern int ftrace_graph_count;\nextern unsigned long ftrace_graph_funcs[FTRACE_GRAPH_MAX_FUNCS];\nextern int ftrace_graph_notrace_count;\nextern unsigned long ftrace_graph_notrace_funcs[FTRACE_GRAPH_MAX_FUNCS];\n\nstatic inline int ftrace_graph_addr(unsigned long addr)\n{\n\tint i;\n\n\tif (!ftrace_graph_count)\n\t\treturn 1;\n\n\tfor (i = 0; i < ftrace_graph_count; i++) {\n\t\tif (addr == ftrace_graph_funcs[i]) {\n\t\t\t\n\t\t\tif (in_irq())\n\t\t\t\ttrace_recursion_set(TRACE_IRQ_BIT);\n\t\t\telse\n\t\t\t\ttrace_recursion_clear(TRACE_IRQ_BIT);\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nstatic inline int ftrace_graph_notrace_addr(unsigned long addr)\n{\n\tint i;\n\n\tif (!ftrace_graph_notrace_count)\n\t\treturn 0;\n\n\tfor (i = 0; i < ftrace_graph_notrace_count; i++) {\n\t\tif (addr == ftrace_graph_notrace_funcs[i])\n\t\t\treturn 1;\n\t}\n\n\treturn 0;\n}\n#else\nstatic inline int ftrace_graph_addr(unsigned long addr)\n{\n\treturn 1;\n}\n\nstatic inline int ftrace_graph_notrace_addr(unsigned long addr)\n{\n\treturn 0;\n}\n#endif \n#else \nstatic inline enum print_line_t\nprint_graph_function_flags(struct trace_iterator *iter, u32 flags)\n{\n\treturn TRACE_TYPE_UNHANDLED;\n}\n#endif \n\nextern struct list_head ftrace_pids;\n\n#ifdef CONFIG_FUNCTION_TRACER\nextern bool ftrace_filter_param __initdata;\nstatic inline int ftrace_trace_task(struct task_struct *task)\n{\n\tif (list_empty(&ftrace_pids))\n\t\treturn 1;\n\n\treturn test_tsk_trace_trace(task);\n}\nextern int ftrace_is_dead(void);\nint ftrace_create_function_files(struct trace_array *tr,\n\t\t\t\t struct dentry *parent);\nvoid ftrace_destroy_function_files(struct trace_array *tr);\nvoid ftrace_init_global_array_ops(struct trace_array *tr);\nvoid ftrace_init_array_ops(struct trace_array *tr, ftrace_func_t func);\nvoid ftrace_reset_array_ops(struct trace_array *tr);\nint using_ftrace_ops_list_func(void);\n#else\nstatic inline int ftrace_trace_task(struct task_struct *task)\n{\n\treturn 1;\n}\nstatic inline int ftrace_is_dead(void) { return 0; }\nstatic inline int\nftrace_create_function_files(struct trace_array *tr,\n\t\t\t     struct dentry *parent)\n{\n\treturn 0;\n}\nstatic inline void ftrace_destroy_function_files(struct trace_array *tr) { }\nstatic inline __init void\nftrace_init_global_array_ops(struct trace_array *tr) { }\nstatic inline void ftrace_reset_array_ops(struct trace_array *tr) { }\n\n#define ftrace_init_array_ops(tr, func) do { } while (0)\n#endif \n\n#if defined(CONFIG_FUNCTION_TRACER) && defined(CONFIG_DYNAMIC_FTRACE)\nvoid ftrace_create_filter_files(struct ftrace_ops *ops,\n\t\t\t\tstruct dentry *parent);\nvoid ftrace_destroy_filter_files(struct ftrace_ops *ops);\n#else\n\n#define ftrace_create_filter_files(ops, parent) do { } while (0)\n#define ftrace_destroy_filter_files(ops) do { } while (0)\n#endif \n\nint ftrace_event_is_function(struct ftrace_event_call *call);\n\n\nstruct trace_parser {\n\tbool\t\tcont;\n\tchar\t\t*buffer;\n\tunsigned\tidx;\n\tunsigned\tsize;\n};\n\nstatic inline bool trace_parser_loaded(struct trace_parser *parser)\n{\n\treturn (parser->", "5400": "<< TRACE_GRAPH_PRINT_FILL_SHIFT,\n\tFLAGS_FILL_START = 2 << TRACE_GRAPH_PRINT_FILL_SHIFT,\n\tFLAGS_FILL_END   = 3 << TRACE_GRAPH_PRINT_FILL_SHIFT,\n};\n\nstatic void\nprint_graph_duration(unsigned long long duration, struct trace_seq *s,\n\t\t     u32 flags);\n\n\nint\nftrace_push_return_trace(unsigned long ret, unsigned long func, int *depth,\n\t\t\t unsigned long frame_pointer)\n{\n\tunsigned long long calltime;\n\tint index;\n\n\tif (unlikely(ftrace_graph_is_dead()))\n\t\treturn -EBUSY;\n\n\tif (!current->", "5401": "<< TS_SHIFT) - 1)\n#define TS_DELTA_TEST\t(~TS_MASK)\n\n\n#define RB_MISSED_EVENTS\t(1 << 31)\n\n#define RB_MISSED_STORED\t(1 << 30)\n\nstruct buffer_data_page {\n\tu64\t\t time_stamp;\t\n\tlocal_t\t\t commit;\t\n\tunsigned char\t data[] RB_ALIGN_DATA;\t\n};\n\n\nstruct buffer_page {\n\tstruct list_head list;\t\t\n\tlocal_t\t\t write;\t\t\n\tunsigned\t read;\t\t\n\tlocal_t\t\t entries;\t\n\tunsigned long\t real_end;\t\n\tstruct buffer_data_page *page;\t\n};\n\n\n#define RB_WRITE_MASK\t\t0xfffff\n#define RB_WRITE_INTCNT\t\t(1 << 20)\n\nstatic void rb_init_page(struct buffer_data_page *bpage)\n{\n\tlocal_set(&bpage->", "5402": "<< TVN_BITS)\n#define TVR_SIZE (1 << TVR_BITS)\n#define TVN_MASK (TVN_SIZE - 1)\n#define TVR_MASK (TVR_SIZE - 1)\n#define MAX_TVAL ((unsigned long)((1ULL << (TVR_BITS + 4*TVN_BITS)) - 1))\n\nstruct tvec {\n\tstruct list_head vec[TVN_SIZE];\n};\n\nstruct tvec_root {\n\tstruct list_head vec[TVR_SIZE];\n};\n\nstruct tvec_base {\n\tspinlock_t lock;\n\tstruct timer_list *running_timer;\n\tunsigned long timer_jiffies;\n\tunsigned long next_timer;\n\tunsigned long active_timers;\n\tunsigned long all_timers;\n\tint cpu;\n\tstruct tvec_root tv1;\n\tstruct tvec tv2;\n\tstruct tvec tv3;\n\tstruct tvec tv4;\n\tstruct tvec tv5;\n} ____cacheline_aligned;\n\n\nstruct tvec_base boot_tvec_bases;\nEXPORT_SYMBOL(boot_tvec_bases);\n\nstatic DEFINE_PER_CPU(struct tvec_base *, tvec_bases) = &boot_tvec_bases;\n\n\nstatic inline unsigned int tbase_get_deferrable(struct tvec_base *base)\n{\n\treturn ((unsigned int)(unsigned long)base & TIMER_DEFERRABLE);\n}\n\nstatic inline unsigned int tbase_get_irqsafe(struct tvec_base *base)\n{\n\treturn ((unsigned int)(unsigned long)base & TIMER_IRQSAFE);\n}\n\nstatic inline struct tvec_base *tbase_get_base(struct tvec_base *base)\n{\n\treturn ((struct tvec_base *)((unsigned long)base & ~TIMER_FLAG_MASK));\n}\n\nstatic inline void\ntimer_set_base(struct timer_list *timer, struct tvec_base *new_base)\n{\n\tunsigned long flags = (unsigned long)timer->", "5403": "<< UIDHASH_BITS)\n#define UIDHASH_MASK\t\t(UIDHASH_SZ - 1)\n#define __uidhashfn(uid)\t(((uid >", "5404": "<< WORK_OFFQ_POOL_SHIFT,\n\t\t      WORK_STRUCT_PENDING);\n}\n\nstatic void set_work_pool_and_clear_pending(struct work_struct *work,\n\t\t\t\t\t    int pool_id)\n{\n\t\n\tsmp_wmb();\n\tset_work_data(work, (unsigned long)pool_id << WORK_OFFQ_POOL_SHIFT, 0);\n}\n\nstatic void clear_work_data(struct work_struct *work)\n{\n\tsmp_wmb();\t\n\tset_work_data(work, WORK_STRUCT_NO_POOL, 0);\n}\n\nstatic struct pool_workqueue *get_work_pwq(struct work_struct *work)\n{\n\tunsigned long data = atomic_long_read(&work->", "5405": "<< WORK_STRUCT_COLOR_BITS) - 1);\n}\n\nstatic int work_next_color(int color)\n{\n\treturn (color + 1) % WORK_NR_COLORS;\n}\n\n\nstatic inline void set_work_data(struct work_struct *work, unsigned long data,\n\t\t\t\t unsigned long flags)\n{\n\tWARN_ON_ONCE(!work_pending(work));\n\tatomic_long_set(&work->", "5406": "<< WORK_STRUCT_COLOR_SHIFT;\n}\n\nstatic int get_work_color(struct work_struct *work)\n{\n\treturn (*work_data_bits(work) >", "5407": "<< WORK_STRUCT_FLAG_BITS);\n\n\nstruct wq_flusher {\n\tstruct list_head\tlist;\t\t\n\tint\t\t\tflush_color;\t\n\tstruct completion\tdone;\t\t\n};\n\nstruct wq_device;\n\n\nstruct workqueue_struct {\n\tstruct list_head\tpwqs;\t\t\n\tstruct list_head\tlist;\t\t\n\n\tstruct mutex\t\tmutex;\t\t\n\tint\t\t\twork_color;\t\n\tint\t\t\tflush_color;\t\n\tatomic_t\t\tnr_pwqs_to_flush; \n\tstruct wq_flusher\t*first_flusher;\t\n\tstruct list_head\tflusher_queue;\t\n\tstruct list_head\tflusher_overflow; \n\n\tstruct list_head\tmaydays;\t\n\tstruct worker\t\t*rescuer;\t\n\n\tint\t\t\tnr_drainers;\t\n\tint\t\t\tsaved_max_active; \n\n\tstruct workqueue_attrs\t*unbound_attrs;\t\n\tstruct pool_workqueue\t*dfl_pwq;\t\n\n#ifdef CONFIG_SYSFS\n\tstruct wq_device\t*wq_dev;\t\n#endif\n#ifdef CONFIG_LOCKDEP\n\tstruct lockdep_map\tlockdep_map;\n#endif\n\tchar\t\t\tname[WQ_NAME_LEN]; \n\n\t\n\tstruct rcu_head\t\trcu;\n\n\t\n\tunsigned int\t\tflags ____cacheline_aligned; \n\tstruct pool_workqueue __percpu *cpu_pwqs; \n\tstruct pool_workqueue __rcu *numa_pwq_tbl[]; \n};\n\nstatic struct kmem_cache *pwq_cache;\n\nstatic cpumask_var_t *wq_numa_possible_cpumask;\n\t\t\t\t\t\n\nstatic bool wq_disable_numa;\nmodule_param_named(disable_numa, wq_disable_numa, bool, 0444);\n\n\n#ifdef CONFIG_WQ_POWER_EFFICIENT_DEFAULT\nstatic bool wq_power_efficient = true;\n#else\nstatic bool wq_power_efficient;\n#endif\n\nmodule_param_named(power_efficient, wq_power_efficient, bool, 0444);\n\nstatic bool wq_numa_enabled;\t\t\n\n\nstatic struct workqueue_attrs *wq_update_unbound_numa_attrs_buf;\n\nstatic DEFINE_MUTEX(wq_pool_mutex);\t\nstatic DEFINE_SPINLOCK(wq_mayday_lock);\t\n\nstatic LIST_HEAD(workqueues);\t\t\nstatic bool workqueue_freezing;\t\t\n\n\nstatic DEFINE_PER_CPU_SHARED_ALIGNED(struct worker_pool [NR_STD_WORKER_POOLS],\n\t\t\t\t     cpu_worker_pools);\n\nstatic DEFINE_IDR(worker_pool_idr);\t\n\n\nstatic DEFINE_HASHTABLE(unbound_pool_hash, UNBOUND_POOL_HASH_ORDER);\n\n\nstatic struct workqueue_attrs *unbound_std_wq_attrs[NR_STD_WORKER_POOLS];\n\n\nstatic struct workqueue_attrs *ordered_wq_attrs[NR_STD_WORKER_POOLS];\n\nstruct workqueue_struct *system_wq __read_mostly;\nEXPORT_SYMBOL(system_wq);\nstruct workqueue_struct *system_highpri_wq __read_mostly;\nEXPORT_SYMBOL_GPL(system_highpri_wq);\nstruct workqueue_struct *system_long_wq __read_mostly;\nEXPORT_SYMBOL_GPL(system_long_wq);\nstruct workqueue_struct *system_unbound_wq __read_mostly;\nEXPORT_SYMBOL_GPL(system_unbound_wq);\nstruct workqueue_struct *system_freezable_wq __read_mostly;\nEXPORT_SYMBOL_GPL(system_freezable_wq);\nstruct workqueue_struct *system_power_efficient_wq __read_mostly;\nEXPORT_SYMBOL_GPL(system_power_efficient_wq);\nstruct workqueue_struct *system_freezable_power_efficient_wq __read_mostly;\nEXPORT_SYMBOL_GPL(system_freezable_power_efficient_wq);\n\nstatic int worker_thread(void *__worker);\nstatic void copy_workqueue_attrs(struct workqueue_attrs *to,\n\t\t\t\t const struct workqueue_attrs *from);\nstatic void workqueue_sysfs_unregister(struct workqueue_struct *wq);\n\n#define CREATE_TRACE_POINTS\n#include <trace/events/workqueue.h>", "5408": "<< \\\n\t  (ilog2(BLK_TC_ ## __name) + BLK_TC_SHIFT - __REQ_ ## __name))\n\n\nstatic void __blk_add_trace(struct blk_trace *bt, sector_t sector, int bytes,\n\t\t     int rw, u32 what, int error, int pdu_len, void *pdu_data)\n{\n\tstruct task_struct *tsk = current;\n\tstruct ring_buffer_event *event = NULL;\n\tstruct ring_buffer *buffer = NULL;\n\tstruct blk_io_trace *t;\n\tunsigned long flags = 0;\n\tunsigned long *sequence;\n\tpid_t pid;\n\tint cpu, pc = 0;\n\tbool blk_tracer = blk_tracer_enabled;\n\n\tif (unlikely(bt->", "5409": "<< __SCHED_FEAT_##name) * enabled |\n\nconst_debug unsigned int sysctl_sched_features =\n#include \"features.h\"\n\t0;\n\n#undef SCHED_FEAT\n\n#ifdef CONFIG_SCHED_DEBUG\n#define SCHED_FEAT(name, enabled)\t\\\n\t#name ,\n\nstatic const char * const sched_feat_names[] = {\n#include \"features.h\"\n};\n\n#undef SCHED_FEAT\n\nstatic int sched_feat_show(struct seq_file *m, void *v)\n{\n\tint i;\n\n\tfor (i = 0; i < __SCHED_FEAT_NR; i++) {\n\t\tif (!(sysctl_sched_features & (1UL << i)))\n\t\t\tseq_puts(m, \"NO_\");\n\t\tseq_printf(m, \"%s \", sched_feat_names[i]);\n\t}\n\tseq_puts(m, \"\\n\");\n\n\treturn 0;\n}\n\n#ifdef HAVE_JUMP_LABEL\n\n#define jump_label_key__true  STATIC_KEY_INIT_TRUE\n#define jump_label_key__false STATIC_KEY_INIT_FALSE\n\n#define SCHED_FEAT(name, enabled)\t\\\n\tjump_label_key__##enabled ,\n\nstruct static_key sched_feat_keys[__SCHED_FEAT_NR] = {\n#include \"features.h\"\n};\n\n#undef SCHED_FEAT\n\nstatic void sched_feat_disable(int i)\n{\n\tif (static_key_enabled(&sched_feat_keys[i]))\n\t\tstatic_key_slow_dec(&sched_feat_keys[i]);\n}\n\nstatic void sched_feat_enable(int i)\n{\n\tif (!static_key_enabled(&sched_feat_keys[i]))\n\t\tstatic_key_slow_inc(&sched_feat_keys[i]);\n}\n#else\nstatic void sched_feat_disable(int i) { };\nstatic void sched_feat_enable(int i) { };\n#endif \n\nstatic int sched_feat_set(char *cmp)\n{\n\tint i;\n\tint neg = 0;\n\n\tif (strncmp(cmp, \"NO_\", 3) == 0) {\n\t\tneg = 1;\n\t\tcmp += 3;\n\t}\n\n\tfor (i = 0; i < __SCHED_FEAT_NR; i++) {\n\t\tif (strcmp(cmp, sched_feat_names[i]) == 0) {\n\t\t\tif (neg) {\n\t\t\t\tsysctl_sched_features &= ~(1UL << i);\n\t\t\t\tsched_feat_disable(i);\n\t\t\t} else {\n\t\t\t\tsysctl_sched_features |= (1UL << i);\n\t\t\t\tsched_feat_enable(i);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn i;\n}\n\nstatic ssize_t\nsched_feat_write(struct file *filp, const char __user *ubuf,\n\t\tsize_t cnt, loff_t *ppos)\n{\n\tchar buf[64];\n\tchar *cmp;\n\tint i;\n\tstruct inode *inode;\n\n\tif (cnt >", "5410": "<< __SCHED_FEAT_##x))\n#endif \n\n#ifdef CONFIG_NUMA_BALANCING\n#define sched_feat_numa(x) sched_feat(x)\n#ifdef CONFIG_SCHED_DEBUG\n#define numabalancing_enabled sched_feat_numa(NUMA)\n#else\nextern bool numabalancing_enabled;\n#endif \n#else\n#define sched_feat_numa(x) (0)\n#define numabalancing_enabled (0)\n#endif \n\nstatic inline u64 global_rt_period(void)\n{\n\treturn (u64)sysctl_sched_rt_period * NSEC_PER_USEC;\n}\n\nstatic inline u64 global_rt_runtime(void)\n{\n\tif (sysctl_sched_rt_runtime < 0)\n\t\treturn RUNTIME_INF;\n\n\treturn (u64)sysctl_sched_rt_runtime * NSEC_PER_USEC;\n}\n\nstatic inline int task_current(struct rq *rq, struct task_struct *p)\n{\n\treturn rq->", "5411": "<< bad_bit)))\n\t\treturn print_usage_bug(curr, this, bad_bit, new_bit);\n\treturn 1;\n}\n\nstatic int mark_lock(struct task_struct *curr, struct held_lock *this,\n\t\t     enum lock_usage_bit new_bit);\n\n#if defined(CONFIG_TRACE_IRQFLAGS) && defined(CONFIG_PROVE_LOCKING)\n\n\nstatic int\nprint_irq_inversion_bug(struct task_struct *curr,\n\t\t\tstruct lock_list *root, struct lock_list *other,\n\t\t\tstruct held_lock *this, int forwards,\n\t\t\tconst char *irqclass)\n{\n\tstruct lock_list *entry = other;\n\tstruct lock_list *middle = NULL;\n\tint depth;\n\n\tif (!debug_locks_off_graph_unlock() || debug_locks_silent)\n\t\treturn 0;\n\n\tprintk(\"\\n\");\n\tprintk(\"=========================================================\\n\");\n\tprintk(\"[ INFO: possible irq lock inversion dependency detected ]\\n\");\n\tprint_kernel_ident();\n\tprintk(\"---------------------------------------------------------\\n\");\n\tprintk(\"%s/%d just changed the state of lock:\\n\",\n\t\tcurr->", "5412": "<< bit)))\n\t\treturn -1;\n\n\tval |= 1 << bit;\n\tcurrent->", "5413": "<< bit)))\n\t\treturn 1;\n\n\tval |= (1 << bit);\n\t__this_cpu_write(current_context, val);\n\n\treturn 0;\n}\n\nstatic __always_inline void trace_recursive_unlock(void)\n{\n\t__this_cpu_and(current_context, __this_cpu_read(current_context) - 1);\n}\n\n#else\n\n#define trace_recursive_lock()\t\t(0)\n#define trace_recursive_unlock()\tdo { } while (0)\n\n#endif\n\n\nstruct ring_buffer_event *\nring_buffer_lock_reserve(struct ring_buffer *buffer, unsigned long length)\n{\n\tstruct ring_buffer_per_cpu *cpu_buffer;\n\tstruct ring_buffer_event *event;\n\tint cpu;\n\n\tif (ring_buffer_flags != RB_BUFFERS_ON)\n\t\treturn NULL;\n\n\t\n\tpreempt_disable_notrace();\n\n\tif (atomic_read(&buffer->", "5414": "<< bit;\n\tval &= ~bit;\n\n\tbarrier();\n\tcurrent->", "5415": "<< bit;\n}\n\nstatic char get_usage_char(struct lock_class *class, enum lock_usage_bit bit)\n{\n\tchar c = '.';\n\n\tif (class->", "5416": "<< cc->", "5417": "<< cpu))\n\t\t\t\t\tdump_cpu_task(rnp->", "5418": "<< cpu)) {\n\t\t\t\t\tprint_cpu_stall_info(rsp,\n\t\t\t\t\t\t\t     rnp->", "5419": "<< cpuset_cgrp_id);\n#endif\n\n\tmemset(opts, 0, sizeof(*opts));\n\n\twhile ((token = strsep(&o, \",\")) != NULL) {\n\t\tnr_opts++;\n\n\t\tif (!*token)\n\t\t\treturn -EINVAL;\n\t\tif (!strcmp(token, \"none\")) {\n\t\t\t\n\t\t\topts->", "5420": "<< css->", "5421": "<< evt->", "5422": "<< ffz(thread_mask);\n\n\t} else if (new->", "5423": "<< flag);\n}\n\n\nvoid __module_put_and_exit(struct module *mod, long code)\n{\n\tmodule_put(mod);\n\tdo_exit(code);\n}\nEXPORT_SYMBOL(__module_put_and_exit);\n\n\nstatic unsigned int find_sec(const struct load_info *info, const char *name)\n{\n\tunsigned int i;\n\n\tfor (i = 1; i < info->", "5424": "<< frac_bits;\n\n\tif (n) for (;;) {\n\t\tif (n & 1) {\n\t\t\tresult *= x;\n\t\t\tresult += 1UL << (frac_bits - 1);\n\t\t\tresult >", "5425": "<< hash->", "5426": "<< i)) {\n\t\t\t\n\t\t\ttemplate[i] = cgroup_e_css(cgrp, ss);\n\t\t} else {\n\t\t\t\n\t\t\ttemplate[i] = old_cset->", "5427": "<< i)) ||\n\t\t    ss->", "5428": "<< i)))\n\t\t\tcontinue;\n\t\tlist_for_each_entry(cfts, &ss->", "5429": "<< i)))\n\t\t\tcontinue;\n\n\t\tlist_for_each_entry(cfts, &ss->", "5430": "<< i);\n\t\t\tone_ss = true;\n\n\t\t\tbreak;\n\t\t}\n\t\tif (i == CGROUP_SUBSYS_COUNT)\n\t\t\treturn -ENOENT;\n\t}\n\n\tif (opts->", "5431": "<< i);\n\n\t\n\tif (!opts->", "5432": "<< i;\n\n\t\t\tdesc->", "5433": "<< idx;\n\n\tirq_set_chip_and_handler(virq, chip, ct->", "5434": "<< new_bit, ret = 1;\n\n\t\n\tif (likely(hlock_class(this)->", "5435": "<< nr);\n}\n\nvoid open_softirq(int nr, void (*action)(struct softirq_action *))\n{\n\tsoftirq_vec[nr].action = action;\n}\n\n\nstruct tasklet_head {\n\tstruct tasklet_struct *head;\n\tstruct tasklet_struct **tail;\n};\n\nstatic DEFINE_PER_CPU(struct tasklet_head, tasklet_vec);\nstatic DEFINE_PER_CPU(struct tasklet_head, tasklet_hi_vec);\n\nvoid __tasklet_schedule(struct tasklet_struct *t)\n{\n\tunsigned long flags;\n\n\tlocal_irq_save(flags);\n\tt->", "5436": "<< order) / ENTRY_SIZE >", "5437": "<< order) / ENTRY_SIZE;\n\tpg->", "5438": "<< order) << PAGE_SHIFT;\n\thole_start = (image->", "5439": "<< order;\n\t\tfor (i = 0; i < count; i++)\n\t\t\tSetPageReserved(pages + i);\n\t}\n\n\treturn pages;\n}\n\nstatic void kimage_free_pages(struct page *page)\n{\n\tunsigned int order, count, i;\n\n\torder = page_private(page);\n\tcount = 1 << order;\n\tfor (i = 0; i < count; i++)\n\t\tClearPageReserved(page + i);\n\t__free_pages(page, order);\n}\n\nstatic void kimage_free_page_list(struct list_head *list)\n{\n\tstruct list_head *pos, *next;\n\n\tlist_for_each_safe(pos, next, list) {\n\t\tstruct page *page;\n\n\t\tpage = list_entry(pos, struct page, lru);\n\t\tlist_del(&page->", "5440": "<< order;\n\tINIT_LIST_HEAD(&extra_pages);\n\n\t\n\tdo {\n\t\tunsigned long pfn, epfn, addr, eaddr;\n\n\t\tpages = kimage_alloc_pages(KEXEC_CONTROL_MEMORY_GFP, order);\n\t\tif (!pages)\n\t\t\tbreak;\n\t\tpfn   = page_to_pfn(pages);\n\t\tepfn  = pfn + count;\n\t\taddr  = pfn << PAGE_SHIFT;\n\t\teaddr = epfn << PAGE_SHIFT;\n\t\tif ((epfn >", "5441": "<< page_order(rb);\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t} while (len && written == size);\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n\treturn len;\t\t\t\t\t\t\t\\\n}\n\nstatic inline unsigned long\nmemcpy_common(void *dst, const void *src, unsigned long n)\n{\n\tmemcpy(dst, src, n);\n\treturn 0;\n}\n\nDEFINE_OUTPUT_COPY(__output_copy, memcpy_common)\n\nstatic inline unsigned long\nmemcpy_skip(void *dst, const void *src, unsigned long n)\n{\n\treturn 0;\n}\n\nDEFINE_OUTPUT_COPY(__output_skip, memcpy_skip)\n\n#ifndef arch_perf_out_copy_user\n#define arch_perf_out_copy_user arch_perf_out_copy_user\n\nstatic inline unsigned long\narch_perf_out_copy_user(void *dst, const void *src, unsigned long n)\n{\n\tunsigned long ret;\n\n\tpagefault_disable();\n\tret = __copy_from_user_inatomic(dst, src, n);\n\tpagefault_enable();\n\n\treturn ret;\n}\n#endif\n\nDEFINE_OUTPUT_COPY(__output_copy_user, arch_perf_out_copy_user)\n\n\nextern struct perf_callchain_entry *\nperf_callchain(struct perf_event *event, struct pt_regs *regs);\nextern int get_callchain_buffers(void);\nextern void put_callchain_buffers(void);\n\nstatic inline int get_recursion_context(int *recursion)\n{\n\tint rctx;\n\n\tif (in_nmi())\n\t\trctx = 3;\n\telse if (in_irq())\n\t\trctx = 2;\n\telse if (in_softirq())\n\t\trctx = 1;\n\telse\n\t\trctx = 0;\n\n\tif (recursion[rctx])\n\t\treturn -1;\n\n\trecursion[rctx]++;\n\tbarrier();\n\n\treturn rctx;\n}\n\nstatic inline void put_recursion_context(int *recursion, int rctx)\n{\n\tbarrier();\n\trecursion[rctx]--;\n}\n\n#ifdef CONFIG_HAVE_PERF_USER_STACK_DUMP\nstatic inline bool arch_perf_have_user_stack_dump(void)\n{\n\treturn true;\n}\n\n#define perf_user_stack_pointer(regs) user_stack_pointer(regs)\n#else\nstatic inline bool arch_perf_have_user_stack_dump(void)\n{\n\treturn false;\n}\n\n#define perf_user_stack_pointer(regs) 0\n#endif \n\n#endif \n#include <linux/stat.h>", "5442": "<< page_order(rb);\n}\n\nstatic struct page *\n__perf_mmap_to_page(struct ring_buffer *rb, unsigned long pgoff)\n{\n\t\n\tif (pgoff >", "5443": "<< page_private(page));\n\t\t     last >", "5444": "<< page_shift) - 1;\n\thandle->", "5445": "<< page_shift) - offset;\n\n\tif (unlikely(have_lost)) {\n\t\tstruct perf_sample_data sample_data;\n\n\t\tlost_event.header.size = sizeof(lost_event);\n\t\tlost_event.header.type = PERF_RECORD_LOST;\n\t\tlost_event.header.misc = 0;\n\t\tlost_event.id          = event->", "5446": "<< pidhash_shift;\n\n\tfor (i = 0; i < pidhash_size; i++)\n\t\tINIT_HLIST_HEAD(&pid_hash[i]);\n}\n\nvoid __init pidmap_init(void)\n{\n\t\n\tBUILD_BUG_ON(PID_MAX_LIMIT >", "5447": "<< pps_shift)) {\n\t\tpps_calcnt++;\n\t\t\n\t\tpps_fbase = *raw_ts;\n\t\thardpps_update_freq(freq_norm);\n\t}\n\n\thardpps_update_phase(pts_norm.nsec);\n\n}\n#endif\t\n\nstatic int __init ntp_tick_adj_setup(char *str)\n{\n\tint rc = kstrtol(str, 0, (long *)&ntp_tick_adj);\n\n\tif (rc)\n\t\treturn rc;\n\tntp_tick_adj <<= NTP_SCALE_SHIFT;\n\n\treturn 1;\n}\n\n__setup(\"ntp_tick_adj=\", ntp_tick_adj_setup);\n\nvoid __init ntp_init(void)\n{\n\tntp_clear();\n}\n\n#include <linux/spinlock.h>", "5448": "<< pps_shift)) {\n\t\ttime_status |= STA_PPSERROR;\n\t\tpps_errcnt++;\n\t\tpps_dec_freq_interval();\n\t\tprintk_deferred(KERN_ERR\n\t\t\t\"hardpps: PPSERROR: interval too long - %ld s\\n\",\n\t\t\tfreq_norm.sec);\n\t\treturn 0;\n\t}\n\n\t\n\tftemp = div_s64(((s64)(-freq_norm.nsec)) << NTP_SCALE_SHIFT,\n\t\t\tfreq_norm.sec);\n\tdelta = shift_right(ftemp - pps_freq, NTP_SCALE_SHIFT);\n\tpps_freq = ftemp;\n\tif (delta >", "5449": "<< prof_shift;\n\n\tprofile_flip_buffers();\n\tif (p >", "5450": "<< rnp->", "5451": "<< shift | bit;\n\n\treturn &zone->", "5452": "<< shift;\n\t*clock_set |= accumulate_nsecs_to_secs(tk);\n\n\t\n\traw_nsecs = (u64)tk->", "5453": "<< shift;\n\tloads[1] = (avenrun[1] + offset) << shift;\n\tloads[2] = (avenrun[2] + offset) << shift;\n}\n\nlong calc_load_fold_active(struct rq *this_rq)\n{\n\tlong nr_active, delta = 0;\n\n\tnr_active = this_rq->", "5454": "<< shift;\n\traw_nsecs += tk->", "5455": "<< shift;\n\ttk->", "5456": "<< shift;\n\tu64 raw_nsecs;\n\n\t\n\tif (offset < interval)\n\t\treturn offset;\n\n\t\n\toffset -= interval;\n\ttk->", "5457": "<< size_bits;\n\thash->", "5458": "<< src->", "5459": "<< ss->", "5460": "<< ssid))\n\t\t\t\tnew_ss_mask |= ss->", "5461": "<< ssid))\n\t\t\t\tseq_printf(m, \"%s%s\", count++ ? \",\" : \"\", ss->", "5462": "<< ssid))\n\t\t\tcgroup_clear_dir(&ss->", "5463": "<< ssid))\n\t\t\tseq_printf(seq, \",%s\", ss->", "5464": "<< ssid)) {\n\t\t\t\t\tret = -EBUSY;\n\t\t\t\t\tgoto out_unlock;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!enable && !disable) {\n\t\tret = 0;\n\t\tgoto out_unlock;\n\t}\n\n\t\n\tif (enable && cgroup_parent(cgrp) && !list_empty(&cgrp->", "5465": "<< ssid)) {\n\t\t\t\tenable &= ~(1 << ssid);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t\n\t\t\tif (!(cgrp_dfl_root.subsys_mask & (1 << ssid)) ||\n\t\t\t    (cgroup_parent(cgrp) &&\n\t\t\t     !(cgroup_parent(cgrp)->", "5466": "<< ssid)) {\n\t\t\tif (cgrp->", "5467": "<< ssid)) {\n\t\t\tif (printed)\n\t\t\t\tseq_putc(seq, ' ');\n\t\t\tseq_printf(seq, \"%s\", ss->", "5468": "<< ssid)) {\n\t\t\tret = create_css(cgrp, ss,\n\t\t\t\t\t parent->", "5469": "<< ssid)))\n\t\t\tcontinue;\n\n\t\t\n\t\tif (css_next_child(NULL, cgroup_css(&ss->", "5470": "<< ssid)))\n\t\t\tcontinue;\n\n\t\tcgroup_for_each_live_child(child, cgrp) {\n\t\t\tDEFINE_WAIT(wait);\n\n\t\t\tif (!cgroup_css(child, ss))\n\t\t\t\tcontinue;\n\n\t\t\tcgroup_get(child);\n\t\t\tprepare_to_wait(&child->", "5471": "<< ssid)))\n\t\t\tcontinue;\n\n\t\tcgroup_for_each_live_child(child, cgrp) {\n\t\t\tif (css_enable & (1 << ssid))\n\t\t\t\tret = create_css(child, ss,\n\t\t\t\t\tcgrp->", "5472": "<< ssid)))\n\t\t\tcontinue;\n\n\t\tcgroup_for_each_live_child(child, cgrp) {\n\t\t\tstruct cgroup_subsys_state *css = cgroup_css(child, ss);\n\n\t\t\tif (!css)\n\t\t\t\tcontinue;\n\n\t\t\tif (css_enable & (1 << ssid))\n\t\t\t\tkill_css(css);\n\t\t\telse\n\t\t\t\tcgroup_clear_dir(child, 1 << ssid);\n\t\t}\n\t}\n\tgoto out_unlock;\n}\n\nstatic int cgroup_populated_show(struct seq_file *seq, void *v)\n{\n\tseq_printf(seq, \"%d\\n\", (bool)seq_css(seq)->", "5473": "<< ssid))) {\n\t\t\t\tdisable &= ~(1 << ssid);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t\n\t\t\tcgroup_for_each_live_child(child, cgrp) {\n\t\t\t\tif (child->", "5474": "<< ssid)))) {\n\t\t\t\tret = -ENOENT;\n\t\t\t\tgoto out_unlock;\n\t\t\t}\n\t\t} else if (disable & (1 << ssid)) {\n\t\t\tif (!(cgrp->", "5475": "<< ssid));\n\t\t\telse\n\t\t\t\tret = cgroup_populate_dir(child, 1 << ssid);\n\t\t\tif (ret)\n\t\t\t\tgoto err_undo_css;\n\t\t}\n\t}\n\n\t\n\tret = cgroup_update_dfl_csses(cgrp);\n\tif (ret)\n\t\tgoto err_undo_css;\n\n\t\n\tfor_each_subsys(ss, ssid) {\n\t\tif (!(disable & (1 << ssid)))\n\t\t\tcontinue;\n\n\t\tcgroup_for_each_live_child(child, cgrp) {\n\t\t\tstruct cgroup_subsys_state *css = cgroup_css(child, ss);\n\n\t\t\tif (css_disable & (1 << ssid)) {\n\t\t\t\tkill_css(css);\n\t\t\t} else {\n\t\t\t\tcgroup_clear_dir(child, 1 << ssid);\n\t\t\t\tif (ss->", "5476": "<< ssid));\n\t\t\tif (ret)\n\t\t\t\tgoto out_destroy;\n\t\t}\n\t}\n\n\t\n\tif (!cgroup_on_dfl(cgrp)) {\n\t\tcgrp->", "5477": "<< ssid);\n\t\tcgroup_refresh_child_subsys_mask(&src_root->", "5478": "<< ssid);\n\t\tsrc_root->", "5479": "<< ssid);\n\n\tfor_each_subsys(ss, ssid) {\n\t\tstruct cgroup_root *src_root;\n\t\tstruct cgroup_subsys_state *css;\n\t\tstruct css_set *cset;\n\n\t\tif (!(ss_mask & (1 << ssid)))\n\t\t\tcontinue;\n\n\t\tsrc_root = ss->", "5480": "<< ssid;\n\t\t\t\tdisable &= ~(1 << ssid);\n\t\t\t} else if (*tok == '-') {\n\t\t\t\tdisable |= 1 << ssid;\n\t\t\t\tenable &= ~(1 << ssid);\n\t\t\t} else {\n\t\t\t\treturn -EINVAL;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif (ssid == CGROUP_SUBSYS_COUNT)\n\t\t\treturn -EINVAL;\n\t}\n\n\tcgrp = cgroup_kn_lock_live(of->", "5481": "<< ssid;\n\t\t\tcgroup_refresh_child_subsys_mask(&dst_root->", "5482": "<< ssid;\n\t\tif (dst_root != &cgrp_dfl_root) {\n\t\t\tdst_root->", "5483": "<< tk->", "5484": "<< type) & info->", "5485": "<<(bit)))\n\n#define TRACE_CONTEXT_BITS\t4\n\n#define TRACE_FTRACE_START\tTRACE_FTRACE_BIT\n#define TRACE_FTRACE_MAX\t((1 << (TRACE_FTRACE_START + TRACE_CONTEXT_BITS)) - 1)\n\n#define TRACE_LIST_START\tTRACE_INTERNAL_BIT\n#define TRACE_LIST_MAX\t\t((1 << (TRACE_LIST_START + TRACE_CONTEXT_BITS)) - 1)\n\n#define TRACE_CONTEXT_MASK\tTRACE_LIST_MAX\n\nstatic __always_inline int trace_get_context_bit(void)\n{\n\tint bit;\n\n\tif (in_interrupt()) {\n\t\tif (in_nmi())\n\t\t\tbit = 0;\n\n\t\telse if (in_irq())\n\t\t\tbit = 1;\n\t\telse\n\t\t\tbit = 2;\n\t} else\n\t\tbit = 3;\n\n\treturn bit;\n}\n\nstatic __always_inline int trace_test_and_set_recursion(int start, int max)\n{\n\tunsigned int val = current->", "5486": "<<(bit)); } while (0)\n#define trace_recursion_clear(bit)\tdo { (current)->", "5487": "<<(bit)); } while (0)\n#define trace_recursion_test(bit)\t((current)->", "5488": "<<)\n\tALU(RSH, >", "5489": "<<1;\n\tif (new_len >", "5490": "<<31)) {\n\t\t\tlist_del_init(p);\n\t\t\tlist_add(p, &tree->", "5491": "<<31)))\n\t\t\tbreak;\n\n\t\tuntag_chunk(node);\n\t}\n\tif (!tree->", "5492": "<<31);\n\t\t\tspin_unlock(&hash_lock);\n\t\t} else {\n\t\t\ttrim_marked(tree);\n\t\t}\n\n\t\tput_tree(tree);\n\t\tmutex_lock(&audit_filter_mutex);\n\t}\n\tlist_del(&barrier);\n\tlist_del(&cursor);\n\tmutex_unlock(&audit_filter_mutex);\n\tpath_put(&path1);\n\tdrop_collected_mounts(tagged);\n\treturn failed;\n}\n\n\nstatic void audit_schedule_prune(void)\n{\n\twake_up_process(prune_thread);\n}\n\n\nvoid audit_kill_trees(struct list_head *list)\n{\n\tmutex_lock(&audit_cmd_mutex);\n\tmutex_lock(&audit_filter_mutex);\n\n\twhile (!list_empty(list)) {\n\t\tstruct audit_tree *victim;\n\n\t\tvictim = list_entry(list->", "5493": "<<31);\n\t\tspin_unlock(&hash_lock);\n\t} else {\n\t\ttrim_marked(tree);\n\t\tgoto Err;\n\t}\n\n\tmutex_lock(&audit_filter_mutex);\n\tif (list_empty(&rule->", "5494": "<<31);\n\t\t}\n\t\tspin_unlock(&hash_lock);\n\t\ttrim_marked(tree);\n\t\tdrop_collected_mounts(root_mnt);\nskip_it:\n\t\tput_tree(tree);\n\t\tmutex_lock(&audit_filter_mutex);\n\t}\n\tlist_del(&cursor);\n\tmutex_unlock(&audit_filter_mutex);\n}\n\nint audit_make_tree(struct audit_krule *rule, char *pathname, u32 op)\n{\n\n\tif (pathname[0] != '/' ||\n\t    rule->", "5495": "<<31);\n\tp -= index;\n\treturn container_of(p, struct audit_chunk, owners[0]);\n}\n\nstatic void untag_chunk(struct node *p)\n{\n\tstruct audit_chunk *chunk = find_chunk(p);\n\tstruct fsnotify_mark *entry = &chunk->", "5496": "<<31);\n\tp->", "5497": "<<31;\n\t\t\tif (iterate_mounts(compare_root, inode, root_mnt))\n\t\t\t\tnode->", "5498": "<<= 1) {\n\t\t\tif ((rnp->", "5499": "<<= 1;\n\t\texp--;\n\t}\n\tu = (u32)(value >", "5500": "<<= 1;\n\t\tif (mem_total < sav_total)\n\t\t\tgoto out;\n\t}\n\n\t\n\n\tinfo->", "5501": "<<= 1;\n\t\trtime >", "5502": "<<= 1;\n\n\t\n\n\tfor (i = rcu_num_lvls - 1; i >", "5503": "<<= 1; \n\n\tswitch_count = &prev->", "5504": "<<= 20 - PAGE_SHIFT; \n\tif (!pages)\n\t\treturn;\n\n\tdown_read(&mm->", "5505": "<<= MANTSIZE;\t\t\n\texp += value;\t\t\t\n\treturn exp;\n}\n\n#if ACCT_VERSION == 1 || ACCT_VERSION == 2\n\n\n#define MANTSIZE2       20                      \n#define EXPSIZE2        5                       \n#define MAXFRACT2       ((1ul << MANTSIZE2) - 1) \n#define MAXEXP2         ((1 << EXPSIZE2) - 1)    \n\nstatic comp2_t encode_comp2_t(u64 value)\n{\n\tint exp, rnd;\n\n\texp = (value >", "5506": "<<= PAGE_SHIFT;\n\t\t\terror = put_user(offset, (loff_t __user *)arg);\n\t\t} else {\n\t\t\terror = -ENOSPC;\n\t\t}\n\t\tbreak;\n\n\tcase SNAPSHOT_FREE_SWAP_PAGES:\n\t\tif (data->", "5507": "<<= PAGE_SHIFT;\n\t\terror = put_user(size, (loff_t __user *)arg);\n\t\tbreak;\n\n\tcase SNAPSHOT_ALLOC_SWAP_PAGE:\n\t\tif (data->", "5508": "<<= PAGE_SHIFT;\n\t\terror = put_user(size, (loff_t __user *)arg);\n\t\tbreak;\n\n\tcase SNAPSHOT_AVAIL_SWAP_SIZE:\n\t\tsize = count_swap_pages(data->", "5509": "<<= PAGE_SHIFT;\n\treturn init_header_complete(info);\n}\n\n\n\nstatic inline void\npack_pfns(unsigned long *buf, struct memory_bitmap *bm)\n{\n\tint j;\n\n\tfor (j = 0; j < PAGE_SIZE / sizeof(long); j++) {\n\t\tbuf[j] = memory_bm_next_pfn(bm);\n\t\tif (unlikely(buf[j] == BM_END_OF_MAP))\n\t\t\tbreak;\n\t\t\n\t\tpage_key_read(buf + j);\n\t}\n}\n\n\n\nint snapshot_read_next(struct snapshot_handle *handle)\n{\n\tif (handle->", "5510": "<<= TS_SHIFT;\n\t\t\tdelta += event->", "5511": "<<= TS_SHIFT;\n\t\tdelta += event->", "5512": "<<= WORK_OFFQ_POOL_SHIFT;\n\tset_work_data(work, pool_id | WORK_OFFQ_CANCELING, WORK_STRUCT_PENDING);\n}\n\nstatic bool work_is_canceling(struct work_struct *work)\n{\n\tunsigned long data = atomic_long_read(&work->", "5513": "<<= adj_scale;\n\tinterval <<= adj_scale;\n\toffset <<= adj_scale;\n\n\t\n\tif ((mult_adj >", "5514": "<<= bitcount;\n\tinfo->", "5515": "<<= bitcount;\n\nout:\n\treturn 0;\n}\n\nSYSCALL_DEFINE1(sysinfo, struct sysinfo __user *, info)\n{\n\tstruct sysinfo val;\n\n\tdo_sysinfo(&val);\n\n\tif (copy_to_user(info, &val, sizeof(struct sysinfo)))\n\t\treturn -EFAULT;\n\n\treturn 0;\n}\n\n#ifdef CONFIG_COMPAT\nstruct compat_sysinfo {\n\ts32 uptime;\n\tu32 loads[3];\n\tu32 totalram;\n\tu32 freeram;\n\tu32 sharedram;\n\tu32 bufferram;\n\tu32 totalswap;\n\tu32 freeswap;\n\tu16 procs;\n\tu16 pad;\n\tu32 totalhigh;\n\tu32 freehigh;\n\tu32 mem_unit;\n\tchar _f[20-2*sizeof(u32)-sizeof(int)];\n};\n\nCOMPAT_SYSCALL_DEFINE1(sysinfo, struct compat_sysinfo __user *, info)\n{\n\tstruct sysinfo s;\n\n\tdo_sysinfo(&s);\n\n\t\n\tif (upper_32_bits(s.totalram) || upper_32_bits(s.totalswap)) {\n\t\tint bitcount = 0;\n\n\t\twhile (s.mem_unit < PAGE_SIZE) {\n\t\t\ts.mem_unit <<= 1;\n\t\t\tbitcount++;\n\t\t}\n\n\t\ts.totalram >", "5516": "<<= bprm->", "5517": "<<= clock->", "5518": "<<= shift_change;\n\t}\n\ttk->", "5519": "<<shift)\n\t\t\tshift--;\n\t}\n\n\t\n\ttimekeeping_adjust(tk, offset);\n\n\t\n\told_vsyscall_fixup(tk);\n\n\t\n\tclock_set |= accumulate_nsecs_to_secs(tk);\n\n\twrite_seqcount_begin(&tk_core.seq);\n\t\n\tmemcpy(real_tk, tk, sizeof(*tk));\n\ttimekeeping_update(real_tk, clock_set);\n\twrite_seqcount_end(&tk_core.seq);\nout:\n\traw_spin_unlock_irqrestore(&timekeeper_lock, flags);\n\tif (clock_set)\n\t\t\n\t\tclock_was_set_delayed();\n}\n\n\nvoid getboottime64(struct timespec64 *ts)\n{\n\tstruct timekeeper *tk = &tk_core.timekeeper;\n\tktime_t t = ktime_sub(tk->", "5520": "<=\n\t\t\t\tenv->", "5521": "<=\n\t\t\ttask_rlimit(t, RLIMIT_SIGPENDING)) {\n\t\tq = kmem_cache_alloc(sigqueue_cachep, flags);\n\t} else {\n\t\tprint_dropped_signal(sig);\n\t}\n\n\tif (unlikely(q == NULL)) {\n\t\tatomic_dec(&user->", "5522": "<=\n\t\t     extent->", "5523": "<= (*pos - iter->", "5524": "<= (1ULL << evt->", "5525": "<= (IRQ_HANDLED | IRQ_WAKE_THREAD)))\n\t\treturn 0;\n\treturn 1;\n}\n\n\nstatic void\n__report_bad_irq(unsigned int irq, struct irq_desc *desc,\n\t\t irqreturn_t action_ret)\n{\n\tstruct irqaction *action;\n\tunsigned long flags;\n\n\tif (bad_action_ret(action_ret)) {\n\t\tprintk(KERN_ERR \"irq event %d: bogus return value %x\\n\",\n\t\t\t\tirq, action_ret);\n\t} else {\n\t\tprintk(KERN_ERR \"irq %d: nobody cared (try booting with \"\n\t\t\t\t\"the \\\"irqpoll\\\" option)\\n\", irq);\n\t}\n\tdump_stack();\n\tprintk(KERN_ERR \"handlers:\\n\");\n\n\t\n\traw_spin_lock_irqsave(&desc->", "5526": "<= (busiest->", "5527": "<= (unsigned long)_einittext)\n\t\treturn 1;\n\treturn 0;\n}\n\nstatic inline int is_kernel_text(unsigned long addr)\n{\n\tif ((addr >", "5528": "<= (unsigned long)_end)\n\t\treturn 1;\n\treturn in_gate_area_no_mm(addr);\n}\n\nstatic int is_ksym_addr(unsigned long addr)\n{\n\tif (all_var)\n\t\treturn is_kernel(addr);\n\n\treturn is_kernel_text(addr) || is_kernel_inittext(addr);\n}\n\n\nstatic unsigned int kallsyms_expand_symbol(unsigned int off,\n\t\t\t\t\t   char *result, size_t maxlen)\n{\n\tint len, skipped_first = 0;\n\tconst u8 *tptr, *data;\n\n\t\n\tdata = &kallsyms_names[off];\n\tlen = *data;\n\tdata++;\n\n\t\n\toff += len + 1;\n\n\t\n\twhile (len) {\n\t\ttptr = &kallsyms_token_table[kallsyms_token_index[*data]];\n\t\tdata++;\n\t\tlen--;\n\n\t\twhile (*tptr) {\n\t\t\tif (skipped_first) {\n\t\t\t\tif (maxlen <= 1)\n\t\t\t\t\tgoto tail;\n\t\t\t\t*result = *tptr;\n\t\t\t\tresult++;\n\t\t\t\tmaxlen--;\n\t\t\t} else\n\t\t\t\tskipped_first = 1;\n\t\t\ttptr++;\n\t\t}\n\t}\n\ntail:\n\tif (maxlen)\n\t\t*result = '\\0';\n\n\t\n\treturn off;\n}\n\n\nstatic char kallsyms_get_symbol_type(unsigned int off)\n{\n\t\n\treturn kallsyms_token_table[kallsyms_token_index[kallsyms_names[off + 1]]];\n}\n\n\n\nstatic unsigned int get_symbol_offset(unsigned long pos)\n{\n\tconst u8 *name;\n\tint i;\n\n\t\n\tname = &kallsyms_names[kallsyms_markers[pos >", "5529": "<= (unsigned long)_etext) ||\n\t    arch_is_kernel_text(addr))\n\t\treturn 1;\n\treturn in_gate_area_no_mm(addr);\n}\n\nstatic inline int is_kernel(unsigned long addr)\n{\n\tif (addr >", "5530": "<= (unsigned long)end &&\n\t\tentry->", "5531": "<= *pos; ) {\n\t\tfile = s_next(m, file, &l);\n\t\tif (!file)\n\t\t\tbreak;\n\t}\n\treturn file;\n}\n\nstatic int t_show(struct seq_file *m, void *v)\n{\n\tstruct ftrace_event_file *file = v;\n\tstruct ftrace_event_call *call = file->", "5532": "<= *pos; ) {\n\t\tfile = t_next(m, file, &l);\n\t\tif (!file)\n\t\t\tbreak;\n\t}\n\treturn file;\n}\n\nstatic void *\ns_next(struct seq_file *m, void *v, loff_t *pos)\n{\n\tstruct ftrace_event_file *file = v;\n\tstruct trace_array *tr = m->", "5533": "<= *pos; ) {\n\t\tp = t_next(m, p, &l);\n\t\tif (!p)\n\t\t\tbreak;\n\t}\n\n\tif (!p)\n\t\treturn t_hash_start(m, pos);\n\n\treturn iter;\n}\n\nstatic void t_stop(struct seq_file *m, void *p)\n{\n\tmutex_unlock(&ftrace_lock);\n}\n\nvoid * __weak\narch_ftrace_trampoline_func(struct ftrace_ops *ops, struct dyn_ftrace *rec)\n{\n\treturn NULL;\n}\n\nstatic void add_trampoline_func(struct seq_file *m, struct ftrace_ops *ops,\n\t\t\t\tstruct dyn_ftrace *rec)\n{\n\tvoid *ptr;\n\n\tptr = arch_ftrace_trampoline_func(ops, rec);\n\tif (ptr)\n\t\tseq_printf(m, \" ->", "5534": "<= -ERESTARTSYS) &&\n\t    (return_code >", "5535": "<= 0 ?\n\t\t\tRR_TIMESLICE : msecs_to_jiffies(sched_rr_timeslice);\n\t}\n\tmutex_unlock(&mutex);\n\treturn ret;\n}\n\n#ifdef CONFIG_CGROUP_SCHED\n\nstatic inline struct task_group *css_tg(struct cgroup_subsys_state *css)\n{\n\treturn css ? container_of(css, struct task_group, css) : NULL;\n}\n\nstatic struct cgroup_subsys_state *\ncpu_cgroup_css_alloc(struct cgroup_subsys_state *parent_css)\n{\n\tstruct task_group *parent = css_tg(parent_css);\n\tstruct task_group *tg;\n\n\tif (!parent) {\n\t\t\n\t\treturn &root_task_group.css;\n\t}\n\n\ttg = sched_create_group(parent);\n\tif (IS_ERR(tg))\n\t\treturn ERR_PTR(-ENOMEM);\n\n\treturn &tg->", "5536": "<= 0 || (*prog)->", "5537": "<= 0 || nargs >", "5538": "<= 0 || task_tgid_vnr(p) == tgid)) {\n\t\terror = check_kill_permission(sig, info, p);\n\t\t\n\t\tif (!error && sig) {\n\t\t\terror = do_send_sig_info(sig, info, p, false);\n\t\t\t\n\t\t\tif (unlikely(error == -ESRCH))\n\t\t\t\terror = 0;\n\t\t}\n\t}\n\trcu_read_unlock();\n\n\treturn error;\n}\n\nstatic int do_tkill(pid_t tgid, pid_t pid, int sig)\n{\n\tstruct siginfo info = {};\n\n\tinfo.si_signo = sig;\n\tinfo.si_errno = 0;\n\tinfo.si_code = SI_TKILL;\n\tinfo.si_pid = task_tgid_vnr(current);\n\tinfo.si_uid = from_kuid_munged(current_user_ns(), current_uid());\n\n\treturn do_send_specific(tgid, pid, sig, &info);\n}\n\n\nSYSCALL_DEFINE3(tgkill, pid_t, tgid, pid_t, pid, int, sig)\n{\n\t\n\tif (pid <= 0 || tgid <= 0)\n\t\treturn -EINVAL;\n\n\treturn do_tkill(tgid, pid, sig);\n}\n\n\nSYSCALL_DEFINE2(tkill, pid_t, pid, int, sig)\n{\n\t\n\tif (pid <= 0)\n\t\treturn -EINVAL;\n\n\treturn do_tkill(0, pid, sig);\n}\n\nstatic int do_rt_sigqueueinfo(pid_t pid, int sig, siginfo_t *info)\n{\n\t\n\tif ((info->", "5539": "<= 0 || tgid <= 0)\n\t\treturn -EINVAL;\n\n\t\n\tif ((info->", "5540": "<= 0)\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\tINIT_LIST_HEAD(&cpu_buffer->", "5541": "<= 0)\n\t\t\t\tgoto out;\n\n\t\t\tcond_resched();\n\t\t} while (end != vma->", "5542": "<= 0)\n\t\t\tbreak;\n\t\tp += len;\n\t}\n\tkfree(buf);\n}\n\nstatic void show_special(struct audit_context *context, int *call_panic)\n{\n\tstruct audit_buffer *ab;\n\tint i;\n\n\tab = audit_log_start(context, GFP_KERNEL, context->", "5543": "<= 0)\n\t\t\tbreak;\n\t\tret = swap_read_page(handle, data_of(*snapshot), &bio);\n\t\tif (ret)\n\t\t\tbreak;\n\t\tif (snapshot->", "5544": "<= 0)\n\t\t\tbreak;\n\t\tret = swap_write_page(handle, data_of(*snapshot), &bio);\n\t\tif (ret)\n\t\t\tbreak;\n\t\tif (!(nr_pages % m))\n\t\t\tprintk(KERN_INFO \"PM: Image saving progress: %3d%%\\n\",\n\t\t\t       nr_pages / m * 10);\n\t\tnr_pages++;\n\t}\n\terr2 = hib_wait_on_bio_chain(&bio);\n\tstop = ktime_get();\n\tif (!ret)\n\t\tret = err2;\n\tif (!ret)\n\t\tprintk(KERN_INFO \"PM: Image saving done.\\n\");\n\tswsusp_show_speed(start, stop, nr_to_write, \"Wrote\");\n\treturn ret;\n}\n\n\nstruct crc_data {\n\tstruct task_struct *thr;                  \n\tatomic_t ready;                           \n\tatomic_t stop;                            \n\tunsigned run_threads;                     \n\twait_queue_head_t go;                     \n\twait_queue_head_t done;                   \n\tu32 *crc32;                               \n\tsize_t *unc_len[LZO_THREADS];             \n\tunsigned char *unc[LZO_THREADS];          \n};\n\n\nstatic int crc32_threadfn(void *data)\n{\n\tstruct crc_data *d = data;\n\tunsigned i;\n\n\twhile (1) {\n\t\twait_event(d->", "5545": "<= 0)\n\t\t\tbreak;\n\t\tsleep_jf = DIV_ROUND_UP(sleep_jf * 11, 10);\n\t}\nupdate_state:\n\toldstate = atomic_read(&per_cpu(cpu_hotplug_state, cpu));\n\tif (oldstate == CPU_DEAD) {\n\t\t\n\t\tsmp_mb(); \n\t\tatomic_set(&per_cpu(cpu_hotplug_state, cpu), CPU_POST_DEAD);\n\t} else {\n\t\t\n\t\tif (atomic_cmpxchg(&per_cpu(cpu_hotplug_state, cpu),\n\t\t\t\t   oldstate, CPU_BROKEN) != oldstate)\n\t\t\tgoto update_state;\n\t\tret = false;\n\t}\n\treturn ret;\n}\n\n\nbool cpu_report_death(void)\n{\n\tint oldstate;\n\tint newstate;\n\tint cpu = smp_processor_id();\n\n\tdo {\n\t\toldstate = atomic_read(&per_cpu(cpu_hotplug_state, cpu));\n\t\tif (oldstate != CPU_BROKEN)\n\t\t\tnewstate = CPU_DEAD;\n\t\telse\n\t\t\tnewstate = CPU_DEAD_FROZEN;\n\t} while (atomic_cmpxchg(&per_cpu(cpu_hotplug_state, cpu),\n\t\t\t\toldstate, newstate) != oldstate);\n\treturn newstate == CPU_DEAD;\n}\n\n#endif \n\n\n#include <linux/module.h>", "5546": "<= 0)\n\t\t\tbreak;\n\n\t\tcontinue;\nnext:\n\t\tlist_move_tail(&p->", "5547": "<= 0)\n\t\t\tcurrent->", "5548": "<= 0)\n\t\t\tgoto Unlock;\n\t} else {\n\t\tres = PAGE_SIZE - pg_offp;\n\t}\n\n\tres = simple_read_from_buffer(buf, count, &pg_offp,\n\t\t\tdata_of(data->", "5549": "<= 0)\n\t\t\tgoto out;\n\t}\n\n\n\t\n\tret = -ERESTART_RESTARTBLOCK;\nout:\n\treturn ret;\n}\n\n\nstatic int alarm_timer_nsleep(const clockid_t which_clock, int flags,\n\t\t     struct timespec *tsreq, struct timespec __user *rmtp)\n{\n\tenum  alarmtimer_type type = clock2alarm(which_clock);\n\tstruct alarm alarm;\n\tktime_t exp;\n\tint ret = 0;\n\tstruct restart_block *restart;\n\n\tif (!alarmtimer_get_rtcdev())\n\t\treturn -ENOTSUPP;\n\n\tif (flags & ~TIMER_ABSTIME)\n\t\treturn -EINVAL;\n\n\tif (!capable(CAP_WAKE_ALARM))\n\t\treturn -EPERM;\n\n\talarm_init(&alarm, type, alarmtimer_nsleep_wakeup);\n\n\texp = timespec_to_ktime(*tsreq);\n\t\n\tif (flags != TIMER_ABSTIME) {\n\t\tktime_t now = alarm_bases[type].gettime();\n\t\texp = ktime_add(now, exp);\n\t}\n\n\tif (alarmtimer_do_nsleep(&alarm, exp))\n\t\tgoto out;\n\n\tif (freezing(current))\n\t\talarmtimer_freezerset(exp, type);\n\n\t\n\tif (flags == TIMER_ABSTIME) {\n\t\tret = -ERESTARTNOHAND;\n\t\tgoto out;\n\t}\n\n\tif (rmtp) {\n\t\tret = update_rmtp(exp, type, rmtp);\n\t\tif (ret <= 0)\n\t\t\tgoto out;\n\t}\n\n\trestart = &current->", "5550": "<= 0)\n\t\t\tgoto unlock;\n\t} else {\n\t\tres = PAGE_SIZE - pg_offp;\n\t}\n\n\tres = simple_write_to_buffer(data_of(data->", "5551": "<= 0)\n\t\t\tnrealreaders = 1;\n\t}\n\trcu_torture_print_module_parms(cur_ops, \"Start of test\");\n\n\t\n\n\tINIT_LIST_HEAD(&rcu_torture_freelist);\n\tfor (i = 0; i < ARRAY_SIZE(rcu_tortures); i++) {\n\t\trcu_tortures[i].rtort_mbtest = 0;\n\t\tlist_add_tail(&rcu_tortures[i].rtort_free,\n\t\t\t      &rcu_torture_freelist);\n\t}\n\n\t\n\n\trcu_torture_current = NULL;\n\trcu_torture_current_version = 0;\n\tatomic_set(&n_rcu_torture_alloc, 0);\n\tatomic_set(&n_rcu_torture_alloc_fail, 0);\n\tatomic_set(&n_rcu_torture_free, 0);\n\tatomic_set(&n_rcu_torture_mberror, 0);\n\tatomic_set(&n_rcu_torture_error, 0);\n\tn_rcu_torture_barrier_error = 0;\n\tn_rcu_torture_boost_ktrerror = 0;\n\tn_rcu_torture_boost_rterror = 0;\n\tn_rcu_torture_boost_failure = 0;\n\tn_rcu_torture_boosts = 0;\n\tfor (i = 0; i < RCU_TORTURE_PIPE_LEN + 1; i++)\n\t\tatomic_set(&rcu_torture_wcount[i], 0);\n\tfor_each_possible_cpu(cpu) {\n\t\tfor (i = 0; i < RCU_TORTURE_PIPE_LEN + 1; i++) {\n\t\t\tper_cpu(rcu_torture_count, cpu)[i] = 0;\n\t\t\tper_cpu(rcu_torture_batch, cpu)[i] = 0;\n\t\t}\n\t}\n\n\t\n\n\tfirsterr = torture_create_kthread(rcu_torture_writer, NULL,\n\t\t\t\t\t  writer_task);\n\tif (firsterr)\n\t\tgoto unwind;\n\tfakewriter_tasks = kzalloc(nfakewriters * sizeof(fakewriter_tasks[0]),\n\t\t\t\t   GFP_KERNEL);\n\tif (fakewriter_tasks == NULL) {\n\t\tVERBOSE_TOROUT_ERRSTRING(\"out of memory\");\n\t\tfirsterr = -ENOMEM;\n\t\tgoto unwind;\n\t}\n\tfor (i = 0; i < nfakewriters; i++) {\n\t\tfirsterr = torture_create_kthread(rcu_torture_fakewriter,\n\t\t\t\t\t\t  NULL, fakewriter_tasks[i]);\n\t\tif (firsterr)\n\t\t\tgoto unwind;\n\t}\n\treader_tasks = kzalloc(nrealreaders * sizeof(reader_tasks[0]),\n\t\t\t       GFP_KERNEL);\n\tif (reader_tasks == NULL) {\n\t\tVERBOSE_TOROUT_ERRSTRING(\"out of memory\");\n\t\tfirsterr = -ENOMEM;\n\t\tgoto unwind;\n\t}\n\tfor (i = 0; i < nrealreaders; i++) {\n\t\tfirsterr = torture_create_kthread(rcu_torture_reader, NULL,\n\t\t\t\t\t\t  reader_tasks[i]);\n\t\tif (firsterr)\n\t\t\tgoto unwind;\n\t}\n\tif (stat_interval >", "5552": "<= 0)\n\t\t\trem.tv64 = NSEC_PER_USEC;\n\t} else\n\t\trem.tv64 = 0;\n\n\treturn ktime_to_timeval(rem);\n}\n\nstatic void get_cpu_itimer(struct task_struct *tsk, unsigned int clock_id,\n\t\t\t   struct itimerval *const value)\n{\n\tcputime_t cval, cinterval;\n\tstruct cpu_itimer *it = &tsk->", "5553": "<= 0)\n\t\t\treturn false;\n\t\tudelay(SRCU_RETRY_CHECK_DELAY);\n\t}\n}\n\n\nstatic void srcu_flip(struct srcu_struct *sp)\n{\n\tsp->", "5554": "<= 0)\n\t\treturn -1;\n\n\tgran = wakeup_gran(curr, se);\n\tif (vdiff >", "5555": "<= 0)\n\t\treturn -EINVAL;\n\tfor (i = 0; i < num; i++) {\n\t\tret = register_kprobe(kps[i]);\n\t\tif (ret < 0) {\n\t\t\tif (i >", "5556": "<= 0)\n\t\treturn -EINVAL;\n\tfor (i = 0; i < num; i++) {\n\t\tret = register_kretprobe(rps[i]);\n\t\tif (ret < 0) {\n\t\t\tif (i >", "5557": "<= 0)\n\t\treturn -EINVAL;\n\tfor (i = 0; i < num; i++) {\n\t\tunsigned long addr, offset;\n\t\tjp = jps[i];\n\t\taddr = arch_deref_entry_point(jp->", "5558": "<= 0)\n\t\treturn -EINVAL;\n\n\tif ((sysctl_sched_rt_runtime != RUNTIME_INF) &&\n\t\t(sysctl_sched_rt_runtime >", "5559": "<= 0)\n\t\treturn -EINVAL;\n\n\tif (kexec_purgatory_size < sizeof(Elf_Ehdr))\n\t\treturn -ENOEXEC;\n\n\tpi->", "5560": "<= 0)\n\t\treturn -EINVAL;\n\n\tworkqueue_set_max_active(wq, val);\n\treturn count;\n}\nstatic DEVICE_ATTR_RW(max_active);\n\nstatic struct attribute *wq_sysfs_attrs[] = {\n\t&dev_attr_per_cpu.attr,\n\t&dev_attr_max_active.attr,\n\tNULL,\n};\nATTRIBUTE_GROUPS(wq_sysfs);\n\nstatic ssize_t wq_pool_ids_show(struct device *dev,\n\t\t\t\tstruct device_attribute *attr, char *buf)\n{\n\tstruct workqueue_struct *wq = dev_to_wq(dev);\n\tconst char *delim = \"\";\n\tint node, written = 0;\n\n\trcu_read_lock_sched();\n\tfor_each_node(node) {\n\t\twritten += scnprintf(buf + written, PAGE_SIZE - written,\n\t\t\t\t     \"%s%d:%d\", delim, node,\n\t\t\t\t     unbound_pwq_by_node(wq, node)->", "5561": "<= 0)\n\t\treturn 0;\n\treturn torture_create_kthread(rcu_torture_stall, NULL, stall_task);\n}\n\n\nstatic void rcu_torture_barrier_cbf(struct rcu_head *rcu)\n{\n\tatomic_inc(&barrier_cbs_invoked);\n}\n\n\nstatic int rcu_torture_barrier_cbs(void *arg)\n{\n\tlong myid = (long)arg;\n\tbool lastphase = 0;\n\tbool newphase;\n\tstruct rcu_head rcu;\n\n\tinit_rcu_head_on_stack(&rcu);\n\tVERBOSE_TOROUT_STRING(\"rcu_torture_barrier_cbs task started\");\n\tset_user_nice(current, MAX_NICE);\n\tdo {\n\t\twait_event(barrier_cbs_wq[myid],\n\t\t\t   (newphase =\n\t\t\t    ACCESS_ONCE(barrier_phase)) != lastphase ||\n\t\t\t   torture_must_stop());\n\t\tlastphase = newphase;\n\t\tsmp_mb(); \n\t\tif (torture_must_stop())\n\t\t\tbreak;\n\t\tcur_ops->", "5562": "<= 0)\n\t\treturn 0;\n\trmt = ktime_to_timespec(rem);\n\n\tif (copy_to_user(rmtp, &rmt, sizeof(*rmtp)))\n\t\treturn -EFAULT;\n\n\treturn 1;\n\n}\n\n\nstatic long __sched alarm_timer_nsleep_restart(struct restart_block *restart)\n{\n\tenum  alarmtimer_type type = restart->", "5563": "<= 0)\n\t\treturn 0;\n\n\twhile (!list_empty(tasks)) {\n\t\tp = list_first_entry(tasks, struct task_struct, se.group_node);\n\n\t\tenv->", "5564": "<= 0)\n\t\treturn false;\n\n\t\n\torig_src_load = env->", "5565": "<= 0)\n\t\treturn force ? clockevents_program_min_delta(dev) : -ETIME;\n\n\tdelta = min(delta, (int64_t) dev->", "5566": "<= 0)\n\t\treturn now + 1;\n\n\ttsdelta = ktime_to_timespec(hr_delta);\n\tdelta = timespec_to_jiffies(&tsdelta);\n\n\t\n\tif (delta >", "5567": "<= 0)\n\t\treturn print_unlock_imbalance_bug(curr, lock, ip);\n\n\treturn 1;\n}\n\nstatic int match_held_lock(struct held_lock *hlock, struct lockdep_map *lock)\n{\n\tif (hlock->", "5568": "<= 0)\n\t\treturn ret;\n\n\tret = verify_opcode(old_page, vaddr, &opcode);\n\tif (ret <= 0)\n\t\tgoto put_old;\n\n\tret = anon_vma_prepare(vma);\n\tif (ret)\n\t\tgoto put_old;\n\n\tret = -ENOMEM;\n\tnew_page = alloc_page_vma(GFP_HIGHUSER_MOVABLE, vma, vaddr);\n\tif (!new_page)\n\t\tgoto put_old;\n\n\t__SetPageUptodate(new_page);\n\tcopy_highpage(new_page, old_page);\n\tcopy_to_page(new_page, vaddr, &opcode, UPROBE_SWBP_INSN_SIZE);\n\n\tret = __replace_page(vma, vaddr, old_page, new_page);\n\tpage_cache_release(new_page);\nput_old:\n\tput_page(old_page);\n\n\tif (unlikely(ret == -EAGAIN))\n\t\tgoto retry;\n\treturn ret;\n}\n\n\nint __weak set_swbp(struct arch_uprobe *auprobe, struct mm_struct *mm, unsigned long vaddr)\n{\n\treturn uprobe_write_opcode(mm, vaddr, UPROBE_SWBP_INSN);\n}\n\n\nint __weak\nset_orig_insn(struct arch_uprobe *auprobe, struct mm_struct *mm, unsigned long vaddr)\n{\n\treturn uprobe_write_opcode(mm, vaddr, *(uprobe_opcode_t *)&auprobe->", "5569": "<= 0)\n\t\treturn;\n\tmutex_lock(&kprobe_mutex);\n\tfor (i = 0; i < num; i++)\n\t\tif (__unregister_kprobe_top(&jps[i]->", "5570": "<= 0)\n\t\treturn;\n\tmutex_lock(&kprobe_mutex);\n\tfor (i = 0; i < num; i++)\n\t\tif (__unregister_kprobe_top(&rps[i]->", "5571": "<= 0)\n\t\treturn;\n\tmutex_lock(&kprobe_mutex);\n\tfor (i = 0; i < num; i++)\n\t\tif (__unregister_kprobe_top(kps[i]) < 0)\n\t\t\tkps[i]->", "5572": "<= 0)\n\t\treturn;\n\n\tmemset(&lat, 0, sizeof(lat));\n\tlat.count = 1;\n\tlat.time = usecs;\n\tlat.max = usecs;\n\tstore_stacktrace(tsk, &lat);\n\n\traw_spin_lock_irqsave(&latency_lock, flags);\n\n\taccount_global_scheduler_latency(tsk, &lat);\n\n\tfor (i = 0; i < tsk->", "5573": "<= 0)\n\t\treturn;\n\n\traw_spin_lock(&cfs_b->", "5574": "<= 0)\n\t\tthrottle_cfs_rq(cfs_rq);\n}\n\n\nstatic bool check_cfs_rq_runtime(struct cfs_rq *cfs_rq)\n{\n\tif (!cfs_bandwidth_used())\n\t\treturn false;\n\n\tif (likely(!cfs_rq->", "5575": "<= 0) {\n\t\t\t\tKILL_TEST();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tring_buffer_free_read_page(buffer, bpage);\n\n\tif (ret < 0)\n\t\treturn EVENT_DROPPED;\n\treturn EVENT_FOUND;\n}\n\nstatic void ring_buffer_consumer(void)\n{\n\t\n\tread_events ^= 1;\n\n\tread = 0;\n\twhile (!reader_finish && !kill_test) {\n\t\tint found;\n\n\t\tdo {\n\t\t\tint cpu;\n\n\t\t\tfound = 0;\n\t\t\tfor_each_online_cpu(cpu) {\n\t\t\t\tenum event_status stat;\n\n\t\t\t\tif (read_events)\n\t\t\t\t\tstat = read_event(cpu);\n\t\t\t\telse\n\t\t\t\t\tstat = read_page(cpu);\n\n\t\t\t\tif (kill_test)\n\t\t\t\t\tbreak;\n\t\t\t\tif (stat == EVENT_FOUND)\n\t\t\t\t\tfound = 1;\n\t\t\t}\n\t\t} while (found && !kill_test);\n\n\t\tset_current_state(TASK_INTERRUPTIBLE);\n\t\tif (reader_finish)\n\t\t\tbreak;\n\n\t\tschedule();\n\t}\n\treader_finish = 0;\n\tcomplete(&read_done);\n}\n\nstatic void ring_buffer_producer(void)\n{\n\tktime_t start_time, end_time, timeout;\n\tunsigned long long time;\n\tunsigned long long entries;\n\tunsigned long long overruns;\n\tunsigned long missed = 0;\n\tunsigned long hit = 0;\n\tunsigned long avg;\n\tint cnt = 0;\n\n\t\n\ttrace_printk(\"Starting ring buffer hammer\\n\");\n\tstart_time = ktime_get();\n\ttimeout = ktime_add_ns(start_time, RUN_TIME * NSEC_PER_SEC);\n\tdo {\n\t\tstruct ring_buffer_event *event;\n\t\tint *entry;\n\t\tint i;\n\n\t\tfor (i = 0; i < write_iteration; i++) {\n\t\t\tevent = ring_buffer_lock_reserve(buffer, 10);\n\t\t\tif (!event) {\n\t\t\t\tmissed++;\n\t\t\t} else {\n\t\t\t\thit++;\n\t\t\t\tentry = ring_buffer_event_data(event);\n\t\t\t\t*entry = smp_processor_id();\n\t\t\t\tring_buffer_unlock_commit(buffer, event);\n\t\t\t}\n\t\t}\n\t\tend_time = ktime_get();\n\n\t\tcnt++;\n\t\tif (consumer && !(cnt % wakeup_interval))\n\t\t\twake_up_process(consumer);\n\n#ifndef CONFIG_PREEMPT\n\t\t\n\t\tif (cnt % wakeup_interval)\n\t\t\tcond_resched();\n#endif\n\n\t} while (ktime_before(end_time, timeout) && !kill_test);\n\ttrace_printk(\"End ring buffer hammer\\n\");\n\n\tif (consumer) {\n\t\t\n\t\tinit_completion(&read_start);\n\t\tinit_completion(&read_done);\n\t\t\n\t\tsmp_wmb();\n\t\treader_finish = 1;\n\t\t\n\t\tsmp_wmb();\n\t\twake_up_process(consumer);\n\t\twait_for_completion(&read_done);\n\t}\n\n\ttime = ktime_us_delta(end_time, start_time);\n\n\tentries = ring_buffer_entries(buffer);\n\toverruns = ring_buffer_overruns(buffer);\n\n\tif (kill_test)\n\t\ttrace_printk(\"ERROR!\\n\");\n\n\tif (!disable_reader) {\n\t\tif (consumer_fifo < 0)\n\t\t\ttrace_printk(\"Running Consumer at nice: %d\\n\",\n\t\t\t\t     consumer_nice);\n\t\telse\n\t\t\ttrace_printk(\"Running Consumer at SCHED_FIFO %d\\n\",\n\t\t\t\t     consumer_fifo);\n\t}\n\tif (producer_fifo < 0)\n\t\ttrace_printk(\"Running Producer at nice: %d\\n\",\n\t\t\t     producer_nice);\n\telse\n\t\ttrace_printk(\"Running Producer at SCHED_FIFO %d\\n\",\n\t\t\t     producer_fifo);\n\n\t\n\tif (producer_fifo < 0 && consumer_fifo < 0 &&\n\t    producer_nice == MAX_NICE && consumer_nice == MAX_NICE)\n\t\ttrace_printk(\"WARNING!!! This test is running at lowest priority.\\n\");\n\n\ttrace_printk(\"Time:     %lld (usecs)\\n\", time);\n\ttrace_printk(\"Overruns: %lld\\n\", overruns);\n\tif (disable_reader)\n\t\ttrace_printk(\"Read:     (reader disabled)\\n\");\n\telse\n\t\ttrace_printk(\"Read:     %ld  (by %s)\\n\", read,\n\t\t\tread_events ? \"events\" : \"pages\");\n\ttrace_printk(\"Entries:  %lld\\n\", entries);\n\ttrace_printk(\"Total:    %lld\\n\", entries + overruns + read);\n\ttrace_printk(\"Missed:   %ld\\n\", missed);\n\ttrace_printk(\"Hit:      %ld\\n\", hit);\n\n\t\n\tdo_div(time, USEC_PER_MSEC);\n\tif (time)\n\t\thit /= (long)time;\n\telse\n\t\ttrace_printk(\"TIME IS ZERO??\\n\");\n\n\ttrace_printk(\"Entries per millisec: %ld\\n\", hit);\n\n\tif (hit) {\n\t\t\n\t\tavg = NSEC_PER_MSEC / hit;\n\t\ttrace_printk(\"%ld ns per entry\\n\", avg);\n\t}\n\n\tif (missed) {\n\t\tif (time)\n\t\t\tmissed /= (long)time;\n\n\t\ttrace_printk(\"Total iterations per millisec: %ld\\n\",\n\t\t\t     hit + missed);\n\n\t\t\n\t\tif (!(hit + missed)) {\n\t\t\ttrace_printk(\"hit + missed overflowed and totalled zero!\\n\");\n\t\t\thit--; \n\t\t}\n\n\t\t\n\t\tavg = NSEC_PER_MSEC / (hit + missed);\n\t\ttrace_printk(\"%ld ns per entry\\n\", avg);\n\t}\n}\n\nstatic void wait_to_die(void)\n{\n\tset_current_state(TASK_INTERRUPTIBLE);\n\twhile (!kthread_should_stop()) {\n\t\tschedule();\n\t\tset_current_state(TASK_INTERRUPTIBLE);\n\t}\n\t__set_current_state(TASK_RUNNING);\n}\n\nstatic int ring_buffer_consumer_thread(void *arg)\n{\n\twhile (!kthread_should_stop() && !kill_test) {\n\t\tcomplete(&read_start);\n\n\t\tring_buffer_consumer();\n\n\t\tset_current_state(TASK_INTERRUPTIBLE);\n\t\tif (kthread_should_stop() || kill_test)\n\t\t\tbreak;\n\n\t\tschedule();\n\t}\n\t__set_current_state(TASK_RUNNING);\n\n\tif (kill_test)\n\t\twait_to_die();\n\n\treturn 0;\n}\n\nstatic int ring_buffer_producer_thread(void *arg)\n{\n\tinit_completion(&read_start);\n\n\twhile (!kthread_should_stop() && !kill_test) {\n\t\tring_buffer_reset(buffer);\n\n\t\tif (consumer) {\n\t\t\tsmp_wmb();\n\t\t\twake_up_process(consumer);\n\t\t\twait_for_completion(&read_start);\n\t\t}\n\n\t\tring_buffer_producer();\n\n\t\ttrace_printk(\"Sleeping for 10 secs\\n\");\n\t\tset_current_state(TASK_INTERRUPTIBLE);\n\t\tschedule_timeout(HZ * SLEEP_TIME);\n\t}\n\n\tif (kill_test)\n\t\twait_to_die();\n\n\treturn 0;\n}\n\nstatic int __init ring_buffer_benchmark_init(void)\n{\n\tint ret;\n\n\t\n\tbuffer = ring_buffer_alloc(1000000, RB_FL_OVERWRITE);\n\tif (!buffer)\n\t\treturn -ENOMEM;\n\n\tif (!disable_reader) {\n\t\tconsumer = kthread_create(ring_buffer_consumer_thread,\n\t\t\t\t\t  NULL, \"rb_consumer\");\n\t\tret = PTR_ERR(consumer);\n\t\tif (IS_ERR(consumer))\n\t\t\tgoto out_fail;\n\t}\n\n\tproducer = kthread_run(ring_buffer_producer_thread,\n\t\t\t       NULL, \"rb_producer\");\n\tret = PTR_ERR(producer);\n\n\tif (IS_ERR(producer))\n\t\tgoto out_kill;\n\n\t\n\tif (!disable_reader) {\n\t\tif (consumer_fifo >", "5576": "<= 0) {\n\t\t\n\t\tif ((timr->", "5577": "<= 0) {\n\t\tkdb_printf(\"Process ID must be large than 0.\\n\");\n\t\treturn 0;\n\t}\n\n\t\n\tp = find_task_by_pid_ns(pid, &init_pid_ns);\n\tif (!p) {\n\t\tkdb_printf(\"The specified process isn't found.\\n\");\n\t\treturn 0;\n\t}\n\tp = p->", "5578": "<= 0) {\n\t\tpr_debug(\"->", "5579": "<= 0) {\n\t\tpr_warn(\"%s: gave up waiting for init of module %s.\\n\",\n\t\t\tmod->", "5580": "<= 0) {\n\t\tprintk(KERN_ERR \"KGDB: Internal thread select error\\n\");\n\t\tdump_stack();\n\t\treturn NULL;\n\t}\n\n\t\n\treturn find_task_by_pid_ns(tid, &init_pid_ns);\n}\n\n\n\nstatic inline int shadow_pid(int realpid)\n{\n\tif (realpid)\n\t\treturn realpid;\n\n\treturn -raw_smp_processor_id() - 2;\n}\n\n\n\n\nstatic void gdb_cmd_status(struct kgdb_state *ks)\n{\n\t\n\tdbg_remove_all_break();\n\n\tremcom_out_buffer[0] = 'S';\n\thex_byte_pack(&remcom_out_buffer[1], ks->", "5581": "<= 0) {\n\t\tverbose(\"invalid stack type R%d off=%d access_size=%d\\n\",\n\t\t\tregno, off, access_size);\n\t\treturn -EACCES;\n\t}\n\n\tfor (i = 0; i < access_size; i++) {\n\t\tif (state->", "5582": "<= 0) {\n#ifdef CONFIG_PREEMPT\n\t\trp->", "5583": "<= 0) || (event->", "5584": "<= 0))\n\t\t\tgoto timed_out;\n\t\t__set_task_state(task, state);\n\t\traw_spin_unlock_irq(&sem->", "5585": "<= 0))\n\t\treturn;\n\n\tcurr->", "5586": "<= 0))\n\t\treturn;\n\n\tdata->", "5587": "<= 0))\n\t\treturn;\n\n\tschedstat_set(curr->", "5588": "<= 0)) {\n\t\t\n\t\ttimekeeping_apply_adjustment(tk, offset, 1, 0);\n\t\ttk->", "5589": "<= 0)) {\n\t\tse->", "5590": "<= 0);\n\t\t\treturn; \n\t\t} else {\n\t\t\trdtp->", "5591": "<= 0);\n\t\tif (rdtp->", "5592": "<= 0);\n\tWARN_ON_ONCE(!(atomic_read(&rdtp->", "5593": "<= 0);\n\tkdb_flags = kdb_flags_stack[--kdb_flags_index];\n}\n\n\n#include <linux/proc_fs.h>", "5594": "<= 0);\n\tpwq->", "5595": "<= 1)\n\t\t\treturn NULL;\n\t}\n\n\t\n\twhile (!string[0]) {\n\t\tstring++;\n\t\tif ((*secsize)-- <= 1)\n\t\t\treturn NULL;\n\t}\n\treturn string;\n}\n\nstatic char *get_modinfo(struct load_info *info, const char *tag)\n{\n\tchar *p;\n\tunsigned int taglen = strlen(tag);\n\tElf_Shdr *infosec = &info->", "5596": "<= 1)\n\t\tdump_stack();\n#endif\n\n\t\n\tif (!crash_kexec_post_notifiers)\n\t\tcrash_kexec(NULL);\n\n\t\n\tsmp_send_stop();\n\n\t\n\tatomic_notifier_call_chain(&panic_notifier_list, 0, buf);\n\n\tkmsg_dump(KMSG_DUMP_PANIC);\n\n\t\n\tcrash_kexec(NULL);\n\n\tbust_spinlocks(0);\n\n\tif (!panic_blink)\n\t\tpanic_blink = no_blink;\n\n\tif (panic_timeout >", "5597": "<= 1)\n\t\tgoto out;\n\n\t\n\tif ((long)delta_jiffies >", "5598": "<= 1)\n\t\tgoto out_unlock;\n\n\t\n\tBUG_ON(busiest_rq == target_rq);\n\n\t\n\trcu_read_lock();\n\tfor_each_domain(target_cpu, sd) {\n\t\tif ((sd->", "5599": "<= 1)\n\t\treturn;\n\n\tif (wq_disable_numa) {\n\t\tpr_info(\"workqueue: NUMA affinity support disabled\\n\");\n\t\treturn;\n\t}\n\n\twq_update_unbound_numa_attrs_buf = alloc_workqueue_attrs(GFP_KERNEL);\n\tBUG_ON(!wq_update_unbound_numa_attrs_buf);\n\n\t\n\ttbl = kzalloc(nr_node_ids * sizeof(tbl[0]), GFP_KERNEL);\n\tBUG_ON(!tbl);\n\n\tfor_each_node(node)\n\t\tBUG_ON(!zalloc_cpumask_var_node(&tbl[node], GFP_KERNEL,\n\t\t\t\tnode_online(node) ? node : NUMA_NO_NODE));\n\n\tfor_each_possible_cpu(cpu) {\n\t\tnode = cpu_to_node(cpu);\n\t\tif (WARN_ON(node == NUMA_NO_NODE)) {\n\t\t\tpr_warn(\"workqueue: NUMA node mapping not available for cpu%d, disabling NUMA support\\n\", cpu);\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\tcpumask_set_cpu(cpu, tbl[node]);\n\t}\n\n\twq_numa_possible_cpumask = tbl;\n\twq_numa_enabled = true;\n}\n\nstatic int __init init_workqueues(void)\n{\n\tint std_nice[NR_STD_WORKER_POOLS] = { 0, HIGHPRI_NICE_LEVEL };\n\tint i, cpu;\n\n\tWARN_ON(__alignof__(struct pool_workqueue) < __alignof__(long long));\n\n\tpwq_cache = KMEM_CACHE(pool_workqueue, SLAB_PANIC);\n\n\tcpu_notifier(workqueue_cpu_up_callback, CPU_PRI_WORKQUEUE_UP);\n\thotcpu_notifier(workqueue_cpu_down_callback, CPU_PRI_WORKQUEUE_DOWN);\n\n\twq_numa_init();\n\n\t\n\tfor_each_possible_cpu(cpu) {\n\t\tstruct worker_pool *pool;\n\n\t\ti = 0;\n\t\tfor_each_cpu_worker_pool(pool, cpu) {\n\t\t\tBUG_ON(init_worker_pool(pool));\n\t\t\tpool->", "5600": "<= 1)\n\t\tstddev = 0;\n\telse {\n\t\t\n\t\tstddev = rec->", "5601": "<= 1) {\n\t\tif (!task_current(rq, p))\n\t\t\tdequeue_pushable_task(rq, p);\n\t\tBUG_ON(!rq->", "5602": "<= 1))\n\t\t\treturn KDB_NOPERM;\n\n\t\tKDB_STATE_SET(CMD);\n\t\tresult = (*tp->", "5603": "<= 1);\n\n\tBUG_ON(!task_on_rq_queued(p));\n\tBUG_ON(!rt_task(p));\n\n\treturn p;\n}\n\n\nstatic int push_rt_task(struct rq *rq)\n{\n\tstruct task_struct *next_task;\n\tstruct rq *lowest_rq;\n\tint ret = 0;\n\n\tif (!rq->", "5604": "<= 1000))\n\t\t\tpr_warn(\"workqueue %s: drain_workqueue() isn't complete after %u tries\\n\",\n\t\t\t\twq->", "5605": "<= 1;\n\tpreempt_enable();\n\treturn ret;\n}\n\n\nvoid synchronize_sched(void)\n{\n\trcu_lockdep_assert(!lock_is_held(&rcu_bh_lock_map) &&\n\t\t\t   !lock_is_held(&rcu_lock_map) &&\n\t\t\t   !lock_is_held(&rcu_sched_lock_map),\n\t\t\t   \"Illegal synchronize_sched() in RCU-sched read-side critical section\");\n\tif (rcu_blocking_is_gp())\n\t\treturn;\n\tif (rcu_gp_is_expedited())\n\t\tsynchronize_sched_expedited();\n\telse\n\t\twait_rcu_gp(call_rcu_sched);\n}\nEXPORT_SYMBOL_GPL(synchronize_sched);\n\n\nvoid synchronize_rcu_bh(void)\n{\n\trcu_lockdep_assert(!lock_is_held(&rcu_bh_lock_map) &&\n\t\t\t   !lock_is_held(&rcu_lock_map) &&\n\t\t\t   !lock_is_held(&rcu_sched_lock_map),\n\t\t\t   \"Illegal synchronize_rcu_bh() in RCU-bh read-side critical section\");\n\tif (rcu_blocking_is_gp())\n\t\treturn;\n\tif (rcu_gp_is_expedited())\n\t\tsynchronize_rcu_bh_expedited();\n\telse\n\t\twait_rcu_gp(call_rcu_bh);\n}\nEXPORT_SYMBOL_GPL(synchronize_rcu_bh);\n\n\nunsigned long get_state_synchronize_rcu(void)\n{\n\t\n\tsmp_mb();  \n\n\t\n\treturn smp_load_acquire(&rcu_state_p->", "5606": "<= 1;\n}\n\n\nstatic bool need_to_create_worker(struct worker_pool *pool)\n{\n\treturn need_more_worker(pool) && !may_start_working(pool);\n}\n\n\nstatic bool too_many_workers(struct worker_pool *pool)\n{\n\tbool managing = mutex_is_locked(&pool->", "5607": "<= 1;\n}\n\n\nstatic int dyntick_save_progress_counter(struct rcu_data *rdp,\n\t\t\t\t\t bool *isidle, unsigned long *maxj)\n{\n\trdp->", "5608": "<= 256) \n\t\t\trcu_expedite_gp();\n\t\tbreak;\n\tcase PM_POST_HIBERNATION:\n\tcase PM_POST_SUSPEND:\n\t\tif (nr_cpu_ids <= 256) \n\t\t\trcu_unexpedite_gp();\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn NOTIFY_OK;\n}\n\n\nstatic int __init rcu_spawn_gp_kthread(void)\n{\n\tunsigned long flags;\n\tint kthread_prio_in = kthread_prio;\n\tstruct rcu_node *rnp;\n\tstruct rcu_state *rsp;\n\tstruct sched_param sp;\n\tstruct task_struct *t;\n\n\t\n\tif (IS_ENABLED(CONFIG_RCU_BOOST) && kthread_prio < 1)\n\t\tkthread_prio = 1;\n\telse if (kthread_prio < 0)\n\t\tkthread_prio = 0;\n\telse if (kthread_prio >", "5609": "<= AUDIT_LAST_FEATURE; i++) {\n\t\tu32 feature = AUDIT_FEATURE_TO_MASK(i);\n\t\tu32 old_feature, new_feature, old_lock, new_lock;\n\n\t\t\n\t\tif (!(feature & uaf->", "5610": "<= BUF_PAGE_HDR_SIZE)\n\t\tgoto out;\n\n\tlen -= BUF_PAGE_HDR_SIZE;\n\n\tif (!data_page)\n\t\tgoto out;\n\n\tbpage = *data_page;\n\tif (!bpage)\n\t\tgoto out;\n\n\traw_spin_lock_irqsave(&cpu_buffer->", "5611": "<= CONFIG_NO_HZ_FULL_SYSIDLE_SMALL)\n\t\treturn 0;\n\treturn DIV_ROUND_UP(nr_cpu_ids * HZ, rcu_fanout_leaf * 1000);\n}\n\n\nstatic void rcu_sysidle(unsigned long j)\n{\n\t\n\tswitch (ACCESS_ONCE(full_sysidle_state)) {\n\tcase RCU_SYSIDLE_NOT:\n\n\t\t\n\t\tACCESS_ONCE(full_sysidle_state) = RCU_SYSIDLE_SHORT;\n\t\tbreak;\n\n\tcase RCU_SYSIDLE_SHORT:\n\n\t\t\n\t\tif (ULONG_CMP_GE(jiffies, j + rcu_sysidle_delay()))\n\t\t\t(void)cmpxchg(&full_sysidle_state,\n\t\t\t\t      RCU_SYSIDLE_SHORT, RCU_SYSIDLE_LONG);\n\t\tbreak;\n\n\tcase RCU_SYSIDLE_LONG:\n\n\t\t\n\t\tif (ULONG_CMP_GE(jiffies, j + rcu_sysidle_delay()))\n\t\t\t(void)cmpxchg(&full_sysidle_state,\n\t\t\t\t      RCU_SYSIDLE_LONG, RCU_SYSIDLE_FULL);\n\t\tbreak;\n\n\tdefault:\n\t\tbreak;\n\t}\n}\n\n\nstatic void rcu_sysidle_cancel(void)\n{\n\tsmp_mb();\n\tif (full_sysidle_state >", "5612": "<= CONFIG_NO_HZ_FULL_SYSIDLE_SMALL)\n\t\treturn;  \n\tif (isidle)\n\t\trcu_sysidle(maxj);    \n\telse\n\t\trcu_sysidle_cancel(); \n}\n\n\nstatic void rcu_sysidle_report_gp(struct rcu_state *rsp, int isidle,\n\t\t\t\t  unsigned long maxj)\n{\n\t\n\tif (!tick_nohz_full_enabled())\n\t\treturn;\n\n\trcu_sysidle_report(rsp, isidle, maxj, true);\n}\n\n\nstruct rcu_sysidle_head {\n\tstruct rcu_head rh;\n\tint inuse;\n};\n\nstatic void rcu_sysidle_cb(struct rcu_head *rhp)\n{\n\tstruct rcu_sysidle_head *rshp;\n\n\t\n\tsmp_mb();  \n\n\trshp = container_of(rhp, struct rcu_sysidle_head, rh);\n\tACCESS_ONCE(rshp->", "5613": "<= CONFIG_NO_HZ_FULL_SYSIDLE_SMALL) {\n\t\tint oldrss = rss - 1;\n\n\t\t\n\t\twhile (rss < RCU_SYSIDLE_FULL && oldrss < rss) {\n\t\t\tint cpu;\n\t\t\tbool isidle = true;\n\t\t\tunsigned long maxj = jiffies - ULONG_MAX / 4;\n\t\t\tstruct rcu_data *rdp;\n\n\t\t\t\n\t\t\tfor_each_possible_cpu(cpu) {\n\t\t\t\trdp = per_cpu_ptr(rcu_state_p->", "5614": "<= HIBERNATION_MAX; i++) {\n\t\tif (!hibernation_modes[i])\n\t\t\tcontinue;\n\t\tswitch (i) {\n\t\tcase HIBERNATION_SHUTDOWN:\n\t\tcase HIBERNATION_REBOOT:\n#ifdef CONFIG_SUSPEND\n\t\tcase HIBERNATION_SUSPEND:\n#endif\n\t\t\tbreak;\n\t\tcase HIBERNATION_PLATFORM:\n\t\t\tif (hibernation_ops)\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcontinue;\n\t\t}\n\t\tif (i == hibernation_mode)\n\t\t\tbuf += sprintf(buf, \"[%s] \", hibernation_modes[i]);\n\t\telse\n\t\t\tbuf += sprintf(buf, \"%s \", hibernation_modes[i]);\n\t}\n\tbuf += sprintf(buf, \"\\n\");\n\treturn buf-start;\n}\n\nstatic ssize_t disk_store(struct kobject *kobj, struct kobj_attribute *attr,\n\t\t\t  const char *buf, size_t n)\n{\n\tint error = 0;\n\tint i;\n\tint len;\n\tchar *p;\n\tint mode = HIBERNATION_INVALID;\n\n\tif (!hibernation_available())\n\t\treturn -EPERM;\n\n\tp = memchr(buf, '\\n', n);\n\tlen = p ? p - buf : n;\n\n\tlock_system_sleep();\n\tfor (i = HIBERNATION_FIRST; i <= HIBERNATION_MAX; i++) {\n\t\tif (len == strlen(hibernation_modes[i])\n\t\t    && !strncmp(buf, hibernation_modes[i], len)) {\n\t\t\tmode = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (mode != HIBERNATION_INVALID) {\n\t\tswitch (mode) {\n\t\tcase HIBERNATION_SHUTDOWN:\n\t\tcase HIBERNATION_REBOOT:\n#ifdef CONFIG_SUSPEND\n\t\tcase HIBERNATION_SUSPEND:\n#endif\n\t\t\thibernation_mode = mode;\n\t\t\tbreak;\n\t\tcase HIBERNATION_PLATFORM:\n\t\t\tif (hibernation_ops)\n\t\t\t\thibernation_mode = mode;\n\t\t\telse\n\t\t\t\terror = -EINVAL;\n\t\t}\n\t} else\n\t\terror = -EINVAL;\n\n\tif (!error)\n\t\tpr_debug(\"PM: Hibernation mode set to '%s'\\n\",\n\t\t\t hibernation_modes[mode]);\n\tunlock_system_sleep();\n\treturn error ? error : n;\n}\n\npower_attr(disk);\n\nstatic ssize_t resume_show(struct kobject *kobj, struct kobj_attribute *attr,\n\t\t\t   char *buf)\n{\n\treturn sprintf(buf,\"%d:%d\\n\", MAJOR(swsusp_resume_device),\n\t\t       MINOR(swsusp_resume_device));\n}\n\nstatic ssize_t resume_store(struct kobject *kobj, struct kobj_attribute *attr,\n\t\t\t    const char *buf, size_t n)\n{\n\tdev_t res;\n\tint len = n;\n\tchar *name;\n\n\tif (len && buf[len-1] == '\\n')\n\t\tlen--;\n\tname = kstrndup(buf, len, GFP_KERNEL);\n\tif (!name)\n\t\treturn -ENOMEM;\n\n\tres = name_to_dev_t(name);\n\tkfree(name);\n\tif (!res)\n\t\treturn -EINVAL;\n\n\tlock_system_sleep();\n\tswsusp_resume_device = res;\n\tunlock_system_sleep();\n\tprintk(KERN_INFO \"PM: Starting manual resume from disk\\n\");\n\tnoresume = 0;\n\tsoftware_resume();\n\treturn n;\n}\n\npower_attr(resume);\n\nstatic ssize_t image_size_show(struct kobject *kobj, struct kobj_attribute *attr,\n\t\t\t       char *buf)\n{\n\treturn sprintf(buf, \"%lu\\n\", image_size);\n}\n\nstatic ssize_t image_size_store(struct kobject *kobj, struct kobj_attribute *attr,\n\t\t\t\tconst char *buf, size_t n)\n{\n\tunsigned long size;\n\n\tif (sscanf(buf, \"%lu\", &size) == 1) {\n\t\timage_size = size;\n\t\treturn n;\n\t}\n\n\treturn -EINVAL;\n}\n\npower_attr(image_size);\n\nstatic ssize_t reserved_size_show(struct kobject *kobj,\n\t\t\t\t  struct kobj_attribute *attr, char *buf)\n{\n\treturn sprintf(buf, \"%lu\\n\", reserved_size);\n}\n\nstatic ssize_t reserved_size_store(struct kobject *kobj,\n\t\t\t\t   struct kobj_attribute *attr,\n\t\t\t\t   const char *buf, size_t n)\n{\n\tunsigned long size;\n\n\tif (sscanf(buf, \"%lu\", &size) == 1) {\n\t\treserved_size = size;\n\t\treturn n;\n\t}\n\n\treturn -EINVAL;\n}\n\npower_attr(reserved_size);\n\nstatic struct attribute * g[] = {\n\t&disk_attr.attr,\n\t&resume_attr.attr,\n\t&image_size_attr.attr,\n\t&reserved_size_attr.attr,\n\tNULL,\n};\n\n\nstatic struct attribute_group attr_group = {\n\t.attrs = g,\n};\n\n\nstatic int __init pm_disk_init(void)\n{\n\treturn sysfs_create_group(power_kobj, &attr_group);\n}\n\ncore_initcall(pm_disk_init);\n\n\nstatic int __init resume_setup(char *str)\n{\n\tif (noresume)\n\t\treturn 1;\n\n\tstrncpy( resume_file, str, 255 );\n\treturn 1;\n}\n\nstatic int __init resume_offset_setup(char *str)\n{\n\tunsigned long long offset;\n\n\tif (noresume)\n\t\treturn 1;\n\n\tif (sscanf(str, \"%llu\", &offset) == 1)\n\t\tswsusp_resume_block = offset;\n\n\treturn 1;\n}\n\nstatic int __init hibernate_setup(char *str)\n{\n\tif (!strncmp(str, \"noresume\", 8))\n\t\tnoresume = 1;\n\telse if (!strncmp(str, \"nocompress\", 10))\n\t\tnocompress = 1;\n\telse if (!strncmp(str, \"no\", 2)) {\n\t\tnoresume = 1;\n\t\tnohibernate = 1;\n\t}\n\treturn 1;\n}\n\nstatic int __init noresume_setup(char *str)\n{\n\tnoresume = 1;\n\treturn 1;\n}\n\nstatic int __init resumewait_setup(char *str)\n{\n\tresume_wait = 1;\n\treturn 1;\n}\n\nstatic int __init resumedelay_setup(char *str)\n{\n\tint rc = kstrtouint(str, 0, &resume_delay);\n\n\tif (rc)\n\t\treturn rc;\n\treturn 1;\n}\n\nstatic int __init nohibernate_setup(char *str)\n{\n\tnoresume = 1;\n\tnohibernate = 1;\n\treturn 1;\n}\n\nstatic int __init kaslr_nohibernate_setup(char *str)\n{\n\treturn nohibernate_setup(str);\n}\n\n__setup(\"noresume\", noresume_setup);\n__setup(\"resume_offset=\", resume_offset_setup);\n__setup(\"resume=\", resume_setup);\n__setup(\"hibernate=\", hibernate_setup);\n__setup(\"resumewait\", resumewait_setup);\n__setup(\"resumedelay=\", resumedelay_setup);\n__setup(\"nohibernate\", nohibernate_setup);\n__setup(\"kaslr\", kaslr_nohibernate_setup);\n\n#include <linux/mutex.h>", "5615": "<= LOAD_AVG_PERIOD))\n\t\treturn runnable_avg_yN_sum[n];\n\telse if (unlikely(n >", "5616": "<= LONG_MAX &&\n\t    (ctx->", "5617": "<= MAX_LOCKDEP_CHAIN_HLOCKS)) {\n\t\tchain->", "5618": "<= MAX_NICE)\n\t\tret = apply_workqueue_attrs(wq, attrs);\n\telse\n\t\tret = -EINVAL;\n\n\tfree_workqueue_attrs(attrs);\n\treturn ret ?: count;\n}\n\nstatic ssize_t wq_cpumask_show(struct device *dev,\n\t\t\t       struct device_attribute *attr, char *buf)\n{\n\tstruct workqueue_struct *wq = dev_to_wq(dev);\n\tint written;\n\n\tmutex_lock(&wq->", "5619": "<= MAX_RCU_LVLS; i++)\n\t\tif (n <= rcu_capacity[i]) {\n\t\t\tfor (j = 0; j <= i; j++)\n\t\t\t\tnum_rcu_lvl[j] =\n\t\t\t\t\tDIV_ROUND_UP(n, rcu_capacity[i - j]);\n\t\t\trcu_num_lvls = i;\n\t\t\tfor (j = i + 1; j <= MAX_RCU_LVLS; j++)\n\t\t\t\tnum_rcu_lvl[j] = 0;\n\t\t\tbreak;\n\t\t}\n\n\t\n\trcu_num_nodes = 0;\n\tfor (i = 0; i <= MAX_RCU_LVLS; i++)\n\t\trcu_num_nodes += num_rcu_lvl[i];\n\trcu_num_nodes -= n;\n}\n\nvoid __init rcu_init(void)\n{\n\tint cpu;\n\n\trcu_early_boot_tests();\n\n\trcu_bootup_announce();\n\trcu_init_geometry();\n\trcu_init_one(&rcu_bh_state, &rcu_bh_data);\n\trcu_init_one(&rcu_sched_state, &rcu_sched_data);\n\t__rcu_init_preempt();\n\topen_softirq(RCU_SOFTIRQ, rcu_process_callbacks);\n\n\t\n\tcpu_notifier(rcu_cpu_notify, 0);\n\tpm_notifier(rcu_pm_notify, 0);\n\tfor_each_online_cpu(cpu)\n\t\trcu_cpu_notify(NULL, CPU_UP_PREPARE, (void *)(long)cpu);\n}\n\n#include \"tree_plugin.h\"\n\n#include <linux/module.h>", "5620": "<= MAX_RCU_LVLS; i++)\n\t\trcu_capacity[i] = rcu_capacity[i - 1] * CONFIG_RCU_FANOUT;\n\n\t\n\tif (rcu_fanout_leaf < CONFIG_RCU_FANOUT_LEAF ||\n\t    rcu_fanout_leaf >", "5621": "<= MSEC_PER_SEC && !(MSEC_PER_SEC % HZ)\n\treturn (MSEC_PER_SEC / HZ) * j;\n#elif HZ >", "5622": "<= PERF_EVENT_STATE_OFF)\n\t\t\tcontinue;\n\t\t\n\t\tif (!event_filter_match(event))\n\t\t\tcontinue;\n\n\t\t\n\t\tif (is_cgroup_event(event))\n\t\t\tperf_cgroup_mark_enabled(event, ctx);\n\n\t\tif (group_can_go_on(event, cpuctx, can_add_hw)) {\n\t\t\tif (group_sched_in(event, cpuctx, ctx))\n\t\t\t\tcan_add_hw = 0;\n\t\t}\n\t}\n}\n\nstatic void\nctx_sched_in(struct perf_event_context *ctx,\n\t     struct perf_cpu_context *cpuctx,\n\t     enum event_type_t event_type,\n\t     struct task_struct *task)\n{\n\tu64 now;\n\tint is_active = ctx->", "5623": "<= PERF_EVENT_STATE_OFF)\n\t\t\tcontinue;\n\t\tif (!event_filter_match(event))\n\t\t\tcontinue;\n\n\t\t\n\t\tif (is_cgroup_event(event))\n\t\t\tperf_cgroup_mark_enabled(event, ctx);\n\n\t\tif (group_can_go_on(event, cpuctx, 1))\n\t\t\tgroup_sched_in(event, cpuctx, ctx);\n\n\t\t\n\t\tif (event->", "5624": "<= PERF_EVENT_STATE_OFF)\n\t\treturn 0;\n\n\tevent->", "5625": "<= PFN_DOWN(addr) &&\n\t\t    PFN_DOWN(p->", "5626": "<= RCU_FANOUT_1\n#  define RCU_NUM_LVLS\t      1\n#  define NUM_RCU_LVL_0\t      1\n#  define NUM_RCU_LVL_1\t      (NR_CPUS)\n#  define NUM_RCU_LVL_2\t      0\n#  define NUM_RCU_LVL_3\t      0\n#  define NUM_RCU_LVL_4\t      0\n#elif NR_CPUS <= RCU_FANOUT_2\n#  define RCU_NUM_LVLS\t      2\n#  define NUM_RCU_LVL_0\t      1\n#  define NUM_RCU_LVL_1\t      DIV_ROUND_UP(NR_CPUS, RCU_FANOUT_1)\n#  define NUM_RCU_LVL_2\t      (NR_CPUS)\n#  define NUM_RCU_LVL_3\t      0\n#  define NUM_RCU_LVL_4\t      0\n#elif NR_CPUS <= RCU_FANOUT_3\n#  define RCU_NUM_LVLS\t      3\n#  define NUM_RCU_LVL_0\t      1\n#  define NUM_RCU_LVL_1\t      DIV_ROUND_UP(NR_CPUS, RCU_FANOUT_2)\n#  define NUM_RCU_LVL_2\t      DIV_ROUND_UP(NR_CPUS, RCU_FANOUT_1)\n#  define NUM_RCU_LVL_3\t      (NR_CPUS)\n#  define NUM_RCU_LVL_4\t      0\n#elif NR_CPUS <= RCU_FANOUT_4\n#  define RCU_NUM_LVLS\t      4\n#  define NUM_RCU_LVL_0\t      1\n#  define NUM_RCU_LVL_1\t      DIV_ROUND_UP(NR_CPUS, RCU_FANOUT_3)\n#  define NUM_RCU_LVL_2\t      DIV_ROUND_UP(NR_CPUS, RCU_FANOUT_2)\n#  define NUM_RCU_LVL_3\t      DIV_ROUND_UP(NR_CPUS, RCU_FANOUT_1)\n#  define NUM_RCU_LVL_4\t      (NR_CPUS)\n#else\n# error \"CONFIG_RCU_FANOUT insufficient for NR_CPUS\"\n#endif \n\n#define RCU_SUM (NUM_RCU_LVL_0 + NUM_RCU_LVL_1 + NUM_RCU_LVL_2 + NUM_RCU_LVL_3 + NUM_RCU_LVL_4)\n#define NUM_RCU_NODES (RCU_SUM - NR_CPUS)\n\nextern int rcu_num_lvls;\nextern int rcu_num_nodes;\n\n\nstruct rcu_dynticks {\n\tlong long dynticks_nesting; \n\t\t\t\t    \n\tint dynticks_nmi_nesting;   \n\tatomic_t dynticks;\t    \n#ifdef CONFIG_NO_HZ_FULL_SYSIDLE\n\tlong long dynticks_idle_nesting;\n\t\t\t\t    \n\tatomic_t dynticks_idle;\t    \n\t\t\t\t    \n\tunsigned long dynticks_idle_jiffies;\n\t\t\t\t    \n#endif \n#ifdef CONFIG_RCU_FAST_NO_HZ\n\tbool all_lazy;\t\t    \n\tunsigned long nonlazy_posted;\n\t\t\t\t    \n\tunsigned long nonlazy_posted_snap;\n\t\t\t\t    \n\tunsigned long last_accelerate;\n\t\t\t\t    \n\tunsigned long last_advance_all;\n\t\t\t\t    \n\tint tick_nohz_enabled_snap; \n#endif \n};\n\n\n#define RCU_KTHREAD_STOPPED  0\n#define RCU_KTHREAD_RUNNING  1\n#define RCU_KTHREAD_WAITING  2\n#define RCU_KTHREAD_OFFCPU   3\n#define RCU_KTHREAD_YIELDING 4\n#define RCU_KTHREAD_MAX      4\n\n\nstruct rcu_node {\n\traw_spinlock_t lock;\t\n\t\t\t\t\n\tunsigned long gpnum;\t\n\t\t\t\t\n\t\t\t\t\n\tunsigned long completed; \n\t\t\t\t\n\t\t\t\t\n\tunsigned long qsmask;\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\tunsigned long expmask;\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\tunsigned long qsmaskinit;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\tunsigned long qsmaskinitnext;\n\t\t\t\t\n\tunsigned long grpmask;\t\n\t\t\t\t\n\tint\tgrplo;\t\t\n\tint\tgrphi;\t\t\n\tu8\tgrpnum;\t\t\n\tu8\tlevel;\t\t\n\tbool\twait_blkd_tasks;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\tstruct rcu_node *parent;\n\tstruct list_head blkd_tasks;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\tstruct list_head *gp_tasks;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\tstruct list_head *exp_tasks;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n#ifdef CONFIG_RCU_BOOST\n\tstruct list_head *boost_tasks;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\tstruct rt_mutex boost_mtx;\n\t\t\t\t\n\t\t\t\t\n\tunsigned long boost_time;\n\t\t\t\t\n\tstruct task_struct *boost_kthread_task;\n\t\t\t\t\n\t\t\t\t\n\tunsigned int boost_kthread_status;\n\t\t\t\t\n\tunsigned long n_tasks_boosted;\n\t\t\t\t\n\tunsigned long n_exp_boosts;\n\t\t\t\t\n\tunsigned long n_normal_boosts;\n\t\t\t\t\n\tunsigned long n_balk_blkd_tasks;\n\t\t\t\t\n\tunsigned long n_balk_exp_gp_tasks;\n\t\t\t\t\n\tunsigned long n_balk_boost_tasks;\n\t\t\t\t\n\tunsigned long n_balk_notblocked;\n\t\t\t\t\n\tunsigned long n_balk_notyet;\n\t\t\t\t\n\tunsigned long n_balk_nos;\n\t\t\t\t\n\t\t\t\t\n#endif \n#ifdef CONFIG_RCU_NOCB_CPU\n\twait_queue_head_t nocb_gp_wq[2];\n\t\t\t\t\n#endif \n\tint need_future_gp[2];\n\t\t\t\t\n\traw_spinlock_t fqslock ____cacheline_internodealigned_in_smp;\n} ____cacheline_internodealigned_in_smp;\n\n\n#define rcu_for_each_node_breadth_first(rsp, rnp) \\\n\tfor ((rnp) = &(rsp)->", "5627": "<= RCU_NEXT_TAIL; i++) {\n\t\trdp->", "5628": "<= RINGBUF_TYPE_DATA_TYPE_LEN_MAX)\n\t\tcpu_buffer->", "5629": "<= SEND_SIG_FORCED;\n}\n\nstatic inline bool si_fromuser(const struct siginfo *info)\n{\n\treturn info == SEND_SIG_NOINFO ||\n\t\t(!is_si_special(info) && SI_FROMUSER(info));\n}\n\n\nstatic int kill_ok_by_cred(struct task_struct *t)\n{\n\tconst struct cred *cred = current_cred();\n\tconst struct cred *tcred = __task_cred(t);\n\n\tif (uid_eq(cred->", "5630": "<= TEST_MAX; level++)\n\t\tif (pm_tests[level]) {\n\t\t\tif (level == pm_test_level)\n\t\t\t\ts += sprintf(s, \"[%s] \", pm_tests[level]);\n\t\t\telse\n\t\t\t\ts += sprintf(s, \"%s \", pm_tests[level]);\n\t\t}\n\n\tif (s != buf)\n\t\t\n\t\t*(s-1) = '\\n';\n\n\treturn (s - buf);\n}\n\nstatic ssize_t pm_test_store(struct kobject *kobj, struct kobj_attribute *attr,\n\t\t\t\tconst char *buf, size_t n)\n{\n\tconst char * const *s;\n\tint level;\n\tchar *p;\n\tint len;\n\tint error = -EINVAL;\n\n\tp = memchr(buf, '\\n', n);\n\tlen = p ? p - buf : n;\n\n\tlock_system_sleep();\n\n\tlevel = TEST_FIRST;\n\tfor (s = &pm_tests[level]; level <= TEST_MAX; s++, level++)\n\t\tif (*s && len == strlen(*s) && !strncmp(buf, *s, len)) {\n\t\t\tpm_test_level = level;\n\t\t\terror = 0;\n\t\t\tbreak;\n\t\t}\n\n\tunlock_system_sleep();\n\n\treturn error ? error : n;\n}\n\npower_attr(pm_test);\n#endif \n\n#ifdef CONFIG_DEBUG_FS\nstatic char *suspend_step_name(enum suspend_stat_step step)\n{\n\tswitch (step) {\n\tcase SUSPEND_FREEZE:\n\t\treturn \"freeze\";\n\tcase SUSPEND_PREPARE:\n\t\treturn \"prepare\";\n\tcase SUSPEND_SUSPEND:\n\t\treturn \"suspend\";\n\tcase SUSPEND_SUSPEND_NOIRQ:\n\t\treturn \"suspend_noirq\";\n\tcase SUSPEND_RESUME_NOIRQ:\n\t\treturn \"resume_noirq\";\n\tcase SUSPEND_RESUME:\n\t\treturn \"resume\";\n\tdefault:\n\t\treturn \"\";\n\t}\n}\n\nstatic int suspend_stats_show(struct seq_file *s, void *unused)\n{\n\tint i, index, last_dev, last_errno, last_step;\n\n\tlast_dev = suspend_stats.last_failed_dev + REC_FAILED_NUM - 1;\n\tlast_dev %= REC_FAILED_NUM;\n\tlast_errno = suspend_stats.last_failed_errno + REC_FAILED_NUM - 1;\n\tlast_errno %= REC_FAILED_NUM;\n\tlast_step = suspend_stats.last_failed_step + REC_FAILED_NUM - 1;\n\tlast_step %= REC_FAILED_NUM;\n\tseq_printf(s, \"%s: %d\\n%s: %d\\n%s: %d\\n%s: %d\\n%s: %d\\n\"\n\t\t\t\"%s: %d\\n%s: %d\\n%s: %d\\n%s: %d\\n%s: %d\\n\",\n\t\t\t\"success\", suspend_stats.success,\n\t\t\t\"fail\", suspend_stats.fail,\n\t\t\t\"failed_freeze\", suspend_stats.failed_freeze,\n\t\t\t\"failed_prepare\", suspend_stats.failed_prepare,\n\t\t\t\"failed_suspend\", suspend_stats.failed_suspend,\n\t\t\t\"failed_suspend_late\",\n\t\t\t\tsuspend_stats.failed_suspend_late,\n\t\t\t\"failed_suspend_noirq\",\n\t\t\t\tsuspend_stats.failed_suspend_noirq,\n\t\t\t\"failed_resume\", suspend_stats.failed_resume,\n\t\t\t\"failed_resume_early\",\n\t\t\t\tsuspend_stats.failed_resume_early,\n\t\t\t\"failed_resume_noirq\",\n\t\t\t\tsuspend_stats.failed_resume_noirq);\n\tseq_printf(s,\t\"failures:\\n  last_failed_dev:\\t%-s\\n\",\n\t\t\tsuspend_stats.failed_devs[last_dev]);\n\tfor (i = 1; i < REC_FAILED_NUM; i++) {\n\t\tindex = last_dev + REC_FAILED_NUM - i;\n\t\tindex %= REC_FAILED_NUM;\n\t\tseq_printf(s, \"\\t\\t\\t%-s\\n\",\n\t\t\tsuspend_stats.failed_devs[index]);\n\t}\n\tseq_printf(s,\t\"  last_failed_errno:\\t%-d\\n\",\n\t\t\tsuspend_stats.errno[last_errno]);\n\tfor (i = 1; i < REC_FAILED_NUM; i++) {\n\t\tindex = last_errno + REC_FAILED_NUM - i;\n\t\tindex %= REC_FAILED_NUM;\n\t\tseq_printf(s, \"\\t\\t\\t%-d\\n\",\n\t\t\tsuspend_stats.errno[index]);\n\t}\n\tseq_printf(s,\t\"  last_failed_step:\\t%-s\\n\",\n\t\t\tsuspend_step_name(\n\t\t\t\tsuspend_stats.failed_steps[last_step]));\n\tfor (i = 1; i < REC_FAILED_NUM; i++) {\n\t\tindex = last_step + REC_FAILED_NUM - i;\n\t\tindex %= REC_FAILED_NUM;\n\t\tseq_printf(s, \"\\t\\t\\t%-s\\n\",\n\t\t\tsuspend_step_name(\n\t\t\t\tsuspend_stats.failed_steps[index]));\n\t}\n\n\treturn 0;\n}\n\nstatic int suspend_stats_open(struct inode *inode, struct file *file)\n{\n\treturn single_open(file, suspend_stats_show, NULL);\n}\n\nstatic const struct file_operations suspend_stats_operations = {\n\t.open           = suspend_stats_open,\n\t.read           = seq_read,\n\t.llseek         = seq_lseek,\n\t.release        = single_release,\n};\n\nstatic int __init pm_debugfs_init(void)\n{\n\tdebugfs_create_file(\"suspend_stats\", S_IFREG | S_IRUGO,\n\t\t\tNULL, NULL, &suspend_stats_operations);\n\treturn 0;\n}\n\nlate_initcall(pm_debugfs_init);\n#endif \n\n#endif \n\n#ifdef CONFIG_PM_SLEEP_DEBUG\n\nbool pm_print_times_enabled;\n\nstatic ssize_t pm_print_times_show(struct kobject *kobj,\n\t\t\t\t   struct kobj_attribute *attr, char *buf)\n{\n\treturn sprintf(buf, \"%d\\n\", pm_print_times_enabled);\n}\n\nstatic ssize_t pm_print_times_store(struct kobject *kobj,\n\t\t\t\t    struct kobj_attribute *attr,\n\t\t\t\t    const char *buf, size_t n)\n{\n\tunsigned long val;\n\n\tif (kstrtoul(buf, 10, &val))\n\t\treturn -EINVAL;\n\n\tif (val >", "5631": "<= USEC_PER_SEC && !(USEC_PER_SEC % HZ)\n\treturn (USEC_PER_SEC / HZ) * j;\n#elif HZ >", "5632": "<= USEC_PER_SEC && !(USEC_PER_SEC % HZ)\n\treturn (u + (USEC_PER_SEC / HZ) - 1) / (USEC_PER_SEC / HZ);\n#elif HZ >", "5633": "<= WL_GC_COUNT_MAX)\n\t\treturn;\n\n\tnow = ktime_get();\n\tlist_for_each_entry_safe_reverse(wl, aux, &wakelocks_lru_list, lru) {\n\t\tu64 idle_time_ns;\n\t\tbool active;\n\n\t\tspin_lock_irq(&wl->", "5634": "<= addr\n\t\t    && mod->", "5635": "<= addr)\n\t\t\tlow = mid;\n\t\telse\n\t\t\thigh = mid;\n\t}\n\n\t\n\twhile (low && kallsyms_addresses[low-1] == kallsyms_addresses[low])\n\t\t--low;\n\n\tsymbol_start = kallsyms_addresses[low];\n\n\t\n\tfor (i = low + 1; i < kallsyms_num_syms; i++) {\n\t\tif (kallsyms_addresses[i] >", "5636": "<= alloc_normal)\n\t\treturn 0;\n\n\talloc = avail_normal - alloc_normal;\n\tif (nr_pages < alloc)\n\t\talloc = nr_pages;\n\n\treturn preallocate_image_pages(alloc, GFP_IMAGE);\n}\n\n#ifdef CONFIG_HIGHMEM\nstatic unsigned long preallocate_image_highmem(unsigned long nr_pages)\n{\n\treturn preallocate_image_pages(nr_pages, GFP_IMAGE | __GFP_HIGHMEM);\n}\n\n\nstatic unsigned long __fraction(u64 x, u64 multiplier, u64 base)\n{\n\tx *= multiplier;\n\tdo_div(x, base);\n\treturn (unsigned long)x;\n}\n\nstatic unsigned long preallocate_highmem_fraction(unsigned long nr_pages,\n\t\t\t\t\t\tunsigned long highmem,\n\t\t\t\t\t\tunsigned long total)\n{\n\tunsigned long alloc = __fraction(nr_pages, highmem, total);\n\n\treturn preallocate_image_pages(alloc, GFP_IMAGE | __GFP_HIGHMEM);\n}\n#else \nstatic inline unsigned long preallocate_image_highmem(unsigned long nr_pages)\n{\n\treturn 0;\n}\n\nstatic inline unsigned long preallocate_highmem_fraction(unsigned long nr_pages,\n\t\t\t\t\t\tunsigned long highmem,\n\t\t\t\t\t\tunsigned long total)\n{\n\treturn 0;\n}\n#endif \n\n\nstatic unsigned long free_unnecessary_pages(void)\n{\n\tunsigned long save, to_free_normal, to_free_highmem, free;\n\n\tsave = count_data_pages();\n\tif (alloc_normal >", "5637": "<= allowed_ns)\n\t\treturn;\n\n\tif (max_samples_per_tick <= 1)\n\t\treturn;\n\n\tmax_samples_per_tick = DIV_ROUND_UP(max_samples_per_tick, 2);\n\tsysctl_perf_event_sample_rate = max_samples_per_tick * HZ;\n\tperf_sample_period_ns = NSEC_PER_SEC / sysctl_perf_event_sample_rate;\n\n\tupdate_perf_cpu_limits();\n\n\tif (!irq_work_queue(&perf_duration_work)) {\n\t\tearly_printk(\"perf interrupt took too long (%lld >", "5638": "<= audit_backlog_limit)\n\t\t\t\twake_up(&audit_backlog_wait);\n\t\t\tif (audit_pid)\n\t\t\t\tkauditd_send_skb(skb);\n\t\t\telse\n\t\t\t\taudit_printk_skb(skb);\n\t\t\tcontinue;\n\t\t}\n\n\t\twait_event_freezable(kauditd_wait, skb_queue_len(&audit_skb_queue));\n\t}\n\treturn 0;\n}\n\nint audit_send_list(void *_dest)\n{\n\tstruct audit_netlink_list *dest = _dest;\n\tstruct sk_buff *skb;\n\tstruct net *net = dest->", "5639": "<= bp_vaddr) {\n\t\tif (valid_vma(vma, false)) {\n\t\t\tstruct inode *inode = file_inode(vma->", "5640": "<= busiest->", "5641": "<= crashk_res.end) {\n\t\tunsigned long i;\n\n\t\tif (hole_end >", "5642": "<= ctx->", "5643": "<= end))\n\t\tgoto out;\n\n\ttmp = parent->", "5644": "<= env->", "5645": "<= ext->", "5646": "<= extent->", "5647": "<= fp_old->", "5648": "<= handle->", "5649": "<= interval)))\n\t\treturn;\n\n\t\n\tnegative = (tick_error < 0);\n\n\t\n\ttick_error = abs(tick_error);\n\tfor (adj = 0; tick_error >", "5650": "<= is_cpu_exclusive(q) &&\n\t\tis_mem_exclusive(p) <= is_mem_exclusive(q);\n}\n\n\nstatic struct cpuset *alloc_trial_cpuset(struct cpuset *cs)\n{\n\tstruct cpuset *trial;\n\n\ttrial = kmemdup(cs, sizeof(*cs), GFP_KERNEL);\n\tif (!trial)\n\t\treturn NULL;\n\n\tif (!alloc_cpumask_var(&trial->", "5651": "<= jiffies_to_usecs(1) * 1000) {\n\t\t\n\t} else if (gran == 1000000000) {\n\t\tt.tv_nsec = 0;\n\t} else {\n\t\tt.tv_nsec -= t.tv_nsec % gran;\n\t}\n\treturn t;\n}\nEXPORT_SYMBOL(timespec_trunc);\n\n\ntime64_t mktime64(const unsigned int year0, const unsigned int mon0,\n\t\tconst unsigned int day, const unsigned int hour,\n\t\tconst unsigned int min, const unsigned int sec)\n{\n\tunsigned int mon = mon0, year = year0;\n\n\t\n\tif (0 >", "5652": "<= kdb_init_lvl)\n\t\treturn;\n\tfor (i = kdb_init_lvl; i < lvl; i++) {\n\t\tswitch (i) {\n\t\tcase KDB_NOT_INITIALIZED:\n\t\t\tkdb_inittab();\t\t\n\t\t\tkdb_initbptab();\t\n\t\t\tbreak;\n\t\tcase KDB_INIT_EARLY:\n\t\t\tkdb_cmd_init();\t\t\n\t\t\tbreak;\n\t\t}\n\t}\n\tkdb_init_lvl = lvl;\n}\n\n\n#define pr_fmt(fmt) KBUILD_MODNAME \": \" fmt\n\n#include <linux/kernel.h>", "5653": "<= last &&\n\t\t    (id2 >", "5654": "<= last)\n\t\t\tbreak;\n\t}\n\t\n\tif (idx < extents)\n\t\tid = (id - first) + map->", "5655": "<= last))\n\t\t\tbreak;\n\t}\n\t\n\tif (idx < extents)\n\t\tid = (id - first) + map->", "5656": "<= lower_last) &&\n\t\t    (prev_lower_last >", "5657": "<= max_scan; ++i) {\n\t\tif (unlikely(!map->", "5658": "<= mem_from ||\n\t\tmem_from + mem_len <= lock_from;\n}\n\n\nvoid debug_check_no_locks_freed(const void *mem_from, unsigned long mem_len)\n{\n\tstruct task_struct *curr = current;\n\tstruct held_lock *hlock;\n\tunsigned long flags;\n\tint i;\n\n\tif (unlikely(!debug_locks))\n\t\treturn;\n\n\tlocal_irq_save(flags);\n\tfor (i = 0; i < curr->", "5659": "<= mend)) {\n\t\t\t\t\n\t\t\t\thole_start = (mend + (size - 1)) & ~(size - 1);\n\t\t\t\thole_end   = hole_start + size - 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (i == image->", "5660": "<= mm->", "5661": "<= now.tv64) {\n\t\t\t\tcpumask_set_cpu(cpu, tick_broadcast_force_mask);\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\t\n\t\t\ttick_program_event(dev->", "5662": "<= now.tv64) {\n\t\t\tcpumask_set_cpu(cpu, tmpmask);\n\t\t\t\n\t\t\tcpumask_set_cpu(cpu, tick_broadcast_pending_mask);\n\t\t} else if (td->", "5663": "<= nr; i++)\n\t\tperf_mmap_unmark_page(base + (i * PAGE_SIZE));\n\n\tvfree(base);\n\tkfree(rb);\n}\n\nvoid rb_free(struct ring_buffer *rb)\n{\n\tschedule_work(&rb->", "5664": "<= nr_meta_pages + 1) {\n\t\terror = unpack_orig_pfns(buffer, &copy_bm);\n\t\tif (error)\n\t\t\treturn error;\n\n\t\tif (handle->", "5665": "<= nr_meta_pages + nr_copy_pages);\n}\n\n#ifdef CONFIG_HIGHMEM\n\nstatic inline void\nswap_two_pages_data(struct page *p1, struct page *p2, void *buf)\n{\n\tvoid *kaddr1, *kaddr2;\n\n\tkaddr1 = kmap_atomic(p1);\n\tkaddr2 = kmap_atomic(p2);\n\tcopy_page(buf, kaddr1);\n\tcopy_page(kaddr1, kaddr2);\n\tcopy_page(kaddr2, buf);\n\tkunmap_atomic(kaddr2);\n\tkunmap_atomic(kaddr1);\n}\n\n\n\nint restore_highmem(void)\n{\n\tstruct highmem_pbe *pbe = highmem_pblist;\n\tvoid *buf;\n\n\tif (!pbe)\n\t\treturn 0;\n\n\tbuf = get_image_page(GFP_ATOMIC, PG_SAFE);\n\tif (!buf)\n\t\treturn -ENOMEM;\n\n\twhile (pbe) {\n\t\tswap_two_pages_data(pbe->", "5666": "<= nr_meta_pages) {\n\t\tclear_page(buffer);\n\t\tpack_pfns(buffer, &orig_bm);\n\t} else {\n\t\tstruct page *page;\n\n\t\tpage = pfn_to_page(memory_bm_next_pfn(&copy_bm));\n\t\tif (PageHighMem(page)) {\n\t\t\t\n\t\t\tvoid *kaddr;\n\n\t\t\tkaddr = kmap_atomic(page);\n\t\t\tcopy_page(buffer, kaddr);\n\t\t\tkunmap_atomic(kaddr);\n\t\t\thandle->", "5667": "<= ns->", "5668": "<= p->", "5669": "<= pi->", "5670": "<= pid)\n\t\t\t\tindex = mid + 1;\n\t\t\telse\n\t\t\t\tend = mid;\n\t\t}\n\t}\n\t\n\tif (index >", "5671": "<= pid->", "5672": "<= prctl_map->", "5673": "<= prev_eff_load;\n\n\tschedstat_inc(p, se.statistics.nr_wakeups_affine_attempts);\n\n\tif (!balanced)\n\t\treturn 0;\n\n\tschedstat_inc(sd, ttwu_move_affine);\n\tschedstat_inc(p, se.statistics.nr_wakeups_affine);\n\n\treturn 1;\n}\n\n\nstatic struct sched_group *\nfind_idlest_group(struct sched_domain *sd, struct task_struct *p,\n\t\t  int this_cpu, int sd_flag)\n{\n\tstruct sched_group *idlest = NULL, *group = sd->", "5674": "<= pse_depth) {\n\t\t\t\tput_prev_entity(cfs_rq_of(pse), pse);\n\t\t\t\tpse = parent_entity(pse);\n\t\t\t}\n\t\t\tif (se_depth >", "5675": "<= qlowmark)\n\t\trdp->", "5676": "<= range[j].start && end < range[j].end &&\n\t\t    range[j].start < end) {\n\t\t\trange[j].start = end;\n\t\t\tcontinue;\n\t\t}\n\n\n\t\tif (start >", "5677": "<= real_ns) ? 0 : cpu_ns - real_ns;\n}\n\nstatic void set_cpu_itimer(struct task_struct *tsk, unsigned int clock_id,\n\t\t\t   const struct itimerval *const value,\n\t\t\t   struct itimerval *const ovalue)\n{\n\tcputime_t cval, nval, cinterval, ninterval;\n\ts64 ns_ninterval, ns_nval;\n\tu32 error, incr_error;\n\tstruct cpu_itimer *it = &tsk->", "5678": "<= res->", "5679": "<= rnp->", "5680": "<= s->", "5681": "<= sds->", "5682": "<= sgs->", "5683": "<= size ? 0 : saveable - size;\n}\n\n\nint hibernate_preallocate_memory(void)\n{\n\tstruct zone *zone;\n\tunsigned long saveable, size, max_size, count, highmem, pages = 0;\n\tunsigned long alloc, save_highmem, pages_highmem, avail_normal;\n\tktime_t start, stop;\n\tint error;\n\n\tprintk(KERN_INFO \"PM: Preallocating image memory... \");\n\tstart = ktime_get();\n\n\terror = memory_bm_create(&orig_bm, GFP_IMAGE, PG_ANY);\n\tif (error)\n\t\tgoto err_out;\n\n\terror = memory_bm_create(&copy_bm, GFP_IMAGE, PG_ANY);\n\tif (error)\n\t\tgoto err_out;\n\n\talloc_normal = 0;\n\talloc_highmem = 0;\n\n\t\n\tsave_highmem = count_highmem_pages();\n\tsaveable = count_data_pages();\n\n\t\n\tcount = saveable;\n\tsaveable += save_highmem;\n\thighmem = save_highmem;\n\tsize = 0;\n\tfor_each_populated_zone(zone) {\n\t\tsize += snapshot_additional_pages(zone);\n\t\tif (is_highmem(zone))\n\t\t\thighmem += zone_page_state(zone, NR_FREE_PAGES);\n\t\telse\n\t\t\tcount += zone_page_state(zone, NR_FREE_PAGES);\n\t}\n\tavail_normal = count;\n\tcount += highmem;\n\tcount -= totalreserve_pages;\n\n\t\n\tsize += page_key_additional_pages(saveable);\n\n\t\n\tmax_size = (count - (size + PAGES_FOR_IO)) / 2\n\t\t\t- 2 * DIV_ROUND_UP(reserved_size, PAGE_SIZE);\n\t\n\tsize = DIV_ROUND_UP(image_size, PAGE_SIZE);\n\tif (size >", "5684": "<= size; i++, j++) {\n\t\tstruct audit_tree *s;\n\t\tif (&chunk->", "5685": "<= sizeof(*word)) {\n\t\t\tdiag = kdb_getphys(&w8, addr, sizeof(w8));\n\t\t\tif (!diag)\n\t\t\t\t*word = w8;\n\t\t\tbreak;\n\t\t}\n\t\t\n\tdefault:\n\t\tdiag = KDB_BADWIDTH;\n\t\tkdb_printf(\"kdb_getphysword: bad width %ld\\n\", (long) size);\n\t}\n\treturn diag;\n}\n\n\nint kdb_getword(unsigned long *word, unsigned long addr, size_t size)\n{\n\tint diag;\n\t__u8  w1;\n\t__u16 w2;\n\t__u32 w4;\n\t__u64 w8;\n\t*word = 0;\t\n\tswitch (size) {\n\tcase 1:\n\t\tdiag = kdb_getarea(w1, addr);\n\t\tif (!diag)\n\t\t\t*word = w1;\n\t\tbreak;\n\tcase 2:\n\t\tdiag = kdb_getarea(w2, addr);\n\t\tif (!diag)\n\t\t\t*word = w2;\n\t\tbreak;\n\tcase 4:\n\t\tdiag = kdb_getarea(w4, addr);\n\t\tif (!diag)\n\t\t\t*word = w4;\n\t\tbreak;\n\tcase 8:\n\t\tif (size <= sizeof(*word)) {\n\t\t\tdiag = kdb_getarea(w8, addr);\n\t\t\tif (!diag)\n\t\t\t\t*word = w8;\n\t\t\tbreak;\n\t\t}\n\t\t\n\tdefault:\n\t\tdiag = KDB_BADWIDTH;\n\t\tkdb_printf(\"kdb_getword: bad width %ld\\n\", (long) size);\n\t}\n\treturn diag;\n}\n\n\nint kdb_putword(unsigned long addr, unsigned long word, size_t size)\n{\n\tint diag;\n\t__u8  w1;\n\t__u16 w2;\n\t__u32 w4;\n\t__u64 w8;\n\tswitch (size) {\n\tcase 1:\n\t\tw1 = word;\n\t\tdiag = kdb_putarea(addr, w1);\n\t\tbreak;\n\tcase 2:\n\t\tw2 = word;\n\t\tdiag = kdb_putarea(addr, w2);\n\t\tbreak;\n\tcase 4:\n\t\tw4 = word;\n\t\tdiag = kdb_putarea(addr, w4);\n\t\tbreak;\n\tcase 8:\n\t\tif (size <= sizeof(word)) {\n\t\t\tw8 = word;\n\t\t\tdiag = kdb_putarea(addr, w8);\n\t\t\tbreak;\n\t\t}\n\t\t\n\tdefault:\n\t\tdiag = KDB_BADWIDTH;\n\t\tkdb_printf(\"kdb_putword: bad width %ld\\n\", (long) size);\n\t}\n\treturn diag;\n}\n\n\n\n\n#define UNRUNNABLE\t(1UL << (8*sizeof(unsigned long) - 1))\n#define RUNNING\t\t(1UL << (8*sizeof(unsigned long) - 2))\n#define IDLE\t\t(1UL << (8*sizeof(unsigned long) - 3))\n#define DAEMON\t\t(1UL << (8*sizeof(unsigned long) - 4))\n\nunsigned long kdb_task_state_string(const char *s)\n{\n\tlong res = 0;\n\tif (!s) {\n\t\ts = kdbgetenv(\"PS\");\n\t\tif (!s)\n\t\t\ts = \"DRSTCZEU\";\t\n\t}\n\twhile (*s) {\n\t\tswitch (*s) {\n\t\tcase 'D':\n\t\t\tres |= TASK_UNINTERRUPTIBLE;\n\t\t\tbreak;\n\t\tcase 'R':\n\t\t\tres |= RUNNING;\n\t\t\tbreak;\n\t\tcase 'S':\n\t\t\tres |= TASK_INTERRUPTIBLE;\n\t\t\tbreak;\n\t\tcase 'T':\n\t\t\tres |= TASK_STOPPED;\n\t\t\tbreak;\n\t\tcase 'C':\n\t\t\tres |= TASK_TRACED;\n\t\t\tbreak;\n\t\tcase 'Z':\n\t\t\tres |= EXIT_ZOMBIE << 16;\n\t\t\tbreak;\n\t\tcase 'E':\n\t\t\tres |= EXIT_DEAD << 16;\n\t\t\tbreak;\n\t\tcase 'U':\n\t\t\tres |= UNRUNNABLE;\n\t\t\tbreak;\n\t\tcase 'I':\n\t\t\tres |= IDLE;\n\t\t\tbreak;\n\t\tcase 'M':\n\t\t\tres |= DAEMON;\n\t\t\tbreak;\n\t\tcase 'A':\n\t\t\tres = ~0UL;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t  kdb_printf(\"%s: unknown flag '%c' ignored\\n\",\n\t\t\t\t     __func__, *s);\n\t\t\t  break;\n\t\t}\n\t\t++s;\n\t}\n\treturn res;\n}\n\n\nchar kdb_task_state_char (const struct task_struct *p)\n{\n\tint cpu;\n\tchar state;\n\tunsigned long tmp;\n\n\tif (!p || probe_kernel_read(&tmp, (char *)p, sizeof(unsigned long)))\n\t\treturn 'E';\n\n\tcpu = kdb_process_cpu(p);\n\tstate = (p->", "5686": "<= sizeof(ms))\n\t\treturn -EBADMSG;\n\n\tmemcpy(&ms, mod + (modlen - sizeof(ms)), sizeof(ms));\n\tmodlen -= sizeof(ms);\n\n\tsig_len = be32_to_cpu(ms.sig_len);\n\tif (sig_len >", "5687": "<= skb_tail_pointer(skb))\n\t\treturn ptr;\n\n\treturn NULL;\n}\n\nstruct bpf_prog *bpf_prog_alloc(unsigned int size, gfp_t gfp_extra_flags)\n{\n\tgfp_t gfp_flags = GFP_KERNEL | __GFP_HIGHMEM | __GFP_ZERO |\n\t\t\t  gfp_extra_flags;\n\tstruct bpf_prog_aux *aux;\n\tstruct bpf_prog *fp;\n\n\tsize = round_up(size, PAGE_SIZE);\n\tfp = __vmalloc(size, gfp_flags, PAGE_KERNEL);\n\tif (fp == NULL)\n\t\treturn NULL;\n\n\taux = kzalloc(sizeof(*aux), GFP_KERNEL | gfp_extra_flags);\n\tif (aux == NULL) {\n\t\tvfree(fp);\n\t\treturn NULL;\n\t}\n\n\tfp->", "5688": "<= slot_addr && slot_addr < vma_end) {\n\t\tunsigned long offset;\n\t\tint slot_nr;\n\n\t\toffset = slot_addr - area->", "5689": "<= start && end <= p->", "5690": "<= start && res->", "5691": "<= start) {\n\t\t\t\tpr_warn(\"crashkernel: end <= start\\n\");\n\t\t\t\treturn -EINVAL;\n\t\t\t}\n\t\t}\n\n\t\tif (*cur != ':') {\n\t\t\tpr_warn(\"crashkernel: ':' expected\\n\");\n\t\t\treturn -EINVAL;\n\t\t}\n\t\tcur++;\n\n\t\tsize = memparse(cur, &tmp);\n\t\tif (cur == tmp) {\n\t\t\tpr_warn(\"Memory value expected\\n\");\n\t\t\treturn -EINVAL;\n\t\t}\n\t\tcur = tmp;\n\t\tif (size >", "5692": "<= suspend) {\n\t\t\tacct->", "5693": "<= task->", "5694": "<= task_rlimit(p, RLIMIT_NICE) ||\n\t\tcapable(CAP_SYS_NICE));\n}\n\n#ifdef __ARCH_WANT_SYS_NICE\n\n\nSYSCALL_DEFINE1(nice, int, increment)\n{\n\tlong nice, retval;\n\n\t\n\tincrement = clamp(increment, -NICE_WIDTH, NICE_WIDTH);\n\tnice = task_nice(current) + increment;\n\n\tnice = clamp_val(nice, MIN_NICE, MAX_NICE);\n\tif (increment < 0 && !can_nice(current, nice))\n\t\treturn -EPERM;\n\n\tretval = security_task_setnice(current, nice);\n\tif (retval)\n\t\treturn retval;\n\n\tset_user_nice(current, nice);\n\treturn 0;\n}\n\n#endif\n\n\nint task_prio(const struct task_struct *p)\n{\n\treturn p->", "5695": "<= tick_period.tv64)\n\t\treturn;\n\n\ttick_nohz_restart(ts, now);\n#endif\n}\n\nstatic inline void tick_nohz_irq_enter(void)\n{\n\tstruct tick_sched *ts = this_cpu_ptr(&tick_cpu_sched);\n\tktime_t now;\n\n\tif (!ts->", "5696": "<= tmp->", "5697": "<= tp->", "5698": "<= upper_last) &&\n\t\t    (prev_upper_last >", "5699": "<= vma->", "5700": "<==%s() = ok\\n\", __func__);\n\treturn pks;\n\nerror:\n\tkfree(pks);\nerror_no_pks:\n\tcrypto_free_shash(tfm);\n\tpr_devel(\"<==%s() = %d\\n\", __func__, ret);\n\treturn ERR_PTR(ret);\n}\n\n\nstatic int mod_extract_mpi_array(struct public_key_signature *pks,\n\t\t\t\t const void *data, size_t len)\n{\n\tsize_t nbytes;\n\tMPI mpi;\n\n\tif (len < 3)\n\t\treturn -EBADMSG;\n\tnbytes = ((const u8 *)data)[0] << 8 | ((const u8 *)data)[1];\n\tdata += 2;\n\tlen -= 2;\n\tif (len != nbytes)\n\t\treturn -EBADMSG;\n\n\tmpi = mpi_read_raw_data(data, nbytes);\n\tif (!mpi)\n\t\treturn -ENOMEM;\n\tpks->", "5701": "<AUDIT_NR_FILTERS; i++) {\n\t\tlist_for_each_entry(r, &audit_rules_list[i], list) {\n\t\t\tstruct audit_rule_data *data;\n\n\t\t\tdata = audit_krule_to_data(r);\n\t\t\tif (unlikely(!data))\n\t\t\t\tbreak;\n\t\t\tskb = audit_make_reply(portid, seq, AUDIT_LIST_RULES,\n\t\t\t\t\t       0, 1, data,\n\t\t\t\t\t       sizeof(*data) + data->", "5702": "<Interrupt>", "5703": "<asm-generic/mutex-null.h>", "5704": "<asm-generic/sections.h>", "5705": "<asm/bitsperlong.h>", "5706": "<asm/byteorder.h>", "5707": "<asm/cacheflush.h>", "5708": "<asm/div64.h>", "5709": "<asm/dma.h>", "5710": "<asm/errno.h>", "5711": "<asm/io.h>", "5712": "<asm/irq_regs.h>", "5713": "<asm/local.h>", "5714": "<asm/mcs_spinlock.h>", "5715": "<asm/mmu_context.h>", "5716": "<asm/mutex.h>", "5717": "<asm/nmi.h>", "5718": "<asm/page.h>", "5719": "<asm/param.h>", "5720": "<asm/paravirt.h>", "5721": "<asm/pgalloc.h>", "5722": "<asm/pgtable.h>", "5723": "<asm/processor.h>", "5724": "<asm/ptrace.h>", "5725": "<asm/qrwlock.h>", "5726": "<asm/sections.h>", "5727": "<asm/setup.h>", "5728": "<asm/siginfo.h>", "5729": "<asm/stacktrace.h>", "5730": "<asm/switch_to.h>", "5731": "<asm/syscall.h>", "5732": "<asm/timex.h>", "5733": "<asm/tlb.h>", "5734": "<asm/tlbflush.h>", "5735": "<asm/types.h>", "5736": "<asm/uaccess.h>", "5737": "<asm/unaligned.h>", "5738": "<asm/unistd.h>", "5739": "<crypto/hash.h>", "5740": "<crypto/sha.h>", "5741": "<event>", "5742": "<filter>", "5743": "<function>", "5744": "<generated/utsrelease.h>", "5745": "<keys/asymmetric-type.h>", "5746": "<keys/system_keyring.h>", "5747": "<keys/user-type.h>", "5748": "<linux/acct.h>", "5749": "<linux/acpi.h>", "5750": "<linux/aio.h>", "5751": "<linux/alarmtimer.h>", "5752": "<linux/anon_inodes.h>", "5753": "<linux/async.h>", "5754": "<linux/atomic.h>", "5755": "<linux/audit.h>", "5756": "<linux/backing-dev.h>", "5757": "<linux/binfmts.h>", "5758": "<linux/bio.h>", "5759": "<linux/bitmap.h>", "5760": "<linux/bitops.h>", "5761": "<linux/blkdev.h>", "5762": "<linux/blktrace_api.h>", "5763": "<linux/bootmem.h>", "5764": "<linux/bpf.h>", "5765": "<linux/bsearch.h>", "5766": "<linux/bug.h>", "5767": "<linux/cache.h>", "5768": "<linux/capability.h>", "5769": "<linux/cgroup.h>", "5770": "<linux/cgroup_subsys.h>", "5771": "<linux/cgroupstats.h>", "5772": "<linux/circ_buf.h>", "5773": "<linux/clockchips.h>", "5774": "<linux/clocksource.h>", "5775": "<linux/cn_proc.h>", "5776": "<linux/compaction.h>", "5777": "<linux/compat.h>", "5778": "<linux/compiler.h>", "5779": "<linux/completion.h>", "5780": "<linux/console.h>", "5781": "<linux/context_tracking.h>", "5782": "<linux/coredump.h>", "5783": "<linux/cpu.h>", "5784": "<linux/cpu_pm.h>", "5785": "<linux/cpuidle.h>", "5786": "<linux/cpumask.h>", "5787": "<linux/cpuset.h>", "5788": "<linux/crash_dump.h>", "5789": "<linux/crc32.h>", "5790": "<linux/cred.h>", "5791": "<linux/ctype.h>", "5792": "<linux/dcache.h>", "5793": "<linux/dcookies.h>", "5794": "<linux/debug_locks.h>", "5795": "<linux/debugfs.h>", "5796": "<linux/delay.h>", "5797": "<linux/delayacct.h>", "5798": "<linux/device.h>", "5799": "<linux/dnotify.h>", "5800": "<linux/elf.h>", "5801": "<linux/elfcore.h>", "5802": "<linux/err.h>", "5803": "<linux/errno.h>", "5804": "<linux/export.h>", "5805": "<linux/fcntl.h>", "5806": "<linux/fdtable.h>", "5807": "<linux/file.h>", "5808": "<linux/filter.h>", "5809": "<linux/freezer.h>", "5810": "<linux/fs.h>", "5811": "<linux/fs_pin.h>", "5812": "<linux/fs_struct.h>", "5813": "<linux/fsnotify_backend.h>", "5814": "<linux/ftrace.h>", "5815": "<linux/ftrace_event.h>", "5816": "<linux/futex.h>", "5817": "<linux/genhd.h>", "5818": "<linux/getcpu.h>", "5819": "<linux/gfp.h>", "5820": "<linux/hardirq.h>", "5821": "<linux/hash.h>", "5822": "<linux/hashtable.h>", "5823": "<linux/highmem.h>", "5824": "<linux/highuid.h>", "5825": "<linux/hrtimer.h>", "5826": "<linux/hugetlb.h>", "5827": "<linux/hw_breakpoint.h>", "5828": "<linux/idr.h>", "5829": "<linux/init.h>", "5830": "<linux/init_task.h>", "5831": "<linux/initrd.h>", "5832": "<linux/inotify.h>", "5833": "<linux/interrupt.h>", "5834": "<linux/io.h>", "5835": "<linux/iocontext.h>", "5836": "<linux/ioport.h>", "5837": "<linux/ipc_namespace.h>", "5838": "<linux/irq.h>", "5839": "<linux/irq_work.h>", "5840": "<linux/irqdesc.h>", "5841": "<linux/irqdomain.h>", "5842": "<linux/irqflags.h>", "5843": "<linux/jhash.h>", "5844": "<linux/jiffies.h>", "5845": "<linux/jump_label.h>", "5846": "<linux/jump_label_ratelimit.h>", "5847": "<linux/kallsyms.h>", "5848": "<linux/kbuild.h>", "5849": "<linux/kcmp.h>", "5850": "<linux/kdb.h>", "5851": "<linux/kdebug.h>", "5852": "<linux/kernel.h>", "5853": "<linux/kernel_stat.h>", "5854": "<linux/kexec.h>", "5855": "<linux/key-type.h>", "5856": "<linux/key.h>", "5857": "<linux/keyctl.h>", "5858": "<linux/kgdb.h>", "5859": "<linux/khugepaged.h>", "5860": "<linux/kmemcheck.h>", "5861": "<linux/kmemleak.h>", "5862": "<linux/kmod.h>", "5863": "<linux/kmsg_dump.h>", "5864": "<linux/kobject.h>", "5865": "<linux/kprobes.h>", "5866": "<linux/kref.h>", "5867": "<linux/ksm.h>", "5868": "<linux/kthread.h>", "5869": "<linux/ktime.h>", "5870": "<linux/kvm_para.h>", "5871": "<linux/latencytop.h>", "5872": "<linux/lglock.h>", "5873": "<linux/license.h>", "5874": "<linux/limits.h>", "5875": "<linux/linkage.h>", "5876": "<linux/list.h>", "5877": "<linux/livepatch.h>", "5878": "<linux/lockdep.h>", "5879": "<linux/log2.h>", "5880": "<linux/lzo.h>", "5881": "<linux/magic.h>", "5882": "<linux/math64.h>", "5883": "<linux/memblock.h>", "5884": "<linux/memcontrol.h>", "5885": "<linux/memory.h>", "5886": "<linux/mempolicy.h>", "5887": "<linux/migrate.h>", "5888": "<linux/miscdevice.h>", "5889": "<linux/mm.h>", "5890": "<linux/mm_types.h>", "5891": "<linux/mman.h>", "5892": "<linux/mmiotrace.h>", "5893": "<linux/mmu_notifier.h>", "5894": "<linux/mmzone.h>", "5895": "<linux/mnt_namespace.h>", "5896": "<linux/module.h>", "5897": "<linux/moduleloader.h>", "5898": "<linux/moduleparam.h>", "5899": "<linux/mount.h>", "5900": "<linux/mqueue.h>", "5901": "<linux/msi.h>", "5902": "<linux/mutex.h>", "5903": "<linux/namei.h>", "5904": "<linux/net.h>", "5905": "<linux/netdevice.h>", "5906": "<linux/netlink.h>", "5907": "<linux/nfs_fs.h>", "5908": "<linux/nmi.h>", "5909": "<linux/nodemask.h>", "5910": "<linux/notifier.h>", "5911": "<linux/nsproxy.h>", "5912": "<linux/numa.h>", "5913": "<linux/of.h>", "5914": "<linux/of_address.h>", "5915": "<linux/of_irq.h>", "5916": "<linux/oom.h>", "5917": "<linux/osq_lock.h>", "5918": "<linux/padata.h>", "5919": "<linux/page-flags.h>", "5920": "<linux/pagemap.h>", "5921": "<linux/pci.h>", "5922": "<linux/percpu-rwsem.h>", "5923": "<linux/percpu.h>", "5924": "<linux/perf_event.h>", "5925": "<linux/personality.h>", "5926": "<linux/pfn.h>", "5927": "<linux/pid.h>", "5928": "<linux/pid_namespace.h>", "5929": "<linux/pipe_fs_i.h>", "5930": "<linux/platform_device.h>", "5931": "<linux/pm-trace.h>", "5932": "<linux/pm.h>", "5933": "<linux/pm_qos.h>", "5934": "<linux/pm_wakeup.h>", "5935": "<linux/poison.h>", "5936": "<linux/poll.h>", "5937": "<linux/posix-clock.h>", "5938": "<linux/posix-timers.h>", "5939": "<linux/prctl.h>", "5940": "<linux/preempt.h>", "5941": "<linux/prefetch.h>", "5942": "<linux/printk.h>", "5943": "<linux/proc_fs.h>", "5944": "<linux/proc_ns.h>", "5945": "<linux/profile.h>", "5946": "<linux/projid.h>", "5947": "<linux/ptrace.h>", "5948": "<linux/pvclock_gtod.h>", "5949": "<linux/radix-tree.h>", "5950": "<linux/random.h>", "5951": "<linux/range.h>", "5952": "<linux/ratelimit.h>", "5953": "<linux/rbtree.h>", "5954": "<linux/rculist.h>", "5955": "<linux/rcupdate.h>", "5956": "<linux/reboot.h>", "5957": "<linux/regset.h>", "5958": "<linux/resource.h>", "5959": "<linux/resource_ext.h>", "5960": "<linux/ring_buffer.h>", "5961": "<linux/rmap.h>", "5962": "<linux/rtc.h>", "5963": "<linux/rtmutex.h>", "5964": "<linux/rwlock.h>", "5965": "<linux/rwsem.h>", "5966": "<linux/sched.h>", "5967": "<linux/sched/deadline.h>", "5968": "<linux/sched/rt.h>", "5969": "<linux/sched/sysctl.h>", "5970": "<linux/seccomp.h>", "5971": "<linux/securebits.h>", "5972": "<linux/security.h>", "5973": "<linux/sem.h>", "5974": "<linux/semaphore.h>", "5975": "<linux/seq_file.h>", "5976": "<linux/seqlock.h>", "5977": "<linux/serial_core.h>", "5978": "<linux/shmem_fs.h>", "5979": "<linux/signal.h>", "5980": "<linux/signalfd.h>", "5981": "<linux/skbuff.h>", "5982": "<linux/slab.h>", "5983": "<linux/smp.h>", "5984": "<linux/smpboot.h>", "5985": "<linux/socket.h>", "5986": "<linux/sort.h>", "5987": "<linux/spinlock.h>", "5988": "<linux/spinlock_types.h>", "5989": "<linux/splice.h>", "5990": "<linux/srcu.h>", "5991": "<linux/stackprotector.h>", "5992": "<linux/stacktrace.h>", "5993": "<linux/stat.h>", "5994": "<linux/static_key.h>", "5995": "<linux/stddef.h>", "5996": "<linux/stop_machine.h>", "5997": "<linux/string.h>", "5998": "<linux/stringify.h>", "5999": "<linux/sunrpc/debug.h>", "6000": "<linux/suspend.h>", "6001": "<linux/suspend_ioctls.h>", "6002": "<linux/swap.h>", "6003": "<linux/swapops.h>", "6004": "<linux/syscalls.h>", "6005": "<linux/syscore_ops.h>", "6006": "<linux/sysctl.h>", "6007": "<linux/sysfs.h>", "6008": "<linux/syslog.h>", "6009": "<linux/sysrq.h>", "6010": "<linux/task_io_accounting_ops.h>", "6011": "<linux/task_work.h>", "6012": "<linux/taskstats.h>", "6013": "<linux/taskstats_kern.h>", "6014": "<linux/thread_info.h>", "6015": "<linux/threads.h>", "6016": "<linux/tick.h>", "6017": "<linux/time.h>", "6018": "<linux/timecounter.h>", "6019": "<linux/timekeeper_internal.h>", "6020": "<linux/timer.h>", "6021": "<linux/timerqueue.h>", "6022": "<linux/times.h>", "6023": "<linux/timex.h>", "6024": "<linux/topology.h>", "6025": "<linux/torture.h>", "6026": "<linux/trace_clock.h>", "6027": "<linux/trace_seq.h>", "6028": "<linux/tracefs.h>", "6029": "<linux/tracehook.h>", "6030": "<linux/tracepoint.h>", "6031": "<linux/tsacct_kern.h>", "6032": "<linux/tty.h>", "6033": "<linux/tty_driver.h>", "6034": "<linux/types.h>", "6035": "<linux/uaccess.h>", "6036": "<linux/uidgid.h>", "6037": "<linux/uio.h>", "6038": "<linux/unistd.h>", "6039": "<linux/uprobes.h>", "6040": "<linux/usb.h>", "6041": "<linux/user-return-notifier.h>", "6042": "<linux/user_namespace.h>", "6043": "<linux/uts.h>", "6044": "<linux/utsname.h>", "6045": "<linux/vermagic.h>", "6046": "<linux/version.h>", "6047": "<linux/vfs.h>", "6048": "<linux/vmacache.h>", "6049": "<linux/vmalloc.h>", "6050": "<linux/vmstat.h>", "6051": "<linux/wait.h>", "6052": "<linux/workqueue.h>", "6053": "<linux/writeback.h>", "6054": "<linux/ww_mutex.h>", "6055": "<module-name>", "6056": "<net/genetlink.h>", "6057": "<net/net_namespace.h>", "6058": "<net/netlink.h>", "6059": "<net/netns/generic.h>", "6060": "<net/sock.h>", "6061": "<scsi/sg.h>", "6062": "<stdarg.h>", "6063": "<system>", "6064": "<trace/define_trace.h>", "6065": "<trace/events/block.h>", "6066": "<trace/events/context_tracking.h>", "6067": "<trace/events/irq.h>", "6068": "<trace/events/lock.h>", "6069": "<trace/events/module.h>", "6070": "<trace/events/power.h>", "6071": "<trace/events/printk.h>", "6072": "<trace/events/rcu.h>", "6073": "<trace/events/rpm.h>", "6074": "<trace/events/sched.h>", "6075": "<trace/events/signal.h>", "6076": "<trace/events/syscalls.h>", "6077": "<trace/events/task.h>", "6078": "<trace/events/timer.h>", "6079": "<trace/syscall.h>", "6080": "<trigger>", "6081": "<uapi/linux/limits.h>", "6082": "<uapi/linux/module.h>", "6083": "<uapi/linux/mqueue.h>", "6084": "<user stack trace>", "6085": "=", "6086": "==", "6087": ">", "6088": ">=", "6089": "A", "6090": "ACCESS_ONCE", "6091": "ACCT_BYTEORDER", "6092": "ACCT_TIMEOUT", "6093": "ACCT_VERSION", "6094": "ACC_MODE", "6095": "ACORE", "6096": "ACTUAL_NR_IRQS", "6097": "ADD", "6098": "ADJ_ADJTIME", "6099": "ADJ_ESTERROR", "6100": "ADJ_FREQUENCY", "6101": "ADJ_MAXERROR", "6102": "ADJ_MICRO", "6103": "ADJ_NANO", "6104": "ADJ_OFFSET", "6105": "ADJ_OFFSET_READONLY", "6106": "ADJ_OFFSET_SINGLESHOT", "6107": "ADJ_SETOFFSET", "6108": "ADJ_STATUS", "6109": "ADJ_TAI", "6110": "ADJ_TICK", "6111": "ADJ_TIMECONST", "6112": "AFORK", "6113": "AHZ", "6114": "ALARMTIMER_NORESTART", "6115": "ALARMTIMER_RESTART", "6116": "ALARMTIMER_STATE_ENQUEUED", "6117": "ALARMTIMER_STATE_INACTIVE", "6118": "ALARM_BOOTTIME", "6119": "ALARM_NUMTYPE", "6120": "ALARM_REALTIME", "6121": "ALIGN", "6122": "ALU", "6123": "ALU64_", "6124": "ALU64_ADD_K", "6125": "ALU64_ADD_X", "6126": "ALU64_AND_K", "6127": "ALU64_AND_X", "6128": "ALU64_ARSH_K", "6129": "ALU64_ARSH_X", "6130": "ALU64_DIV_K", "6131": "ALU64_DIV_X", "6132": "ALU64_LSH_K", "6133": "ALU64_LSH_X", "6134": "ALU64_MOD_K", "6135": "ALU64_MOD_X", "6136": "ALU64_MOV_K", "6137": "ALU64_MOV_X", "6138": "ALU64_MUL_K", "6139": "ALU64_MUL_X", "6140": "ALU64_NEG", "6141": "ALU64_OR_K", "6142": "ALU64_OR_X", "6143": "ALU64_RSH_K", "6144": "ALU64_RSH_X", "6145": "ALU64_SUB_K", "6146": "ALU64_SUB_X", "6147": "ALU64_XOR_K", "6148": "ALU64_XOR_X", "6149": "ALU_", "6150": "ALU_ADD_K", "6151": "ALU_ADD_X", "6152": "ALU_AND_K", "6153": "ALU_AND_X", "6154": "ALU_DIV_K", "6155": "ALU_DIV_X", "6156": "ALU_END_TO_BE", "6157": "ALU_END_TO_LE", "6158": "ALU_LSH_K", "6159": "ALU_LSH_X", "6160": "ALU_MOD_K", "6161": "ALU_MOD_X", "6162": "ALU_MOV_K", "6163": "ALU_MOV_X", "6164": "ALU_MUL_K", "6165": "ALU_MUL_X", "6166": "ALU_NEG", "6167": "ALU_OR_K", "6168": "ALU_OR_X", "6169": "ALU_RSH_K", "6170": "ALU_RSH_X", "6171": "ALU_SUB_K", "6172": "ALU_SUB_X", "6173": "ALU_XOR_K", "6174": "ALU_XOR_X", "6175": "AND", "6176": "AR", "6177": "ARCH_CAPACITY", "6178": "ARCH_HAS_SYSCALL_MATCH_SYM_NAME", "6179": "ARCH_MIN_MMSTRUCT_ALIGN", "6180": "ARCH_MIN_TASKALIGN", "6181": "ARCH_RELOCATES_KCRCTAB", "6182": "ARCH_SHF_SMALL", "6183": "ARCH_SUPPORTS_FTRACE_OPS", "6184": "ARCH_TRACE_IGNORE_COMPAT_SYSCALLS", "6185": "ARG1", "6186": "ARG_ANYTHING", "6187": "ARG_CONST_MAP_PTR", "6188": "ARG_CONST_STACK_SIZE", "6189": "ARG_DONTCARE", "6190": "ARG_PTR_TO_CTX", "6191": "ARG_PTR_TO_MAP_KEY", "6192": "ARG_PTR_TO_MAP_VALUE", "6193": "ARG_PTR_TO_STACK", "6194": "ARRAY_SIZE", "6195": "ASSIGN_FETCH_FUNC", "6196": "ASSIGN_FETCH_TYPE", "6197": "ASSIGN_FETCH_TYPE_END", "6198": "ASSIGN_OPS_HASH", "6199": "ASU", "6200": "ASYNC_COOKIE_MAX", "6201": "ASYNC_DOMAIN", "6202": "ATOMIC_INIT", "6203": "ATOMIC_NOTIFIER_HEAD", "6204": "ATTR_GID", "6205": "ATTR_UID", "6206": "AT_NULL", "6207": "AT_VECTOR_SIZE", "6208": "AUDITSC_ARGS", "6209": "AUDITSC_FAILURE", "6210": "AUDITSC_INVALID", "6211": "AUDITSC_SUCCESS", "6212": "AUDIT_ADD", "6213": "AUDIT_ADD_RULE", "6214": "AUDIT_ALWAYS", "6215": "AUDIT_ANOM_ABEND", "6216": "AUDIT_ANOM_LINK", "6217": "AUDIT_ARCH", "6218": "AUDIT_ARG0", "6219": "AUDIT_ARG1", "6220": "AUDIT_ARG2", "6221": "AUDIT_ARG3", "6222": "AUDIT_AUX_IPCPERM", "6223": "AUDIT_AUX_PIDS", "6224": "AUDIT_BACKLOG_WAIT_TIME", "6225": "AUDIT_BIT", "6226": "AUDIT_BITMASK_SIZE", "6227": "AUDIT_BIT_MASK", "6228": "AUDIT_BIT_TEST", "6229": "AUDIT_BPRM_FCAPS", "6230": "AUDIT_BUFSIZ", "6231": "AUDIT_BUILD_CONTEXT", "6232": "AUDIT_CAPSET", "6233": "AUDIT_CLASS_CHATTR", "6234": "AUDIT_CLASS_CHATTR_32", "6235": "AUDIT_CLASS_READ", "6236": "AUDIT_CLASS_READ_32", "6237": "AUDIT_CLASS_SIGNAL", "6238": "AUDIT_CLASS_SIGNAL_32", "6239": "AUDIT_CLASS_WRITE", "6240": "AUDIT_CLASS_WRITE_32", "6241": "AUDIT_COMPARE_AUID_TO_EUID", "6242": "AUDIT_COMPARE_AUID_TO_FSUID", "6243": "AUDIT_COMPARE_AUID_TO_OBJ_UID", "6244": "AUDIT_COMPARE_AUID_TO_SUID", "6245": "AUDIT_COMPARE_EGID_TO_FSGID", "6246": "AUDIT_COMPARE_EGID_TO_OBJ_GID", "6247": "AUDIT_COMPARE_EGID_TO_SGID", "6248": "AUDIT_COMPARE_EUID_TO_FSUID", "6249": "AUDIT_COMPARE_EUID_TO_OBJ_UID", "6250": "AUDIT_COMPARE_EUID_TO_SUID", "6251": "AUDIT_COMPARE_FSGID_TO_OBJ_GID", "6252": "AUDIT_COMPARE_FSUID_TO_OBJ_UID", "6253": "AUDIT_COMPARE_GID_TO_EGID", "6254": "AUDIT_COMPARE_GID_TO_FSGID", "6255": "AUDIT_COMPARE_GID_TO_OBJ_GID", "6256": "AUDIT_COMPARE_GID_TO_SGID", "6257": "AUDIT_COMPARE_SGID_TO_FSGID", "6258": "AUDIT_COMPARE_SGID_TO_OBJ_GID", "6259": "AUDIT_COMPARE_SUID_TO_FSUID", "6260": "AUDIT_COMPARE_SUID_TO_OBJ_UID", "6261": "AUDIT_COMPARE_UID_TO_AUID", "6262": "AUDIT_COMPARE_UID_TO_EUID", "6263": "AUDIT_COMPARE_UID_TO_FSUID", "6264": "AUDIT_COMPARE_UID_TO_OBJ_UID", "6265": "AUDIT_COMPARE_UID_TO_SUID", "6266": "AUDIT_CONFIG_CHANGE", "6267": "AUDIT_CWD", "6268": "AUDIT_DEL", "6269": "AUDIT_DEL_RULE", "6270": "AUDIT_DEVMAJOR", "6271": "AUDIT_DEVMINOR", "6272": "AUDIT_DIR", "6273": "AUDIT_DISABLED", "6274": "AUDIT_EGID", "6275": "AUDIT_EOE", "6276": "AUDIT_EQUAL", "6277": "AUDIT_EUID", "6278": "AUDIT_EXECVE", "6279": "AUDIT_EXIT", "6280": "AUDIT_FAIL_PANIC", "6281": "AUDIT_FAIL_PRINTK", "6282": "AUDIT_FAIL_SILENT", "6283": "AUDIT_FD_PAIR", "6284": "AUDIT_FEATURE_BITMAP_ALL", "6285": "AUDIT_FEATURE_CHANGE", "6286": "AUDIT_FEATURE_LOGINUID_IMMUTABLE", "6287": "AUDIT_FEATURE_ONLY_UNSET_LOGINUID", "6288": "AUDIT_FEATURE_TO_MASK", "6289": "AUDIT_FEATURE_VERSION", "6290": "AUDIT_FIELD_COMPARE", "6291": "AUDIT_FILETYPE", "6292": "AUDIT_FILTERKEY", "6293": "AUDIT_FILTER_ENTRY", "6294": "AUDIT_FILTER_EXIT", "6295": "AUDIT_FILTER_PREPEND", "6296": "AUDIT_FILTER_TASK", "6297": "AUDIT_FILTER_TYPE", "6298": "AUDIT_FILTER_USER", "6299": "AUDIT_FIRST_USER_MSG", "6300": "AUDIT_FIRST_USER_MSG2", "6301": "AUDIT_FSGID", "6302": "AUDIT_FSUID", "6303": "AUDIT_FS_WATCH", "6304": "AUDIT_GET", "6305": "AUDIT_GET_FEATURE", "6306": "AUDIT_GID", "6307": "AUDIT_GREATER_THAN", "6308": "AUDIT_GREATER_THAN_OR_EQUAL", "6309": "AUDIT_INITIALIZED", "6310": "AUDIT_INODE", "6311": "AUDIT_INODE_BUCKETS", "6312": "AUDIT_INODE_HIDDEN", "6313": "AUDIT_INODE_PARENT", "6314": "AUDIT_IPC", "6315": "AUDIT_IPC_SET_PERM", "6316": "AUDIT_KERNEL", "6317": "AUDIT_LAST_FEATURE", "6318": "AUDIT_LAST_USER_MSG", "6319": "AUDIT_LAST_USER_MSG2", "6320": "AUDIT_LESS_THAN", "6321": "AUDIT_LESS_THAN_OR_EQUAL", "6322": "AUDIT_LIST", "6323": "AUDIT_LIST_RULES", "6324": "AUDIT_LOCKED", "6325": "AUDIT_LOGIN", "6326": "AUDIT_LOGINUID", "6327": "AUDIT_LOGINUID_LEGACY", "6328": "AUDIT_LOGINUID_SET", "6329": "AUDIT_MAKE_EQUIV", "6330": "AUDIT_MAXFREE", "6331": "AUDIT_MAX_FIELDS", "6332": "AUDIT_MAX_FIELD_COMPARE", "6333": "AUDIT_MAX_KEY_LEN", "6334": "AUDIT_MMAP", "6335": "AUDIT_MQ_GETSETATTR", "6336": "AUDIT_MQ_NOTIFY", "6337": "AUDIT_MQ_OPEN", "6338": "AUDIT_MQ_SENDRECV", "6339": "AUDIT_MSGTYPE", "6340": "AUDIT_NAMES", "6341": "AUDIT_NAME_FULL", "6342": "AUDIT_NEVER", "6343": "AUDIT_NLGRP_MAX", "6344": "AUDIT_NLGRP_READLOG", "6345": "AUDIT_NOT_EQUAL", "6346": "AUDIT_NR_FILTERS", "6347": "AUDIT_OBJ_GID", "6348": "AUDIT_OBJ_LEV_HIGH", "6349": "AUDIT_OBJ_LEV_LOW", "6350": "AUDIT_OBJ_PID", "6351": "AUDIT_OBJ_ROLE", "6352": "AUDIT_OBJ_TYPE", "6353": "AUDIT_OBJ_UID", "6354": "AUDIT_OBJ_USER", "6355": "AUDIT_OFF", "6356": "AUDIT_ON", "6357": "AUDIT_PATH", "6358": "AUDIT_PERM", "6359": "AUDIT_PERM_ATTR", "6360": "AUDIT_PERM_EXEC", "6361": "AUDIT_PERM_READ", "6362": "AUDIT_PERM_WRITE", "6363": "AUDIT_PERS", "6364": "AUDIT_PID", "6365": "AUDIT_POSSIBLE", "6366": "AUDIT_PPID", "6367": "AUDIT_PROCTITLE", "6368": "AUDIT_RECORD_CONTEXT", "6369": "AUDIT_SECCOMP", "6370": "AUDIT_SET", "6371": "AUDIT_SET_FEATURE", "6372": "AUDIT_SGID", "6373": "AUDIT_SIGNAL_INFO", "6374": "AUDIT_SOCKADDR", "6375": "AUDIT_SOCKETCALL", "6376": "AUDIT_STATUS_ENABLED", "6377": "AUDIT_STATUS_RATE_LIMIT", "6378": "AUDIT_SUBJ_CLR", "6379": "AUDIT_SUBJ_ROLE", "6380": "AUDIT_SUBJ_SEN", "6381": "AUDIT_SUBJ_TYPE", "6382": "AUDIT_SUBJ_USER", "6383": "AUDIT_SUCCESS", "6384": "AUDIT_SUID", "6385": "AUDIT_SYSCALL", "6386": "AUDIT_SYSCALL_CLASSES", "6387": "AUDIT_TRIM", "6388": "AUDIT_TTY_GET", "6389": "AUDIT_TTY_SET", "6390": "AUDIT_TYPE_CHILD_CREATE", "6391": "AUDIT_TYPE_CHILD_DELETE", "6392": "AUDIT_TYPE_NORMAL", "6393": "AUDIT_TYPE_PARENT", "6394": "AUDIT_TYPE_UNKNOWN", "6395": "AUDIT_UID", "6396": "AUDIT_UID_UNSET", "6397": "AUDIT_UNINITIALIZED", "6398": "AUDIT_USER", "6399": "AUDIT_USER_AVC", "6400": "AUDIT_WATCH", "6401": "AUDIT_WORD", "6402": "AXSIG", "6403": "Aiee", "6404": "Allocates", "6405": "Allocating", "6406": "At", "6407": "Attempt", "6408": "Attempted", "6409": "Audit_bad", "6410": "Audit_bitmask", "6411": "Audit_bittest", "6412": "Audit_equal", "6413": "Audit_ge", "6414": "Audit_gt", "6415": "Audit_le", "6416": "Audit_lt", "6417": "Audit_not_equal", "6418": "B", "6419": "BASE", "6420": "BDEVNAME_SIZE", "6421": "BE", "6422": "BENCHMARK_EVENT_STRLEN", "6423": "BIO_UPTODATE", "6424": "BITS_PER_BYTE", "6425": "BITS_PER_COMPAT_LONG", "6426": "BITS_PER_LONG", "6427": "BITS_PER_PAGE", "6428": "BITS_PER_PAGE_MASK", "6429": "BITS_TO_COMPAT_LONGS", "6430": "BITS_TO_LONGS", "6431": "BLKTRACESETUP", "6432": "BLKTRACESETUP32", "6433": "BLKTRACESTART", "6434": "BLKTRACESTOP", "6435": "BLKTRACETEARDOWN", "6436": "BLKTRACE_BDEV_SIZE", "6437": "BLK_IO_TRACE_MAGIC", "6438": "BLK_IO_TRACE_VERSION", "6439": "BLK_TA_ABORT", "6440": "BLK_TA_BACKMERGE", "6441": "BLK_TA_BOUNCE", "6442": "BLK_TA_COMPLETE", "6443": "BLK_TA_DRV_DATA", "6444": "BLK_TA_FRONTMERGE", "6445": "BLK_TA_GETRQ", "6446": "BLK_TA_INSERT", "6447": "BLK_TA_ISSUE", "6448": "BLK_TA_PLUG", "6449": "BLK_TA_QUEUE", "6450": "BLK_TA_REMAP", "6451": "BLK_TA_REQUEUE", "6452": "BLK_TA_SLEEPRQ", "6453": "BLK_TA_SPLIT", "6454": "BLK_TA_UNPLUG_IO", "6455": "BLK_TA_UNPLUG_TIMER", "6456": "BLK_TC_ACT", "6457": "BLK_TC_AHEAD", "6458": "BLK_TC_COMPLETE", "6459": "BLK_TC_DISCARD", "6460": "BLK_TC_DRV_DATA", "6461": "BLK_TC_FLUSH", "6462": "BLK_TC_FS", "6463": "BLK_TC_FUA", "6464": "BLK_TC_ISSUE", "6465": "BLK_TC_META", "6466": "BLK_TC_NOTIFY", "6467": "BLK_TC_PC", "6468": "BLK_TC_QUEUE", "6469": "BLK_TC_RAHEAD", "6470": "BLK_TC_READ", "6471": "BLK_TC_REQUEUE", "6472": "BLK_TC_SHIFT", "6473": "BLK_TC_SYNC", "6474": "BLK_TC_WRITE", "6475": "BLK_TN_MAX_MSG", "6476": "BLK_TN_MESSAGE", "6477": "BLK_TN_PROCESS", "6478": "BLK_TN_TIMESTAMP", "6479": "BLK_TRACE_DEVICE_ATTR", "6480": "BLOCKING_INIT_NOTIFIER_HEAD", "6481": "BLOCKING_NOTIFIER_HEAD", "6482": "BM_BITS_PER_BLOCK", "6483": "BM_BLOCK_MASK", "6484": "BM_BLOCK_SHIFT", "6485": "BM_END_OF_MAP", "6486": "BM_ENTRIES_PER_LEVEL", "6487": "BM_RTREE_LEVEL_MASK", "6488": "BM_RTREE_LEVEL_SHIFT", "6489": "BOOT_ACPI", "6490": "BP", "6491": "BPF_A", "6492": "BPF_ABS", "6493": "BPF_ADD", "6494": "BPF_ALU", "6495": "BPF_ALU64", "6496": "BPF_AND", "6497": "BPF_ARSH", "6498": "BPF_B", "6499": "BPF_CALL", "6500": "BPF_CLASS", "6501": "BPF_DIV", "6502": "BPF_DW", "6503": "BPF_END", "6504": "BPF_EXIST", "6505": "BPF_EXIT", "6506": "BPF_FUNC_ktime_get_ns", "6507": "BPF_FUNC_map_delete_elem", "6508": "BPF_FUNC_map_lookup_elem", "6509": "BPF_FUNC_map_update_elem", "6510": "BPF_FUNC_probe_read", "6511": "BPF_FUNC_trace_printk", "6512": "BPF_H", "6513": "BPF_IMM", "6514": "BPF_IND", "6515": "BPF_JA", "6516": "BPF_JEQ", "6517": "BPF_JGE", "6518": "BPF_JGT", "6519": "BPF_JMP", "6520": "BPF_JNE", "6521": "BPF_JSET", "6522": "BPF_JSGE", "6523": "BPF_JSGT", "6524": "BPF_K", "6525": "BPF_LD", "6526": "BPF_LDX", "6527": "BPF_LEN", "6528": "BPF_LSH", "6529": "BPF_MAP_CREATE", "6530": "BPF_MAP_CREATE_LAST_FIELD", "6531": "BPF_MAP_DELETE_ELEM", "6532": "BPF_MAP_DELETE_ELEM_LAST_FIELD", "6533": "BPF_MAP_GET_NEXT_KEY", "6534": "BPF_MAP_GET_NEXT_KEY_LAST_FIELD", "6535": "BPF_MAP_LOOKUP_ELEM", "6536": "BPF_MAP_LOOKUP_ELEM_LAST_FIELD", "6537": "BPF_MAP_TYPE_ARRAY", "6538": "BPF_MAP_TYPE_HASH", "6539": "BPF_MAP_UPDATE_ELEM", "6540": "BPF_MAP_UPDATE_ELEM_LAST_FIELD", "6541": "BPF_MAXINSNS", "6542": "BPF_MEM", "6543": "BPF_MISC", "6544": "BPF_MOD", "6545": "BPF_MODE", "6546": "BPF_MOV", "6547": "BPF_MUL", "6548": "BPF_NEG", "6549": "BPF_NOEXIST", "6550": "BPF_OP", "6551": "BPF_OR", "6552": "BPF_PROG_LOAD", "6553": "BPF_PROG_LOAD_LAST_FIELD", "6554": "BPF_PROG_RUN", "6555": "BPF_PROG_TYPE_KPROBE", "6556": "BPF_PROG_TYPE_SCHED_ACT", "6557": "BPF_PROG_TYPE_SCHED_CLS", "6558": "BPF_PROG_TYPE_SOCKET_FILTER", "6559": "BPF_PSEUDO_MAP_FD", "6560": "BPF_R0", "6561": "BPF_R1", "6562": "BPF_R10", "6563": "BPF_R2", "6564": "BPF_R3", "6565": "BPF_R4", "6566": "BPF_R5", "6567": "BPF_R6", "6568": "BPF_R7", "6569": "BPF_R8", "6570": "BPF_R9", "6571": "BPF_READ", "6572": "BPF_REG_0", "6573": "BPF_REG_1", "6574": "BPF_REG_10", "6575": "BPF_REG_2", "6576": "BPF_REG_3", "6577": "BPF_REG_4", "6578": "BPF_REG_5", "6579": "BPF_REG_6", "6580": "BPF_REG_7", "6581": "BPF_REG_8", "6582": "BPF_REG_9", "6583": "BPF_REG_A", "6584": "BPF_REG_ARG1", "6585": "BPF_REG_CTX", "6586": "BPF_REG_FP", "6587": "BPF_REG_SIZE", "6588": "BPF_REG_X", "6589": "BPF_RET", "6590": "BPF_RSH", "6591": "BPF_SIZE", "6592": "BPF_SRC", "6593": "BPF_ST", "6594": "BPF_STX", "6595": "BPF_SUB", "6596": "BPF_TAX", "6597": "BPF_TO_BE", "6598": "BPF_TO_LE", "6599": "BPF_TXA", "6600": "BPF_W", "6601": "BPF_WRITE", "6602": "BPF_X", "6603": "BPF_XADD", "6604": "BPF_XOR", "6605": "BP_ACCESS_WATCHPOINT", "6606": "BP_BREAKPOINT", "6607": "BP_HARDWARE_BREAKPOINT", "6608": "BP_UNDEFINED", "6609": "BP_WRITE_WATCHPOINT", "6610": "BRANCH", "6611": "BREAK_INSTR_SIZE", "6612": "BUFMAX", "6613": "BUFSZ", "6614": "BUF_MAX_DATA_SIZE", "6615": "BUF_PAGE_HDR_SIZE", "6616": "BUF_PAGE_SIZE", "6617": "BUF_THREAD_ID_SIZE", "6618": "BUG", "6619": "BUG_ON", "6620": "BUILD_BUG_ON", "6621": "BUILD_LOCK_OPS", "6622": "BUSY_WORKER_HASH_ORDER", "6623": "BUS_ISA_MEM_BASE", "6624": "BUS_ISA_PORT_BASE", "6625": "BUS_ISA_PORT_SHIFT", "6626": "BUS_MCEERR_AO", "6627": "BUS_MCEERR_AR", "6628": "BYTES_TO_BITS", "6629": "Bad", "6630": "Blktrace_running", "6631": "Blktrace_setup", "6632": "Blktrace_stopped", "6633": "But", "6634": "CACHE_FLUSH_IS_SAFE", "6635": "CACHE_HOT_BUDDY", "6636": "CALLER_ADDR0", "6637": "CALLER_ADDR1", "6638": "CALLER_ADDR2", "6639": "CALLER_ADDR3", "6640": "CALLER_SAVED_REGS", "6641": "CAP_AUDIT_CONTROL", "6642": "CAP_AUDIT_READ", "6643": "CAP_AUDIT_WRITE", "6644": "CAP_BLOCK_SUSPEND", "6645": "CAP_BSET", "6646": "CAP_EMPTY_SET", "6647": "CAP_FOR_EACH_U32", "6648": "CAP_FULL_SET", "6649": "CAP_IPC_LOCK", "6650": "CAP_KILL", "6651": "CAP_LAST_CAP", "6652": "CAP_LAST_U32", "6653": "CAP_PI", "6654": "CAP_SETGID", "6655": "CAP_SETPCAP", "6656": "CAP_SETUID", "6657": "CAP_SYSLOG", "6658": "CAP_SYS_ADMIN", "6659": "CAP_SYS_BOOT", "6660": "CAP_SYS_MODULE", "6661": "CAP_SYS_NICE", "6662": "CAP_SYS_PACCT", "6663": "CAP_SYS_PTRACE", "6664": "CAP_SYS_RESOURCE", "6665": "CAP_SYS_TIME", "6666": "CAP_WAKE_ALARM", "6667": "CATASTROPHIC", "6668": "CCVERSION", "6669": "CC_USING_FENTRY", "6670": "CFTYPE_NOT_ON_ROOT", "6671": "CFTYPE_NO_PREFIX", "6672": "CFTYPE_ONLY_ON_ROOT", "6673": "CGROUPSTATS_CMD_ATTR_FD", "6674": "CGROUPSTATS_CMD_ATTR_MAX", "6675": "CGROUPSTATS_CMD_GET", "6676": "CGROUPSTATS_CMD_NEW", "6677": "CGROUP_FILE_NAME_MAX", "6678": "CGROUP_FILE_PROCS", "6679": "CGROUP_FILE_TASKS", "6680": "CGROUP_FREEZER_ONLINE", "6681": "CGROUP_FREEZING", "6682": "CGROUP_FREEZING_PARENT", "6683": "CGROUP_FREEZING_SELF", "6684": "CGROUP_FROZEN", "6685": "CGROUP_PIDLIST_DESTROY_DELAY", "6686": "CGROUP_SUBSYS_COUNT", "6687": "CGROUP_SUPER_MAGIC", "6688": "CGRP_CPUSET_CLONE_CHILDREN", "6689": "CGRP_NOTIFY_ON_RELEASE", "6690": "CGRP_ROOT_NOPREFIX", "6691": "CGRP_ROOT_SANE_BEHAVIOR", "6692": "CGRP_ROOT_XATTR", "6693": "CHECK_ATTR", "6694": "CHECK_FETCH_FUNCS", "6695": "CIRC_SPACE", "6696": "CLASSHASH_BITS", "6697": "CLASSHASH_SIZE", "6698": "CLD_CONTINUED", "6699": "CLD_DUMPED", "6700": "CLD_EXITED", "6701": "CLD_KILLED", "6702": "CLD_STOPPED", "6703": "CLD_TRAPPED", "6704": "CLOCKID_TO_FD", "6705": "CLOCK_BOOTTIME", "6706": "CLOCK_BOOTTIME_ALARM", "6707": "CLOCK_EVT_FEAT_C3STOP", "6708": "CLOCK_EVT_FEAT_DUMMY", "6709": "CLOCK_EVT_FEAT_DYNIRQ", "6710": "CLOCK_EVT_FEAT_HRTIMER", "6711": "CLOCK_EVT_FEAT_KTIME", "6712": "CLOCK_EVT_FEAT_ONESHOT", "6713": "CLOCK_EVT_FEAT_PERCPU", "6714": "CLOCK_EVT_FEAT_PERIODIC", "6715": "CLOCK_EVT_MODE_RESUME", "6716": "CLOCK_EVT_MODE_SHUTDOWN", "6717": "CLOCK_EVT_MODE_UNUSED", "6718": "CLOCK_EVT_STATE_DETACHED", "6719": "CLOCK_EVT_STATE_ONESHOT", "6720": "CLOCK_EVT_STATE_PERIODIC", "6721": "CLOCK_EVT_STATE_SHUTDOWN", "6722": "CLOCK_MONOTONIC", "6723": "CLOCK_MONOTONIC_COARSE", "6724": "CLOCK_MONOTONIC_RAW", "6725": "CLOCK_REALTIME", "6726": "CLOCK_REALTIME_ALARM", "6727": "CLOCK_REALTIME_COARSE", "6728": "CLOCK_SOURCE_SUSPEND_NONSTOP", "6729": "CLOCK_SOURCE_VALID_FOR_HRES", "6730": "CLOCK_TAI", "6731": "CLONE_CHILD_CLEARTID", "6732": "CLONE_CHILD_SETTID", "6733": "CLONE_FILES", "6734": "CLONE_FS", "6735": "CLONE_IO", "6736": "CLONE_NEWIPC", "6737": "CLONE_NEWNET", "6738": "CLONE_NEWNS", "6739": "CLONE_NEWPID", "6740": "CLONE_NEWUSER", "6741": "CLONE_NEWUTS", "6742": "CLONE_PARENT", "6743": "CLONE_PARENT_SETTID", "6744": "CLONE_PTRACE", "6745": "CLONE_SIGHAND", "6746": "CLONE_SYSVSEM", "6747": "CLONE_THREAD", "6748": "CLONE_UNTRACED", "6749": "CLONE_VFORK", "6750": "CLONE_VM", "6751": "CMD", "6752": "CMD_BUFLEN", "6753": "CMD_INTERRUPT", "6754": "COLUMNS", "6755": "COMMAND_LINE_SIZE", "6756": "COMPAT_RLIM_INFINITY", "6757": "COMPAT_RLIM_OLD_INFINITY", "6758": "COMPAT_SYSCALL_DEFINE1", "6759": "COMPAT_SYSCALL_DEFINE2", "6760": "COMPAT_SYSCALL_DEFINE3", "6761": "COMPAT_SYSCALL_DEFINE4", "6762": "COMPAT_SYSCALL_DEFINE5", "6763": "COMPAT_SYSCALL_DEFINE6", "6764": "COMPAT_USE_64BIT_TIME", "6765": "COMPAT_UTS_MACHINE", "6766": "COMPLETION_INITIALIZER_ONSTACK", "6767": "CONFIG_64BIT", "6768": "CONFIG_A11Y_BRAILLE_CONSOLE", "6769": "CONFIG_ACPI_SLEEP", "6770": "CONFIG_AIO", "6771": "CONFIG_ARCH_HIBERNATION_HEADER", "6772": "CONFIG_ARCH_TASK_STRUCT_ALLOCATOR", "6773": "CONFIG_ARCH_THREAD_INFO_ALLOCATOR", "6774": "CONFIG_ARCH_USES_GETTIMEOFFSET", "6775": "CONFIG_ARM", "6776": "CONFIG_AUDITSYSCALL", "6777": "CONFIG_AUDIT_TREE", "6778": "CONFIG_AUDIT_WATCH", "6779": "CONFIG_AUTO_IRQ_AFFINITY", "6780": "CONFIG_BASE_SMALL", "6781": "CONFIG_BCACHE", "6782": "CONFIG_BINFMT_ELF_FDPIC", "6783": "CONFIG_BINFMT_MISC", "6784": "CONFIG_BINFMT_MISC_MODULE", "6785": "CONFIG_BLK_DEV_INITRD", "6786": "CONFIG_BLK_DEV_IO_TRACE", "6787": "CONFIG_BLOCK", "6788": "CONFIG_BOOTPARAM_HUNG_TASK_PANIC_VALUE", "6789": "CONFIG_BPF_JIT", "6790": "CONFIG_BRANCH_TRACER", "6791": "CONFIG_BSD_PROCESS_ACCT", "6792": "CONFIG_CC_STACKPROTECTOR", "6793": "CONFIG_CFS_BANDWIDTH", "6794": "CONFIG_CGROUPS", "6795": "CONFIG_CGROUP_CPUACCT", "6796": "CONFIG_CGROUP_DEBUG", "6797": "CONFIG_CGROUP_SCHED", "6798": "CONFIG_CHECKPOINT_RESTORE", "6799": "CONFIG_CHR_DEV_SG", "6800": "CONFIG_CLOCKSOURCE_VALIDATE_LAST_CYCLE", "6801": "CONFIG_CLONE_BACKWARDS", "6802": "CONFIG_CLONE_BACKWARDS2", "6803": "CONFIG_CLONE_BACKWARDS3", "6804": "CONFIG_COMPACTION", "6805": "CONFIG_COMPAT", "6806": "CONFIG_COMPAT_OLD_SIGACTION", "6807": "CONFIG_CONSTRUCTORS", "6808": "CONFIG_CONTEXT_SWITCH_TRACER", "6809": "CONFIG_CONTEXT_TRACKING", "6810": "CONFIG_CONTEXT_TRACKING_FORCE", "6811": "CONFIG_COREDUMP", "6812": "CONFIG_CPUSETS", "6813": "CONFIG_CPU_IDLE", "6814": "CONFIG_DEBUG_ATOMIC_SLEEP", "6815": "CONFIG_DEBUG_BUGVERBOSE", "6816": "CONFIG_DEBUG_CREDENTIALS", "6817": "CONFIG_DEBUG_FS", "6818": "CONFIG_DEBUG_KMEMLEAK", "6819": "CONFIG_DEBUG_LOCKDEP", "6820": "CONFIG_DEBUG_LOCK_ALLOC", "6821": "CONFIG_DEBUG_MUTEXES", "6822": "CONFIG_DEBUG_NOTIFIERS", "6823": "CONFIG_DEBUG_OBJECTS_RCU_HEAD", "6824": "CONFIG_DEBUG_OBJECTS_TIMERS", "6825": "CONFIG_DEBUG_OBJECTS_WORK", "6826": "CONFIG_DEBUG_PREEMPT", "6827": "CONFIG_DEBUG_RODATA", "6828": "CONFIG_DEBUG_RT_MUTEXES", "6829": "CONFIG_DEBUG_SET_MODULE_RONX", "6830": "CONFIG_DEBUG_SHIRQ", "6831": "CONFIG_DEBUG_SHIRQ_FIXME", "6832": "CONFIG_DEBUG_SPINLOCK", "6833": "CONFIG_DEBUG_STACKOVERFLOW", "6834": "CONFIG_DEBUG_TIMEKEEPING", "6835": "CONFIG_DEBUG_WW_MUTEX_SLOWPATH", "6836": "CONFIG_DEFAULT_HUNG_TASK_TIMEOUT", "6837": "CONFIG_DETECT_HUNG_TASK", "6838": "CONFIG_DNOTIFY", "6839": "CONFIG_DYNAMIC_DEBUG", "6840": "CONFIG_DYNAMIC_FTRACE", "6841": "CONFIG_DYNAMIC_FTRACE_WITH_REGS", "6842": "CONFIG_EPOLL", "6843": "CONFIG_EVENT_TRACE_TEST_SYSCALLS", "6844": "CONFIG_EVENT_TRACING", "6845": "CONFIG_FAIR_GROUP_SCHED", "6846": "CONFIG_FILE_LOCKING", "6847": "CONFIG_FREEZER", "6848": "CONFIG_FTRACE_MCOUNT_RECORD", "6849": "CONFIG_FTRACE_SELFTEST", "6850": "CONFIG_FTRACE_STARTUP_TEST", "6851": "CONFIG_FTRACE_SYSCALLS", "6852": "CONFIG_FUNCTION_GRAPH_TRACER", "6853": "CONFIG_FUNCTION_TRACER", "6854": "CONFIG_FUTEX", "6855": "CONFIG_GENERIC_CLOCKEVENTS", "6856": "CONFIG_GENERIC_CLOCKEVENTS_BROADCAST", "6857": "CONFIG_GENERIC_CLOCKEVENTS_MIN_ADJUST", "6858": "CONFIG_GENERIC_IRQ_LEGACY", "6859": "CONFIG_GENERIC_IRQ_LEGACY_ALLOC_HWIRQ", "6860": "CONFIG_GENERIC_IRQ_SHOW", "6861": "CONFIG_GENERIC_IRQ_SHOW_LEVEL", "6862": "CONFIG_GENERIC_LOCKBREAK", "6863": "CONFIG_GENERIC_MSI_IRQ_DOMAIN", "6864": "CONFIG_GENERIC_PENDING_IRQ", "6865": "CONFIG_GENERIC_SMP_IDLE_THREAD", "6866": "CONFIG_GENERIC_TIME_VSYSCALL_OLD", "6867": "CONFIG_HANDLE_DOMAIN_IRQ", "6868": "CONFIG_HARDIRQS_SW_RESEND", "6869": "CONFIG_HARDLOCKUP_DETECTOR", "6870": "CONFIG_HAVE_ARCH_SECCOMP_FILTER", "6871": "CONFIG_HAVE_ARCH_TRACEHOOK", "6872": "CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS", "6873": "CONFIG_HAVE_FUNCTION_GRAPH_FP_TEST", "6874": "CONFIG_HAVE_IRQ_EXIT_ON_IRQ_STACK", "6875": "CONFIG_HAVE_NMI_WATCHDOG", "6876": "CONFIG_HAVE_UNSTABLE_SCHED_CLOCK", "6877": "CONFIG_HIBERNATION", "6878": "CONFIG_HIGHMEM", "6879": "CONFIG_HIGH_RES_TIMERS", "6880": "CONFIG_HOTPLUG_CPU", "6881": "CONFIG_HUGETLB_PAGE", "6882": "CONFIG_IA64", "6883": "CONFIG_IKCONFIG_PROC", "6884": "CONFIG_INIT_ALL_POSSIBLE", "6885": "CONFIG_INLINE_READ_LOCK", "6886": "CONFIG_INLINE_READ_LOCK_BH", "6887": "CONFIG_INLINE_READ_LOCK_IRQ", "6888": "CONFIG_INLINE_READ_LOCK_IRQSAVE", "6889": "CONFIG_INLINE_READ_TRYLOCK", "6890": "CONFIG_INLINE_READ_UNLOCK", "6891": "CONFIG_INLINE_READ_UNLOCK_BH", "6892": "CONFIG_INLINE_READ_UNLOCK_IRQ", "6893": "CONFIG_INLINE_READ_UNLOCK_IRQRESTORE", "6894": "CONFIG_INLINE_SPIN_LOCK", "6895": "CONFIG_INLINE_SPIN_LOCK_BH", "6896": "CONFIG_INLINE_SPIN_LOCK_IRQ", "6897": "CONFIG_INLINE_SPIN_LOCK_IRQSAVE", "6898": "CONFIG_INLINE_SPIN_TRYLOCK", "6899": "CONFIG_INLINE_SPIN_TRYLOCK_BH", "6900": "CONFIG_INLINE_SPIN_UNLOCK_BH", "6901": "CONFIG_INLINE_SPIN_UNLOCK_IRQ", "6902": "CONFIG_INLINE_SPIN_UNLOCK_IRQRESTORE", "6903": "CONFIG_INLINE_WRITE_LOCK", "6904": "CONFIG_INLINE_WRITE_LOCK_BH", "6905": "CONFIG_INLINE_WRITE_LOCK_IRQ", "6906": "CONFIG_INLINE_WRITE_LOCK_IRQSAVE", "6907": "CONFIG_INLINE_WRITE_TRYLOCK", "6908": "CONFIG_INLINE_WRITE_UNLOCK", "6909": "CONFIG_INLINE_WRITE_UNLOCK_BH", "6910": "CONFIG_INLINE_WRITE_UNLOCK_IRQ", "6911": "CONFIG_INLINE_WRITE_UNLOCK_IRQRESTORE", "6912": "CONFIG_INOTIFY_USER", "6913": "CONFIG_IRQSOFF_TRACER", "6914": "CONFIG_IRQ_DOMAIN", "6915": "CONFIG_IRQ_DOMAIN_HIERARCHY", "6916": "CONFIG_IRQ_EDGE_EOI_HANDLER", "6917": "CONFIG_IRQ_FORCED_THREADING", "6918": "CONFIG_IRQ_PREFLOW_FASTEOI", "6919": "CONFIG_IRQ_TIME_ACCOUNTING", "6920": "CONFIG_IRQ_WORK", "6921": "CONFIG_KALLSYMS", "6922": "CONFIG_KALLSYMS_ALL", "6923": "CONFIG_KDB_CONTINUE_CATASTROPHIC", "6924": "CONFIG_KDB_DEFAULT_ENABLE", "6925": "CONFIG_KEXEC", "6926": "CONFIG_KEXEC_FILE", "6927": "CONFIG_KEXEC_JUMP", "6928": "CONFIG_KEXEC_VERIFY_SIG", "6929": "CONFIG_KEYS", "6930": "CONFIG_KGDB_KDB", "6931": "CONFIG_KMEMCHECK", "6932": "CONFIG_KPROBES_ON_FTRACE", "6933": "CONFIG_KPROBE_EVENT", "6934": "CONFIG_KRETPROBES", "6935": "CONFIG_LATENCYTOP", "6936": "CONFIG_LOCKDEP", "6937": "CONFIG_LOCKUP_DETECTOR", "6938": "CONFIG_LOCK_STAT", "6939": "CONFIG_MAGIC_SYSRQ", "6940": "CONFIG_MAGIC_SYSRQ_DEFAULT_ENABLE", "6941": "CONFIG_MATHEMU", "6942": "CONFIG_MEMCG", "6943": "CONFIG_MEMORY_FAILURE", "6944": "CONFIG_MEMORY_HOTREMOVE", "6945": "CONFIG_MMU", "6946": "CONFIG_MODULES", "6947": "CONFIG_MODULE_FORCE_LOAD", "6948": "CONFIG_MODULE_FORCE_UNLOAD", "6949": "CONFIG_MODULE_SIG", "6950": "CONFIG_MODULE_UNLOAD", "6951": "CONFIG_MODVERSIONS", "6952": "CONFIG_MPU", "6953": "CONFIG_MULTIUSER", "6954": "CONFIG_MUTEX_SPIN_ON_OWNER", "6955": "CONFIG_NET", "6956": "CONFIG_NOP_TRACER", "6957": "CONFIG_NO_HZ_COMMON", "6958": "CONFIG_NO_HZ_FULL", "6959": "CONFIG_NO_HZ_FULL_SYSIDLE", "6960": "CONFIG_NO_HZ_FULL_SYSIDLE_SMALL", "6961": "CONFIG_NR_CPUS", "6962": "CONFIG_NTP_PPS", "6963": "CONFIG_NUMA", "6964": "CONFIG_NUMA_BALANCING", "6965": "CONFIG_ODD_RT_SIGACTION", "6966": "CONFIG_OLD_SIGACTION", "6967": "CONFIG_OLD_SIGSUSPEND", "6968": "CONFIG_OLD_SIGSUSPEND3", "6969": "CONFIG_OPTPROBES", "6970": "CONFIG_PANIC_ON_OOPS_VALUE", "6971": "CONFIG_PANIC_TIMEOUT", "6972": "CONFIG_PARAVIRT", "6973": "CONFIG_PARAVIRT_TIME_ACCOUNTING", "6974": "CONFIG_PERF_EVENTS", "6975": "CONFIG_PERF_USE_VMALLOC", "6976": "CONFIG_PERSISTENT_KEYRINGS", "6977": "CONFIG_PID_NS", "6978": "CONFIG_PM", "6979": "CONFIG_PM_AUTOSLEEP", "6980": "CONFIG_PM_DEBUG", "6981": "CONFIG_PM_SLEEP", "6982": "CONFIG_PM_SLEEP_SMP", "6983": "CONFIG_PM_STD_PARTITION", "6984": "CONFIG_PM_TEST_SUSPEND", "6985": "CONFIG_PM_WAKELOCKS", "6986": "CONFIG_PM_WAKELOCKS_GC", "6987": "CONFIG_PM_WAKELOCKS_LIMIT", "6988": "CONFIG_POSIX_MQUEUE", "6989": "CONFIG_PREEMPT", "6990": "CONFIG_PREEMPT_NOTIFIERS", "6991": "CONFIG_PREEMPT_RCU", "6992": "CONFIG_PREEMPT_TRACER", "6993": "CONFIG_PRINTK", "6994": "CONFIG_PROC_FS", "6995": "CONFIG_PROC_PID_CPUSET", "6996": "CONFIG_PROC_SYSCTL", "6997": "CONFIG_PROFILE_ALL_BRANCHES", "6998": "CONFIG_PROFILING", "6999": "CONFIG_PROVE_LOCKING", "7000": "CONFIG_PROVE_RCU", "7001": "CONFIG_PROVE_RCU_REPEATEDLY", "7002": "CONFIG_RANDOMIZE_BASE", "7003": "CONFIG_RCU_BOOST", "7004": "CONFIG_RCU_BOOST_DELAY", "7005": "CONFIG_RCU_CPU_STALL_INFO", "7006": "CONFIG_RCU_CPU_STALL_TIMEOUT", "7007": "CONFIG_RCU_EXPEDITE_BOOT", "7008": "CONFIG_RCU_FANOUT", "7009": "CONFIG_RCU_FANOUT_EXACT", "7010": "CONFIG_RCU_FANOUT_LEAF", "7011": "CONFIG_RCU_FAST_NO_HZ", "7012": "CONFIG_RCU_KTHREAD_PRIO", "7013": "CONFIG_RCU_NOCB_CPU", "7014": "CONFIG_RCU_NOCB_CPU_ALL", "7015": "CONFIG_RCU_NOCB_CPU_NONE", "7016": "CONFIG_RCU_NOCB_CPU_ZERO", "7017": "CONFIG_RCU_STALL_COMMON", "7018": "CONFIG_RCU_TORTURE_TEST_RUNNABLE", "7019": "CONFIG_RCU_TORTURE_TEST_SLOW_INIT", "7020": "CONFIG_RCU_TORTURE_TEST_SLOW_INIT_DELAY", "7021": "CONFIG_RCU_TRACE", "7022": "CONFIG_RCU_USER_QS", "7023": "CONFIG_RING_BUFFER_ALLOW_SWAP", "7024": "CONFIG_RING_BUFFER_STARTUP_TEST", "7025": "CONFIG_RTC_CLASS", "7026": "CONFIG_RTC_HCTOSYS_DEVICE", "7027": "CONFIG_RT_GROUP_SCHED", "7028": "CONFIG_RT_MUTEXES", "7029": "CONFIG_RT_MUTEX_TESTER", "7030": "CONFIG_RWSEM_SPIN_ON_OWNER", "7031": "CONFIG_S390", "7032": "CONFIG_SCHEDSTATS", "7033": "CONFIG_SCHED_AUTOGROUP", "7034": "CONFIG_SCHED_DEBUG", "7035": "CONFIG_SCHED_HRTICK", "7036": "CONFIG_SCHED_MC", "7037": "CONFIG_SCHED_SMT", "7038": "CONFIG_SCHED_STACK_END_CHECK", "7039": "CONFIG_SCHED_TRACER", "7040": "CONFIG_SECCOMP", "7041": "CONFIG_SECCOMP_FILTER", "7042": "CONFIG_SECURITY", "7043": "CONFIG_SECURITY_SELINUX", "7044": "CONFIG_SGETMASK_SYSCALL", "7045": "CONFIG_SMP", "7046": "CONFIG_SPARC", "7047": "CONFIG_SPARC64", "7048": "CONFIG_SPARSE_IRQ", "7049": "CONFIG_SRCU", "7050": "CONFIG_STACKTRACE", "7051": "CONFIG_STACK_GROWSUP", "7052": "CONFIG_STACK_TRACER", "7053": "CONFIG_STOP_MACHINE", "7054": "CONFIG_STRICT_DEVMEM", "7055": "CONFIG_SUPERH", "7056": "CONFIG_SUSPEND", "7057": "CONFIG_SUSPEND_FREEZER", "7058": "CONFIG_SYSCTL", "7059": "CONFIG_SYSCTL_ARCH_UNALIGN_ALLOW", "7060": "CONFIG_SYSCTL_ARCH_UNALIGN_NO_WARN", "7061": "CONFIG_SYSCTL_EXCEPTION_TRACE", "7062": "CONFIG_SYSCTL_SYSCALL", "7063": "CONFIG_SYSFS", "7064": "CONFIG_SYSVIPC", "7065": "CONFIG_TASKS_RCU", "7066": "CONFIG_TASK_DELAY_ACCT", "7067": "CONFIG_TASK_IO_ACCOUNTING", "7068": "CONFIG_TASK_XACCT", "7069": "CONFIG_TICK_ONESHOT", "7070": "CONFIG_TIMER_STATS", "7071": "CONFIG_TINY_RCU", "7072": "CONFIG_TRACEPOINTS", "7073": "CONFIG_TRACER_MAX_TRACE", "7074": "CONFIG_TRACER_SNAPSHOT", "7075": "CONFIG_TRACE_ENUM_MAP_FILE", "7076": "CONFIG_TRACE_IRQFLAGS", "7077": "CONFIG_TRACING", "7078": "CONFIG_TRANSPARENT_HUGEPAGE", "7079": "CONFIG_TREE_RCU", "7080": "CONFIG_UEVENT_HELPER", "7081": "CONFIG_UML", "7082": "CONFIG_UNICORE32", "7083": "CONFIG_UNINLINE_SPIN_UNLOCK", "7084": "CONFIG_UNUSED_SYMBOLS", "7085": "CONFIG_USER_NS", "7086": "CONFIG_VIRT_CPU_ACCOUNTING", "7087": "CONFIG_VIRT_CPU_ACCOUNTING_GEN", "7088": "CONFIG_VIRT_CPU_ACCOUNTING_NATIVE", "7089": "CONFIG_VSYSCALL", "7090": "CONFIG_X86", "7091": "CONFIG_X86_32", "7092": "CONFIG_X86_64", "7093": "CONFIG_X86_LOCAL_APIC", "7094": "CONSOLE_LOGLEVEL_DEFAULT", "7095": "CONSOLE_LOGLEVEL_MIN", "7096": "CONSOLE_LOGLEVEL_MOTORMOUTH", "7097": "CONST_IMM", "7098": "CONST_PTR_TO_MAP", "7099": "CONT", "7100": "CONTEXT_KERNEL", "7101": "CONTEXT_USER", "7102": "CONT_JMP", "7103": "CON_BRL", "7104": "CON_ENABLED", "7105": "CON_PRINTBUFFER", "7106": "COPY_CHUNK_SIZE", "7107": "CORENAME_MAX_SIZE", "7108": "CORRUPTED", "7109": "CPU", "7110": "CPU0", "7111": "CPU1", "7112": "CPUACCT_STAT_NSTATS", "7113": "CPUACCT_STAT_SYSTEM", "7114": "CPUACCT_STAT_USER", "7115": "CPUCLOCK_PROF", "7116": "CPUCLOCK_VIRT", "7117": "CPUPRI_INVALID", "7118": "CPUTIME_GUEST", "7119": "CPUTIME_GUEST_NICE", "7120": "CPUTIME_IDLE", "7121": "CPUTIME_IOWAIT", "7122": "CPUTIME_IRQ", "7123": "CPUTIME_NICE", "7124": "CPUTIME_SOFTIRQ", "7125": "CPUTIME_STEAL", "7126": "CPUTIME_SYSTEM", "7127": "CPUTIME_USER", "7128": "CPU_BITS_ALL", "7129": "CPU_BROKEN", "7130": "CPU_CLUSTER_PM_ENTER", "7131": "CPU_CLUSTER_PM_ENTER_FAILED", "7132": "CPU_CLUSTER_PM_EXIT", "7133": "CPU_DEAD", "7134": "CPU_DEAD_FROZEN", "7135": "CPU_DONT_CARE", "7136": "CPU_DOWN_FAILED", "7137": "CPU_DOWN_FAILED_FROZEN", "7138": "CPU_DOWN_PREPARE", "7139": "CPU_DOWN_PREPARE_FROZEN", "7140": "CPU_DYING", "7141": "CPU_DYING_FROZEN", "7142": "CPU_DYING_IDLE", "7143": "CPU_IDLE", "7144": "CPU_LOAD_IDX_MAX", "7145": "CPU_NEWLY_IDLE", "7146": "CPU_NOT_IDLE", "7147": "CPU_ONLINE", "7148": "CPU_ONLINE_FROZEN", "7149": "CPU_PM_ENTER", "7150": "CPU_PM_ENTER_FAILED", "7151": "CPU_PM_EXIT", "7152": "CPU_POST_DEAD", "7153": "CPU_PRI_CPUSET_ACTIVE", "7154": "CPU_PRI_CPUSET_INACTIVE", "7155": "CPU_PRI_MIGRATION", "7156": "CPU_PRI_SCHED_ACTIVE", "7157": "CPU_PRI_SCHED_INACTIVE", "7158": "CPU_PRI_SMPBOOT", "7159": "CPU_PROFILING", "7160": "CPU_STARTING", "7161": "CPU_STARTING_FROZEN", "7162": "CPU_TASKS_FROZEN", "7163": "CPU_UP_CANCELED", "7164": "CPU_UP_CANCELED_FROZEN", "7165": "CPU_UP_PREPARE", "7166": "CPU_UP_PREPARE_FROZEN", "7167": "CPUs", "7168": "CQ_MASK", "7169": "CREATE_COOLDOWN", "7170": "CREATE_TRACE_POINTS", "7171": "CRED", "7172": "CRED_MAGIC", "7173": "CRED_MAGIC_DEAD", "7174": "CSD_FLAG_LOCK", "7175": "CSD_FLAG_SYNCHRONOUS", "7176": "CSIGNAL", "7177": "CSS_NO_REF", "7178": "CSS_ONLINE", "7179": "CSS_RELEASED", "7180": "CSS_SET_HASH_BITS", "7181": "CS_CPU_EXCLUSIVE", "7182": "CS_MEMORY_MIGRATE", "7183": "CS_MEM_EXCLUSIVE", "7184": "CS_MEM_HARDWALL", "7185": "CS_NAME_LEN", "7186": "CS_ONLINE", "7187": "CS_SCHED_LOAD_BALANCE", "7188": "CS_SPREAD_PAGE", "7189": "CS_SPREAD_SLAB", "7190": "CTL_ABI", "7191": "CTL_BUS", "7192": "CTL_BUS_ISA", "7193": "CTL_DEV", "7194": "CTL_DIR", "7195": "CTL_DNADR", "7196": "CTL_FS", "7197": "CTL_INT", "7198": "CTL_KERN", "7199": "CTL_MAXNAME", "7200": "CTL_MAX_RESVPORT", "7201": "CTL_MIN_RESVPORT", "7202": "CTL_NET", "7203": "CTL_PM", "7204": "CTL_S390DBF", "7205": "CTL_SLOTTABLE_TCP", "7206": "CTL_SLOTTABLE_UDP", "7207": "CTL_STR", "7208": "CTL_SUNRPC", "7209": "CTL_ULONG", "7210": "CTL_UUID", "7211": "CTL_VM", "7212": "CTRL_N", "7213": "CTRL_P", "7214": "CTX", "7215": "CURRENT_TIME", "7216": "C_A_D", "7217": "Can", "7218": "Cannot", "7219": "Chain", "7220": "Check_image", "7221": "Cleanup", "7222": "ClearPagePrivate", "7223": "Clears", "7224": "Clocksource", "7225": "Close", "7226": "Close_Finish", "7227": "Collection", "7228": "Comm", "7229": "Copy", "7230": "Could", "7231": "DATAOF_TRACE_ENTRY", "7232": "DATA_CNT", "7233": "DATA_REC", "7234": "DBG_MAX_REG_NUM", "7235": "DBG_PASS_EVENT", "7236": "DBG_SWITCH_CPU_EVENT", "7237": "DCPU_IS_SLAVE", "7238": "DCPU_NEXT_MASTER", "7239": "DCPU_SSTEP", "7240": "DCPU_WANT_MASTER", "7241": "DEADLOCK", "7242": "DEBUG", "7243": "DEBUGFS_FILENAME", "7244": "DEBUG_LOCKS_WARN_ON", "7245": "DEBUG_SHIFT", "7246": "DECLARE_BASIC_FETCH_FUNCS", "7247": "DECLARE_BASIC_PRINT_TYPE_FUNC", "7248": "DECLARE_BITMAP", "7249": "DECLARE_COMPLETION", "7250": "DECLARE_COMPLETION_ONSTACK", "7251": "DECLARE_FETCH_FUNC", "7252": "DECLARE_HASHTABLE", "7253": "DECLARE_PER_CPU", "7254": "DECLARE_PER_CPU_SHARED_ALIGNED", "7255": "DECLARE_RWSEM", "7256": "DECLARE_TASKLET", "7257": "DECLARE_WAITQUEUE", "7258": "DECLARE_WAIT_QUEUE_HEAD", "7259": "DECLARE_WORK", "7260": "DEFAULT_CPU_TIME_MAX_PERCENT", "7261": "DEFAULT_FETCH_TYPE", "7262": "DEFAULT_FETCH_TYPE_STR", "7263": "DEFAULT_FS_OVERFLOWUID", "7264": "DEFAULT_ITERATIONS", "7265": "DEFAULT_MAX_SAMPLE_RATE", "7266": "DEFAULT_OVERFLOWGID", "7267": "DEFAULT_OVERFLOWUID", "7268": "DEFAULT_REBOOT_MODE", "7269": "DEFAULT_SAMPLE_PERIOD_NS", "7270": "DEFAULT_SYS_FILTER_MESSAGE", "7271": "DEFINE", "7272": "DEFINE_BASIC_FETCH_FUNCS", "7273": "DEFINE_BASIC_PRINT_TYPE_FUNC", "7274": "DEFINE_COMPARISON_PRED", "7275": "DEFINE_EQUALITY_PRED", "7276": "DEFINE_FETCH_", "7277": "DEFINE_FETCH_bitfield", "7278": "DEFINE_FETCH_deref", "7279": "DEFINE_FETCH_file_offset", "7280": "DEFINE_FETCH_memory", "7281": "DEFINE_FETCH_reg", "7282": "DEFINE_FETCH_retval", "7283": "DEFINE_FETCH_stack", "7284": "DEFINE_FETCH_symbol", "7285": "DEFINE_FIELD", "7286": "DEFINE_HASHTABLE", "7287": "DEFINE_IDR", "7288": "DEFINE_IRQ_WORK", "7289": "DEFINE_MUTEX", "7290": "DEFINE_PER_CPU", "7291": "DEFINE_PER_CPU_SHARED_ALIGNED", "7292": "DEFINE_RAW_SPINLOCK", "7293": "DEFINE_RCU_TPS", "7294": "DEFINE_RWLOCK", "7295": "DEFINE_SEMAPHORE", "7296": "DEFINE_SPINLOCK", "7297": "DEFINE_SRCU", "7298": "DEFINE_STATIC_LGLOCK", "7299": "DEFINE_STATIC_SRCU", "7300": "DEFINE_TIMER", "7301": "DEFINE_TORTURE_RANDOM", "7302": "DEFINE_WAIT", "7303": "DEFINE_WAIT_ATOMIC_T", "7304": "DEFINE_WAIT_BIT", "7305": "DEGRADE_SHIFT", "7306": "DELAYACCT_PF_SWAPIN", "7307": "DEQUEUE_SLEEP", "7308": "DEREGISTER", "7309": "DEVICE_ATTR", "7310": "DEVICE_ATTR_RO", "7311": "DEV_IPMI", "7312": "DEV_IPMI_POWEROFF_POWERCYCLE", "7313": "DEV_MAC_HID", "7314": "DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE", "7315": "DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE", "7316": "DEV_MAC_HID_MOUSE_BUTTON_EMULATION", "7317": "DEV_RAID", "7318": "DEV_RAID_SPEED_LIMIT_MAX", "7319": "DEV_RAID_SPEED_LIMIT_MIN", "7320": "DEV_SCSI", "7321": "DEV_SCSI_LOGGING_LEVEL", "7322": "DIE", "7323": "DIE_OOPS", "7324": "DIRECT", "7325": "DISABLE_BRANCH_PROFILING", "7326": "DISABLE_EVENT_STR", "7327": "DISCARD", "7328": "DISCOVERED", "7329": "DIV_ROUND_CLOSEST", "7330": "DIV_ROUND_UP", "7331": "DL", "7332": "DOING_KGDB", "7333": "DOING_SS", "7334": "DOUBLE_TICK", "7335": "DST", "7336": "DST_OP", "7337": "DST_OP_NO_MARK", "7338": "DTABCOUNT", "7339": "DUMP_ALL", "7340": "DUMP_ORIG", "7341": "DW", "7342": "DYNTICK_TASK_EXIT_IDLE", "7343": "DYNTICK_TASK_FLAG", "7344": "DYNTICK_TASK_MASK", "7345": "DYNTICK_TASK_NEST_MASK", "7346": "DYNTICK_TASK_NEST_VALUE", "7347": "DYNTICK_TASK_NEST_WIDTH", "7348": "DYN_FTRACE_TEST_NAME", "7349": "DYN_FTRACE_TEST_NAME2", "7350": "Directory", "7351": "Disable", "7352": "Do", "7353": "Does", "7354": "Doesn", "7355": "Dumping", "7356": "Dynamic", "7357": "E", "7358": "E2BIG", "7359": "EACCES", "7360": "EADDRNOTAVAIL", "7361": "EAGAIN", "7362": "EALREADY", "7363": "EBADF", "7364": "EBADMSG", "7365": "EBUSY", "7366": "ECHILD", "7367": "ECONNREFUSED", "7368": "EDEADLK", "7369": "EEXIST", "7370": "EFAULT", "7371": "EFBIG", "7372": "EILSEQ", "7373": "EINPROGRESS", "7374": "EINTR", "7375": "EINVAL", "7376": "EIO", "7377": "ELFCORE_ADDR_MAX", "7378": "ELFMAG", "7379": "ELF_ST_BIND", "7380": "ELF_ST_TYPE", "7381": "EMPTY_HASH", "7382": "ENABLE_EVENT_STR", "7383": "ENAMETOOLONG", "7384": "ENANOSLEEP_NOTSUP", "7385": "ENODATA", "7386": "ENODEV", "7387": "ENOENT", "7388": "ENOEXEC", "7389": "ENOIOCTLCMD", "7390": "ENOKEY", "7391": "ENOMEM", "7392": "ENOPKG", "7393": "ENOSPC", "7394": "ENOSYS", "7395": "ENOTDIR", "7396": "ENOTSUP", "7397": "ENOTSUPP", "7398": "ENOTTY", "7399": "ENQUEUE_HEAD", "7400": "ENQUEUE_REPLENISH", "7401": "ENQUEUE_WAKEUP", "7402": "ENQUEUE_WAKING", "7403": "ENTRIES_PER_PAGE", "7404": "ENTRY_SIZE", "7405": "ENXIO", "7406": "EOPNOTSUPP", "7407": "EPERM", "7408": "ERANGE", "7409": "ERESTARTNOHAND", "7410": "ERESTARTNOINTR", "7411": "ERESTARTSYS", "7412": "ERESTART_RESTARTBLOCK", "7413": "ERROR", "7414": "ERR_CAST", "7415": "ERR_PTR", "7416": "ESRCH", "7417": "ETIME", "7418": "ETT_EVENT_ENABLE", "7419": "ETT_NONE", "7420": "ETT_SNAPSHOT", "7421": "ETT_STACKTRACE", "7422": "ETT_TRACE_ONOFF", "7423": "ET_REL", "7424": "EUSERS", "7425": "EVENTS", "7426": "EVENT_ALL", "7427": "EVENT_BUF_SIZE", "7428": "EVENT_DROPPED", "7429": "EVENT_FLEXIBLE", "7430": "EVENT_FOUND", "7431": "EVENT_HASHSIZE", "7432": "EVENT_OWNER_KERNEL", "7433": "EVENT_PINNED", "7434": "EWOULDBLOCK", "7435": "EXIT_DEAD", "7436": "EXIT_ZOMBIE", "7437": "EXPLORED", "7438": "EXPORT_PER_CPU_SYMBOL", "7439": "EXPORT_PER_CPU_SYMBOL_GPL", "7440": "EXPORT_SYMBOL", "7441": "EXPORT_SYMBOL_GPL", "7442": "EXPORT_TRACEPOINT_SYMBOL", "7443": "EXPORT_TRACEPOINT_SYMBOL_GPL", "7444": "EXPSIZE", "7445": "EXP_1", "7446": "EXP_15", "7447": "EXP_5", "7448": "Effective", "7449": "Elf_Ehdr", "7450": "Elf_Half", "7451": "Elf_Shdr", "7452": "Elf_Sym", "7453": "Enable_cpus", "7454": "Enable_irqs", "7455": "Entering", "7456": "Err", "7457": "Error", "7458": "Exit", "7459": "F", "7460": "FALLTHROUGH", "7461": "FAULT_FLAG_MKWRITE", "7462": "FAULT_FLAG_WRITE", "7463": "FETCH_FUNC_NAME", "7464": "FETCH_MTD_", "7465": "FETCH_MTD_END", "7466": "FETCH_MTD_bitfield", "7467": "FETCH_MTD_deref", "7468": "FETCH_MTD_file_offset", "7469": "FETCH_MTD_memory", "7470": "FETCH_MTD_reg", "7471": "FETCH_MTD_retval", "7472": "FETCH_MTD_stack", "7473": "FETCH_MTD_symbol", "7474": "FETCH_TYPE_STRING", "7475": "FETCH_TYPE_STRSIZE", "7476": "FIELD_STRING_FUNC", "7477": "FIELD_STRING_IP", "7478": "FIELD_STRING_RETIP", "7479": "FILE_CPULIST", "7480": "FILE_CPU_EXCLUSIVE", "7481": "FILE_EFFECTIVE_CPULIST", "7482": "FILE_EFFECTIVE_MEMLIST", "7483": "FILE_MEMLIST", "7484": "FILE_MEMORY_MIGRATE", "7485": "FILE_MEMORY_PRESSURE", "7486": "FILE_MEMORY_PRESSURE_ENABLED", "7487": "FILE_MEM_EXCLUSIVE", "7488": "FILE_MEM_HARDWALL", "7489": "FILE_SCHED_LOAD_BALANCE", "7490": "FILE_SCHED_RELAX_DOMAIN_LEVEL", "7491": "FILE_SPREAD_PAGE", "7492": "FILE_SPREAD_SLAB", "7493": "FILTER", "7494": "FILTER_DYN_STRING", "7495": "FILTER_OTHER", "7496": "FILTER_PRED_FOLD", "7497": "FILTER_PRED_INVALID", "7498": "FILTER_PRED_IS_RIGHT", "7499": "FILTER_PTR_STRING", "7500": "FILTER_STATIC_STRING", "7501": "FILTER_TRACE_FN", "7502": "FILT_ERR_BAD_SUBSYS_FILTER", "7503": "FILT_ERR_FIELD_NOT_FOUND", "7504": "FILT_ERR_ILLEGAL_FIELD_OP", "7505": "FILT_ERR_ILLEGAL_INTVAL", "7506": "FILT_ERR_ILLEGAL_NOT_OP", "7507": "FILT_ERR_INVALID_FILTER", "7508": "FILT_ERR_INVALID_OP", "7509": "FILT_ERR_IP_FIELD_ONLY", "7510": "FILT_ERR_MISSING_FIELD", "7511": "FILT_ERR_NONE", "7512": "FILT_ERR_OPERAND_TOO_LONG", "7513": "FILT_ERR_TOO_MANY_OPERANDS", "7514": "FILT_ERR_TOO_MANY_PREDS", "7515": "FILT_ERR_UNBALANCED_PAREN", "7516": "FIXED_1", "7517": "FLAGS_FILL_END", "7518": "FLAGS_FILL_FULL", "7519": "FLAGS_FILL_START", "7520": "FLUSH", "7521": "FMODE_CAN_WRITE", "7522": "FMODE_READ", "7523": "FMODE_WRITE", "7524": "FMT", "7525": "FM_COEF", "7526": "FM_MAXCNT", "7527": "FM_MAXTICKS", "7528": "FM_SCALE", "7529": "FORCE_SD_OVERLAP", "7530": "FORMAT_FIELD_SEPERATOR", "7531": "FORMAT_HEADER", "7532": "FORMAT_PRINTFMT", "7533": "FP", "7534": "FRAME_PTR", "7535": "FSHIFT", "7536": "FSNOTIFY_EVENT_INODE", "7537": "FSNOTIFY_EVENT_PATH", "7538": "FS_AIO_MAX_NR", "7539": "FS_AIO_NR", "7540": "FS_CREATE", "7541": "FS_DELETE", "7542": "FS_DELETE_SELF", "7543": "FS_DENTRY", "7544": "FS_DIR_NOTIFY", "7545": "FS_DQSTATS", "7546": "FS_DQ_ALLOCATED", "7547": "FS_DQ_CACHE_HITS", "7548": "FS_DQ_DROPS", "7549": "FS_DQ_FREE", "7550": "FS_DQ_LOOKUPS", "7551": "FS_DQ_READS", "7552": "FS_DQ_SYNCS", "7553": "FS_DQ_WARNINGS", "7554": "FS_DQ_WRITES", "7555": "FS_EVENT_ON_CHILD", "7556": "FS_INOTIFY", "7557": "FS_IN_IGNORED", "7558": "FS_LEASES", "7559": "FS_LEASE_TIME", "7560": "FS_MAXFILE", "7561": "FS_MOVE", "7562": "FS_MOVED_FROM", "7563": "FS_MOVED_TO", "7564": "FS_MOVE_SELF", "7565": "FS_NRINODE", "7566": "FS_OCFS2", "7567": "FS_OVERFLOWGID", "7568": "FS_OVERFLOWUID", "7569": "FS_STATINODE", "7570": "FS_UNMOUNT", "7571": "FS_XFS", "7572": "FTRACE_ADDR", "7573": "FTRACE_BUFF_MAX", "7574": "FTRACE_CMP_TYPE", "7575": "FTRACE_CTX_FIELDS", "7576": "FTRACE_DISABLE_CALLS", "7577": "FTRACE_ENTRY", "7578": "FTRACE_ENTRY_DUP", "7579": "FTRACE_ENTRY_REG", "7580": "FTRACE_EVENT_FL_ENABLED", "7581": "FTRACE_EVENT_FL_ENABLED_BIT", "7582": "FTRACE_EVENT_FL_FILTERED", "7583": "FTRACE_EVENT_FL_NO_SET_FILTER", "7584": "FTRACE_EVENT_FL_RECORDED_CMD", "7585": "FTRACE_EVENT_FL_RECORDED_CMD_BIT", "7586": "FTRACE_EVENT_FL_SOFT_DISABLED", "7587": "FTRACE_EVENT_FL_SOFT_DISABLED_BIT", "7588": "FTRACE_EVENT_FL_SOFT_MODE", "7589": "FTRACE_EVENT_FL_SOFT_MODE_BIT", "7590": "FTRACE_EVENT_FL_TRIGGER_COND_BIT", "7591": "FTRACE_EVENT_FL_TRIGGER_MODE_BIT", "7592": "FTRACE_FL_ENABLED", "7593": "FTRACE_FL_IPMODIFY", "7594": "FTRACE_FL_REGS", "7595": "FTRACE_FL_REGS_EN", "7596": "FTRACE_FL_TRAMP", "7597": "FTRACE_FL_TRAMP_EN", "7598": "FTRACE_FORCE_LIST_FUNC", "7599": "FTRACE_FUNC_HASHSIZE", "7600": "FTRACE_GRAPH_TRAMP_ADDR", "7601": "FTRACE_HASH_BITS", "7602": "FTRACE_HASH_MAX_BITS", "7603": "FTRACE_ITER_DO_HASH", "7604": "FTRACE_ITER_ENABLED", "7605": "FTRACE_ITER_FILTER", "7606": "FTRACE_ITER_HASH", "7607": "FTRACE_ITER_NOTRACE", "7608": "FTRACE_ITER_PRINTALL", "7609": "FTRACE_MAX_EVENT", "7610": "FTRACE_NOTRACE_DEPTH", "7611": "FTRACE_OPS_FL_ADDING", "7612": "FTRACE_OPS_FL_ALLOC_TRAMP", "7613": "FTRACE_OPS_FL_CONTROL", "7614": "FTRACE_OPS_FL_DELETED", "7615": "FTRACE_OPS_FL_DYNAMIC", "7616": "FTRACE_OPS_FL_ENABLED", "7617": "FTRACE_OPS_FL_INITIALIZED", "7618": "FTRACE_OPS_FL_IPMODIFY", "7619": "FTRACE_OPS_FL_MODIFYING", "7620": "FTRACE_OPS_FL_RECURSION_SAFE", "7621": "FTRACE_OPS_FL_REMOVING", "7622": "FTRACE_OPS_FL_SAVE_REGS", "7623": "FTRACE_OPS_FL_SAVE_REGS_IF_SUPPORTED", "7624": "FTRACE_OPS_FL_STUB", "7625": "FTRACE_PROFILE_HASH_BITS", "7626": "FTRACE_PROFILE_HASH_SIZE", "7627": "FTRACE_REF_MAX", "7628": "FTRACE_REGS_ADDR", "7629": "FTRACE_RETFUNC_DEPTH", "7630": "FTRACE_RETSTACK_ALLOC_SIZE", "7631": "FTRACE_STACK_ENTRIES", "7632": "FTRACE_START_FUNC_RET", "7633": "FTRACE_STOP_FUNC_RET", "7634": "FTRACE_UPDATE_CALLS", "7635": "FTRACE_UPDATE_IGNORE", "7636": "FTRACE_UPDATE_MAKE_CALL", "7637": "FTRACE_UPDATE_MAKE_NOP", "7638": "FTRACE_UPDATE_MODIFY_CALL", "7639": "FTRACE_UPDATE_TRACE_FUNC", "7640": "FTRACE_WARN_ON", "7641": "FTRACE_WARN_ON_ONCE", "7642": "FUA", "7643": "FULLSTOP_DONTSTOP", "7644": "FULLSTOP_RMMOD", "7645": "FULLSTOP_SHUTDOWN", "7646": "FUNCTION", "7647": "FUTEX_CMD_MASK", "7648": "FUTEX_CMP_REQUEUE", "7649": "FUTEX_CMP_REQUEUE_PI", "7650": "FUTEX_LOCK_PI", "7651": "FUTEX_REQUEUE", "7652": "FUTEX_TID_MASK", "7653": "FUTEX_WAIT", "7654": "FUTEX_WAIT_BITSET", "7655": "FUTEX_WAIT_REQUEUE_PI", "7656": "FUTEX_WAKE", "7657": "FUTEX_WAKE_OP", "7658": "F_STRUCT", "7659": "F_printk", "7660": "Failed", "7661": "Fallback", "7662": "Filters", "7663": "Finish", "7664": "Finishing", "7665": "Fix", "7666": "Fixing", "7667": "Format", "7668": "Free", "7669": "Free_bitmaps", "7670": "Free_first_bitmap", "7671": "Free_first_object", "7672": "Free_second_object", "7673": "GCOV_ADD", "7674": "GCOV_COUNTERS", "7675": "GCOV_DATA_MAGIC", "7676": "GCOV_H", "7677": "GCOV_REMOVE", "7678": "GCOV_TAG_COUNTER_BASE", "7679": "GCOV_TAG_FOR_COUNTER", "7680": "GCOV_TAG_FUNCTION", "7681": "GCOV_TAG_FUNCTION_LENGTH", "7682": "GENERIC_MSI_DOMAIN_OPS", "7683": "GENL_ADMIN_PERM", "7684": "GENL_ID_GENERATE", "7685": "GENTLE_FAIR_SLEEPERS", "7686": "GET_ENDIAN", "7687": "GET_FPEMU_CTL", "7688": "GET_FPEXC_CTL", "7689": "GET_FP_MODE", "7690": "GET_TSC_CTL", "7691": "GET_UNALIGN_CTL", "7692": "GFP_ATOMIC", "7693": "GFP_HIGHUSER", "7694": "GFP_KDB", "7695": "GFP_KERNEL", "7696": "GFP_NOFS", "7697": "GFP_NOWAIT", "7698": "GFP_TEMPORARY", "7699": "GFP_TRACE", "7700": "GFP_USER", "7701": "GLOBAL_ROOT_GID", "7702": "GLOBAL_ROOT_UID", "7703": "GOT_YOU_MORON", "7704": "GP", "7705": "GPL", "7706": "GPL_ONLY", "7707": "GRAPH_MAX_FUNC_TEST", "7708": "GRAPH_TRACER_FLAGS", "7709": "GROUP_AT", "7710": "H", "7711": "HARDIRQ", "7712": "HARDIRQ_OFFSET", "7713": "HARDIRQ_SHIFT", "7714": "HARDIRQ_VERBOSE", "7715": "HARDIRQ_verbose", "7716": "HASH_BITS", "7717": "HASH_EARLY", "7718": "HASH_SIZE", "7719": "HASH_SMALL", "7720": "HAVE_ARCH_COPY_SIGINFO_TO_USER", "7721": "HAVE_ARCH_PICK_MMAP_LAYOUT", "7722": "HAVE_JUMP_LABEL", "7723": "HAVE_RT_PUSH_IPI", "7724": "HC", "7725": "HE", "7726": "HIBERNATE_SIG", "7727": "HIBERNATION_FIRST", "7728": "HIBERNATION_INVALID", "7729": "HIBERNATION_MAX", "7730": "HIBERNATION_PLATFORM", "7731": "HIBERNATION_REBOOT", "7732": "HIBERNATION_SHUTDOWN", "7733": "HIBERNATION_SUSPEND", "7734": "HIGHPRI_NICE_LEVEL", "7735": "HI_SOFTIRQ", "7736": "HOWTO", "7737": "HP", "7738": "HP_THREAD_ACTIVE", "7739": "HP_THREAD_NONE", "7740": "HP_THREAD_PARKED", "7741": "HRT", "7742": "HRTICK", "7743": "HRTIMER_MAX_CLOCK_BASES", "7744": "HRTIMER_MODE_ABS", "7745": "HRTIMER_MODE_ABS_PINNED", "7746": "HRTIMER_MODE_REL", "7747": "HRTIMER_MODE_REL_PINNED", "7748": "HRTIMER_NORESTART", "7749": "HRTIMER_RESTART", "7750": "HUNG_TASK_BATCHING", "7751": "HZ", "7752": "HZ_TO_MSEC_DEN", "7753": "HZ_TO_MSEC_MUL32", "7754": "HZ_TO_MSEC_NUM", "7755": "HZ_TO_MSEC_SHR32", "7756": "HZ_TO_USEC_DEN", "7757": "HZ_TO_USEC_MUL32", "7758": "HZ_TO_USEC_NUM", "7759": "HZ_TO_USEC_SHR32", "7760": "I", "7761": "IDLE_WORKER_TIMEOUT", "7762": "IDX_INVALID", "7763": "IF_ASSIGN", "7764": "IMM", "7765": "INDEX", "7766": "IND_DESTINATION", "7767": "IND_DONE", "7768": "IND_INDIRECTION", "7769": "IND_SOURCE", "7770": "INFO", "7771": "INITIAL_JIFFIES", "7772": "INIT_DELAYED_WORK", "7773": "INIT_HLIST_HEAD", "7774": "INIT_HLIST_NODE", "7775": "INIT_LIST_HEAD", "7776": "INIT_OFFSET_MASK", "7777": "INIT_OPS_HASH", "7778": "INIT_RADIX_TREE", "7779": "INIT_STRUCT_PID", "7780": "INIT_TASK_COMM", "7781": "INIT_USER", "7782": "INIT_WORK", "7783": "INIT_WORK_ONSTACK", "7784": "INOTIFY_MAX_QUEUED_EVENTS", "7785": "INOTIFY_MAX_USER_INSTANCES", "7786": "INOTIFY_MAX_USER_WATCHES", "7787": "INT_MAX", "7788": "INT_MIN", "7789": "INVALID_RCU_FLAVOR", "7790": "INVALID_UID", "7791": "IOCSIZE_MASK", "7792": "IORESOURCE_BUSY", "7793": "IORESOURCE_EXCLUSIVE", "7794": "IORESOURCE_IO", "7795": "IORESOURCE_MEM", "7796": "IORESOURCE_MUXED", "7797": "IORESOURCE_SIZEALIGN", "7798": "IORESOURCE_STARTALIGN", "7799": "IORESOURCE_UNSET", "7800": "IO_SPACE_LIMIT", "7801": "IP_FMT", "7802": "IRQ", "7803": "IRQCHIP_EOI_IF_HANDLED", "7804": "IRQCHIP_EOI_THREADED", "7805": "IRQCHIP_MASK_ON_SUSPEND", "7806": "IRQCHIP_ONESHOT_SAFE", "7807": "IRQCHIP_ONOFFLINE_ENABLED", "7808": "IRQCHIP_SET_TYPE_MASKED", "7809": "IRQCHIP_SKIP_SET_WAKE", "7810": "IRQC_IS_HARDIRQ", "7811": "IRQC_IS_NESTED", "7812": "IRQD_AFFINITY_SET", "7813": "IRQD_IRQ_DISABLED", "7814": "IRQD_IRQ_INPROGRESS", "7815": "IRQD_IRQ_MASKED", "7816": "IRQD_LEVEL", "7817": "IRQD_MOVE_PCNTXT", "7818": "IRQD_NO_BALANCING", "7819": "IRQD_PER_CPU", "7820": "IRQD_SETAFFINITY_PENDING", "7821": "IRQD_TRIGGER_MASK", "7822": "IRQD_WAKEUP_ARMED", "7823": "IRQD_WAKEUP_STATE", "7824": "IRQF_COND_SUSPEND", "7825": "IRQF_EARLY_RESUME", "7826": "IRQF_FORCE_RESUME", "7827": "IRQF_IRQPOLL", "7828": "IRQF_MODIFY_MASK", "7829": "IRQF_NOBALANCING", "7830": "IRQF_NO_SUSPEND", "7831": "IRQF_NO_THREAD", "7832": "IRQF_ONESHOT", "7833": "IRQF_PERCPU", "7834": "IRQF_PROBE_SHARED", "7835": "IRQF_SHARED", "7836": "IRQF_TRIGGER_MASK", "7837": "IRQS_AUTODETECT", "7838": "IRQS_DISABLED", "7839": "IRQS_INPROGRESS", "7840": "IRQS_MASKED", "7841": "IRQS_ONESHOT", "7842": "IRQS_PENDING", "7843": "IRQS_POLL_INPROGRESS", "7844": "IRQS_REPLAY", "7845": "IRQS_SPURIOUS_DISABLED", "7846": "IRQS_SUSPENDED", "7847": "IRQS_WAITING", "7848": "IRQTF_AFFINITY", "7849": "IRQTF_FORCED_THREAD", "7850": "IRQTF_RUNTHREAD", "7851": "IRQTF_WARNED", "7852": "IRQ_BITMAP_BITS", "7853": "IRQ_DEFAULT_INIT_FLAGS", "7854": "IRQ_GC_BE_IO", "7855": "IRQ_GC_INIT_MASK_CACHE", "7856": "IRQ_GC_INIT_NESTED_LOCK", "7857": "IRQ_GC_MASK_CACHE_PER_TYPE", "7858": "IRQ_GC_NO_MASK", "7859": "IRQ_GET_DESC_CHECK_GLOBAL", "7860": "IRQ_GET_DESC_CHECK_PERCPU", "7861": "IRQ_HANDLED", "7862": "IRQ_IS_POLLED", "7863": "IRQ_LEVEL", "7864": "IRQ_MOVE_PCNTXT", "7865": "IRQ_NESTED_THREAD", "7866": "IRQ_NOAUTOEN", "7867": "IRQ_NONE", "7868": "IRQ_NOPROBE", "7869": "IRQ_NOREQUEST", "7870": "IRQ_NOTHREAD", "7871": "IRQ_NO_BALANCING", "7872": "IRQ_PER_CPU", "7873": "IRQ_PER_CPU_DEVID", "7874": "IRQ_SET_MASK_OK", "7875": "IRQ_SET_MASK_OK_DONE", "7876": "IRQ_SET_MASK_OK_NOCOPY", "7877": "IRQ_TYPE_LEVEL_MASK", "7878": "IRQ_TYPE_NONE", "7879": "IRQ_TYPE_PROBE", "7880": "IRQ_TYPE_SENSE_MASK", "7881": "IRQ_WAKE_THREAD", "7882": "IRQ_WORK_BUSY", "7883": "IRQ_WORK_FLAGS", "7884": "IRQ_WORK_LAZY", "7885": "IRQ_WORK_PENDING", "7886": "IRQs", "7887": "IS", "7888": "IS_ENABLED", "7889": "IS_ERR", "7890": "IS_ERR_OR_NULL", "7891": "IS_ERR_VALUE", "7892": "ITER_STRIDE", "7893": "ITIMER_PROF", "7894": "ITIMER_REAL", "7895": "ITIMER_VIRTUAL", "7896": "IT_ID_NOT_SET", "7897": "IT_ID_SET", "7898": "If", "7899": "Important", "7900": "Invalid", "7901": "It", "7902": "JMP_CALL", "7903": "JMP_EXIT", "7904": "JMP_JA", "7905": "JMP_JEQ_K", "7906": "JMP_JEQ_X", "7907": "JMP_JGE_K", "7908": "JMP_JGE_X", "7909": "JMP_JGT_K", "7910": "JMP_JGT_X", "7911": "JMP_JNE_K", "7912": "JMP_JNE_X", "7913": "JMP_JSET_K", "7914": "JMP_JSET_X", "7915": "JMP_JSGE_K", "7916": "JMP_JSGE_X", "7917": "JMP_JSGT_K", "7918": "JMP_JSGT_X", "7919": "JOBCTL_LISTENING", "7920": "JOBCTL_PENDING_MASK", "7921": "JOBCTL_STOP_CONSUME", "7922": "JOBCTL_STOP_DEQUEUED", "7923": "JOBCTL_STOP_PENDING", "7924": "JOBCTL_STOP_SIGMASK", "7925": "JOBCTL_TRAPPING", "7926": "JOBCTL_TRAPPING_BIT", "7927": "JOBCTL_TRAP_MASK", "7928": "JOBCTL_TRAP_NOTIFY", "7929": "JOBCTL_TRAP_STOP", "7930": "JUMP_LABEL_DISABLE", "7931": "JUMP_LABEL_ENABLE", "7932": "JUMP_LABEL_NOP_SIZE", "7933": "Jiffy", "7934": "K", "7935": "KB", "7936": "KBUILD_MODNAME", "7937": "KB_MASK", "7938": "KCMP_FILE", "7939": "KCMP_FILES", "7940": "KCMP_FS", "7941": "KCMP_IO", "7942": "KCMP_SIGHAND", "7943": "KCMP_SYSVSEM", "7944": "KCMP_TYPES", "7945": "KCMP_VM", "7946": "KDBCMD_BC", "7947": "KDBCMD_BD", "7948": "KDBCMD_BE", "7949": "KDBDEBUG", "7950": "KDB_ARGCOUNT", "7951": "KDB_BADADDR", "7952": "KDB_BADCPUNUM", "7953": "KDB_BADINT", "7954": "KDB_BADLENGTH", "7955": "KDB_BADRADIX", "7956": "KDB_BADREG", "7957": "KDB_BADWIDTH", "7958": "KDB_BASE_CMD_MAX", "7959": "KDB_BPTNOTFOUND", "7960": "KDB_CMD_CPU", "7961": "KDB_CMD_GO", "7962": "KDB_CMD_HISTORY_COUNT", "7963": "KDB_CMD_KGDB", "7964": "KDB_CMD_SS", "7965": "KDB_DB_BPT", "7966": "KDB_DB_NOBPT", "7967": "KDB_DB_SS", "7968": "KDB_DB_SSBPT", "7969": "KDB_DEBUG", "7970": "KDB_DEBUG_FLAG_", "7971": "KDB_DEBUG_FLAG_AR", "7972": "KDB_DEBUG_FLAG_ARA", "7973": "KDB_DEBUG_FLAG_BB", "7974": "KDB_DEBUG_FLAG_BB_SUMM", "7975": "KDB_DEBUG_FLAG_BP", "7976": "KDB_DEBUG_FLAG_MASK", "7977": "KDB_DEBUG_FLAG_SHIFT", "7978": "KDB_DEBUG_FLAG_STATE", "7979": "KDB_DEBUG_STATE", "7980": "KDB_DUPBPT", "7981": "KDB_ENABLE_ALWAYS_SAFE", "7982": "KDB_ENABLE_ALWAYS_SAFE_NO_ARGS", "7983": "KDB_ENABLE_FLOW_CTRL", "7984": "KDB_ENABLE_INSPECT", "7985": "KDB_ENABLE_INSPECT_NO_ARGS", "7986": "KDB_ENABLE_MEM_READ", "7987": "KDB_ENABLE_MEM_WRITE", "7988": "KDB_ENABLE_REBOOT", "7989": "KDB_ENABLE_REG_READ", "7990": "KDB_ENABLE_REG_WRITE", "7991": "KDB_ENABLE_SIGNAL", "7992": "KDB_FLAG", "7993": "KDB_FLAG_CLEAR", "7994": "KDB_FLAG_SET", "7995": "KDB_GREP_STRLEN", "7996": "KDB_INIT_EARLY", "7997": "KDB_INIT_FULL", "7998": "KDB_MAXBPT", "7999": "KDB_NOTFOUND", "8000": "KDB_NOTIMP", "8001": "KDB_NOT_INITIALIZED", "8002": "KDB_PCU", "8003": "KDB_REASON_BREAK", "8004": "KDB_REASON_DEBUG", "8005": "KDB_REASON_ENTER", "8006": "KDB_REASON_ENTER_SLAVE", "8007": "KDB_REASON_KEYBOARD", "8008": "KDB_REASON_NMI", "8009": "KDB_REASON_OOPS", "8010": "KDB_REASON_RECURSE", "8011": "KDB_REASON_SSTEP", "8012": "KDB_REASON_SWITCH", "8013": "KDB_REASON_SYSTEM_NMI", "8014": "KDB_REPEAT_NO_ARGS", "8015": "KDB_REPEAT_WITH_ARGS", "8016": "KDB_SP_DEFAULT", "8017": "KDB_SP_NEWLINE", "8018": "KDB_SP_PAREN", "8019": "KDB_SP_SPACEA", "8020": "KDB_SP_SPACEB", "8021": "KDB_SP_SYMSIZE", "8022": "KDB_SP_VALUE", "8023": "KDB_STATE", "8024": "KDB_STATE_CLEAR", "8025": "KDB_STATE_SET", "8026": "KDB_TOOMANYBPT", "8027": "KDB_TSK", "8028": "KDB_TSKREGS", "8029": "KDB_WORD_SIZE", "8030": "KERNEL_ATTR_RO", "8031": "KERNEL_ATTR_RW", "8032": "KERNEL_DS", "8033": "KERNEL_PARAM_FL_UNSAFE", "8034": "KERNEL_PARAM_OPS_FL_NOARG", "8035": "KERNFS_DIR", "8036": "KERNFS_ROOT_CREATE_DEACTIVATED", "8037": "KERN_ACCT", "8038": "KERN_ALERT", "8039": "KERN_BOOTLOADER_TYPE", "8040": "KERN_CADPID", "8041": "KERN_COMPAT_LOG", "8042": "KERN_CONT", "8043": "KERN_CORE_PATTERN", "8044": "KERN_CORE_USES_PID", "8045": "KERN_CRIT", "8046": "KERN_CTLALTDEL", "8047": "KERN_DEBUG", "8048": "KERN_DEFAULT", "8049": "KERN_DOMAINNAME", "8050": "KERN_EMERG", "8051": "KERN_ERR", "8052": "KERN_HOTPLUG", "8053": "KERN_HPPA_PWRSW", "8054": "KERN_HPPA_UNALIGNED", "8055": "KERN_IA64_UNALIGNED", "8056": "KERN_IEEE_EMULATION_WARNINGS", "8057": "KERN_INFO", "8058": "KERN_MAX_LOCK_DEPTH", "8059": "KERN_MAX_THREADS", "8060": "KERN_MODPROBE", "8061": "KERN_MSGMAX", "8062": "KERN_MSGMNB", "8063": "KERN_MSGMNI", "8064": "KERN_NGROUPS_MAX", "8065": "KERN_NODENAME", "8066": "KERN_OSRELEASE", "8067": "KERN_OSTYPE", "8068": "KERN_OVERFLOWGID", "8069": "KERN_OVERFLOWUID", "8070": "KERN_PANIC", "8071": "KERN_PANIC_ON_NMI", "8072": "KERN_PANIC_ON_OOPS", "8073": "KERN_PANIC_ON_WARN", "8074": "KERN_PIDMAX", "8075": "KERN_PPC_POWERSAVE_NAP", "8076": "KERN_PRINTK", "8077": "KERN_PRINTK_RATELIMIT", "8078": "KERN_PRINTK_RATELIMIT_BURST", "8079": "KERN_PTY", "8080": "KERN_RANDOM", "8081": "KERN_RANDOMIZE", "8082": "KERN_REALROOTDEV", "8083": "KERN_S390_USER_DEBUG_LOGGING", "8084": "KERN_SEM", "8085": "KERN_SETUID_DUMPABLE", "8086": "KERN_SG_BIG_BUFF", "8087": "KERN_SHMALL", "8088": "KERN_SHMMAX", "8089": "KERN_SHMMNI", "8090": "KERN_SPARC_REBOOT", "8091": "KERN_SPARC_SCONS_PWROFF", "8092": "KERN_SPARC_STOP_A", "8093": "KERN_SPIN_RETRY", "8094": "KERN_SYSRQ", "8095": "KERN_UNKNOWN_NMI_PANIC", "8096": "KERN_VERSION", "8097": "KERN_WARNING", "8098": "KEXEC_ARCH", "8099": "KEXEC_ARCH_DEFAULT", "8100": "KEXEC_ARCH_MASK", "8101": "KEXEC_CONTROL_MEMORY_LIMIT", "8102": "KEXEC_CONTROL_PAGE_SIZE", "8103": "KEXEC_CORE_NOTE_NAME", "8104": "KEXEC_CRASH_CONTROL_MEMORY_LIMIT", "8105": "KEXEC_CRASH_MEM_ALIGN", "8106": "KEXEC_DESTINATION_MEMORY_LIMIT", "8107": "KEXEC_FILE_NO_INITRAMFS", "8108": "KEXEC_FILE_ON_CRASH", "8109": "KEXEC_FLAGS", "8110": "KEXEC_ON_CRASH", "8111": "KEXEC_PRESERVE_CONTEXT", "8112": "KEXEC_SEGMENT_MAX", "8113": "KEXEC_SOURCE_MEMORY_LIMIT", "8114": "KEXEC_TYPE_CRASH", "8115": "KEXEC_TYPE_DEFAULT", "8116": "KEYBOARD", "8117": "KEY_ALLOC_NOT_IN_QUOTA", "8118": "KEY_ALLOC_TRUSTED", "8119": "KEY_FLAG_BUILTIN", "8120": "KEY_FLAG_TRUSTED_ONLY", "8121": "KEY_POS_ALL", "8122": "KEY_POS_SETATTR", "8123": "KEY_REQKEY_DEFL_THREAD_KEYRING", "8124": "KEY_USR_READ", "8125": "KEY_USR_SEARCH", "8126": "KEY_USR_VIEW", "8127": "KGDB_HW_BREAKPOINT", "8128": "KGDB_MAX_BREAKPOINTS", "8129": "KGDB_MAX_THREAD_QUERY", "8130": "KGDB_TRANS", "8131": "KGIDT_INIT", "8132": "KILL_TEST", "8133": "KIMAGE_NO_DEST", "8134": "KLP_DISABLED", "8135": "KLP_ENABLED", "8136": "KMEM_CACHE", "8137": "KMOD_PATH_LEN", "8138": "KMSG_DUMP_EMERG", "8139": "KMSG_DUMP_HALT", "8140": "KMSG_DUMP_POWEROFF", "8141": "KMSG_DUMP_RESTART", "8142": "KOBJ_ADD", "8143": "KP", "8144": "KPROBE_EVENT_SYSTEM", "8145": "KPROBE_FLAG_DISABLED", "8146": "KPROBE_FLAG_FTRACE", "8147": "KPROBE_FLAG_GONE", "8148": "KPROBE_FLAG_OPTIMIZED", "8149": "KPROBE_HASH_BITS", "8150": "KPROBE_INSN_PAGE_SIZE", "8151": "KPROBE_TABLE_SIZE", "8152": "KPROJIDT_INIT", "8153": "KSTK_EIP", "8154": "KSYM_NAME_LEN", "8155": "KSYM_SYMBOL_LEN", "8156": "KTHREAD_BITS", "8157": "KTHREAD_IS_PARKED", "8158": "KTHREAD_IS_PER_CPU", "8159": "KTHREAD_SHOULD_PARK", "8160": "KTHREAD_SHOULD_STOP", "8161": "KTHREAD_WORK_INIT", "8162": "KTIME_LOW_RES", "8163": "KTIME_MAX", "8164": "KUIDT_INIT", "8165": "L1_CACHE_BYTES", "8166": "LAST_BUDDY", "8167": "LAST_CPUPID_MASK", "8168": "LBF_ALL_PINNED", "8169": "LBF_DST_PINNED", "8170": "LBF_NEED_BREAK", "8171": "LBF_SOME_PINNED", "8172": "LB_BIAS", "8173": "LB_MIN", "8174": "LDST", "8175": "LDX_MEM_", "8176": "LDX_MEM_B", "8177": "LDX_MEM_DW", "8178": "LDX_MEM_H", "8179": "LDX_MEM_W", "8180": "LD_ABS_B", "8181": "LD_ABS_H", "8182": "LD_ABS_W", "8183": "LD_IMM_DW", "8184": "LD_IND_B", "8185": "LD_IND_H", "8186": "LD_IND_W", "8187": "LEN_OR_ZERO", "8188": "LINEAR", "8189": "LINES", "8190": "LINKED_PAGE_DATA_SIZE", "8191": "LINUX_REBOOT_CMD_CAD_OFF", "8192": "LINUX_REBOOT_CMD_CAD_ON", "8193": "LINUX_REBOOT_CMD_HALT", "8194": "LINUX_REBOOT_CMD_POWER_OFF", "8195": "LINUX_REBOOT_CMD_RESTART", "8196": "LINUX_REBOOT_CMD_RESTART2", "8197": "LINUX_REBOOT_MAGIC1", "8198": "LINUX_REBOOT_MAGIC2", "8199": "LINUX_REBOOT_MAGIC2A", "8200": "LINUX_REBOOT_MAGIC2B", "8201": "LINUX_REBOOT_MAGIC2C", "8202": "LINUX_VERSION_CODE", "8203": "LIST_HEAD", "8204": "LIST_HEAD_INIT", "8205": "LIST_POISON2", "8206": "LLONG_MAX", "8207": "LLONG_MIN", "8208": "LOAD_AVG_MAX", "8209": "LOAD_AVG_MAX_N", "8210": "LOAD_AVG_PERIOD", "8211": "LOAD_FRAC", "8212": "LOAD_FREQ", "8213": "LOAD_INT", "8214": "LOCAL_DISTANCE", "8215": "LOCKDEP_INIT_MAP", "8216": "LOCKDEP_NOW_UNRELIABLE", "8217": "LOCKDEP_STATE", "8218": "LOCKDEP_STILL_OK", "8219": "LOCKF_", "8220": "LOCKF_ENABLED_HARDIRQ", "8221": "LOCKF_ENABLED_HARDIRQ_READ", "8222": "LOCKF_ENABLED_IRQ", "8223": "LOCKF_ENABLED_IRQ_READ", "8224": "LOCKF_ENABLED_SOFTIRQ", "8225": "LOCKF_ENABLED_SOFTIRQ_READ", "8226": "LOCKF_USED", "8227": "LOCKF_USED_IN_HARDIRQ", "8228": "LOCKF_USED_IN_HARDIRQ_READ", "8229": "LOCKF_USED_IN_IRQ", "8230": "LOCKF_USED_IN_IRQ_READ", "8231": "LOCKF_USED_IN_SOFTIRQ", "8232": "LOCKF_USED_IN_SOFTIRQ_READ", "8233": "LOCKTORTURE_RUNNABLE_INIT", "8234": "LOCK_CONTENDED", "8235": "LOCK_CONTENDED_FLAGS", "8236": "LOCK_ENABLED_", "8237": "LOCK_ENABLED_HARDIRQ", "8238": "LOCK_ENABLED_HARDIRQ_READ", "8239": "LOCK_ENABLED_SOFTIRQ", "8240": "LOCK_ENABLED_SOFTIRQ_READ", "8241": "LOCK_USAGE_CHARS", "8242": "LOCK_USAGE_STATES", "8243": "LOCK_USED", "8244": "LOCK_USED_IN_", "8245": "LOCK_USED_IN_HARDIRQ", "8246": "LOCK_USED_IN_HARDIRQ_READ", "8247": "LOCK_USED_IN_RECLAIM_FS", "8248": "LOCK_USED_IN_RECLAIM_FS_READ", "8249": "LOCK_USED_IN_SOFTIRQ", "8250": "LOCK_USED_IN_SOFTIRQ_READ", "8251": "LOGGING", "8252": "LOG_ALIGN", "8253": "LOG_CONT", "8254": "LOG_LINE_MAX", "8255": "LOG_NEWLINE", "8256": "LOG_NOCONS", "8257": "LOG_PREFIX", "8258": "LONG_MAX", "8259": "LONG_MIN", "8260": "LOST", "8261": "LSH", "8262": "LSM_SETID_FS", "8263": "LSM_SETID_ID", "8264": "LSM_SETID_RE", "8265": "LSM_SETID_RES", "8266": "LT_BACKTRACEDEPTH", "8267": "LT_SAVECOUNT", "8268": "LZO1X_1_MEM_COMPRESS", "8269": "LZO_CMP_PAGES", "8270": "LZO_CMP_SIZE", "8271": "LZO_HEADER", "8272": "LZO_MAX_RD_PAGES", "8273": "LZO_MIN_RD_PAGES", "8274": "LZO_THREADS", "8275": "LZO_UNC_PAGES", "8276": "LZO_UNC_SIZE", "8277": "Ld", "8278": "Like", "8279": "Limit", "8280": "List", "8281": "Lu", "8282": "M", "8283": "MAGIC_END", "8284": "MAGIC_SIZE", "8285": "MAGIC_START", "8286": "MAJOR", "8287": "MANTSIZE", "8288": "MAP_DENYWRITE", "8289": "MAP_EXECUTABLE", "8290": "MAP_HUGETLB", "8291": "MAP_LOCKED", "8292": "MAP_PAGE_ENTRIES", "8293": "MAP_PRIVATE", "8294": "MAP_SHARED", "8295": "MARK", "8296": "MASK_DECLARE_1", "8297": "MASK_DECLARE_8", "8298": "MASK_TC_BIT", "8299": "MATCH_END_ONLY", "8300": "MATCH_FRONT_ONLY", "8301": "MATCH_FULL", "8302": "MATCH_MIDDLE_ONLY", "8303": "MAXARGC", "8304": "MAXEXP2", "8305": "MAXFRACT", "8306": "MAXFRACT2", "8307": "MAXFREQ", "8308": "MAXFREQ_SCALED", "8309": "MAXLR", "8310": "MAXRESERVE", "8311": "MAXTC", "8312": "MAX_ARCH_HEADER_SIZE", "8313": "MAX_ARGSTR_LEN", "8314": "MAX_ARG_STRLEN", "8315": "MAX_BPF_REG", "8316": "MAX_BPF_STACK", "8317": "MAX_CFTYPE_NAME", "8318": "MAX_CGROUP_ROOT_NAMELEN", "8319": "MAX_CGROUP_TYPE_NAMELEN", "8320": "MAX_CIRCULAR_QUEUE_SIZE", "8321": "MAX_CLOCKS", "8322": "MAX_CMDLINECONSOLES", "8323": "MAX_DL_PRIO", "8324": "MAX_DMA_CHANNELS", "8325": "MAX_ENTRIES", "8326": "MAX_ENTRIES_BITS", "8327": "MAX_ERRNO", "8328": "MAX_EVENT_NAME_LEN", "8329": "MAX_EXECVE_AUDIT_LEN", "8330": "MAX_FILTER_PRED", "8331": "MAX_FILTER_STR_VAL", "8332": "MAX_IDLE_WORKERS_RATIO", "8333": "MAX_INSNS_PER_PATH", "8334": "MAX_INSN_SIZE", "8335": "MAX_INTERRUPTS", "8336": "MAX_IORES_LEVEL", "8337": "MAX_JIFFY_OFFSET", "8338": "MAX_KMOD_CONCURRENT", "8339": "MAX_LOCKDEP_CHAINS", "8340": "MAX_LOCKDEP_CHAIN_HLOCKS", "8341": "MAX_LOCKDEP_ENTRIES", "8342": "MAX_LOCKDEP_KEYS", "8343": "MAX_LOCKDEP_KEYS_BITS", "8344": "MAX_LOCKDEP_SUBCLASSES", "8345": "MAX_LOCK_DEPTH", "8346": "MAX_NAMELEN", "8347": "MAX_NICE", "8348": "MAX_NR_ZONES", "8349": "MAX_NUMNODES", "8350": "MAX_OBJ_NUM", "8351": "MAX_ORDER", "8352": "MAX_PID_NS_LEVEL", "8353": "MAX_PINNED_INTERVAL", "8354": "MAX_PRIO", "8355": "MAX_PROCTITLE_AUDIT_LEN", "8356": "MAX_RCU_LVLS", "8357": "MAX_RT_PRIO", "8358": "MAX_RT_TEST_MUTEXES", "8359": "MAX_RT_TEST_THREADS", "8360": "MAX_SCAN_WINDOW", "8361": "MAX_SCHEDULE_TIMEOUT", "8362": "MAX_SEC_IN_JIFFIES", "8363": "MAX_SHARES", "8364": "MAX_SOFTIRQ_RESTART", "8365": "MAX_SOFTIRQ_TIME", "8366": "MAX_STACK_TRACE_ENTRIES", "8367": "MAX_STRING_SIZE", "8368": "MAX_SWAPFILES", "8369": "MAX_TASKS_SHOWN_PER_CSS", "8370": "MAX_THREADS", "8371": "MAX_TICKADJ", "8372": "MAX_TICKADJ_SCALED", "8373": "MAX_TRACER_SIZE", "8374": "MAX_TRACE_ARGS", "8375": "MAX_TVAL", "8376": "MAX_UPROBE_XOL_SLOTS", "8377": "MAX_URETPROBE_DEPTH", "8378": "MAX_USED_MAPS", "8379": "MAX_USER_RT_PRIO", "8380": "MAX_WORK", "8381": "MAY", "8382": "MAYDAY_INITIAL_TIMEOUT", "8383": "MAYDAY_INTERVAL", "8384": "MAY_EXEC", "8385": "MB", "8386": "MC", "8387": "MCOUNT_ADDR", "8388": "MCOUNT_INSN_SIZE", "8389": "MCOUNT_RECORD", "8390": "MDCOUNT", "8391": "MESSAGE_LOGLEVEL_DEFAULT", "8392": "META", "8393": "MINOR", "8394": "MIN_DELTA_LIMIT", "8395": "MIN_NICE", "8396": "MIN_SHARES", "8397": "MIN_THREADS", "8398": "MIN_vruntime", "8399": "MISC_DYNAMIC_MINOR", "8400": "MISSING", "8401": "MMF_DUMP_FILTER_DEFAULT", "8402": "MMF_EXE_FILE_CHANGED", "8403": "MMF_HAS_UPROBES", "8404": "MMF_INIT_MASK", "8405": "MMF_RECALC_UPROBES", "8406": "MMIO_PROBE", "8407": "MMIO_READ", "8408": "MMIO_UNKNOWN_OP", "8409": "MMIO_UNPROBE", "8410": "MMIO_WRITE", "8411": "MM_ANONPAGES", "8412": "MM_FILEPAGES", "8413": "MNT_NOEXEC", "8414": "MODINFO_ATTR", "8415": "MODULE", "8416": "MODULE_ALIAS", "8417": "MODULE_AUTHOR", "8418": "MODULE_DESCRIPTION", "8419": "MODULE_INIT_IGNORE_MODVERSIONS", "8420": "MODULE_INIT_IGNORE_VERMAGIC", "8421": "MODULE_LICENSE", "8422": "MODULE_NAME_LEN", "8423": "MODULE_PARAM_PREFIX", "8424": "MODULE_PARM_DESC", "8425": "MODULE_REF_BASE", "8426": "MODULE_SIG_STRING", "8427": "MODULE_STATE_COMING", "8428": "MODULE_STATE_GOING", "8429": "MODULE_STATE_LIVE", "8430": "MODULE_STATE_UNFORMED", "8431": "MOD_NUMBER_OF_PAGES", "8432": "MOREPROMPT", "8433": "MOVE_DOWN", "8434": "MOVE_UP_FROM_LEFT", "8435": "MOVE_UP_FROM_RIGHT", "8436": "MPOL_F_MORON", "8437": "MPOL_MF_MOVE_ALL", "8438": "MPOL_REBIND_STEP1", "8439": "MPOL_REBIND_STEP2", "8440": "MPX_DISABLE_MANAGEMENT", "8441": "MPX_ENABLE_MANAGEMENT", "8442": "MSEC_PER_SEC", "8443": "MSEC_TO_HZ_ADJ32", "8444": "MSEC_TO_HZ_MUL32", "8445": "MSEC_TO_HZ_SHR32", "8446": "MSI_FLAG_IDENTITY_MAP", "8447": "MSI_FLAG_USE_DEF_CHIP_OPS", "8448": "MSI_FLAG_USE_DEF_DOM_OPS", "8449": "MUL", "8450": "MULTI_STOP_DISABLE_IRQ", "8451": "MULTI_STOP_EXIT", "8452": "MULTI_STOP_NONE", "8453": "MULTI_STOP_PREPARE", "8454": "MULTI_STOP_RUN", "8455": "MUTEX_DEBUG_FREE", "8456": "MUTEX_DEBUG_INIT", "8457": "Make", "8458": "Marking", "8459": "Maximum", "8460": "McKenney", "8461": "Must", "8462": "N", "8463": "NAME_MAX", "8464": "NETLINK_AUDIT", "8465": "NETLINK_CB", "8466": "NET_ATALK", "8467": "NET_ATALK_AARP_EXPIRY_TIME", "8468": "NET_ATALK_AARP_RESOLVE_TIME", "8469": "NET_ATALK_AARP_RETRANSMIT_LIMIT", "8470": "NET_ATALK_AARP_TICK_TIME", "8471": "NET_AX25", "8472": "NET_AX25_BACKOFF_TYPE", "8473": "NET_AX25_CONNECT_MODE", "8474": "NET_AX25_DAMA_SLAVE_TIMEOUT", "8475": "NET_AX25_DEFAULT_MODE", "8476": "NET_AX25_EXTENDED_WINDOW", "8477": "NET_AX25_IDLE_TIMEOUT", "8478": "NET_AX25_IP_DEFAULT_MODE", "8479": "NET_AX25_N2", "8480": "NET_AX25_PACLEN", "8481": "NET_AX25_PROTOCOL", "8482": "NET_AX25_STANDARD_WINDOW", "8483": "NET_AX25_T1_TIMEOUT", "8484": "NET_AX25_T2_TIMEOUT", "8485": "NET_AX25_T3_TIMEOUT", "8486": "NET_CIPSOV4_CACHE_BUCKET_SIZE", "8487": "NET_CIPSOV4_CACHE_ENABLE", "8488": "NET_CIPSOV4_RBM_OPTFMT", "8489": "NET_CIPSOV4_RBM_STRICTVALID", "8490": "NET_CORE", "8491": "NET_CORE_AEVENT_ETIME", "8492": "NET_CORE_AEVENT_RSEQTH", "8493": "NET_CORE_BUDGET", "8494": "NET_CORE_DEV_WEIGHT", "8495": "NET_CORE_MAX_BACKLOG", "8496": "NET_CORE_MSG_BURST", "8497": "NET_CORE_MSG_COST", "8498": "NET_CORE_OPTMEM_MAX", "8499": "NET_CORE_RMEM_DEFAULT", "8500": "NET_CORE_RMEM_MAX", "8501": "NET_CORE_SOMAXCONN", "8502": "NET_CORE_WARNINGS", "8503": "NET_CORE_WMEM_DEFAULT", "8504": "NET_CORE_WMEM_MAX", "8505": "NET_DECNET", "8506": "NET_DECNET_CONF", "8507": "NET_DECNET_CONF_DDCMP", "8508": "NET_DECNET_CONF_DEV_FORWARDING", "8509": "NET_DECNET_CONF_DEV_PRIORITY", "8510": "NET_DECNET_CONF_DEV_T2", "8511": "NET_DECNET_CONF_DEV_T3", "8512": "NET_DECNET_CONF_ETHER", "8513": "NET_DECNET_CONF_GRE", "8514": "NET_DECNET_CONF_LOOPBACK", "8515": "NET_DECNET_CONF_PPP", "8516": "NET_DECNET_CONF_X25", "8517": "NET_DECNET_DEBUG_LEVEL", "8518": "NET_DECNET_DEFAULT_DEVICE", "8519": "NET_DECNET_DI_COUNT", "8520": "NET_DECNET_DN_COUNT", "8521": "NET_DECNET_DR_COUNT", "8522": "NET_DECNET_DST_GC_INTERVAL", "8523": "NET_DECNET_MEM", "8524": "NET_DECNET_NODE_ADDRESS", "8525": "NET_DECNET_NODE_NAME", "8526": "NET_DECNET_NO_FC_MAX_CWND", "8527": "NET_DECNET_RMEM", "8528": "NET_DECNET_TIME_WAIT", "8529": "NET_DECNET_WMEM", "8530": "NET_IPV4", "8531": "NET_IPV4_CONF", "8532": "NET_IPV4_CONF_ACCEPT_REDIRECTS", "8533": "NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE", "8534": "NET_IPV4_CONF_ARPFILTER", "8535": "NET_IPV4_CONF_ARP_ACCEPT", "8536": "NET_IPV4_CONF_ARP_ANNOUNCE", "8537": "NET_IPV4_CONF_ARP_IGNORE", "8538": "NET_IPV4_CONF_ARP_NOTIFY", "8539": "NET_IPV4_CONF_BOOTP_RELAY", "8540": "NET_IPV4_CONF_FORCE_IGMP_VERSION", "8541": "NET_IPV4_CONF_FORWARDING", "8542": "NET_IPV4_CONF_LOG_MARTIANS", "8543": "NET_IPV4_CONF_MC_FORWARDING", "8544": "NET_IPV4_CONF_MEDIUM_ID", "8545": "NET_IPV4_CONF_NOPOLICY", "8546": "NET_IPV4_CONF_NOXFRM", "8547": "NET_IPV4_CONF_PROMOTE_SECONDARIES", "8548": "NET_IPV4_CONF_PROXY_ARP", "8549": "NET_IPV4_CONF_RP_FILTER", "8550": "NET_IPV4_CONF_SECURE_REDIRECTS", "8551": "NET_IPV4_CONF_SEND_REDIRECTS", "8552": "NET_IPV4_CONF_SHARED_MEDIA", "8553": "NET_IPV4_CONF_TAG", "8554": "NET_IPV4_DEFAULT_TTL", "8555": "NET_IPV4_DYNADDR", "8556": "NET_IPV4_FORWARD", "8557": "NET_IPV4_ICMP_ECHO_IGNORE_ALL", "8558": "NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS", "8559": "NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR", "8560": "NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES", "8561": "NET_IPV4_ICMP_RATELIMIT", "8562": "NET_IPV4_ICMP_RATEMASK", "8563": "NET_IPV4_IGMP_MAX_MEMBERSHIPS", "8564": "NET_IPV4_IGMP_MAX_MSF", "8565": "NET_IPV4_INET_PEER_GC_MAXTIME", "8566": "NET_IPV4_INET_PEER_GC_MINTIME", "8567": "NET_IPV4_INET_PEER_MAXTTL", "8568": "NET_IPV4_INET_PEER_MINTTL", "8569": "NET_IPV4_INET_PEER_THRESHOLD", "8570": "NET_IPV4_IPFRAG_HIGH_THRESH", "8571": "NET_IPV4_IPFRAG_LOW_THRESH", "8572": "NET_IPV4_IPFRAG_SECRET_INTERVAL", "8573": "NET_IPV4_IPFRAG_TIME", "8574": "NET_IPV4_LOCAL_PORT_RANGE", "8575": "NET_IPV4_NEIGH", "8576": "NET_IPV4_NETFILTER", "8577": "NET_IPV4_NF_CONNTRACK_BUCKETS", "8578": "NET_IPV4_NF_CONNTRACK_CHECKSUM", "8579": "NET_IPV4_NF_CONNTRACK_COUNT", "8580": "NET_IPV4_NF_CONNTRACK_LOG_INVALID", "8581": "NET_IPV4_NF_CONNTRACK_MAX", "8582": "NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL", "8583": "NET_IPV4_NF_CONNTRACK_TCP_LOOSE", "8584": "NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS", "8585": "NET_IPV4_NONLOCAL_BIND", "8586": "NET_IPV4_NO_PMTU_DISC", "8587": "NET_IPV4_ROUTE", "8588": "NET_IPV4_ROUTE_ERROR_BURST", "8589": "NET_IPV4_ROUTE_ERROR_COST", "8590": "NET_IPV4_ROUTE_FLUSH", "8591": "NET_IPV4_ROUTE_GC_ELASTICITY", "8592": "NET_IPV4_ROUTE_GC_MIN_INTERVAL", "8593": "NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS", "8594": "NET_IPV4_ROUTE_GC_THRESH", "8595": "NET_IPV4_ROUTE_GC_TIMEOUT", "8596": "NET_IPV4_ROUTE_MAX_SIZE", "8597": "NET_IPV4_ROUTE_MIN_ADVMSS", "8598": "NET_IPV4_ROUTE_MIN_PMTU", "8599": "NET_IPV4_ROUTE_MTU_EXPIRES", "8600": "NET_IPV4_ROUTE_REDIRECT_LOAD", "8601": "NET_IPV4_ROUTE_REDIRECT_NUMBER", "8602": "NET_IPV4_ROUTE_REDIRECT_SILENCE", "8603": "NET_IPV4_TCP_FIN_TIMEOUT", "8604": "NET_IPV4_TCP_KEEPALIVE_INTVL", "8605": "NET_IPV4_TCP_KEEPALIVE_PROBES", "8606": "NET_IPV4_TCP_KEEPALIVE_TIME", "8607": "NET_IPV4_TCP_RETRANS_COLLAPSE", "8608": "NET_IPV4_TCP_RETRIES1", "8609": "NET_IPV4_TCP_RETRIES2", "8610": "NET_IPV4_TCP_SACK", "8611": "NET_IPV4_TCP_SYN_RETRIES", "8612": "NET_IPV4_TCP_TIMESTAMPS", "8613": "NET_IPV4_TCP_WINDOW_SCALING", "8614": "NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS", "8615": "NET_IPV6", "8616": "NET_IPV6_ACCEPT_RA", "8617": "NET_IPV6_ACCEPT_RA_DEFRTR", "8618": "NET_IPV6_ACCEPT_RA_FROM_LOCAL", "8619": "NET_IPV6_ACCEPT_RA_PINFO", "8620": "NET_IPV6_ACCEPT_RA_RTR_PREF", "8621": "NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN", "8622": "NET_IPV6_ACCEPT_REDIRECTS", "8623": "NET_IPV6_ACCEPT_SOURCE_ROUTE", "8624": "NET_IPV6_AUTOCONF", "8625": "NET_IPV6_BINDV6ONLY", "8626": "NET_IPV6_CONF", "8627": "NET_IPV6_DAD_TRANSMITS", "8628": "NET_IPV6_FORCE_MLD_VERSION", "8629": "NET_IPV6_FORWARDING", "8630": "NET_IPV6_HOP_LIMIT", "8631": "NET_IPV6_ICMP", "8632": "NET_IPV6_ICMP_RATELIMIT", "8633": "NET_IPV6_IP6FRAG_HIGH_THRESH", "8634": "NET_IPV6_IP6FRAG_LOW_THRESH", "8635": "NET_IPV6_IP6FRAG_SECRET_INTERVAL", "8636": "NET_IPV6_IP6FRAG_TIME", "8637": "NET_IPV6_MAX_ADDRESSES", "8638": "NET_IPV6_MAX_DESYNC_FACTOR", "8639": "NET_IPV6_MLD_MAX_MSF", "8640": "NET_IPV6_MTU", "8641": "NET_IPV6_NEIGH", "8642": "NET_IPV6_PROXY_NDP", "8643": "NET_IPV6_REGEN_MAX_RETRY", "8644": "NET_IPV6_ROUTE", "8645": "NET_IPV6_ROUTE_GC_ELASTICITY", "8646": "NET_IPV6_ROUTE_GC_INTERVAL", "8647": "NET_IPV6_ROUTE_GC_MIN_INTERVAL", "8648": "NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS", "8649": "NET_IPV6_ROUTE_GC_THRESH", "8650": "NET_IPV6_ROUTE_GC_TIMEOUT", "8651": "NET_IPV6_ROUTE_MAX_SIZE", "8652": "NET_IPV6_ROUTE_MIN_ADVMSS", "8653": "NET_IPV6_ROUTE_MTU_EXPIRES", "8654": "NET_IPV6_RTR_PROBE_INTERVAL", "8655": "NET_IPV6_RTR_SOLICITS", "8656": "NET_IPV6_RTR_SOLICIT_DELAY", "8657": "NET_IPV6_RTR_SOLICIT_INTERVAL", "8658": "NET_IPV6_TEMP_PREFERED_LFT", "8659": "NET_IPV6_TEMP_VALID_LFT", "8660": "NET_IPV6_USE_TEMPADDR", "8661": "NET_IPX", "8662": "NET_IPX_PPROP_BROADCASTING", "8663": "NET_IRDA", "8664": "NET_IRDA_DEBUG", "8665": "NET_IRDA_DEVNAME", "8666": "NET_IRDA_DISCOVERY", "8667": "NET_IRDA_DISCOVERY_SLOTS", "8668": "NET_IRDA_DISCOVERY_TIMEOUT", "8669": "NET_IRDA_FAST_POLL", "8670": "NET_IRDA_LAP_KEEPALIVE_TIME", "8671": "NET_IRDA_MAX_BAUD_RATE", "8672": "NET_IRDA_MAX_NOREPLY_TIME", "8673": "NET_IRDA_MAX_TX_DATA_SIZE", "8674": "NET_IRDA_MAX_TX_WINDOW", "8675": "NET_IRDA_MIN_TX_TURN_TIME", "8676": "NET_IRDA_SLOT_TIMEOUT", "8677": "NET_IRDA_WARN_NOREPLY_TIME", "8678": "NET_LLC", "8679": "NET_LLC2", "8680": "NET_LLC2_ACK_TIMEOUT", "8681": "NET_LLC2_BUSY_TIMEOUT", "8682": "NET_LLC2_P_TIMEOUT", "8683": "NET_LLC2_REJ_TIMEOUT", "8684": "NET_LLC_STATION", "8685": "NET_LLC_STATION_ACK_TIMEOUT", "8686": "NET_NEIGH_APP_SOLICIT", "8687": "NET_NEIGH_DELAY_PROBE_TIME", "8688": "NET_NEIGH_GC_INTERVAL", "8689": "NET_NEIGH_GC_STALE_TIME", "8690": "NET_NEIGH_GC_THRESH1", "8691": "NET_NEIGH_GC_THRESH2", "8692": "NET_NEIGH_GC_THRESH3", "8693": "NET_NEIGH_MCAST_SOLICIT", "8694": "NET_NEIGH_PROXY_QLEN", "8695": "NET_NEIGH_REACHABLE_TIME", "8696": "NET_NEIGH_REACHABLE_TIME_MS", "8697": "NET_NEIGH_RETRANS_TIME_MS", "8698": "NET_NEIGH_UCAST_SOLICIT", "8699": "NET_NEIGH_UNRES_QLEN", "8700": "NET_NETFILTER", "8701": "NET_NETROM", "8702": "NET_NETROM_DEFAULT_PATH_QUALITY", "8703": "NET_NETROM_LINK_FAILS_COUNT", "8704": "NET_NETROM_NETWORK_TTL_INITIALISER", "8705": "NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER", "8706": "NET_NETROM_RESET", "8707": "NET_NETROM_ROUTING_CONTROL", "8708": "NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY", "8709": "NET_NETROM_TRANSPORT_BUSY_DELAY", "8710": "NET_NETROM_TRANSPORT_MAXIMUM_TRIES", "8711": "NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT", "8712": "NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE", "8713": "NET_NETROM_TRANSPORT_TIMEOUT", "8714": "NET_NF_CONNTRACK_BUCKETS", "8715": "NET_NF_CONNTRACK_CHECKSUM", "8716": "NET_NF_CONNTRACK_COUNT", "8717": "NET_NF_CONNTRACK_FRAG6_HIGH_THRESH", "8718": "NET_NF_CONNTRACK_FRAG6_LOW_THRESH", "8719": "NET_NF_CONNTRACK_LOG_INVALID", "8720": "NET_NF_CONNTRACK_MAX", "8721": "NET_NF_CONNTRACK_TCP_BE_LIBERAL", "8722": "NET_NF_CONNTRACK_TCP_LOOSE", "8723": "NET_NF_CONNTRACK_TCP_MAX_RETRANS", "8724": "NET_PROTO_CONF_ALL", "8725": "NET_PROTO_CONF_DEFAULT", "8726": "NET_ROSE", "8727": "NET_ROSE_ACK_HOLD_BACK_TIMEOUT", "8728": "NET_ROSE_CALL_REQUEST_TIMEOUT", "8729": "NET_ROSE_CLEAR_REQUEST_TIMEOUT", "8730": "NET_ROSE_LINK_FAIL_TIMEOUT", "8731": "NET_ROSE_MAX_VCS", "8732": "NET_ROSE_NO_ACTIVITY_TIMEOUT", "8733": "NET_ROSE_RESET_REQUEST_TIMEOUT", "8734": "NET_ROSE_RESTART_REQUEST_TIMEOUT", "8735": "NET_ROSE_ROUTING_CONTROL", "8736": "NET_ROSE_WINDOW_SIZE", "8737": "NET_SCTP", "8738": "NET_SCTP_ADDIP_ENABLE", "8739": "NET_SCTP_ASSOCIATION_MAX_RETRANS", "8740": "NET_SCTP_HB_INTERVAL", "8741": "NET_SCTP_MAX_BURST", "8742": "NET_SCTP_MAX_INIT_RETRANSMITS", "8743": "NET_SCTP_PATH_MAX_RETRANS", "8744": "NET_SCTP_PRESERVE_ENABLE", "8745": "NET_SCTP_PRSCTP_ENABLE", "8746": "NET_SCTP_RCVBUF_POLICY", "8747": "NET_SCTP_RTO_ALPHA", "8748": "NET_SCTP_RTO_BETA", "8749": "NET_SCTP_RTO_INITIAL", "8750": "NET_SCTP_RTO_MAX", "8751": "NET_SCTP_RTO_MIN", "8752": "NET_SCTP_SACK_TIMEOUT", "8753": "NET_SCTP_SNDBUF_POLICY", "8754": "NET_SCTP_VALID_COOKIE_LIFE", "8755": "NET_TCP_ABORT_ON_OVERFLOW", "8756": "NET_TCP_ADV_WIN_SCALE", "8757": "NET_TCP_ALLOWED_CONG_CONTROL", "8758": "NET_TCP_APP_WIN", "8759": "NET_TCP_BASE_MSS", "8760": "NET_TCP_CONG_CONTROL", "8761": "NET_TCP_DSACK", "8762": "NET_TCP_ECN", "8763": "NET_TCP_FACK", "8764": "NET_TCP_FRTO", "8765": "NET_TCP_FRTO_RESPONSE", "8766": "NET_TCP_LOW_LATENCY", "8767": "NET_TCP_MAX_ORPHANS", "8768": "NET_TCP_MAX_SSTHRESH", "8769": "NET_TCP_MAX_SYN_BACKLOG", "8770": "NET_TCP_MAX_TW_BUCKETS", "8771": "NET_TCP_MEM", "8772": "NET_TCP_MODERATE_RCVBUF", "8773": "NET_TCP_MTU_PROBING", "8774": "NET_TCP_NO_METRICS_SAVE", "8775": "NET_TCP_ORPHAN_RETRIES", "8776": "NET_TCP_REORDERING", "8777": "NET_TCP_RFC1337", "8778": "NET_TCP_RMEM", "8779": "NET_TCP_SLOW_START_AFTER_IDLE", "8780": "NET_TCP_STDURG", "8781": "NET_TCP_SYNACK_RETRIES", "8782": "NET_TCP_SYNCOOKIES", "8783": "NET_TCP_TSO_WIN_DIVISOR", "8784": "NET_TCP_TW_RECYCLE", "8785": "NET_TCP_TW_REUSE", "8786": "NET_TCP_WMEM", "8787": "NET_TR", "8788": "NET_TR_RIF_TIMEOUT", "8789": "NET_UNIX", "8790": "NET_UNIX_MAX_DGRAM_QLEN", "8791": "NET_X25", "8792": "NET_X25_ACK_HOLD_BACK_TIMEOUT", "8793": "NET_X25_CALL_REQUEST_TIMEOUT", "8794": "NET_X25_CLEAR_REQUEST_TIMEOUT", "8795": "NET_X25_FORWARD", "8796": "NET_X25_RESET_REQUEST_TIMEOUT", "8797": "NET_X25_RESTART_REQUEST_TIMEOUT", "8798": "NEXT_BUDDY", "8799": "NEXT_TIMER_MAX_DELTA", "8800": "NGROUPS_MAX", "8801": "NICE_0_LOAD", "8802": "NICE_0_SHIFT", "8803": "NICE_TO_PRIO", "8804": "NLA_STRING", "8805": "NLA_U32", "8806": "NLMSG_DONE", "8807": "NLMSG_HDRLEN", "8808": "NLM_F_ACK", "8809": "NLM_F_MULTI", "8810": "NL_CFG_F_NONROOT_RECV", "8811": "NMI_WATCHDOG_ENABLED", "8812": "NMI_WATCHDOG_ENABLED_BIT", "8813": "NO", "8814": "NODE_MASK_NONE", "8815": "NOHZ", "8816": "NOHZ_BALANCE_KICK", "8817": "NOHZ_MODE_HIGHRES", "8818": "NOHZ_MODE_INACTIVE", "8819": "NOHZ_MODE_LOWRES", "8820": "NOHZ_TICK_STOPPED", "8821": "NOKPROBE_SYMBOL", "8822": "NONTASK_CAPACITY", "8823": "NOSECT", "8824": "NOTICE", "8825": "NOTIFY_BAD", "8826": "NOTIFY_DONE", "8827": "NOTIFY_OK", "8828": "NOTIFY_STOP_MASK", "8829": "NOT_GPL_ONLY", "8830": "NOT_INIT", "8831": "NO_CMDLINE_MAP", "8832": "NO_POLL_CHAR", "8833": "NR_ACCUMULATED_SAMPLES", "8834": "NR_ACTIVE_ANON", "8835": "NR_ACTIVE_FILE", "8836": "NR_CPUS", "8837": "NR_CPUS_BITS", "8838": "NR_FILE_MAPPED", "8839": "NR_FREE_PAGES", "8840": "NR_INACTIVE_ANON", "8841": "NR_INACTIVE_FILE", "8842": "NR_IRQS", "8843": "NR_IRQS_LEGACY", "8844": "NR_KERNEL_STACK", "8845": "NR_NUMA_HINT_FAULT_BUCKETS", "8846": "NR_NUMA_HINT_FAULT_STATS", "8847": "NR_NUMA_HINT_FAULT_TYPES", "8848": "NR_PAGEFLAGS", "8849": "NR_PROFILE_GRP", "8850": "NR_SLAB_RECLAIMABLE", "8851": "NR_SOFTIRQS", "8852": "NR_TO_INIT", "8853": "NR_syscalls", "8854": "NSEC_CONVERSION", "8855": "NSEC_JIFFIE_SC", "8856": "NSEC_PER_JIFFY", "8857": "NSEC_PER_MSEC", "8858": "NSEC_PER_SEC", "8859": "NSEC_PER_USEC", "8860": "NS_TO_JIFFIES", "8861": "NTP_INTERVAL_FREQ", "8862": "NTP_INTERVAL_LENGTH", "8863": "NTP_PHASE_LIMIT", "8864": "NTP_SCALE_SHIFT", "8865": "NT_PRSTATUS", "8866": "NULL", "8867": "NUMA", "8868": "NUMA_BACKPLANE", "8869": "NUMA_CPU", "8870": "NUMA_CPUBUF", "8871": "NUMA_DIRECT", "8872": "NUMA_FAVOUR_HIGHER", "8873": "NUMA_GLUELESS_MESH", "8874": "NUMA_MEM", "8875": "NUMA_MEMBUF", "8876": "NUMA_NO_NODE", "8877": "NUMA_PERIOD_SLOTS", "8878": "NUMA_PERIOD_THRESHOLD", "8879": "NUMA_RESIST_LOWER", "8880": "NUMA_ZONELIST_ORDER_LEN", "8881": "NUMREGBYTES", "8882": "NUM_RCU_LVL_0", "8883": "NUM_RCU_LVL_1", "8884": "NUM_RCU_LVL_2", "8885": "NUM_RCU_LVL_3", "8886": "NUM_RCU_LVL_4", "8887": "NUM_RCU_NODES", "8888": "N_MEMORY", "8889": "No", "8890": "Not", "8891": "Now", "8892": "Number", "8893": "OBJTREE", "8894": "OBJ_TREE", "8895": "ODEBUG_STATE_ACTIVE", "8896": "ODEBUG_STATE_NOTAVAILABLE", "8897": "OP", "8898": "OPCODE", "8899": "OPTIMIZE_DELAY", "8900": "OP_AND", "8901": "OP_BAND", "8902": "OP_EQ", "8903": "OP_GE", "8904": "OP_GLOB", "8905": "OP_GT", "8906": "OP_LE", "8907": "OP_LT", "8908": "OP_NE", "8909": "OP_NONE", "8910": "OP_NOT", "8911": "OP_OPEN_PAREN", "8912": "OP_OR", "8913": "OR", "8914": "OVERFLOW_PROJID", "8915": "O_ACCMODE", "8916": "O_APPEND", "8917": "O_CLOEXEC", "8918": "O_LARGEFILE", "8919": "O_RDONLY", "8920": "O_RDWR", "8921": "O_TRUNC", "8922": "O_WRONLY", "8923": "Overflow", "8924": "Override", "8925": "P", "8926": "P64", "8927": "PADATA_ATTR_RO", "8928": "PADATA_ATTR_RW", "8929": "PADATA_CPU_PARALLEL", "8930": "PADATA_CPU_SERIAL", "8931": "PADATA_INIT", "8932": "PADATA_INVALID", "8933": "PADATA_RESET", "8934": "PAGER", "8935": "PAGES_FOR_IO", "8936": "PAGE_CACHE_SHIFT", "8937": "PAGE_KERNEL", "8938": "PAGE_MASK", "8939": "PAGE_SHIFT", "8940": "PAGE_SIZE", "8941": "PANIC_BLINK_SPD", "8942": "PANIC_TIMER_STEP", "8943": "PARAMS", "8944": "PARAM_MAX_STACK", "8945": "PATH_MAX", "8946": "PBES_PER_LINKED_PAGE", "8947": "PCI_ANY_ID", "8948": "PCI_REGION_FLAG_MASK", "8949": "PDE_DATA", "8950": "PENDING", "8951": "PERF_ATTACH_TASK", "8952": "PERF_ATTACH_TASK_DATA", "8953": "PERF_AUX_FLAG_OVERWRITE", "8954": "PERF_AUX_FLAG_TRUNCATED", "8955": "PERF_AUX_GFP", "8956": "PERF_CONTEXT_KERNEL", "8957": "PERF_CONTEXT_USER", "8958": "PERF_COUNT_HW_CPU_CYCLES", "8959": "PERF_COUNT_SW_CPU_MIGRATIONS", "8960": "PERF_EF_RELOAD", "8961": "PERF_EF_START", "8962": "PERF_EF_UPDATE", "8963": "PERF_EVENT_IOC_DISABLE", "8964": "PERF_EVENT_IOC_ENABLE", "8965": "PERF_EVENT_IOC_ID", "8966": "PERF_EVENT_IOC_PERIOD", "8967": "PERF_EVENT_IOC_REFRESH", "8968": "PERF_EVENT_IOC_RESET", "8969": "PERF_EVENT_IOC_SET_BPF", "8970": "PERF_EVENT_IOC_SET_FILTER", "8971": "PERF_EVENT_IOC_SET_OUTPUT", "8972": "PERF_EVENT_STATE_ACTIVE", "8973": "PERF_EVENT_STATE_ERROR", "8974": "PERF_EVENT_STATE_EXIT", "8975": "PERF_EVENT_STATE_INACTIVE", "8976": "PERF_EVENT_STATE_OFF", "8977": "PERF_FLAG_ALL", "8978": "PERF_FLAG_FD_CLOEXEC", "8979": "PERF_FLAG_FD_NO_GROUP", "8980": "PERF_FLAG_FD_OUTPUT", "8981": "PERF_FLAG_PID_CGROUP", "8982": "PERF_FORMAT_GROUP", "8983": "PERF_FORMAT_ID", "8984": "PERF_FORMAT_TOTAL_TIMES", "8985": "PERF_FORMAT_TOTAL_TIME_ENABLED", "8986": "PERF_FORMAT_TOTAL_TIME_RUNNING", "8987": "PERF_GROUP_SOFTWARE", "8988": "PERF_HES_STOPPED", "8989": "PERF_IOC_FLAG_GROUP", "8990": "PERF_MAX_TRACE_SIZE", "8991": "PERF_NR_CONTEXTS", "8992": "PERF_PMU_CAP_AUX_NO_SG", "8993": "PERF_PMU_CAP_AUX_SW_DOUBLEBUF", "8994": "PERF_PMU_CAP_EXCLUSIVE", "8995": "PERF_RECORD_COMM", "8996": "PERF_RECORD_EXIT", "8997": "PERF_RECORD_FORK", "8998": "PERF_RECORD_MISC_COMM_EXEC", "8999": "PERF_RECORD_MMAP2", "9000": "PERF_RECORD_READ", "9001": "PERF_RECORD_SAMPLE", "9002": "PERF_SAMPLE_ADDR", "9003": "PERF_SAMPLE_BRANCH_HV", "9004": "PERF_SAMPLE_BRANCH_KERNEL", "9005": "PERF_SAMPLE_BRANCH_PERM_PLM", "9006": "PERF_SAMPLE_BRANCH_STACK", "9007": "PERF_SAMPLE_CALLCHAIN", "9008": "PERF_SAMPLE_CPU", "9009": "PERF_SAMPLE_DATA_SRC", "9010": "PERF_SAMPLE_ID", "9011": "PERF_SAMPLE_IDENTIFIER", "9012": "PERF_SAMPLE_IP", "9013": "PERF_SAMPLE_PERIOD", "9014": "PERF_SAMPLE_RAW", "9015": "PERF_SAMPLE_READ", "9016": "PERF_SAMPLE_REGS_ABI_NONE", "9017": "PERF_SAMPLE_REGS_INTR", "9018": "PERF_SAMPLE_REGS_USER", "9019": "PERF_SAMPLE_STACK_USER", "9020": "PERF_SAMPLE_STREAM_ID", "9021": "PERF_SAMPLE_TID", "9022": "PERF_SAMPLE_TIME", "9023": "PERF_SAMPLE_TRANSACTION", "9024": "PERF_SAMPLE_WEIGHT", "9025": "PERF_TYPE_HARDWARE", "9026": "PER_LINUX", "9027": "PER_LINUX32", "9028": "PER_RCU_NODE_PERIOD", "9029": "PFN_DOWN", "9030": "PFN_UP", "9031": "PF_DUMPCORE", "9032": "PF_EXITING", "9033": "PF_FORKNOEXEC", "9034": "PF_FREEZER_SKIP", "9035": "PF_FROZEN", "9036": "PF_KTHREAD", "9037": "PF_MCE_EARLY", "9038": "PF_MCE_PROCESS", "9039": "PF_MEMALLOC", "9040": "PF_MUTEX_TESTER", "9041": "PF_NOFREEZE", "9042": "PF_NO_SETAFFINITY", "9043": "PF_NPROC_EXCEEDED", "9044": "PF_SIGNALED", "9045": "PF_SUPERPRIV", "9046": "PF_SUSPEND_TASK", "9047": "PF_USED_ASYNC", "9048": "PF_VCPU", "9049": "PF_WQ_WORKER", "9050": "PG_ANY", "9051": "PG_SAFE", "9052": "PG_UNSAFE_CLEAR", "9053": "PG_UNSAFE_KEEP", "9054": "PI", "9055": "PID", "9056": "PIDLIST_TOO_LARGE", "9057": "PIDMAP_ENTRIES", "9058": "PIDNS_HASH_ADDING", "9059": "PIDS_PER_CPU_DEFAULT", "9060": "PIDS_PER_CPU_MIN", "9061": "PIDTYPE_MAX", "9062": "PIDTYPE_PGID", "9063": "PIDTYPE_PID", "9064": "PIDTYPE_SID", "9065": "PID_MAX_DEFAULT", "9066": "PID_MAX_LIMIT", "9067": "PKEY_ALGO_RSA", "9068": "PKEY_HASH__LAST", "9069": "PKEY_ID_X509", "9070": "PLIST_HEAD_INIT", "9071": "PM", "9072": "PMSG_FREEZE", "9073": "PMSG_HIBERNATE", "9074": "PMSG_QUIESCE", "9075": "PMSG_RECOVER", "9076": "PMSG_RESTORE", "9077": "PMSG_THAW", "9078": "PM_EVENT_HIBERNATE", "9079": "PM_HIBERNATION_PREPARE", "9080": "PM_POST_HIBERNATION", "9081": "PM_POST_RESTORE", "9082": "PM_POST_SUSPEND", "9083": "PM_QOS_ADD_REQ", "9084": "PM_QOS_CPU_DMA_LATENCY", "9085": "PM_QOS_CPU_DMA_LAT_DEFAULT_VALUE", "9086": "PM_QOS_DEFAULT_VALUE", "9087": "PM_QOS_MAX", "9088": "PM_QOS_MEMORY_BANDWIDTH_DEFAULT_VALUE", "9089": "PM_QOS_MIN", "9090": "PM_QOS_NETWORK_LAT_DEFAULT_VALUE", "9091": "PM_QOS_NETWORK_THROUGHPUT_DEFAULT_VALUE", "9092": "PM_QOS_NUM_CLASSES", "9093": "PM_QOS_REMOVE_REQ", "9094": "PM_QOS_SUM", "9095": "PM_QOS_UPDATE_REQ", "9096": "PM_RESTORE_PREPARE", "9097": "PM_SUSPEND_MAX", "9098": "PM_SUSPEND_MEM", "9099": "PM_SUSPEND_MIN", "9100": "PM_SUSPEND_ON", "9101": "PM_SUSPEND_PREPARE", "9102": "PM_SUSPEND_STANDBY", "9103": "PN", "9104": "POISON_END", "9105": "POISON_FREE", "9106": "POISON_INUSE", "9107": "POLLHUP", "9108": "POLLIN", "9109": "POLLRDNORM", "9110": "POLL_SPURIOUS_IRQ_INTERVAL", "9111": "POOL_DISASSOCIATED", "9112": "POWEROFF_CMD_PATH_LEN", "9113": "PPM_SCALE", "9114": "PPM_SCALE_INV", "9115": "PPM_SCALE_INV_SHIFT", "9116": "PPS_INTCOUNT", "9117": "PPS_INTMIN", "9118": "PPS_MAXWANDER", "9119": "PPS_VALID", "9120": "PREEMPT_ACTIVE", "9121": "PREEMPT_MASK", "9122": "PREFIX_MAX", "9123": "PRINT_TYPE_FMT_NAME", "9124": "PRINT_TYPE_FUNC_NAME", "9125": "PRIO_PGRP", "9126": "PRIO_PROCESS", "9127": "PRIO_TO_NICE", "9128": "PRIO_USER", "9129": "PROC_EVENT_GID", "9130": "PROC_EVENT_UID", "9131": "PROC_PID_INIT_INO", "9132": "PROC_USER_INIT_INO", "9133": "PROFILES_PER_PAGE", "9134": "PROFILE_GRPSHIFT", "9135": "PROFILE_GRPSZ", "9136": "PROFILE_MUNMAP", "9137": "PROFILE_RECORDS_SIZE", "9138": "PROFILE_TASK_EXIT", "9139": "PROMPT", "9140": "PROT_EXEC", "9141": "PROT_READ", "9142": "PROT_WRITE", "9143": "PR_GET_CHILD_SUBREAPER", "9144": "PR_GET_DUMPABLE", "9145": "PR_GET_FPEMU", "9146": "PR_GET_FPEXC", "9147": "PR_GET_FP_MODE", "9148": "PR_GET_NO_NEW_PRIVS", "9149": "PR_GET_PDEATHSIG", "9150": "PR_GET_THP_DISABLE", "9151": "PR_GET_TID_ADDRESS", "9152": "PR_GET_TIMING", "9153": "PR_GET_UNALIGN", "9154": "PR_MCE_KILL", "9155": "PR_MCE_KILL_CLEAR", "9156": "PR_MCE_KILL_DEFAULT", "9157": "PR_MCE_KILL_EARLY", "9158": "PR_MCE_KILL_GET", "9159": "PR_MCE_KILL_LATE", "9160": "PR_MCE_KILL_SET", "9161": "PR_MPX_DISABLE_MANAGEMENT", "9162": "PR_MPX_ENABLE_MANAGEMENT", "9163": "PR_SET_CHILD_SUBREAPER", "9164": "PR_SET_DUMPABLE", "9165": "PR_SET_FPEMU", "9166": "PR_SET_FPEXC", "9167": "PR_SET_FP_MODE", "9168": "PR_SET_MM", "9169": "PR_SET_MM_ARG_END", "9170": "PR_SET_MM_ARG_START", "9171": "PR_SET_MM_AUXV", "9172": "PR_SET_MM_BRK", "9173": "PR_SET_MM_END_CODE", "9174": "PR_SET_MM_END_DATA", "9175": "PR_SET_MM_ENV_END", "9176": "PR_SET_MM_ENV_START", "9177": "PR_SET_MM_EXE_FILE", "9178": "PR_SET_MM_MAP", "9179": "PR_SET_MM_MAP_SIZE", "9180": "PR_SET_MM_START_BRK", "9181": "PR_SET_MM_START_CODE", "9182": "PR_SET_MM_START_DATA", "9183": "PR_SET_MM_START_STACK", "9184": "PR_SET_NAME", "9185": "PR_SET_NO_NEW_PRIVS", "9186": "PR_SET_PDEATHSIG", "9187": "PR_SET_THP_DISABLE", "9188": "PR_SET_TIMERSLACK", "9189": "PR_SET_TIMING", "9190": "PR_SET_UNALIGN", "9191": "PR_TIMING_STATISTICAL", "9192": "PTRACE_ATTACH", "9193": "PTRACE_CONT", "9194": "PTRACE_DETACH", "9195": "PTRACE_EVENT_CLONE", "9196": "PTRACE_EVENT_FORK", "9197": "PTRACE_EVENT_SECCOMP", "9198": "PTRACE_EVENT_STOP", "9199": "PTRACE_EVENT_VFORK", "9200": "PTRACE_EVENT_VFORK_DONE", "9201": "PTRACE_GETEVENTMSG", "9202": "PTRACE_GETFDPIC", "9203": "PTRACE_GETFDPIC_EXEC", "9204": "PTRACE_GETFDPIC_INTERP", "9205": "PTRACE_GETREGSET", "9206": "PTRACE_GETSIGINFO", "9207": "PTRACE_GETSIGMASK", "9208": "PTRACE_INTERRUPT", "9209": "PTRACE_KILL", "9210": "PTRACE_LISTEN", "9211": "PTRACE_MODE_ATTACH", "9212": "PTRACE_MODE_NOAUDIT", "9213": "PTRACE_MODE_READ", "9214": "PTRACE_OLDSETOPTIONS", "9215": "PTRACE_O_MASK", "9216": "PTRACE_PEEKDATA", "9217": "PTRACE_PEEKSIGINFO", "9218": "PTRACE_PEEKSIGINFO_SHARED", "9219": "PTRACE_PEEKTEXT", "9220": "PTRACE_POKEDATA", "9221": "PTRACE_POKETEXT", "9222": "PTRACE_SEIZE", "9223": "PTRACE_SETOPTIONS", "9224": "PTRACE_SETREGSET", "9225": "PTRACE_SETSIGINFO", "9226": "PTRACE_SETSIGMASK", "9227": "PTRACE_SINGLEBLOCK", "9228": "PTRACE_SINGLESTEP", "9229": "PTRACE_SYSCALL", "9230": "PTRACE_SYSEMU", "9231": "PTRACE_SYSEMU_SINGLESTEP", "9232": "PTRACE_TRACEME", "9233": "PTR_ERR", "9234": "PTR_TO_CTX", "9235": "PTR_TO_MAP_VALUE", "9236": "PTR_TO_MAP_VALUE_OR_NULL", "9237": "PTR_TO_STACK", "9238": "PTY_MAX", "9239": "PTY_NR", "9240": "PT_EXITKILL", "9241": "PT_PTRACED", "9242": "PT_PTRACE_CAP", "9243": "PT_SEIZED", "9244": "P_ns", "9245": "PageAnon", "9246": "PageError", "9247": "PageHighMem", "9248": "PageReserved", "9249": "PageSlab", "9250": "PageUptodate", "9251": "Paul", "9252": "Per", "9253": "Platform_finish", "9254": "Possible", "9255": "Power_up", "9256": "Preparing", "9257": "Probe", "9258": "R", "9259": "RADIX", "9260": "RADIX_TREE", "9261": "RAHEAD", "9262": "RANDOM_BOOT_ID", "9263": "RANDOM_ENTROPY_COUNT", "9264": "RANDOM_POOLSIZE", "9265": "RANDOM_READ_THRESH", "9266": "RANDOM_UUID", "9267": "RANDOM_WRITE_THRESH", "9268": "RAW_NOTIFIER_HEAD", "9269": "RB_ALIGNMENT", "9270": "RB_ARCH_ALIGNMENT", "9271": "RB_BUFFERS_DISABLED_BIT", "9272": "RB_BUFFERS_ON", "9273": "RB_BUFFERS_ON_BIT", "9274": "RB_BUFFER_OFF", "9275": "RB_CLEAR_NODE", "9276": "RB_EMPTY_NODE", "9277": "RB_EMPTY_ROOT", "9278": "RB_EVNT_HDR_SIZE", "9279": "RB_EVNT_MIN_SIZE", "9280": "RB_FLAG_MASK", "9281": "RB_FL_OVERWRITE", "9282": "RB_FORCE_8BYTE_ALIGNMENT", "9283": "RB_LEN_TIME_EXTEND", "9284": "RB_LEN_TIME_STAMP", "9285": "RB_MAX_SMALL_DATA", "9286": "RB_MISSED_EVENTS", "9287": "RB_MISSED_STORED", "9288": "RB_PAGE_HEAD", "9289": "RB_PAGE_MOVED", "9290": "RB_PAGE_NORMAL", "9291": "RB_PAGE_UPDATE", "9292": "RB_ROOT", "9293": "RB_TEST_BUFFER_SIZE", "9294": "RB_WARN_ON", "9295": "RB_WRITE_INTCNT", "9296": "RB_WRITE_MASK", "9297": "RCU", "9298": "RCUTORTURE_RUNNABLE_INIT", "9299": "RCUTORTURE_TASKS_OPS", "9300": "RCU_BH", "9301": "RCU_BH_FLAVOR", "9302": "RCU_BOOST_DELAY_JIFFIES", "9303": "RCU_DONE_TAIL", "9304": "RCU_FANOUT_1", "9305": "RCU_FANOUT_2", "9306": "RCU_FANOUT_3", "9307": "RCU_FANOUT_4", "9308": "RCU_FLAVOR", "9309": "RCU_FORCE_QS", "9310": "RCU_GP_FLAG_FQS", "9311": "RCU_GP_FLAG_INIT", "9312": "RCU_GP_IDLE", "9313": "RCU_GP_INIT", "9314": "RCU_GP_WAIT_FQS", "9315": "RCU_GP_WAIT_GPS", "9316": "RCU_GP_WAIT_INIT", "9317": "RCU_IDLE_GP_DELAY", "9318": "RCU_IDLE_LAZY_GP_DELAY", "9319": "RCU_INIT_POINTER", "9320": "RCU_JIFFIES_FQS_DIV", "9321": "RCU_JIFFIES_TILL_FORCE_QS", "9322": "RCU_KTHREAD_MAX", "9323": "RCU_KTHREAD_OFFCPU", "9324": "RCU_KTHREAD_RUNNING", "9325": "RCU_KTHREAD_WAITING", "9326": "RCU_KTHREAD_YIELDING", "9327": "RCU_NEXT_READY_TAIL", "9328": "RCU_NEXT_SIZE", "9329": "RCU_NEXT_TAIL", "9330": "RCU_NOGP_WAKE", "9331": "RCU_NOGP_WAKE_FORCE", "9332": "RCU_NOGP_WAKE_NOT", "9333": "RCU_NONIDLE", "9334": "RCU_NUM_LVLS", "9335": "RCU_SAVE_DYNTICK", "9336": "RCU_SCHED_FLAVOR", "9337": "RCU_SIGNAL_INIT", "9338": "RCU_SOFTIRQ", "9339": "RCU_STALL_DELAY_DELTA", "9340": "RCU_STALL_RAT_DELAY", "9341": "RCU_STATE_INITIALIZER", "9342": "RCU_STATE_NAME", "9343": "RCU_SYSIDLE_FULL", "9344": "RCU_SYSIDLE_FULL_NOTED", "9345": "RCU_SYSIDLE_LONG", "9346": "RCU_SYSIDLE_NOT", "9347": "RCU_SYSIDLE_SHORT", "9348": "RCU_TASKS_FLAVOR", "9349": "RCU_TORTURE_PIPE_LEN", "9350": "RCU_TRACE", "9351": "RCU_TREE_NONCORE", "9352": "RCU_WAIT_TAIL", "9353": "READ", "9354": "README", "9355": "READ_ONCE", "9356": "REBOOT_HARD", "9357": "REC", "9358": "RECLAIM_DISTANCE", "9359": "RECLAIM_FS", "9360": "RECLAIM_FS_verbose", "9361": "RECLAIM_VERBOSE", "9362": "RECORD_COUNT", "9363": "RECORD_COUNT_LEN", "9364": "RECORD_COUNT_TAG", "9365": "RECORD_FILE_MAGIC", "9366": "RECORD_FUNCTION_CHECK", "9367": "RECORD_FUNCTION_IDENT", "9368": "RECORD_FUNCTION_TAG", "9369": "RECORD_FUNCTON_TAG_LEN", "9370": "RECORD_GCOV_VERSION", "9371": "RECORD_TIME_STAMP", "9372": "REDUCE_FLS", "9373": "REENTRY", "9374": "REGISTER", "9375": "REQUEUE_PENDING", "9376": "REQ_", "9377": "REQ_SYNC", "9378": "REQ_TYPE_BLOCK_PC", "9379": "RESCUER_NICE_LEVEL", "9380": "RESERVED_PIDS", "9381": "RESUME", "9382": "RETRY_TASK", "9383": "RET_INTEGER", "9384": "RET_PTR_TO_MAP_VALUE_OR_NULL", "9385": "RET_VOID", "9386": "RINGBUF_TYPE_DATA", "9387": "RINGBUF_TYPE_DATA_TYPE_LEN_MAX", "9388": "RINGBUF_TYPE_PADDING", "9389": "RINGBUF_TYPE_TIME_EXTEND", "9390": "RINGBUF_TYPE_TIME_STAMP", "9391": "RING_BUFFER_ALL_CPUS", "9392": "RING_BUFFER_WRITABLE", "9393": "RLIM64_INFINITY", "9394": "RLIMIT_CPU", "9395": "RLIMIT_DATA", "9396": "RLIMIT_FSIZE", "9397": "RLIMIT_MEMLOCK", "9398": "RLIMIT_NOFILE", "9399": "RLIMIT_NPROC", "9400": "RLIMIT_RTPRIO", "9401": "RLIMIT_RTTIME", "9402": "RLIMIT_SIGPENDING", "9403": "RLIM_INFINITY", "9404": "RLIM_NLIMITS", "9405": "ROBUST_LIST_LIMIT", "9406": "ROOT_TASK_GROUP_LOAD", "9407": "RQCF_ACT_SKIP", "9408": "RQCF_REQ_SKIP", "9409": "RR_TIMESLICE", "9410": "RT", "9411": "RTTEST_LOCK", "9412": "RTTEST_LOCKCONT", "9413": "RTTEST_LOCKINT", "9414": "RTTEST_LOCKINTNOWAIT", "9415": "RTTEST_LOCKNOWAIT", "9416": "RTTEST_NOP", "9417": "RTTEST_RESET", "9418": "RTTEST_RESETEVENT", "9419": "RTTEST_SCHEDOT", "9420": "RTTEST_SCHEDRT", "9421": "RTTEST_SIGNAL", "9422": "RTTEST_UNLOCK", "9423": "RTWS_COND_GET", "9424": "RTWS_COND_SYNC", "9425": "RTWS_DEF_FREE", "9426": "RTWS_DELAY", "9427": "RTWS_EXP_SYNC", "9428": "RTWS_FIXED_DELAY", "9429": "RTWS_REPLACE", "9430": "RTWS_STOPPING", "9431": "RTWS_STUTTER", "9432": "RTWS_SYNC", "9433": "RT_MAX_TRIES", "9434": "RT_MUTEX_FULL_CHAINWALK", "9435": "RT_MUTEX_HAS_WAITERS", "9436": "RT_MUTEX_MIN_CHAINWALK", "9437": "RT_MUTEX_OWNER_MASKALL", "9438": "RT_PUSH_IPI", "9439": "RT_PUSH_IPI_EXECUTING", "9440": "RT_PUSH_IPI_RESTART", "9441": "RT_RUNTIME_SHARE", "9442": "RUNNING_HELPERS_TIMEOUT", "9443": "RUNTIME_INF", "9444": "RUN_TIME", "9445": "RUSAGE_BOTH", "9446": "RUSAGE_CHILDREN", "9447": "RUSAGE_SELF", "9448": "RUSAGE_THREAD", "9449": "RWBS_LEN", "9450": "RWLOCK_BUG_ON", "9451": "RWLOCK_MAGIC", "9452": "RWSEM_ACTIVE_MASK", "9453": "RWSEM_ACTIVE_READ_BIAS", "9454": "RWSEM_ACTIVE_WRITE_BIAS", "9455": "RWSEM_UNLOCKED_VALUE", "9456": "RWSEM_WAITING_BIAS", "9457": "RWSEM_WAITING_FOR_READ", "9458": "RWSEM_WAITING_FOR_WRITE", "9459": "RWSEM_WAKE_ANY", "9460": "RWSEM_WAKE_READERS", "9461": "RWSEM_WAKE_READ_OWNED", "9462": "Read", "9463": "Real", "9464": "Registered", "9465": "Remove", "9466": "Report", "9467": "Restore_console", "9468": "Resume_console", "9469": "Resume_devices", "9470": "S", "9471": "SAVED_CMDLINES_DEFAULT", "9472": "SA_NOCLDSTOP", "9473": "SA_NOCLDWAIT", "9474": "SA_NODEFER", "9475": "SA_NOMASK", "9476": "SA_ONESHOT", "9477": "SC", "9478": "SCHEDSTAT_VERSION", "9479": "SCHED_ATTR_SIZE_VER0", "9480": "SCHED_BATCH", "9481": "SCHED_CAPACITY_SCALE", "9482": "SCHED_CAPACITY_SHIFT", "9483": "SCHED_DEADLINE", "9484": "SCHED_FEAT", "9485": "SCHED_FIFO", "9486": "SCHED_FLAG_RESET_ON_FORK", "9487": "SCHED_IDLE", "9488": "SCHED_LOAD_RESOLUTION", "9489": "SCHED_LOAD_SCALE", "9490": "SCHED_LOAD_SHIFT", "9491": "SCHED_NORMAL", "9492": "SCHED_PROFILING", "9493": "SCHED_RESET_ON_FORK", "9494": "SCHED_RR", "9495": "SCHED_SOFTIRQ", "9496": "SCHED_TUNABLESCALING_END", "9497": "SCHED_TUNABLESCALING_LINEAR", "9498": "SCHED_TUNABLESCALING_LOG", "9499": "SCHED_TUNABLESCALING_NONE", "9500": "SDTL_OVERLAP", "9501": "SD_ASYM_PACKING", "9502": "SD_ATTR_INIT", "9503": "SD_BALANCE_EXEC", "9504": "SD_BALANCE_FORK", "9505": "SD_BALANCE_NEWIDLE", "9506": "SD_BALANCE_WAKE", "9507": "SD_INIT_NAME", "9508": "SD_LOAD_BALANCE", "9509": "SD_NUMA", "9510": "SD_OVERLAP", "9511": "SD_PREFER_SIBLING", "9512": "SD_SERIALIZE", "9513": "SD_SHARE_CPUCAPACITY", "9514": "SD_SHARE_PKG_RESOURCES", "9515": "SD_SHARE_POWERDOMAIN", "9516": "SD_WAKE_AFFINE", "9517": "SE", "9518": "SEARCHPROMPT", "9519": "SECCOMP_DEBUG", "9520": "SECCOMP_FILTER_FLAG_MASK", "9521": "SECCOMP_FILTER_FLAG_TSYNC", "9522": "SECCOMP_MODE_DISABLED", "9523": "SECCOMP_MODE_FILTER", "9524": "SECCOMP_MODE_STRICT", "9525": "SECCOMP_PHASE1_OK", "9526": "SECCOMP_PHASE1_SKIP", "9527": "SECCOMP_RET_ACTION", "9528": "SECCOMP_RET_ALLOW", "9529": "SECCOMP_RET_DATA", "9530": "SECCOMP_RET_ERRNO", "9531": "SECCOMP_RET_KILL", "9532": "SECCOMP_RET_TRACE", "9533": "SECCOMP_RET_TRAP", "9534": "SECCOMP_SET_MODE_FILTER", "9535": "SECCOMP_SET_MODE_STRICT", "9536": "SECUREBITS_DEFAULT", "9537": "SEC_CONVERSION", "9538": "SEC_JIFFIE_SC", "9539": "SEGV_BNDERR", "9540": "SELFMAG", "9541": "SEND_SIG_FORCED", "9542": "SEND_SIG_NOINFO", "9543": "SEND_SIG_PRIV", "9544": "SEQ_PUT_FIELD", "9545": "SEQ_PUT_HEX_FIELD", "9546": "SEQ_START_TOKEN", "9547": "SEQ_printf", "9548": "SETPARAM_POLICY", "9549": "SET_ENDIAN", "9550": "SET_FPEMU_CTL", "9551": "SET_FPEXC_CTL", "9552": "SET_FP_MODE", "9553": "SET_SYSCTL", "9554": "SET_TSC_CTL", "9555": "SET_UNALIGN_CTL", "9556": "SF_CRC32_MODE", "9557": "SF_NOCOMPRESS_MODE", "9558": "SF_PLATFORM_MODE", "9559": "SHA256_DIGEST_SIZE", "9560": "SHF_ALLOC", "9561": "SHF_EXECINSTR", "9562": "SHF_WRITE", "9563": "SHIFT_PLL", "9564": "SHN_ABS", "9565": "SHN_COMMON", "9566": "SHN_LORESERVE", "9567": "SHN_UNDEF", "9568": "SHOW_AVAILABLE_TRIGGERS", "9569": "SHT_NOBITS", "9570": "SHT_NOTE", "9571": "SHT_REL", "9572": "SHT_RELA", "9573": "SHT_SYMTAB", "9574": "SIGALRM", "9575": "SIGBUS", "9576": "SIGCHLD", "9577": "SIGCONT", "9578": "SIGEV_NONE", "9579": "SIGEV_SIGNAL", "9580": "SIGEV_THREAD", "9581": "SIGEV_THREAD_ID", "9582": "SIGFPE", "9583": "SIGHUP", "9584": "SIGILL", "9585": "SIGINT", "9586": "SIGIO", "9587": "SIGKILL", "9588": "SIGNAL_CLD_CONTINUED", "9589": "SIGNAL_CLD_MASK", "9590": "SIGNAL_CLD_STOPPED", "9591": "SIGNAL_GROUP_COREDUMP", "9592": "SIGNAL_GROUP_EXIT", "9593": "SIGNAL_STOP_CONTINUED", "9594": "SIGNAL_STOP_STOPPED", "9595": "SIGNAL_UNKILLABLE", "9596": "SIGQUEUE_PREALLOC", "9597": "SIGQUIT", "9598": "SIGRTMAX", "9599": "SIGRTMIN", "9600": "SIGSEGV", "9601": "SIGSTOP", "9602": "SIGSYS", "9603": "SIGTERM", "9604": "SIGTRAP", "9605": "SIGUSR1", "9606": "SIGUSR2", "9607": "SIG_BLOCK", "9608": "SIG_DFL", "9609": "SIG_IGN", "9610": "SIG_KERNEL_STOP_MASK", "9611": "SIG_SETMASK", "9612": "SIG_UNBLOCK", "9613": "SINGLE_DEPTH_NESTING", "9614": "SIZE", "9615": "SIZEOF_TRACE_ENTRY", "9616": "SIZEOF_TRACE_KPROBE", "9617": "SIZEOF_TRACE_UPROBE", "9618": "SIZEOP", "9619": "SI_FROMKERNEL", "9620": "SI_KERNEL", "9621": "SI_LOAD_SHIFT", "9622": "SI_TIMER", "9623": "SI_TKILL", "9624": "SI_USER", "9625": "SKEW_PREFIX", "9626": "SKF_LL_OFF", "9627": "SKF_NET_OFF", "9628": "SLAB_DESTROY_BY_RCU", "9629": "SLAB_HWCACHE_ALIGN", "9630": "SLAB_NOTRACK", "9631": "SLAB_PANIC", "9632": "SLEEP_PROFILING", "9633": "SLEEP_TIME", "9634": "SLOT_CLEAN", "9635": "SLOT_DIRTY", "9636": "SLOT_USED", "9637": "SMPBOOT_H", "9638": "SMP_DEBUG_LOCKS_WARN_ON", "9639": "SMT", "9640": "SNAPSHOT_ALLOC_SWAP_PAGE", "9641": "SNAPSHOT_ATOMIC_RESTORE", "9642": "SNAPSHOT_AVAIL_SWAP_SIZE", "9643": "SNAPSHOT_CREATE_IMAGE", "9644": "SNAPSHOT_FREE", "9645": "SNAPSHOT_FREEZE", "9646": "SNAPSHOT_GET_IMAGE_SIZE", "9647": "SNAPSHOT_IOC_MAGIC", "9648": "SNAPSHOT_IOC_MAXNR", "9649": "SNAPSHOT_MINOR", "9650": "SNAPSHOT_PLATFORM_SUPPORT", "9651": "SNAPSHOT_POWER_OFF", "9652": "SNAPSHOT_PREF_IMAGE_SIZE", "9653": "SNAPSHOT_S2RAM", "9654": "SNAPSHOT_SET_SWAP_AREA", "9655": "SNAPSHOT_UNFREEZE", "9656": "SOFTIRQ", "9657": "SOFTIRQ_DISABLE_OFFSET", "9658": "SOFTIRQ_LOCK_OFFSET", "9659": "SOFTIRQ_MASK", "9660": "SOFTIRQ_OFFSET", "9661": "SOFTIRQ_SHIFT", "9662": "SOFTIRQ_VERBOSE", "9663": "SOFTIRQ_verbose", "9664": "SOFT_WATCHDOG_ENABLED", "9665": "SOFT_WATCHDOG_ENABLED_BIT", "9666": "SP", "9667": "SPARE_PAGES", "9668": "SPINLOCK_MAGIC", "9669": "SPINLOCK_OWNER_INIT", "9670": "SPINLOCK_SIZE", "9671": "SPIN_BUG_ON", "9672": "SPLIT_NS", "9673": "SPLIT_RSS_COUNTING", "9674": "SPURIOUS_DEFERRED", "9675": "SRC", "9676": "SRCTREE", "9677": "SRCU_CALLBACK_BATCH", "9678": "SRCU_FLAVOR", "9679": "SRCU_INTERVAL", "9680": "SRCU_RETRY_CHECK_DELAY", "9681": "SRC_OP", "9682": "SRC_TREE", "9683": "SSBPT", "9684": "SS_DISABLE", "9685": "SS_ONSTACK", "9686": "STACK_END_MAGIC", "9687": "STACK_INVALID", "9688": "STACK_MISC", "9689": "STACK_SKIP", "9690": "STACK_SPILL", "9691": "STACK_TRACE_ENTRIES", "9692": "STANDARD_PARAM_DEF", "9693": "START_DEBIT", "9694": "STATE_LIST_MARK", "9695": "STATE_RCU_HEAD_QUEUED", "9696": "STATE_RCU_HEAD_READY", "9697": "STATIC_KEY_CHECK_USE", "9698": "STATIC_KEY_INIT", "9699": "STATIC_KEY_INIT_FALSE", "9700": "STATIC_LOCKDEP_MAP_INIT", "9701": "STA_CLOCKERR", "9702": "STA_FREQHOLD", "9703": "STA_MODE", "9704": "STA_NANO", "9705": "STA_PLL", "9706": "STA_PPSERROR", "9707": "STA_PPSFREQ", "9708": "STA_PPSJITTER", "9709": "STA_PPSSIGNAL", "9710": "STA_PPSTIME", "9711": "STA_PPSWANDER", "9712": "STA_RONLY", "9713": "STA_UNSYNC", "9714": "STB_WEAK", "9715": "STRICT_READ_CHECKS", "9716": "STT_OBJECT", "9717": "STX_MEM_", "9718": "STX_MEM_B", "9719": "STX_MEM_DW", "9720": "STX_MEM_H", "9721": "STX_MEM_W", "9722": "STX_XADD_DW", "9723": "STX_XADD_W", "9724": "ST_MEM_", "9725": "ST_MEM_B", "9726": "ST_MEM_DW", "9727": "ST_MEM_H", "9728": "ST_MEM_W", "9729": "SUB", "9730": "SUBSYS", "9731": "SUFFIX_HIGH", "9732": "SUFFIX_LOW", "9733": "SUFFIX_NULL", "9734": "SUID_DUMP_DISABLE", "9735": "SUID_DUMP_ROOT", "9736": "SUID_DUMP_USER", "9737": "SUPPRESS", "9738": "SUSPEND", "9739": "SYNC", "9740": "SYNCHRONIZE_SRCU_EXP_TRYCOUNT", "9741": "SYNCHRONIZE_SRCU_TRYCOUNT", "9742": "SYNCHRONOUS_MASK", "9743": "SYSCALL_DEFINE0", "9744": "SYSCALL_DEFINE1", "9745": "SYSCALL_DEFINE2", "9746": "SYSCALL_DEFINE3", "9747": "SYSCALL_DEFINE4", "9748": "SYSCALL_DEFINE5", "9749": "SYSCALL_DEFINE6", "9750": "SYSCALL_FIELD", "9751": "SYSCTL_WRITES_LEGACY", "9752": "SYSCTL_WRITES_STRICT", "9753": "SYSCTL_WRITES_WARN", "9754": "SYSRQ_ENABLE_BOOT", "9755": "SYSTEM_BOOTING", "9756": "SYSTEM_FL_FREE_NAME", "9757": "SYSTEM_HALT", "9758": "SYSTEM_POWER_OFF", "9759": "SYSTEM_RESTART", "9760": "SYSTEM_RUNNING", "9761": "SYS_BIND", "9762": "SYS_HALT", "9763": "SYS_POWER_OFF", "9764": "SYS_RESTART", "9765": "SYS_SECCOMP", "9766": "S_IFMT", "9767": "S_IFREG", "9768": "S_IRUGO", "9769": "S_IRUSR", "9770": "S_IRWXUGO", "9771": "S_ISREG", "9772": "S_IWGRP", "9773": "S_IWOTH", "9774": "S_IWUSR", "9775": "Same", "9776": "Sample", "9777": "Set", "9778": "SetPagePrivate", "9779": "Shows", "9780": "Snapshot", "9781": "Some", "9782": "Specified", "9783": "Stats", "9784": "Suspending", "9785": "Switched", "9786": "Synced", "9787": "Syncing", "9788": "T", "9789": "T0", "9790": "T1", "9791": "TAINT_BAD_PAGE", "9792": "TAINT_CPU_OUT_OF_SPEC", "9793": "TAINT_CRAP", "9794": "TAINT_DIE", "9795": "TAINT_FIRMWARE_WORKAROUND", "9796": "TAINT_FORCED_MODULE", "9797": "TAINT_FORCED_RMMOD", "9798": "TAINT_LIVEPATCH", "9799": "TAINT_MACHINE_CHECK", "9800": "TAINT_OOT_MODULE", "9801": "TAINT_OVERRIDDEN_ACPI_TABLE", "9802": "TAINT_PROPRIETARY_MODULE", "9803": "TAINT_SOFTLOCKUP", "9804": "TAINT_UNSIGNED_MODULE", "9805": "TAINT_USER", "9806": "TAINT_WARN", "9807": "TASK", "9808": "TASKLET_SOFTIRQ", "9809": "TASKLET_STATE_RUN", "9810": "TASKLET_STATE_SCHED", "9811": "TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK", "9812": "TASKSTATS_CMD_ATTR_MAX", "9813": "TASKSTATS_CMD_ATTR_PID", "9814": "TASKSTATS_CMD_ATTR_REGISTER_CPUMASK", "9815": "TASKSTATS_CMD_ATTR_TGID", "9816": "TASKSTATS_CMD_GET", "9817": "TASKSTATS_CMD_NEW", "9818": "TASKSTATS_CPUMASK_MAXLEN", "9819": "TASKSTATS_GENL_NAME", "9820": "TASKSTATS_GENL_VERSION", "9821": "TASKSTATS_NEEDS_PADDING", "9822": "TASKSTATS_TYPE_PID", "9823": "TASKSTATS_TYPE_TGID", "9824": "TASKSTATS_VERSION", "9825": "TASK_COMM_LEN", "9826": "TASK_DEAD", "9827": "TASK_INTERRUPTIBLE", "9828": "TASK_KILLABLE", "9829": "TASK_NORMAL", "9830": "TASK_ON_RQ_MIGRATING", "9831": "TASK_ON_RQ_QUEUED", "9832": "TASK_PARKED", "9833": "TASK_RUNNING", "9834": "TASK_SIZE", "9835": "TASK_STATE_TO_CHAR_STR", "9836": "TASK_STOPPED", "9837": "TASK_TRACED", "9838": "TASK_UNINTERRUPTIBLE", "9839": "TASK_WAKING", "9840": "TEST_CORE", "9841": "TEST_CPUS", "9842": "TEST_DEVICES", "9843": "TEST_FIRST", "9844": "TEST_FREEZER", "9845": "TEST_MAX", "9846": "TEST_NONE", "9847": "TEST_PLATFORM", "9848": "TEST_SUSPEND_SECONDS", "9849": "THIS_MODULE", "9850": "THREADINFO_GFP", "9851": "THREAD_SIZE", "9852": "THREAD_SIZE_ORDER", "9853": "TICKDEV_MODE_ONESHOT", "9854": "TICKDEV_MODE_PERIODIC", "9855": "TICK_BROADCAST_ENTER", "9856": "TICK_BROADCAST_FORCE", "9857": "TICK_BROADCAST_OFF", "9858": "TICK_BROADCAST_ON", "9859": "TICK_DO_TIMER_BOOT", "9860": "TICK_DO_TIMER_NONE", "9861": "TICK_NSEC", "9862": "TICK_USEC", "9863": "TIF_MEMDIE", "9864": "TIF_NOHZ", "9865": "TIF_NOTSC", "9866": "TIF_POLLING_NRFLAG", "9867": "TIF_SECCOMP", "9868": "TIF_SIGPENDING", "9869": "TIF_SYSCALL_AUDIT", "9870": "TIF_SYSCALL_EMU", "9871": "TIF_SYSCALL_TRACE", "9872": "TIF_UPROBE", "9873": "TIME", "9874": "TIMER_ABSTIME", "9875": "TIMER_ENTRY_STATIC", "9876": "TIMER_FLAG_MASK", "9877": "TIMER_NOT_PINNED", "9878": "TIMER_PINNED", "9879": "TIMER_RETRY", "9880": "TIMER_SOFTIRQ", "9881": "TIMER_STATS_FLAG_DEFERRABLE", "9882": "TIMESTAMP", "9883": "TIME_ERROR", "9884": "TIME_OK", "9885": "TK_CLEAR_NTP", "9886": "TK_CLOCK_WAS_SET", "9887": "TK_MIRROR", "9888": "TK_OFFS_BOOT", "9889": "TK_OFFS_MAX", "9890": "TK_OFFS_REAL", "9891": "TK_OFFS_TAI", "9892": "TMPBUFLEN", "9893": "TNF_FAULT_LOCAL", "9894": "TNF_MIGRATED", "9895": "TNF_MIGRATE_FAIL", "9896": "TNF_NO_GROUP", "9897": "TNF_SHARED", "9898": "TOPOLOGY_SD_FLAGS", "9899": "TORTURE_FLAG", "9900": "TORTURE_RANDOM_ADD", "9901": "TORTURE_RANDOM_MULT", "9902": "TORTURE_RANDOM_REFRESH", "9903": "TPS", "9904": "TP_ARGS", "9905": "TP_FLAG_PROFILE", "9906": "TP_FLAG_REGISTERED", "9907": "TP_FLAG_TRACE", "9908": "TP_PROTO", "9909": "TP_STRUCT__entry", "9910": "TP_fast_assign", "9911": "TP_printk", "9912": "TRACER_IRQS_OFF", "9913": "TRACER_OPT", "9914": "TRACER_PREEMPT_OFF", "9915": "TRACE_ARRAY_FL_GLOBAL", "9916": "TRACE_BLK", "9917": "TRACE_BLK_OPT_CLASSIC", "9918": "TRACE_BPRINT", "9919": "TRACE_BPUTS", "9920": "TRACE_BRANCH", "9921": "TRACE_BUFFER_BIT", "9922": "TRACE_BUFFER_IRQ_BIT", "9923": "TRACE_BUFFER_NMI_BIT", "9924": "TRACE_BUFFER_SIRQ_BIT", "9925": "TRACE_BUF_SIZE", "9926": "TRACE_BUF_SIZE_DEFAULT", "9927": "TRACE_CONTEXT_MASK", "9928": "TRACE_CONTROL_BIT", "9929": "TRACE_CTX", "9930": "TRACE_DISPLAY_GRAPH", "9931": "TRACE_EVENT", "9932": "TRACE_EVENT_FL_CAP_ANY", "9933": "TRACE_EVENT_FL_FILTERED", "9934": "TRACE_EVENT_FL_IGNORE_ENABLE", "9935": "TRACE_EVENT_FL_KPROBE", "9936": "TRACE_EVENT_FL_NO_SET_FILTER", "9937": "TRACE_EVENT_FL_TRACEPOINT", "9938": "TRACE_EVENT_FL_USE_CALL_FILTER", "9939": "TRACE_EVENT_FL_WAS_ENABLED", "9940": "TRACE_EVENT_FN", "9941": "TRACE_FILE_LAT_FMT", "9942": "TRACE_FILE_SIZE", "9943": "TRACE_FILE_TIME_IN_NS", "9944": "TRACE_FLAG_HARDIRQ", "9945": "TRACE_FLAG_IRQS_NOSUPPORT", "9946": "TRACE_FLAG_IRQS_OFF", "9947": "TRACE_FLAG_NEED_RESCHED", "9948": "TRACE_FLAG_PREEMPT_RESCHED", "9949": "TRACE_FLAG_SOFTIRQ", "9950": "TRACE_FN", "9951": "TRACE_FTRACE_BIT", "9952": "TRACE_FTRACE_IRQ_BIT", "9953": "TRACE_FTRACE_MAX", "9954": "TRACE_FTRACE_NMI_BIT", "9955": "TRACE_FTRACE_SIRQ_BIT", "9956": "TRACE_FTRACE_START", "9957": "TRACE_FUNC_OPT_STACK", "9958": "TRACE_FUNC_SIZE", "9959": "TRACE_GRAPH_ENT", "9960": "TRACE_GRAPH_INDENT", "9961": "TRACE_GRAPH_PRINT_ABS_TIME", "9962": "TRACE_GRAPH_PRINT_CPU", "9963": "TRACE_GRAPH_PRINT_DURATION", "9964": "TRACE_GRAPH_PRINT_FILL_MASK", "9965": "TRACE_GRAPH_PRINT_FILL_SHIFT", "9966": "TRACE_GRAPH_PRINT_IRQS", "9967": "TRACE_GRAPH_PRINT_OVERHEAD", "9968": "TRACE_GRAPH_PRINT_OVERRUN", "9969": "TRACE_GRAPH_PRINT_PROC", "9970": "TRACE_GRAPH_PRINT_TAIL", "9971": "TRACE_GRAPH_RET", "9972": "TRACE_HEADER_MULTI_READ", "9973": "TRACE_INCLUDE_FILE", "9974": "TRACE_INCLUDE_PATH", "9975": "TRACE_INTERNAL_BIT", "9976": "TRACE_INTERNAL_IRQ_BIT", "9977": "TRACE_INTERNAL_NMI_BIT", "9978": "TRACE_INTERNAL_SIRQ_BIT", "9979": "TRACE_IRQ_BIT", "9980": "TRACE_ITER_ANNOTATE", "9981": "TRACE_ITER_BIN", "9982": "TRACE_ITER_BLOCK", "9983": "TRACE_ITER_BRANCH", "9984": "TRACE_ITER_CONTEXT_INFO", "9985": "TRACE_ITER_FUNCTION", "9986": "TRACE_ITER_GRAPH_TIME", "9987": "TRACE_ITER_HEX", "9988": "TRACE_ITER_IRQ_INFO", "9989": "TRACE_ITER_LATENCY_FMT", "9990": "TRACE_ITER_MARKERS", "9991": "TRACE_ITER_OVERWRITE", "9992": "TRACE_ITER_PREEMPTONLY", "9993": "TRACE_ITER_PRINTK", "9994": "TRACE_ITER_PRINTK_MSGONLY", "9995": "TRACE_ITER_PRINT_PARENT", "9996": "TRACE_ITER_RAW", "9997": "TRACE_ITER_RECORD_CMD", "9998": "TRACE_ITER_SLEEP_TIME", "9999": "TRACE_ITER_STACKTRACE", "10000": "TRACE_ITER_STOP_ON_FREE", "10001": "TRACE_ITER_SYM_ADDR", "10002": "TRACE_ITER_SYM_MASK", "10003": "TRACE_ITER_SYM_OFFSET", "10004": "TRACE_ITER_SYM_USEROBJ", "10005": "TRACE_ITER_USERSTACKTRACE", "10006": "TRACE_ITER_VERBOSE", "10007": "TRACE_LIST_MAX", "10008": "TRACE_LIST_START", "10009": "TRACE_MMIO_MAP", "10010": "TRACE_MMIO_RW", "10011": "TRACE_PRINT", "10012": "TRACE_REG_PERF_ADD", "10013": "TRACE_REG_PERF_CLOSE", "10014": "TRACE_REG_PERF_DEL", "10015": "TRACE_REG_PERF_OPEN", "10016": "TRACE_REG_PERF_REGISTER", "10017": "TRACE_REG_PERF_UNREGISTER", "10018": "TRACE_REG_REGISTER", "10019": "TRACE_REG_UNREGISTER", "10020": "TRACE_SELFTEST_REGS_FOUND", "10021": "TRACE_SELFTEST_REGS_NOT_FOUND", "10022": "TRACE_SELFTEST_REGS_START", "10023": "TRACE_SEQ_BUF_LEFT", "10024": "TRACE_SEQ_BUF_USED", "10025": "TRACE_SIGNAL_ALREADY_PENDING", "10026": "TRACE_SIGNAL_DELIVERED", "10027": "TRACE_SIGNAL_IGNORED", "10028": "TRACE_SIGNAL_LOSE_INFO", "10029": "TRACE_SIGNAL_OVERFLOW_FAIL", "10030": "TRACE_STACK", "10031": "TRACE_SYSTEM", "10032": "TRACE_TYPE_HANDLED", "10033": "TRACE_TYPE_NO_CONSUME", "10034": "TRACE_TYPE_PARTIAL_LINE", "10035": "TRACE_TYPE_UNHANDLED", "10036": "TRACE_USER_STACK", "10037": "TRACE_WAKE", "10038": "TRACING", "10039": "TSC", "10040": "TSTAT_HASH_MASK", "10041": "TSTAT_HASH_SIZE", "10042": "TS_COMM_LEN", "10043": "TS_DELTA_TEST", "10044": "TS_MASK", "10045": "TS_SHIFT", "10046": "TTWU_QUEUE", "10047": "TVN_BITS", "10048": "TVN_MASK", "10049": "TVN_SIZE", "10050": "TVR_BITS", "10051": "TVR_MASK", "10052": "Takes", "10053": "Thaw", "10054": "The", "10055": "This", "10056": "Timeout", "10057": "Timer", "10058": "To", "10059": "Too", "10060": "Trace", "10061": "U32_MAX", "10062": "UEVENT_HELPER_PATH_LEN", "10063": "UIDHASH_BITS", "10064": "UIDHASH_MASK", "10065": "UIDHASH_SZ", "10066": "UID_GID_MAP_MAX_EXTENTS", "10067": "UINSNS_PER_PAGE", "10068": "UINT_CMP_GE", "10069": "UINT_MAX", "10070": "ULLONG_MAX", "10071": "ULONG_CMP_GE", "10072": "ULONG_CMP_LT", "10073": "ULONG_MAX", "10074": "UMH_DISABLED", "10075": "UMH_FREEZING", "10076": "UMH_KILLABLE", "10077": "UMH_NO_WAIT", "10078": "UMH_WAIT_EXEC", "10079": "UMH_WAIT_PROC", "10080": "UNAME26", "10081": "UNKNOWN_VALUE", "10082": "UPROBES_HASH_SZ", "10083": "UPROBE_COPY_INSN", "10084": "UPROBE_EVENT_SYSTEM", "10085": "UPROBE_FILTER_MMAP", "10086": "UPROBE_FILTER_REGISTER", "10087": "UPROBE_FILTER_UNREGISTER", "10088": "UPROBE_HANDLER_MASK", "10089": "UPROBE_HANDLER_REMOVE", "10090": "UPROBE_SWBP_INSN", "10091": "UPROBE_SWBP_INSN_SIZE", "10092": "UPROBE_XOL_SLOT_BYTES", "10093": "USEC_PER_MSEC", "10094": "USEC_PER_SEC", "10095": "USEC_TO_HZ_ADJ32", "10096": "USEC_TO_HZ_MUL32", "10097": "USEC_TO_HZ_SHR32", "10098": "USERNS_INIT_FLAGS", "10099": "USERNS_SETGROUPS_ALLOWED", "10100": "USER_HZ", "10101": "USE_SPLIT_PMD_PTLOCKS", "10102": "USHRT_MAX", "10103": "UTASK_RUNNING", "10104": "UTASK_SSTEP", "10105": "UTASK_SSTEP_ACK", "10106": "UTASK_SSTEP_TRAPPED", "10107": "UTS_PROC_DOMAINNAME", "10108": "UTS_PROC_HOSTNAME", "10109": "UTS_RELEASE", "10110": "Unable", "10111": "Unknown", "10112": "Unlock", "10113": "Unsupported", "10114": "Update", "10115": "Use", "10116": "V", "10117": "VERBOSE", "10118": "VERBOSE_TOROUT_ERRSTRING", "10119": "VERBOSE_TOROUT_STRING", "10120": "VERIFY_READ", "10121": "VERIFY_WRITE", "10122": "VERMAGIC_STRING", "10123": "VERY_VERBOSE", "10124": "VFS_CAP_FLAGS_EFFECTIVE", "10125": "VFS_CAP_REVISION_MASK", "10126": "VFS_CAP_REVISION_SHIFT", "10127": "VMCOREINFO_BYTES", "10128": "VMCOREINFO_NOTE_SIZE", "10129": "VMLINUX_SYMBOL_STR", "10130": "VM_ACCOUNT", "10131": "VM_BLOCK_DUMP", "10132": "VM_BUG_ON_MM", "10133": "VM_DENYWRITE", "10134": "VM_DIRTY_BACKGROUND", "10135": "VM_DIRTY_RATIO", "10136": "VM_DONTCOPY", "10137": "VM_DONTDUMP", "10138": "VM_DONTEXPAND", "10139": "VM_DROP_PAGECACHE", "10140": "VM_EXEC", "10141": "VM_FAULT_SIGBUS", "10142": "VM_HUGETLB", "10143": "VM_HUGETLB_GROUP", "10144": "VM_INIT_DEF_MASK", "10145": "VM_IO", "10146": "VM_LAPTOP_MODE", "10147": "VM_LEGACY_VA_LAYOUT", "10148": "VM_LOCKED", "10149": "VM_LOWMEM_RESERVE_RATIO", "10150": "VM_MAX_MAP_COUNT", "10151": "VM_MAYEXEC", "10152": "VM_MAYSHARE", "10153": "VM_MIN_FREE_KBYTES", "10154": "VM_MIN_SLAB", "10155": "VM_MIN_UNMAPPED", "10156": "VM_NOHUGEPAGE", "10157": "VM_OVERCOMMIT_MEMORY", "10158": "VM_OVERCOMMIT_RATIO", "10159": "VM_PAGE_CLUSTER", "10160": "VM_PANIC_ON_OOM", "10161": "VM_PERCPU_PAGELIST_FRACTION", "10162": "VM_READ", "10163": "VM_SHARED", "10164": "VM_SWAPPINESS", "10165": "VM_VDSO_ENABLED", "10166": "VM_VFS_CACHE_PRESSURE", "10167": "VM_WRITE", "10168": "VM_ZONE_RECLAIM_MODE", "10169": "VP", "10170": "VTIME_SLEEPING", "10171": "VTIME_SYS", "10172": "VTIME_USER", "10173": "Version", "10174": "W", "10175": "WAIT_ATOMIC_T_BIT_NR", "10176": "WAKEUP_PREEMPTION", "10177": "WALK_PRED_ABORT", "10178": "WALK_PRED_DEFAULT", "10179": "WALK_PRED_PARENT", "10180": "WARN", "10181": "WARNING", "10182": "WARNING_FREQ", "10183": "WARN_ON", "10184": "WARN_ONCE", "10185": "WARN_ON_ONCE", "10186": "WARN_RATELIMIT", "10187": "WEIGHT_IDLEPRIO", "10188": "WF_FORK", "10189": "WF_MIGRATED", "10190": "WF_SYNC", "10191": "WILL_BE_GPL_ONLY", "10192": "WL_GC_COUNT_MAX", "10193": "WL_GC_TIME_SEC", "10194": "WMULT_CONST", "10195": "WMULT_IDLEPRIO", "10196": "WMULT_SHIFT", "10197": "WORKER_CPU_INTENSIVE", "10198": "WORKER_DESC_LEN", "10199": "WORKER_DIE", "10200": "WORKER_IDLE", "10201": "WORKER_NOT_RUNNING", "10202": "WORKER_PREP", "10203": "WORKER_REBOUND", "10204": "WORKER_UNBOUND", "10205": "WORK_BUSY_PENDING", "10206": "WORK_BUSY_RUNNING", "10207": "WORK_CPU_UNBOUND", "10208": "WORK_NO_COLOR", "10209": "WORK_NR_COLORS", "10210": "WORK_OFFQ_CANCELING", "10211": "WORK_OFFQ_POOL_NONE", "10212": "WORK_OFFQ_POOL_SHIFT", "10213": "WORK_STRUCT_COLOR_SHIFT", "10214": "WORK_STRUCT_DELAYED", "10215": "WORK_STRUCT_DELAYED_BIT", "10216": "WORK_STRUCT_FLAG_MASK", "10217": "WORK_STRUCT_LINKED", "10218": "WORK_STRUCT_LINKED_BIT", "10219": "WORK_STRUCT_PENDING", "10220": "WORK_STRUCT_PENDING_BIT", "10221": "WORK_STRUCT_PWQ", "10222": "WORK_STRUCT_STATIC_BIT", "10223": "WORK_STRUCT_WQ_DATA_MASK", "10224": "WQ_CPU_INTENSIVE", "10225": "WQ_DFL_ACTIVE", "10226": "WQ_FLAG_EXCLUSIVE", "10227": "WQ_FLAG_WOKEN", "10228": "WQ_FREEZABLE", "10229": "WQ_HIGHPRI", "10230": "WQ_MAX_ACTIVE", "10231": "WQ_NAME_LEN", "10232": "WQ_POWER_EFFICIENT", "10233": "WQ_SYSFS", "10234": "WQ_UNBOUND", "10235": "WQ_UNBOUND_MAX_ACTIVE", "10236": "WRITE", "10237": "WRITE_BUFSIZE", "10238": "WRITE_ONCE", "10239": "WRT_SYSCTL", "10240": "Waiting", "10241": "Warning", "10242": "Watchdog", "10243": "Write", "10244": "Writes", "10245": "X", "10246": "XFS_BUF_AGE", "10247": "XFS_BUF_TIMER", "10248": "XFS_ERRLEVEL", "10249": "XFS_FILESTREAM_TIMER", "10250": "XFS_INHERIT_NOATIME", "10251": "XFS_INHERIT_NODFRG", "10252": "XFS_INHERIT_NODUMP", "10253": "XFS_INHERIT_NOSYM", "10254": "XFS_INHERIT_SYNC", "10255": "XFS_PANIC_MASK", "10256": "XFS_ROTORSTEP", "10257": "XFS_SGID_INHERIT", "10258": "XFS_STATS_CLEAR", "10259": "XFS_SYMLINK_MODE", "10260": "XFS_SYNCD_TIMER", "10261": "XOR", "10262": "YES", "10263": "You", "10264": "ZERO_PAGE", "10265": "Zd", "10266": "[", "10267": "\\s", "10268": "]", "10269": "^", "10270": "_", "10271": "_CONSOLE_CMDLINE_H", "10272": "_DEBUG_CORE_H_", "10273": "_DEFAULT_FETCH_TYPE", "10274": "_IOC_NR", "10275": "_IOC_SIZE", "10276": "_IOC_TYPE", "10277": "_IRQF_MODIFY_MASK", "10278": "_IRQ_DEFAULT_INIT_FLAGS", "10279": "_IRQ_DESC_CHECK", "10280": "_IRQ_DESC_PERCPU", "10281": "_IRQ_IS_POLLED", "10282": "_IRQ_LEVEL", "10283": "_IRQ_MOVE_PCNTXT", "10284": "_IRQ_NESTED_THREAD", "10285": "_IRQ_NOAUTOEN", "10286": "_IRQ_NOPROBE", "10287": "_IRQ_NOREQUEST", "10288": "_IRQ_NOTHREAD", "10289": "_IRQ_NO_BALANCING", "10290": "_IRQ_PER_CPU", "10291": "_IRQ_PER_CPU_DEVID", "10292": "_K", "10293": "_KDBPRIVATE_H", "10294": "_KERNEL_CAPABILITY_U32S", "10295": "_KERNEL_CAPABILITY_VERSION", "10296": "_KERNEL_EVENTS_INTERNAL_H", "10297": "_KERNEL_TIME_TIMEKEEPING_H", "10298": "_LAST_FIELD", "10299": "_LINUX_CAPABILITY_U32S_1", "10300": "_LINUX_CAPABILITY_U32S_3", "10301": "_LINUX_CAPABILITY_VERSION_1", "10302": "_LINUX_CAPABILITY_VERSION_2", "10303": "_LINUX_CAPABILITY_VERSION_3", "10304": "_LINUX_KERNEL_TRACE_H", "10305": "_LINUX_NTP_INTERNAL_H", "10306": "_NSIG", "10307": "_NSIG_WORDS", "10308": "_PRINTK_BRAILLE_H", "10309": "_QR_BIAS", "10310": "_QW_LOCKED", "10311": "_QW_WAITING", "10312": "_QW_WMASK", "10313": "_READ", "10314": "_RET_IP_", "10315": "_THIS_IP_", "10316": "_TICK_SCHED_H", "10317": "_TIF_NEED_RESCHED", "10318": "_TIF_POLLING_NRFLAG", "10319": "_TIMEKEEPING_INTERNAL_H", "10320": "_TRACE_BENCHMARK_H", "10321": "_TRACE_TEST_H", "10322": "_X", "10323": "__ARCH_HAS_KA_RESTORER", "10324": "__ARCH_HAS_SA_RESTORER", "10325": "__ARCH_HAS_VTIME_ACCOUNT", "10326": "__ARCH_HAS_VTIME_TASK_SWITCH", "10327": "__ARCH_IRQ_EXIT_IRQS_DISABLED", "10328": "__ARCH_IRQ_STAT", "10329": "__ARCH_RW_LOCK_UNLOCKED", "10330": "__ARCH_SIGSYS", "10331": "__ARCH_SI_TRAPNO", "10332": "__ARCH_SPIN_LOCK_UNLOCKED", "10333": "__ARCH_WANT_COMPAT_SYS_TIME", "10334": "__ARCH_WANT_SYS_ALARM", "10335": "__ARCH_WANT_SYS_CLONE", "10336": "__ARCH_WANT_SYS_FORK", "10337": "__ARCH_WANT_SYS_GETHOSTNAME", "10338": "__ARCH_WANT_SYS_GETPGRP", "10339": "__ARCH_WANT_SYS_OLD_GETRLIMIT", "10340": "__ARCH_WANT_SYS_OLD_UNAME", "10341": "__ARCH_WANT_SYS_PAUSE", "10342": "__ARCH_WANT_SYS_SIGNAL", "10343": "__ARCH_WANT_SYS_SIGPENDING", "10344": "__ARCH_WANT_SYS_SIGPROCMASK", "10345": "__ARCH_WANT_SYS_TIME", "10346": "__ARCH_WANT_SYS_VFORK", "10347": "__ASSIGN_FETCH_TYPE", "10348": "__ATTR", "10349": "__ATTR_NULL", "10350": "__ATTR_RO", "10351": "__ATTR_RW", "10352": "__BIG_ENDIAN", "10353": "__BLK_TA_BACKMERGE", "10354": "__BLK_TA_BOUNCE", "10355": "__BLK_TA_COMPLETE", "10356": "__BLK_TA_FRONTMERGE", "10357": "__BLK_TA_GETRQ", "10358": "__BLK_TA_INSERT", "10359": "__BLK_TA_ISSUE", "10360": "__BLK_TA_PLUG", "10361": "__BLK_TA_QUEUE", "10362": "__BLK_TA_REMAP", "10363": "__BLK_TA_REQUEUE", "10364": "__BLK_TA_SLEEPRQ", "10365": "__BLK_TA_SPLIT", "10366": "__BLK_TA_UNPLUG_IO", "10367": "__BLK_TA_UNPLUG_TIMER", "10368": "__BPF_FUNC_MAX_ID", "10369": "__CFTYPE_NOT_ON_DFL", "10370": "__CFTYPE_ONLY_ON_DFL", "10371": "__DEFAULT_FETCH_TYPE", "10372": "__FILE__", "10373": "__GENERATING_BOUNDS_H", "10374": "__GFP_COLD", "10375": "__GFP_FS", "10376": "__GFP_HARDWALL", "10377": "__GFP_HIGH", "10378": "__GFP_HIGHMEM", "10379": "__GFP_NOMEMALLOC", "10380": "__GFP_NORETRY", "10381": "__GFP_NOTRACK_FALSE_POSITIVE", "10382": "__GFP_NOWARN", "10383": "__GFP_THISNODE", "10384": "__GFP_WAIT", "10385": "__GFP_ZERO", "10386": "__GNUC_MINOR__", "10387": "__GNUC__", "10388": "__HIBERNATION_AFTER_LAST", "10389": "__IRQF_TIMER", "10390": "__KERNEL__", "10391": "__LINE__", "10392": "__LINUX_MCS_SPINLOCK_H", "10393": "__LINUX_RCU_H", "10394": "__LOCKF", "10395": "__LOG_BUF_LEN", "10396": "__MAX_NR_ZONES", "10397": "__MUTEX_INITIALIZER", "10398": "__NEW_UTS_LEN", "10399": "__NR_PAGEFLAGS", "10400": "__NR_seccomp_exit", "10401": "__NR_seccomp_exit_32", "10402": "__NR_seccomp_read", "10403": "__NR_seccomp_read_32", "10404": "__NR_seccomp_sigreturn", "10405": "__NR_seccomp_sigreturn_32", "10406": "__NR_seccomp_write", "10407": "__NR_seccomp_write_32", "10408": "__OLD_UTS_LEN", "10409": "__P", "10410": "__PN", "10411": "__RAW_SPIN_LOCK_UNLOCKED", "10412": "__RWSEM_INITIALIZER", "10413": "__SCHED_FEAT_", "10414": "__SCHED_FEAT_NR", "10415": "__SI_CHLD", "10416": "__SI_FAULT", "10417": "__SI_KILL", "10418": "__SI_MASK", "10419": "__SI_MESGQ", "10420": "__SI_POLL", "10421": "__SI_RT", "10422": "__SI_SYS", "10423": "__SI_TIMER", "10424": "__STATE", "10425": "__TASK_STOPPED", "10426": "__TASK_TRACED", "10427": "__TEST_AFTER_LAST", "10428": "__TRACE_FIRST_TYPE", "10429": "__TRACE_LAST_TYPE", "10430": "__TRACE_STAT_H", "10431": "__USAGE", "10432": "__VA_ARGS__", "10433": "__WAIT_ATOMIC_T_KEY_INITIALIZER", "10434": "__WAIT_BIT_KEY_INITIALIZER", "10435": "__WAIT_QUEUE_HEAD_INITIALIZER", "10436": "__WALL", "10437": "__WQ_DRAINING", "10438": "__WQ_ORDERED", "10439": "___P", "10440": "___PD", "10441": "___PS", "10442": "_____i", "10443": "_____ret", "10444": "____cacheline_aligned", "10445": "____cacheline_aligned_in_smp", "10446": "____cacheline_internodealigned_in_smp", "10447": "____call_usermodehelper", "10448": "____ftrace_", "10449": "____ftrace_check_", "10450": "___might_sleep", "10451": "___n", "10452": "___r", "10453": "___ret", "10454": "__account_cfs_rq_runtime", "10455": "__account_scheduler_latency", "10456": "__account_system_time", "10457": "__acct_update_integrals", "10458": "__acquire", "10459": "__acquires", "10460": "__add_event_to_tracers", "10461": "__add_hash_entry", "10462": "__add_wait_queue", "10463": "__add_wait_queue_tail", "10464": "__adjust_resource", "10465": "__aligned", "10466": "__alignof__", "10467": "__alloc_filter", "10468": "__alloc_percpu", "10469": "__alloc_pred_stack", "10470": "__alloc_preds", "10471": "__alloc_reserved_percpu", "10472": "__alloc_workqueue_key", "10473": "__always_inline", "10474": "__always_unused", "10475": "__arch_um__", "10476": "__arm_kprobe", "10477": "__array", "10478": "__array_desc", "10479": "__async_schedule", "10480": "__atomic_notifier_call_chain", "10481": "__attribute__", "10482": "__audit_bprm", "10483": "__audit_fd_pair", "10484": "__audit_file", "10485": "__audit_free", "10486": "__audit_getname", "10487": "__audit_inode", "10488": "__audit_inode_child", "10489": "__audit_ipc_obj", "10490": "__audit_ipc_set_perm", "10491": "__audit_log_bprm_fcaps", "10492": "__audit_log_capset", "10493": "__audit_mmap_fd", "10494": "__audit_mq_getsetattr", "10495": "__audit_mq_notify", "10496": "__audit_mq_open", "10497": "__audit_mq_sendrecv", "10498": "__audit_ptrace", "10499": "__audit_reusename", "10500": "__audit_seccomp", "10501": "__audit_signal_info", "10502": "__audit_sockaddr", "10503": "__audit_socketcall", "10504": "__audit_syscall_entry", "10505": "__audit_syscall_exit", "10506": "__b", "10507": "__bad_type_size", "10508": "__be64", "10509": "__bfs", "10510": "__blk_add_trace", "10511": "__blocking_notifier_call_chain", "10512": "__bpf_call_base", "10513": "__bpf_prog_free", "10514": "__bpf_prog_run", "10515": "__buffer_unlock_commit", "10516": "__builtin_return_address", "10517": "__builtin_types_compatible_p", "10518": "__cacheline_aligned", "10519": "__cacheline_aligned_in_smp", "10520": "__calc_delta", "10521": "__call_rcu", "10522": "__call_rcu_core", "10523": "__call_rcu_nocb", "10524": "__call_rcu_nocb_enqueue", "10525": "__call_usermodehelper", "10526": "__cancel_work_timer", "10527": "__cap_empty_set", "10528": "__cfs_bandwidth_used", "10529": "__cfs_schedulable", "10530": "__cgroup_procs_write", "10531": "__change_pid", "10532": "__checkparam_dl", "10533": "__cleanup_sighand", "10534": "__clear_bit", "10535": "__clear_buddies_last", "10536": "__clear_buddies_next", "10537": "__clear_buddies_skip", "10538": "__clear_sched_clock_stable", "10539": "__clockevents_set_state", "10540": "__clockevents_try_unbind", "10541": "__clockevents_unbind", "10542": "__clockevents_update_freq", "10543": "__common_field", "10544": "__compat_get_timespec", "10545": "__compat_get_timeval", "10546": "__compat_put_timespec", "10547": "__compat_put_timeval", "10548": "__compat_save_altstack", "10549": "__compute_runnable_contrib", "10550": "__cond_lock", "10551": "__cond_resched_lock", "10552": "__cond_resched_softirq", "10553": "__context_tracking_task_switch", "10554": "__copy_from_user_inatomic", "10555": "__copy_insn", "10556": "__copy_to_user", "10557": "__count", "10558": "__cpu", "10559": "__cpu_die", "10560": "__cpu_disable", "10561": "__cpu_lockdep_stats", "10562": "__cpu_notify", "10563": "__cpu_up", "10564": "__cpuinit", "10565": "__cpuset_memory_pressure_bump", "10566": "__cpuset_node_allowed", "10567": "__cq_dequeue", "10568": "__cq_empty", "10569": "__cq_enqueue", "10570": "__cq_full", "10571": "__cq_get_elem_count", "10572": "__cq_init", "10573": "__create_xol_area", "10574": "__current_clr_polling", "10575": "__current_kernel_time", "10576": "__current_set_polling", "10577": "__data", "10578": "__debug_atomic_inc", "10579": "__debug_locks_off", "10580": "__delay", "10581": "__delayacct_add_tsk", "10582": "__delayacct_blkio_end", "10583": "__delayacct_blkio_start", "10584": "__delayacct_blkio_ticks", "10585": "__delayacct_freepages_end", "10586": "__delayacct_freepages_start", "10587": "__delayacct_tsk_init", "10588": "__dequeue_entity", "10589": "__dequeue_rt_entity", "10590": "__dequeue_signal", "10591": "__devm_release_region", "10592": "__devm_request_region", "10593": "__disable_irq", "10594": "__disable_irq_nosync", "10595": "__disable_kprobe", "10596": "__disable_runtime", "10597": "__disable_trace_on_warning", "10598": "__disarm_kprobe", "10599": "__dl_add", "10600": "__dl_clear", "10601": "__dl_clear_params", "10602": "__dl_overflow", "10603": "__do_adjtimex", "10604": "__do_proc_dointvec", "10605": "__do_proc_doulongvec_minmax", "10606": "__do_softirq", "10607": "__down", "10608": "__down_common", "10609": "__down_interruptible", "10610": "__down_killable", "10611": "__down_read", "10612": "__down_read_trylock", "10613": "__down_timeout", "10614": "__down_trylock_console_sem", "10615": "__down_write", "10616": "__down_write_nested", "10617": "__down_write_trylock", "10618": "__downgrade_write", "10619": "__dynamic_array", "10620": "__enable_irq", "10621": "__enable_runtime", "10622": "__enqueue_entity", "10623": "__enqueue_rt_entity", "10624": "__entry", "10625": "__event_", "10626": "__exit", "10627": "__fatal_signal_pending", "10628": "__ffs", "10629": "__field", "10630": "__field_desc", "10631": "__field_struct", "10632": "__find_event_field", "10633": "__find_resource", "10634": "__find_uprobe", "10635": "__flush_itimer_signals", "10636": "__flush_signals", "10637": "__force", "10638": "__fput_sync", "10639": "__free_domain_allocs", "10640": "__free_event", "10641": "__free_filter", "10642": "__free_ftrace_hash_rcu", "10643": "__free_insn_slot", "10644": "__free_irq", "10645": "__free_page", "10646": "__free_percpu_irq", "10647": "__free_pred_stack", "10648": "__free_preds", "10649": "__free_subsystem_filter", "10650": "__ftrace_bad_type", "10651": "__ftrace_event_enable_disable", "10652": "__ftrace_function_set_filter", "10653": "__ftrace_graph_entry", "10654": "__ftrace_hash_rec_update", "10655": "__ftrace_hash_update_ipmodify", "10656": "__ftrace_modify_code", "10657": "__ftrace_ops_list_func", "10658": "__ftrace_replace_code", "10659": "__ftrace_set_clr_event", "10660": "__ftrace_set_clr_event_nolock", "10661": "__ftrace_vbprintk", "10662": "__ftrace_vprintk", "10663": "__func__", "10664": "__gcov_flush", "10665": "__gcov_init", "10666": "__gcov_merge_add", "10667": "__gcov_merge_delta", "10668": "__gcov_merge_ior", "10669": "__gcov_merge_single", "10670": "__gcov_merge_time_profile", "10671": "__get_cached_msi_msg", "10672": "__get_cpu_context", "10673": "__get_data_size", "10674": "__get_free_page", "10675": "__get_free_pages", "10676": "__get_insn_slot", "10677": "__get_key_name", "10678": "__get_system", "10679": "__get_system_dir", "10680": "__get_user", "10681": "__get_valid_kprobe", "10682": "__getname", "10683": "__getnstimeofday64", "10684": "__getparam_dl", "10685": "__group_send_sig_info", "10686": "__handle_domain_irq", "10687": "__hardpps", "10688": "__hotcpu_notifier", "10689": "__hppa__", "10690": "__hrtick_restart", "10691": "__hrtick_start", "10692": "__hrtimer_start_range_ns", "10693": "__hrtimer_tasklet_trampoline", "10694": "__i386__", "10695": "__init", "10696": "__init_kthread_worker", "10697": "__init_rwsem", "10698": "__init_srcu_struct", "10699": "__init_waitqueue_head", "10700": "__init_work", "10701": "__initcall", "10702": "__initconst", "10703": "__initdata", "10704": "__initdata_or_module", "10705": "__insert_resource", "10706": "__insert_uprobe", "10707": "__internal_add_timer", "10708": "__iomem", "10709": "__irq_alloc_descs", "10710": "__irq_domain_add", "10711": "__irq_domain_alloc_irqs", "10712": "__irq_enter", "10713": "__irq_get_desc_lock", "10714": "__irq_put_desc_unlock", "10715": "__irq_set_affinity", "10716": "__irq_set_handler", "10717": "__irq_set_trigger", "10718": "__irq_wake_thread", "10719": "__irqentry_text_end", "10720": "__irqsoff_tracer_init", "10721": "__is_kfree_rcu_offset", "10722": "__is_ram", "10723": "__jump_label_mod_text_reserved", "10724": "__jump_label_mod_update", "10725": "__jump_label_text_reserved", "10726": "__jump_label_update", "10727": "__kernel_param_lock", "10728": "__kernel_param_unlock", "10729": "__kernel_size_t", "10730": "__kernel_time_t", "10731": "__kernel_write", "10732": "__kernfs_create_file", "10733": "__kexec_load_purgatory", "10734": "__kgid_val", "10735": "__kill_pgrp_info", "10736": "__klp_disable_patch", "10737": "__klp_enable_patch", "10738": "__kprobe_trace_func", "10739": "__kprobes_text_start", "10740": "__kprojid_val", "10741": "__kretprobe_trace_func", "10742": "__kthread_bind", "10743": "__kthread_parkme", "10744": "__kthread_unpark", "10745": "__ktime_get_fast_ns", "10746": "__kuid_val", "10747": "__le16", "10748": "__list_del", "10749": "__local_bh_disable_ip", "10750": "__local_bh_enable", "10751": "__local_bh_enable_ip", "10752": "__lock_acquire", "10753": "__lock_acquired", "10754": "__lock_contended", "10755": "__lock_is_held", "10756": "__lock_release", "10757": "__lock_set_class", "10758": "__lock_task_sighand", "10759": "__lock_text_end", "10760": "__lock_text_start", "10761": "__lock_timer", "10762": "__lockdep_no_validate__", "10763": "__lockdep_trace_alloc", "10764": "__lockfunc", "10765": "__m1", "10766": "__m2", "10767": "__maybe_unused", "10768": "__might_sleep", "10769": "__migrate_swap_task", "10770": "__migrate_task", "10771": "__mmdrop", "10772": "__mod_timer", "10773": "__modinit", "10774": "__module_address", "10775": "__module_get", "10776": "__module_text_address", "10777": "__modver_version_show", "10778": "__mutex_fastpath_lock", "10779": "__mutex_fastpath_lock_retval", "10780": "__mutex_fastpath_trylock", "10781": "__mutex_fastpath_unlock", "10782": "__mutex_init", "10783": "__mutex_lock_common", "10784": "__mutex_lock_interruptible_slowpath", "10785": "__mutex_lock_killable_slowpath", "10786": "__mutex_lock_slowpath", "10787": "__mutex_slowpath_needs_to_unlock", "10788": "__mutex_trylock_slowpath", "10789": "__mutex_unlock_common_slowpath", "10790": "__mutex_unlock_slowpath", "10791": "__name", "10792": "__need_more_worker", "10793": "__net_exit", "10794": "__net_init", "10795": "__net_initdata", "10796": "__next", "10797": "__next_timer_interrupt", "10798": "__noreturn", "10799": "__normal_prio", "10800": "__nosavedata", "10801": "__note_gp_changes", "10802": "__old", "10803": "__op", "10804": "__output_copy", "10805": "__output_skip", "10806": "__packed", "10807": "__padata_add_cpu", "10808": "__padata_free", "10809": "__padata_list_init", "10810": "__padata_remove_cpu", "10811": "__padata_set_cpumasks", "10812": "__padata_start", "10813": "__padata_stop", "10814": "__parse_bitfield_probe_arg", "10815": "__parse_crashkernel", "10816": "__pc", "10817": "__per_cpu_offset", "10818": "__percpu", "10819": "__percpu_init_rwsem", "10820": "__perf_event__output_id_sample", "10821": "__perf_event_count", "10822": "__perf_event_disable", "10823": "__perf_event_enable", "10824": "__perf_event_header__init_id", "10825": "__perf_event_init_context", "10826": "__perf_event_mark_enabled", "10827": "__perf_event_read", "10828": "__perf_event_sync_stat", "10829": "__perf_event_task_sched_in", "10830": "__perf_install_in_context", "10831": "__perf_mmap_to_page", "10832": "__perf_remove_from_context", "10833": "__pick_first_entity", "10834": "__pick_last_entity", "10835": "__pick_next_entity", "10836": "__pm_qos_update_request", "10837": "__pm_relax", "10838": "__pm_stay_awake", "10839": "__pm_wakeup_event", "10840": "__pool", "10841": "__pop_pred_stack", "10842": "__posix_timers_find", "10843": "__prctl_check_order", "10844": "__preempt_count_add", "10845": "__preempt_count_sub", "10846": "__print_graph_headers_flags", "10847": "__print_lock_name", "10848": "__print_symbol", "10849": "__profile_flip_buffers", "10850": "__ptrace_detach", "10851": "__ptrace_link", "10852": "__ptrace_may_access", "10853": "__ptrace_unlink", "10854": "__push_pred_stack", "10855": "__put_chunk", "10856": "__put_cred", "10857": "__put_system", "10858": "__put_system_dir", "10859": "__put_task_struct", "10860": "__put_user", "10861": "__putname", "10862": "__queue_delayed_work", "10863": "__queue_work", "10864": "__r", "10865": "__raise_softirq_irqoff", "10866": "__raw_", "10867": "__raw_notifier_call_chain", "10868": "__raw_read_lock", "10869": "__raw_read_lock_bh", "10870": "__raw_read_lock_irq", "10871": "__raw_read_lock_irqsave", "10872": "__raw_read_trylock", "10873": "__raw_read_unlock", "10874": "__raw_read_unlock_bh", "10875": "__raw_read_unlock_irq", "10876": "__raw_read_unlock_irqrestore", "10877": "__raw_spin_lock", "10878": "__raw_spin_lock_bh", "10879": "__raw_spin_lock_init", "10880": "__raw_spin_lock_irq", "10881": "__raw_spin_lock_irqsave", "10882": "__raw_spin_trylock", "10883": "__raw_spin_trylock_bh", "10884": "__raw_spin_unlock", "10885": "__raw_spin_unlock_bh", "10886": "__raw_spin_unlock_irq", "10887": "__raw_spin_unlock_irqrestore", "10888": "__raw_write_lock", "10889": "__raw_write_lock_bh", "10890": "__raw_write_lock_irq", "10891": "__raw_write_lock_irqsave", "10892": "__raw_write_trylock", "10893": "__raw_write_unlock", "10894": "__raw_write_unlock_bh", "10895": "__raw_write_unlock_irq", "10896": "__raw_write_unlock_irqrestore", "10897": "__rb_allocate_pages", "10898": "__rb_data_page_index", "10899": "__rb_free_aux", "10900": "__rb_page_index", "10901": "__rb_reserve_next", "10902": "__rcu", "10903": "__rcu_init_preempt", "10904": "__rcu_is_watching", "10905": "__rcu_pending", "10906": "__rcu_process_callbacks", "10907": "__rcu_read_lock", "10908": "__rcu_read_unlock", "10909": "__rcu_reclaim", "10910": "__read_lock_debug", "10911": "__read_mostly", "10912": "__ref", "10913": "__refdata", "10914": "__refill_cfs_bandwidth_runtime", "10915": "__refrigerator", "10916": "__register_cpu_notifier", "10917": "__register_event", "10918": "__register_ftrace_function", "10919": "__register_nosave_region", "10920": "__register_trace_kprobe", "10921": "__release", "10922": "__release_child_resources", "10923": "__release_region", "10924": "__release_resource", "10925": "__releases", "10926": "__remove_filter", "10927": "__remove_wait_queue", "10928": "__replace_page", "10929": "__report_bad_irq", "10930": "__request_module", "10931": "__request_region", "10932": "__request_resource", "10933": "__res", "10934": "__rescuer", "10935": "__reserve_region_with_split", "10936": "__reserved", "10937": "__reset_stat_session", "10938": "__return_cfs_rq_runtime", "10939": "__ring_buffer_alloc", "10940": "__rq_clock_broken", "10941": "__rt_schedulable", "10942": "__run_timers", "10943": "__rwlock_init", "10944": "__rwsem_do_wake", "10945": "__rwsem_wake_one_writer", "10946": "__same_type", "10947": "__save_altstack", "10948": "__sched", "10949": "__sched_clock_stable", "10950": "__sched_clock_stable_early", "10951": "__sched_fork", "10952": "__sched_info_switch", "10953": "__sched_period", "10954": "__sched_setscheduler", "10955": "__sched_text_start", "10956": "__schedule", "10957": "__schedule_bug", "10958": "__sd", "10959": "__sdt_alloc", "10960": "__sdt_free", "10961": "__seccomp_phase1_filter", "10962": "__secure_computing", "10963": "__secure_computing_strict", "10964": "__send_signal", "10965": "__seq_open_private", "10966": "__set_bit", "10967": "__set_current_blocked", "10968": "__set_current_state", "10969": "__set_enter_print_fmt", "10970": "__set_print_fmt", "10971": "__set_sched_clock_stable", "10972": "__set_task_blocked", "10973": "__set_task_cpu", "10974": "__set_task_state", "10975": "__setparam_dl", "10976": "__setscheduler", "10977": "__setscheduler_params", "10978": "__setup", "10979": "__setup_irq", "10980": "__si_special", "10981": "__sighandler_t", "10982": "__sigqueue_alloc", "10983": "__sigqueue_free", "10984": "__size", "10985": "__skb_dequeue", "10986": "__smpboot_create_thread", "10987": "__sparc__", "10988": "__spin_lock_debug", "10989": "__sprint_symbol", "10990": "__srcu_notifier_call_chain", "10991": "__srcu_read_lock", "10992": "__srcu_read_unlock", "10993": "__stack_chk_fail", "10994": "__start___ex_table", "10995": "__start___jump_table", "10996": "__start___kcrctab", "10997": "__start___kcrctab_gpl", "10998": "__start___kcrctab_gpl_future", "10999": "__start___kcrctab_unused", "11000": "__start___kcrctab_unused_gpl", "11001": "__start___ksymtab", "11002": "__start___ksymtab_gpl", "11003": "__start___ksymtab_gpl_future", "11004": "__start___ksymtab_unused", "11005": "__start___ksymtab_unused_gpl", "11006": "__start___modver", "11007": "__start___param", "11008": "__start___trace_bprintk_fmt", "11009": "__start___tracepoint_str", "11010": "__start_annotated_branch_profile", "11011": "__start_branch_profile", "11012": "__start_cfs_bandwidth", "11013": "__start_ftrace_events", "11014": "__start_kprobe_blacklist", "11015": "__start_syscalls_metadata", "11016": "__static_key_slow_dec", "11017": "__stop___ex_table", "11018": "__stop___jump_table", "11019": "__stop___ksymtab", "11020": "__stop___ksymtab_gpl", "11021": "__stop___ksymtab_gpl_future", "11022": "__stop___ksymtab_unused", "11023": "__stop___ksymtab_unused_gpl", "11024": "__stop___modver", "11025": "__stop___trace_bprintk_fmt", "11026": "__stop___tracepoint_str", "11027": "__stop_annotated_branch_profile", "11028": "__stop_branch_profile", "11029": "__stop_cpus", "11030": "__stop_ftrace_events", "11031": "__stop_kprobe_blacklist", "11032": "__stop_machine", "11033": "__stop_syscalls_metadata", "11034": "__stringify", "11035": "__symbol_get", "11036": "__symbol_put", "11037": "__synchronize_entity_decay", "11038": "__synchronize_hardirq", "11039": "__synchronize_srcu", "11040": "__sysrq_enabled", "11041": "__task_cred", "11042": "__task_pid_nr_ns", "11043": "__task_rq_lock", "11044": "__task_rq_unlock", "11045": "__tasklet_hi_schedule", "11046": "__tasklet_hi_schedule_first", "11047": "__tasklet_hrtimer_trampoline", "11048": "__tasklet_schedule", "11049": "__thaw_task", "11050": "__this_cpu_add", "11051": "__this_cpu_dec", "11052": "__this_cpu_inc", "11053": "__this_cpu_inc_return", "11054": "__this_cpu_read", "11055": "__this_cpu_write", "11056": "__this_cpu_xchg", "11057": "__tick_nohz_full_check", "11058": "__tick_nohz_idle_enter", "11059": "__tick_nohz_task_switch", "11060": "__timekeeping_inject_sleeptime", "11061": "__timekeeping_set_tai_offset", "11062": "__timer_stats_timer_set_start_info", "11063": "__timespec_to_jiffies", "11064": "__timr", "11065": "__to_kthread", "11066": "__torture_print_stats", "11067": "__total", "11068": "__touch_watchdog", "11069": "__trace_add_event_dirs", "11070": "__trace_add_new_event", "11071": "__trace_array_put", "11072": "__trace_bprintk", "11073": "__trace_bputs", "11074": "__trace_define_field", "11075": "__trace_early_add_event_dirs", "11076": "__trace_early_add_events", "11077": "__trace_early_add_new_event", "11078": "__trace_find_cmdline", "11079": "__trace_function", "11080": "__trace_graph_entry", "11081": "__trace_graph_function", "11082": "__trace_graph_return", "11083": "__trace_hardirqs_on_caller", "11084": "__trace_mmiotrace_map", "11085": "__trace_mmiotrace_rw", "11086": "__trace_note_message", "11087": "__trace_printk", "11088": "__trace_puts", "11089": "__trace_remove_event_call", "11090": "__trace_remove_event_dirs", "11091": "__trace_seq_init", "11092": "__trace_stack", "11093": "__tracepoint_string", "11094": "__tracer_data", "11095": "__tstat_hashfn", "11096": "__tvec_bases", "11097": "__u16", "11098": "__u32", "11099": "__u64", "11100": "__u8", "11101": "__uidhashfn", "11102": "__unregister_cpu_notifier", "11103": "__unregister_ftrace_event", "11104": "__unregister_ftrace_function", "11105": "__unregister_kprobe_bottom", "11106": "__unregister_kprobe_top", "11107": "__unregister_trace_kprobe", "11108": "__unused", "11109": "__up", "11110": "__up_read", "11111": "__up_write", "11112": "__update_blocked_averages_cpu", "11113": "__update_cfs_rq_tg_load_contrib", "11114": "__update_cpu_load", "11115": "__update_entity_load_avg_contrib", "11116": "__update_entity_runnable_avg", "11117": "__update_entity_utilization_avg_contrib", "11118": "__update_group_entity_contrib", "11119": "__update_inv_weight", "11120": "__update_max_tr", "11121": "__update_task_entity_contrib", "11122": "__update_task_entity_utilization", "11123": "__update_tg_runnable_avg", "11124": "__uprobe_perf_filter", "11125": "__uprobe_perf_func", "11126": "__uprobe_register", "11127": "__uprobe_trace_func", "11128": "__uprobe_unregister", "11129": "__used", "11130": "__user", "11131": "__user_cap_data_struct", "11132": "__usermodehelper_set_disable_depth", "11133": "__va", "11134": "__val", "11135": "__validate_process_creds", "11136": "__visible", "11137": "__visit_domain_allocation_hell", "11138": "__vma_link_rb", "11139": "__vmalloc", "11140": "__vtime_account_system", "11141": "__wait_on_atomic_t", "11142": "__wait_on_bit", "11143": "__wait_on_bit_lock", "11144": "__wake_up", "11145": "__wake_up_bit", "11146": "__wake_up_common", "11147": "__wake_up_locked", "11148": "__wake_up_locked_key", "11149": "__wake_up_parent", "11150": "__wake_up_sync", "11151": "__wake_up_sync_key", "11152": "__wakeup_reset", "11153": "__wakeup_tracer_init", "11154": "__weak", "11155": "__worker", "11156": "__write_lock_debug", "11157": "__ww_mutex_lock", "11158": "__ww_mutex_lock_check_stamp", "11159": "__ww_mutex_lock_interruptible", "11160": "__ww_mutex_lock_interruptible_slowpath", "11161": "__ww_mutex_lock_slowpath", "11162": "_attr", "11163": "_braille_console_setup", "11164": "_braille_register_console", "11165": "_braille_unregister_console", "11166": "_can_lock", "11167": "_cgrp_id", "11168": "_cgrp_subsys", "11169": "_cond_resched", "11170": "_cpu_down", "11171": "_cpu_up", "11172": "_create", "11173": "_cred", "11174": "_data", "11175": "_ddebug", "11176": "_double_lock_balance", "11177": "_down_write_nest_lock", "11178": "_einittext", "11179": "_end", "11180": "_etext", "11181": "_exists", "11182": "_fls", "11183": "_fmttype", "11184": "_free_event", "11185": "_kdb_bp_install", "11186": "_kdb_bp_remove", "11187": "_kobj", "11188": "_local_bh_enable", "11189": "_lock", "11190": "_lock_bh", "11191": "_lock_irq", "11192": "_lock_irqsave", "11193": "_modlen", "11194": "_mutex_lock_nest_lock", "11195": "_name", "11196": "_p", "11197": "_param", "11198": "_perf_event_disable", "11199": "_perf_event_enable", "11200": "_perf_event_refresh", "11201": "_perf_event_reset", "11202": "_perf_ioctl", "11203": "_pick_next_task_rt", "11204": "_proc_do_string", "11205": "_raw_", "11206": "_raw_read_lock", "11207": "_raw_read_lock_bh", "11208": "_raw_read_lock_irq", "11209": "_raw_read_lock_irqsave", "11210": "_raw_read_trylock", "11211": "_raw_read_unlock", "11212": "_raw_read_unlock_bh", "11213": "_raw_read_unlock_irq", "11214": "_raw_read_unlock_irqrestore", "11215": "_raw_spin_lock", "11216": "_raw_spin_lock_bh", "11217": "_raw_spin_lock_bh_nested", "11218": "_raw_spin_lock_irq", "11219": "_raw_spin_lock_irqsave", "11220": "_raw_spin_lock_irqsave_nested", "11221": "_raw_spin_lock_nest_lock", "11222": "_raw_spin_lock_nested", "11223": "_raw_spin_trylock", "11224": "_raw_spin_trylock_bh", "11225": "_raw_spin_unlock", "11226": "_raw_spin_unlock_bh", "11227": "_raw_spin_unlock_irq", "11228": "_raw_spin_unlock_irqrestore", "11229": "_raw_write_lock", "11230": "_raw_write_lock_bh", "11231": "_raw_write_lock_irq", "11232": "_raw_write_lock_irqsave", "11233": "_raw_write_trylock", "11234": "_raw_write_unlock", "11235": "_raw_write_unlock_bh", "11236": "_raw_write_unlock_irq", "11237": "_raw_write_unlock_irqrestore", "11238": "_rcu_barrier", "11239": "_rcu_barrier_trace", "11240": "_relax", "11241": "_sched_setscheduler", "11242": "_sdata", "11243": "_show", "11244": "_show_name", "11245": "_sinittext", "11246": "_size", "11247": "_state", "11248": "_stext", "11249": "_store", "11250": "_store_name", "11251": "_t", "11252": "_torture_create_kthread", "11253": "_torture_stop_kthread", "11254": "_trylock", "11255": "_varname", "11256": "_verbose", "11257": "_x", "11258": "a", "11259": "a0", "11260": "a1", "11261": "a2", "11262": "a3", "11263": "a4", "11264": "a5", "11265": "a6", "11266": "a_ops", "11267": "a_preds", "11268": "ab", "11269": "abbr", "11270": "abi", "11271": "abort", "11272": "abort_creds", "11273": "abort_exclusive_wait", "11274": "abs", "11275": "abs_msec", "11276": "abs_timeout", "11277": "abs_ts", "11278": "abs_usec", "11279": "absexp", "11280": "abstime", "11281": "ac", "11282": "ac_ahz", "11283": "ac_btime", "11284": "ac_comm", "11285": "ac_etime", "11286": "ac_etime_hi", "11287": "ac_etime_lo", "11288": "ac_exitcode", "11289": "ac_flag", "11290": "ac_gid", "11291": "ac_gid16", "11292": "ac_majflt", "11293": "ac_mem", "11294": "ac_minflt", "11295": "ac_nice", "11296": "ac_pid", "11297": "ac_ppid", "11298": "ac_sched", "11299": "ac_stime", "11300": "ac_stimescaled", "11301": "ac_tty", "11302": "ac_uid", "11303": "ac_uid16", "11304": "ac_utime", "11305": "ac_utimescaled", "11306": "ac_version", "11307": "accept", "11308": "accepts", "11309": "access", "11310": "access_lock", "11311": "access_ok", "11312": "access_process_vm", "11313": "access_size", "11314": "account", "11315": "account_cfs_rq_runtime", "11316": "account_entity_dequeue", "11317": "account_entity_enqueue", "11318": "account_global_scheduler_latency", "11319": "account_group_exec_runtime", "11320": "account_group_system_time", "11321": "account_group_user_time", "11322": "account_guest_time", "11323": "account_idle_ticks", "11324": "account_idle_time", "11325": "account_irq_enter_time", "11326": "account_irq_exit_time", "11327": "account_kernel_stack", "11328": "account_numa_dequeue", "11329": "account_numa_enqueue", "11330": "account_process_tick", "11331": "account_scheduler_latency", "11332": "account_steal_ticks", "11333": "account_steal_time", "11334": "account_system_time", "11335": "account_user_time", "11336": "accounting", "11337": "acct", "11338": "acct_account_cputime", "11339": "acct_clear_integrals", "11340": "acct_collect", "11341": "acct_exit_ns", "11342": "acct_get", "11343": "acct_on", "11344": "acct_on_mutex", "11345": "acct_parm", "11346": "acct_pin_kill", "11347": "acct_process", "11348": "acct_put", "11349": "acct_rss_mem1", "11350": "acct_t", "11351": "acct_timexpd", "11352": "acct_update_integrals", "11353": "acct_vm_mem1", "11354": "accumulate_nsecs_to_secs", "11355": "accumulate_thread_rusage", "11356": "ack", "11357": "ack_bad", "11358": "ack_bad_irq", "11359": "ack_state", "11360": "acpi_pm", "11361": "acpi_realmode_flags", "11362": "acquire", "11363": "acquire_ip", "11364": "acquired", "11365": "acquirelock", "11366": "across", "11367": "act", "11368": "act_log_check", "11369": "act_mask", "11370": "act_waiter", "11371": "action", "11372": "action_msg", "11373": "action_ptr", "11374": "action_ret", "11375": "actions", "11376": "activate", "11377": "activate_task", "11378": "active", "11379": "active_balance", "11380": "active_balance_work", "11381": "active_cpus", "11382": "active_ctx_list", "11383": "active_load_balance_cpu_stop", "11384": "active_mm", "11385": "active_nodes", "11386": "active_oncpu", "11387": "active_reqs", "11388": "active_timers", "11389": "active_uprobe", "11390": "active_writer", "11391": "add", "11392": "add_del_listener", "11393": "add_dev", "11394": "add_event_to_ctx", "11395": "add_ftrace_list_ops", "11396": "add_ftrace_ops", "11397": "add_hash_entry", "11398": "add_if_not_found", "11399": "add_info", "11400": "add_interrupt_randomness", "11401": "add_kallsyms", "11402": "add_links", "11403": "add_lock_to_list", "11404": "add_module_usage", "11405": "add_new_kprobe", "11406": "add_node", "11407": "add_notes_attrs", "11408": "add_nr_running", "11409": "add_offset", "11410": "add_range", "11411": "add_range_with_merge", "11412": "add_rtree_block", "11413": "add_sect_attrs", "11414": "add_sysfs_param", "11415": "add_taint", "11416": "add_taint_module", "11417": "add_timer", "11418": "add_timer_on", "11419": "add_timestamp", "11420": "add_unformed_module", "11421": "add_usage_links", "11422": "add_wait_queue", "11423": "add_wait_queue_exclusive", "11424": "add_watch_to_parent", "11425": "added_mask", "11426": "addend", "11427": "adding", "11428": "addr", "11429": "addr_conflict", "11430": "address", "11431": "address_space", "11432": "adj", "11433": "adj_scale", "11434": "adjtimex", "11435": "adjust", "11436": "adjust_branches", "11437": "adjust_resource", "11438": "adjust_stack_addr", "11439": "adjustment", "11440": "af", "11441": "affine_sd", "11442": "affinity", "11443": "affinity_hint", "11444": "affinity_notify", "11445": "after", "11446": "after_dashes", "11447": "ag", "11448": "again", "11449": "age_stamp", "11450": "agentbuf", "11451": "aggr_break_handler", "11452": "aggr_fault_handler", "11453": "aggr_kprobe_disabled", "11454": "aggr_post_handler", "11455": "aggr_pre_handler", "11456": "ainsn", "11457": "aio_max_nr", "11458": "aio_nr", "11459": "al", "11460": "alarm", "11461": "alarm_base", "11462": "alarm_bases", "11463": "alarm_cancel", "11464": "alarm_clock", "11465": "alarm_clock_get", "11466": "alarm_clock_getres", "11467": "alarm_expires_remaining", "11468": "alarm_forward", "11469": "alarm_forward_now", "11470": "alarm_handle_timer", "11471": "alarm_init", "11472": "alarm_restart", "11473": "alarm_setitimer", "11474": "alarm_start", "11475": "alarm_start_relative", "11476": "alarm_timer_create", "11477": "alarm_timer_del", "11478": "alarm_timer_get", "11479": "alarm_timer_nsleep", "11480": "alarm_timer_nsleep_restart", "11481": "alarm_timer_set", "11482": "alarm_try_to_cancel", "11483": "alarmtimer", "11484": "alarmtimer_dequeue", "11485": "alarmtimer_do_nsleep", "11486": "alarmtimer_driver", "11487": "alarmtimer_enqueue", "11488": "alarmtimer_fired", "11489": "alarmtimer_freezerset", "11490": "alarmtimer_get_rtcdev", "11491": "alarmtimer_init", "11492": "alarmtimer_nsleep_wakeup", "11493": "alarmtimer_pm_ops", "11494": "alarmtimer_restart", "11495": "alarmtimer_rtc_add_device", "11496": "alarmtimer_rtc_interface", "11497": "alarmtimer_rtc_interface_remove", "11498": "alarmtimer_rtc_interface_setup", "11499": "alarmtimer_rtc_timer_init", "11500": "alarmtimer_suspend", "11501": "alarmtimer_type", "11502": "alb_count", "11503": "alb_failed", "11504": "alb_pushed", "11505": "algo", "11506": "align", "11507": "alignf", "11508": "alignf_data", "11509": "alignment", "11510": "all", "11511": "all_annotated_branch_stats", "11512": "all_branch_stat_headers", "11513": "all_branch_stat_next", "11514": "all_branch_stat_start", "11515": "all_branch_stats", "11516": "all_buf", "11517": "all_cpu_access_lock", "11518": "all_cpus_idle", "11519": "all_head", "11520": "all_lazy", "11521": "all_lock_classes", "11522": "all_ss", "11523": "all_stat_sessions", "11524": "all_stat_sessions_mutex", "11525": "all_timers", "11526": "all_var", "11527": "alloc", "11528": "alloc_aggr_kprobe", "11529": "alloc_and_copy_ftrace_hash", "11530": "alloc_and_link_pwqs", "11531": "alloc_bootmem_cpumask_var", "11532": "alloc_callchain_buffers", "11533": "alloc_chunk", "11534": "alloc_cpumask_var", "11535": "alloc_desc", "11536": "alloc_descs", "11537": "alloc_entry", "11538": "alloc_fair_sched_group", "11539": "alloc_frozen_cpus", "11540": "alloc_ftrace_hash", "11541": "alloc_highmem", "11542": "alloc_highmem_pages", "11543": "alloc_image_page", "11544": "alloc_insn_page", "11545": "alloc_kmem_pages_node", "11546": "alloc_large_system_hash", "11547": "alloc_list_entry", "11548": "alloc_lock", "11549": "alloc_masks", "11550": "alloc_normal", "11551": "alloc_ordered_workqueue", "11552": "alloc_page", "11553": "alloc_pages_exact", "11554": "alloc_pages_exact_node", "11555": "alloc_pages_node", "11556": "alloc_percpu", "11557": "alloc_percpu_gfp", "11558": "alloc_perf_context", "11559": "alloc_pid", "11560": "alloc_pidmap", "11561": "alloc_posix_timer", "11562": "alloc_resource", "11563": "alloc_retstack_tasklist", "11564": "alloc_rootdomain", "11565": "alloc_rt_sched_group", "11566": "alloc_rtree_node", "11567": "alloc_sched_domains", "11568": "alloc_snapshot", "11569": "alloc_state", "11570": "alloc_swapdev_block", "11571": "alloc_symbol_cache", "11572": "alloc_task_struct_node", "11573": "alloc_thread_info_node", "11574": "alloc_trace_kprobe", "11575": "alloc_trace_uprobe", "11576": "alloc_tree", "11577": "alloc_trial_cpuset", "11578": "alloc_uid", "11579": "alloc_unbound_pwq", "11580": "alloc_uprobe", "11581": "alloc_worker", "11582": "alloc_workqueue", "11583": "alloc_workqueue_attrs", "11584": "allocate", "11585": "allocate_cgrp_cset_links", "11586": "allocate_cmdlines_buffer", "11587": "allocate_ftrace_ops", "11588": "allocate_mm", "11589": "allocate_resource", "11590": "allocate_snapshot", "11591": "allocated", "11592": "allocated_irqs", "11593": "allocated_snapshot", "11594": "allocated_unsafe_pages", "11595": "allocating", "11596": "allocation", "11597": "allow_changes", "11598": "allow_instances", "11599": "allow_nohz", "11600": "allow_signal", "11601": "allowed", "11602": "allowed_error_ns", "11603": "allowed_ns", "11604": "alm", "11605": "already", "11606": "already_enabled", "11607": "already_gone", "11608": "already_uses", "11609": "alter_cred_subscribers", "11610": "amagic", "11611": "amount", "11612": "amt", "11613": "an", "11614": "aname", "11615": "ancestor", "11616": "and", "11617": "annotated_branch_stat_cmp", "11618": "annotated_branch_stat_headers", "11619": "annotated_branch_stat_next", "11620": "annotated_branch_stat_start", "11621": "annotated_branch_stats", "11622": "anon_inode_getfd", "11623": "anon_vma_chain", "11624": "anon_vma_fork", "11625": "another", "11626": "any", "11627": "any_count", "11628": "ap", "11629": "apn", "11630": "append_elf_note", "11631": "append_filter_err", "11632": "append_filter_string", "11633": "append_operand_char", "11634": "apply_event_filter", "11635": "apply_relocate", "11636": "apply_relocate_add", "11637": "apply_relocations", "11638": "apply_slack", "11639": "apply_subsystem_event_filter", "11640": "apply_workqueue_attrs", "11641": "arch", "11642": "arch_", "11643": "arch_arm_kprobe", "11644": "arch_check_ftrace_location", "11645": "arch_check_optimized_kprobe", "11646": "arch_compat_alloc_user_space", "11647": "arch_cpu_idle", "11648": "arch_cpu_idle_dead", "11649": "arch_cpu_idle_enter", "11650": "arch_cpu_idle_exit", "11651": "arch_cpu_idle_prepare", "11652": "arch_deref_entry_point", "11653": "arch_disable_smp_support", "11654": "arch_disarm_kprobe", "11655": "arch_dup_mmap", "11656": "arch_dup_task_struct", "11657": "arch_dynirq_lower_bound", "11658": "arch_early_irq_init", "11659": "arch_enable_nonboot_cpus_begin", "11660": "arch_enable_nonboot_cpus_end", "11661": "arch_f", "11662": "arch_ftrace_trampoline_free", "11663": "arch_ftrace_update_code", "11664": "arch_ftrace_update_trampoline", "11665": "arch_gettimeoffset", "11666": "arch_has_block_step", "11667": "arch_has_single_step", "11668": "arch_hibernation_header_restore", "11669": "arch_hibernation_header_save", "11670": "arch_initcall", "11671": "arch_irq_work_has_interrupt", "11672": "arch_irq_work_raise", "11673": "arch_jump_label_transform", "11674": "arch_jump_label_transform_static", "11675": "arch_kexec_apply_relocations", "11676": "arch_kexec_apply_relocations_add", "11677": "arch_kexec_kernel_image_load", "11678": "arch_kexec_kernel_image_probe", "11679": "arch_kexec_kernel_verify_sig", "11680": "arch_kgdb_breakpoint", "11681": "arch_kgdb_ops", "11682": "arch_kimage_file_post_load_cleanup", "11683": "arch_mcs_spin_lock_contended", "11684": "arch_mcs_spin_unlock_contended", "11685": "arch_needs_cpu", "11686": "arch_perf_update_userpage", "11687": "arch_prepare_kprobe", "11688": "arch_prepare_kprobe_ftrace", "11689": "arch_prepare_kretprobe", "11690": "arch_prepare_optimized_kprobe", "11691": "arch_prepared_optinsn", "11692": "arch_probe_nr_irqs", "11693": "arch_ptrace_attach", "11694": "arch_ptrace_stop", "11695": "arch_ptrace_stop_needed", "11696": "arch_read_lock", "11697": "arch_read_relax", "11698": "arch_read_trylock", "11699": "arch_read_unlock", "11700": "arch_release_task_struct", "11701": "arch_release_thread_info", "11702": "arch_remove_kprobe", "11703": "arch_remove_optimized_kprobe", "11704": "arch_remove_reservations", "11705": "arch_rwlock_t", "11706": "arch_scale_cpu_capacity", "11707": "arch_scale_freq_capacity", "11708": "arch_send_call_function_ipi_mask", "11709": "arch_send_call_function_single_ipi", "11710": "arch_setup_hwirq", "11711": "arch_show_interrupts", "11712": "arch_specific_insn", "11713": "arch_spin_is_locked", "11714": "arch_spin_lock", "11715": "arch_spin_relax", "11716": "arch_spin_trylock", "11717": "arch_spin_unlock", "11718": "arch_spinlock_t", "11719": "arch_start_context_switch", "11720": "arch_syscall_match_sym_name", "11721": "arch_task_cache_init", "11722": "arch_teardown_hwirq", "11723": "arch_trace_is_compat_syscall", "11724": "arch_unoptimize_kprobe", "11725": "arch_update_cpu_topology", "11726": "arch_uprobe", "11727": "arch_uprobe_abort_xol", "11728": "arch_uprobe_analyze_insn", "11729": "arch_uprobe_copy_ixol", "11730": "arch_uprobe_exception_notify", "11731": "arch_uprobe_ignore", "11732": "arch_uprobe_post_xol", "11733": "arch_uprobe_pre_xol", "11734": "arch_uprobe_skip_sstep", "11735": "arch_uprobe_xol_was_trapped", "11736": "arch_uretprobe_hijack_return_addr", "11737": "arch_vma_name", "11738": "arch_vtime_task_switch", "11739": "arch_within_kprobe_blacklist", "11740": "arch_write_lock", "11741": "arch_write_relax", "11742": "arch_write_trylock", "11743": "arch_write_unlock", "11744": "are", "11745": "area", "11746": "arg", "11747": "arg1_type", "11748": "arg2", "11749": "arg2_type", "11750": "arg3", "11751": "arg3_type", "11752": "arg4", "11753": "arg4_type", "11754": "arg5", "11755": "arg5_type", "11756": "arg_end", "11757": "arg_num", "11758": "arg_num_len", "11759": "arg_num_len_buf", "11760": "arg_start", "11761": "arg_type", "11762": "argc", "11763": "argcount", "11764": "args", "11765": "args2", "11766": "argv", "11767": "argv_free", "11768": "argv_split", "11769": "arm_all_kprobes", "11770": "arm_kprobe", "11771": "arm_kprobe_ftrace", "11772": "arr", "11773": "array", "11774": "array_descriptor", "11775": "array_map_alloc", "11776": "array_map_delete_elem", "11777": "array_map_free", "11778": "array_map_get_next_key", "11779": "array_map_lookup_elem", "11780": "array_map_update_elem", "11781": "array_ops", "11782": "array_size", "11783": "array_type", "11784": "arrsize", "11785": "as", "11786": "asked", "11787": "asm", "11788": "asmlinkage", "11789": "assert_raw_spin_locked", "11790": "assert_rcu_or_pool_mutex", "11791": "assert_rcu_or_wq_mutex", "11792": "assert_spin_locked", "11793": "assign", "11794": "assign_cfs_rq_runtime", "11795": "assuming", "11796": "async_cookie_t", "11797": "async_dfl_domain", "11798": "async_domain", "11799": "async_done", "11800": "async_entry", "11801": "async_func_t", "11802": "async_global_pending", "11803": "async_lock", "11804": "async_run_entry_fn", "11805": "async_schedule", "11806": "async_schedule_domain", "11807": "async_synchronize_cookie", "11808": "async_synchronize_cookie_domain", "11809": "async_synchronize_full", "11810": "async_synchronize_full_domain", "11811": "async_unregister_domain", "11812": "at", "11813": "atomic64_add", "11814": "atomic64_read", "11815": "atomic64_set", "11816": "atomic64_t", "11817": "atomic_add", "11818": "atomic_add_return", "11819": "atomic_add_unless", "11820": "atomic_cmpxchg", "11821": "atomic_dec", "11822": "atomic_dec_and_lock", "11823": "atomic_dec_and_mutex_lock", "11824": "atomic_dec_and_test", "11825": "atomic_dec_if_positive", "11826": "atomic_dec_return", "11827": "atomic_dec_unless_positive", "11828": "atomic_inc", "11829": "atomic_inc_not_zero", "11830": "atomic_inc_return", "11831": "atomic_inc_unless_negative", "11832": "atomic_long_add", "11833": "atomic_long_cmpxchg", "11834": "atomic_long_dec_and_test", "11835": "atomic_long_inc", "11836": "atomic_long_inc_not_zero", "11837": "atomic_long_inc_return", "11838": "atomic_long_read", "11839": "atomic_long_set", "11840": "atomic_long_sub", "11841": "atomic_long_t", "11842": "atomic_long_xchg", "11843": "atomic_notifier_call_chain", "11844": "atomic_notifier_chain_register", "11845": "atomic_notifier_chain_unregister", "11846": "atomic_notifier_head", "11847": "atomic_read", "11848": "atomic_set", "11849": "atomic_sub", "11850": "atomic_sub_return", "11851": "atomic_t", "11852": "atomic_t_waitqueue", "11853": "atomic_write_len", "11854": "atomic_xchg", "11855": "attach", "11856": "attach_in_progress", "11857": "attach_mutex", "11858": "attach_one_task", "11859": "attach_pid", "11860": "attach_state", "11861": "attach_task", "11862": "attach_tasks", "11863": "attr", "11864": "attr2pentry", "11865": "attribute", "11866": "attribute_group", "11867": "attributes", "11868": "attrs", "11869": "audit_add_rule", "11870": "audit_add_to_parent", "11871": "audit_add_tree_rule", "11872": "audit_add_watch", "11873": "audit_alloc", "11874": "audit_alloc_context", "11875": "audit_alloc_name", "11876": "audit_aux_data", "11877": "audit_aux_data_bprm_fcaps", "11878": "audit_aux_data_pids", "11879": "audit_backlog_limit", "11880": "audit_backlog_wait", "11881": "audit_backlog_wait_overflow", "11882": "audit_backlog_wait_time", "11883": "audit_backlog_wait_time_master", "11884": "audit_bind", "11885": "audit_buffer", "11886": "audit_buffer_alloc", "11887": "audit_buffer_free", "11888": "audit_cap_data", "11889": "audit_chunk", "11890": "audit_classify_arch", "11891": "audit_classify_syscall", "11892": "audit_cmd_mutex", "11893": "audit_comparator", "11894": "audit_compare_dname_path", "11895": "audit_compare_gid", "11896": "audit_compare_rule", "11897": "audit_compare_uid", "11898": "audit_context", "11899": "audit_copy_fcaps", "11900": "audit_copy_inode", "11901": "audit_core_dumps", "11902": "audit_data_to_entry", "11903": "audit_default", "11904": "audit_del_rule", "11905": "audit_do_config_change", "11906": "audit_dummy_context", "11907": "audit_dupe_lsm_field", "11908": "audit_dupe_rule", "11909": "audit_dupe_watch", "11910": "audit_enabled", "11911": "audit_entry", "11912": "audit_ever_enabled", "11913": "audit_expand", "11914": "audit_failure", "11915": "audit_feature_names", "11916": "audit_features", "11917": "audit_field", "11918": "audit_field_compare", "11919": "audit_field_valid", "11920": "audit_filter_inode_name", "11921": "audit_filter_inodes", "11922": "audit_filter_list", "11923": "audit_filter_mutex", "11924": "audit_filter_rules", "11925": "audit_filter_syscall", "11926": "audit_filter_task", "11927": "audit_filter_type", "11928": "audit_filter_user", "11929": "audit_filter_user_rules", "11930": "audit_find_parent", "11931": "audit_find_rule", "11932": "audit_free", "11933": "audit_free_aux", "11934": "audit_free_context", "11935": "audit_free_lsm_field", "11936": "audit_free_names", "11937": "audit_free_parent", "11938": "audit_free_rule", "11939": "audit_free_rule_rcu", "11940": "audit_freelist", "11941": "audit_freelist_count", "11942": "audit_freelist_lock", "11943": "audit_get_feature", "11944": "audit_get_loginuid", "11945": "audit_get_nd", "11946": "audit_get_parent", "11947": "audit_get_sessionid", "11948": "audit_get_stamp", "11949": "audit_get_watch", "11950": "audit_gid_comparator", "11951": "audit_hash_ino", "11952": "audit_hold_skb", "11953": "audit_in_mask", "11954": "audit_init", "11955": "audit_init_entry", "11956": "audit_init_parent", "11957": "audit_init_watch", "11958": "audit_initialized", "11959": "audit_inode_hash", "11960": "audit_kill_trees", "11961": "audit_killed_trees", "11962": "audit_krule", "11963": "audit_krule_to_data", "11964": "audit_launch_prune", "11965": "audit_list_rules", "11966": "audit_list_rules_send", "11967": "audit_log", "11968": "audit_log_cap", "11969": "audit_log_common_recv_msg", "11970": "audit_log_config_change", "11971": "audit_log_d_path", "11972": "audit_log_d_path_exe", "11973": "audit_log_end", "11974": "audit_log_execve_info", "11975": "audit_log_exit", "11976": "audit_log_fcaps", "11977": "audit_log_feature_change", "11978": "audit_log_format", "11979": "audit_log_key", "11980": "audit_log_link_denied", "11981": "audit_log_lost", "11982": "audit_log_n_hex", "11983": "audit_log_n_string", "11984": "audit_log_n_untrustedstring", "11985": "audit_log_name", "11986": "audit_log_pid_context", "11987": "audit_log_proctitle", "11988": "audit_log_rule_change", "11989": "audit_log_secctx", "11990": "audit_log_session_info", "11991": "audit_log_set_loginuid", "11992": "audit_log_single_execve_arg", "11993": "audit_log_start", "11994": "audit_log_string", "11995": "audit_log_task", "11996": "audit_log_task_context", "11997": "audit_log_task_info", "11998": "audit_log_untrustedstring", "11999": "audit_log_vformat", "12000": "audit_loginuid_set", "12001": "audit_lost", "12002": "audit_make_reply", "12003": "audit_make_tree", "12004": "audit_match_class", "12005": "audit_match_class_bits", "12006": "audit_match_filetype", "12007": "audit_match_perm", "12008": "audit_match_signal", "12009": "audit_n_rules", "12010": "audit_names", "12011": "audit_net", "12012": "audit_net_exit", "12013": "audit_net_id", "12014": "audit_net_init", "12015": "audit_net_ops", "12016": "audit_netlink_list", "12017": "audit_netlink_ok", "12018": "audit_nlk_portid", "12019": "audit_ops", "12020": "audit_pack_string", "12021": "audit_panic", "12022": "audit_parent", "12023": "audit_pid", "12024": "audit_printk_skb", "12025": "audit_proctitle", "12026": "audit_proctitle_free", "12027": "audit_proctitle_rtrim", "12028": "audit_put_chunk", "12029": "audit_put_parent", "12030": "audit_put_tree", "12031": "audit_put_watch", "12032": "audit_rate_check", "12033": "audit_rate_limit", "12034": "audit_receive", "12035": "audit_receive_msg", "12036": "audit_receive_skb", "12037": "audit_register_class", "12038": "audit_remove_parent_watches", "12039": "audit_remove_tree_rule", "12040": "audit_remove_watch", "12041": "audit_remove_watch_rule", "12042": "audit_reply", "12043": "audit_rule_change", "12044": "audit_rule_data", "12045": "audit_rules_list", "12046": "audit_schedule_prune", "12047": "audit_seccomp", "12048": "audit_send_list", "12049": "audit_send_reply", "12050": "audit_send_reply_thread", "12051": "audit_serial", "12052": "audit_set_auditable", "12053": "audit_set_backlog_limit", "12054": "audit_set_backlog_wait_time", "12055": "audit_set_enabled", "12056": "audit_set_failure", "12057": "audit_set_feature", "12058": "audit_set_loginuid", "12059": "audit_set_loginuid_perm", "12060": "audit_set_portid", "12061": "audit_set_rate_limit", "12062": "audit_sig_info", "12063": "audit_sig_pid", "12064": "audit_sig_sid", "12065": "audit_sig_uid", "12066": "audit_signal_info", "12067": "audit_signals", "12068": "audit_skb_hold_queue", "12069": "audit_skb_queue", "12070": "audit_sock", "12071": "audit_state", "12072": "audit_status", "12073": "audit_string_contains_control", "12074": "audit_tag_tree", "12075": "audit_take_context", "12076": "audit_to_entry_common", "12077": "audit_to_inode", "12078": "audit_to_op", "12079": "audit_to_watch", "12080": "audit_tree", "12081": "audit_tree_destroy_watch", "12082": "audit_tree_freeing_mark", "12083": "audit_tree_group", "12084": "audit_tree_handle_event", "12085": "audit_tree_log_remove_rule", "12086": "audit_tree_lookup", "12087": "audit_tree_match", "12088": "audit_tree_path", "12089": "audit_tree_refs", "12090": "audit_trim_trees", "12091": "audit_tty", "12092": "audit_tty_log_passwd", "12093": "audit_tty_status", "12094": "audit_uid_comparator", "12095": "audit_unpack_string", "12096": "audit_update_lsm_rules", "12097": "audit_update_watch", "12098": "audit_watch", "12099": "audit_watch_compare", "12100": "audit_watch_free_mark", "12101": "audit_watch_fsnotify_ops", "12102": "audit_watch_group", "12103": "audit_watch_handle_event", "12104": "audit_watch_init", "12105": "audit_watch_log_rule_change", "12106": "audit_watch_path", "12107": "auditsc_get_stamp", "12108": "auid", "12109": "aunet", "12110": "aup", "12111": "autogroup", "12112": "autogroup_create", "12113": "autogroup_default", "12114": "autogroup_destroy", "12115": "autogroup_free", "12116": "autogroup_init", "12117": "autogroup_kref_get", "12118": "autogroup_kref_put", "12119": "autogroup_move_group", "12120": "autogroup_path", "12121": "autogroup_seq_nr", "12122": "autogroup_task_get", "12123": "autogroup_task_group", "12124": "autoreap", "12125": "autoremove_wake_function", "12126": "autosleep_lock", "12127": "autosleep_show", "12128": "autosleep_state", "12129": "autosleep_wq", "12130": "autosleep_ws", "12131": "aux", "12132": "aux_head", "12133": "aux_mmap_count", "12134": "aux_mmap_locked", "12135": "aux_nest", "12136": "aux_nr_pages", "12137": "aux_offset", "12138": "aux_overwrite", "12139": "aux_pages", "12140": "aux_pgoff", "12141": "aux_pids", "12142": "aux_priv", "12143": "aux_refcount", "12144": "aux_size", "12145": "aux_tail", "12146": "aux_unlock", "12147": "aux_wakeup", "12148": "aux_watermark", "12149": "auxv", "12150": "auxv_size", "12151": "avail", "12152": "avail_normal", "12153": "available", "12154": "available_filter_functions", "12155": "available_tracers", "12156": "avenrun", "12157": "avg", "12158": "avg_atom", "12159": "avg_idle", "12160": "avg_load", "12161": "avg_local_sample_len", "12162": "avg_per_cpu", "12163": "avg_period", "12164": "ax", "12165": "axp", "12166": "axs", "12167": "az", "12168": "b", "12169": "bacct", "12170": "bacct_add_tsk", "12171": "back", "12172": "backlog", "12173": "backlog_limit", "12174": "backlog_wait_time", "12175": "backtrace", "12176": "backtrace_regression_test", "12177": "backtrace_tasklet", "12178": "backtrace_test_irq", "12179": "backtrace_test_irq_callback", "12180": "backtrace_test_normal", "12181": "backtrace_test_saved", "12182": "backtrace_work", "12183": "bad", "12184": "bad_action_ret", "12185": "bad_bit", "12186": "bad_fork_cleanup_audit", "12187": "bad_fork_cleanup_count", "12188": "bad_fork_cleanup_files", "12189": "bad_fork_cleanup_fs", "12190": "bad_fork_cleanup_io", "12191": "bad_fork_cleanup_mm", "12192": "bad_fork_cleanup_namespaces", "12193": "bad_fork_cleanup_perf", "12194": "bad_fork_cleanup_policy", "12195": "bad_fork_cleanup_semundo", "12196": "bad_fork_cleanup_sighand", "12197": "bad_fork_cleanup_signal", "12198": "bad_fork_cleanup_threadgroup_lock", "12199": "bad_fork_free", "12200": "bad_fork_free_pid", "12201": "bad_unshare_cleanup_cred", "12202": "bad_unshare_cleanup_fd", "12203": "bad_unshare_cleanup_fs", "12204": "bad_unshare_out", "12205": "bad_version", "12206": "balance", "12207": "balance_cpu", "12208": "balance_flag_changed", "12209": "balance_interval", "12210": "balance_runtime", "12211": "balanced", "12212": "balancing", "12213": "barr", "12214": "barrier", "12215": "barrier_cbs_count", "12216": "barrier_cbs_invoked", "12217": "barrier_cbs_tasks", "12218": "barrier_cbs_wq", "12219": "barrier_completion", "12220": "barrier_cpu_count", "12221": "barrier_head", "12222": "barrier_mutex", "12223": "barrier_phase", "12224": "barrier_task", "12225": "barrier_wq", "12226": "base", "12227": "base_addr", "12228": "base_clockid", "12229": "base_files", "12230": "baseid", "12231": "basename", "12232": "batch_check0", "12233": "batch_check1", "12234": "batch_count", "12235": "batch_done", "12236": "batch_queue", "12237": "batchsummary", "12238": "bc", "12239": "bc_handler", "12240": "bc_moved", "12241": "bc_set_mode", "12242": "bc_set_next", "12243": "bc_stopped", "12244": "bctimer", "12245": "bd_dev", "12246": "bd_disk", "12247": "bd_mutex", "12248": "bd_part", "12249": "bdev", "12250": "bdev_get_queue", "12251": "bdevname", "12252": "bdget", "12253": "bdput", "12254": "be", "12255": "be32_to_cpu", "12256": "be64_to_cpu", "12257": "became", "12258": "because", "12259": "beenhere", "12260": "beenonline", "12261": "before", "12262": "begin", "12263": "begin_pfn", "12264": "being", "12265": "benchmark", "12266": "benchmark_event", "12267": "best", "12268": "best_cpu", "12269": "best_imp", "12270": "best_task", "12271": "bestprev", "12272": "between", "12273": "bf", "12274": "bfs", "12275": "bi_bdev", "12276": "bi_end_io", "12277": "bi_io_vec", "12278": "bi_iter", "12279": "bi_private", "12280": "bi_rw", "12281": "bi_sector", "12282": "bi_size", "12283": "big_event_size", "12284": "bin", "12285": "bin_attr", "12286": "bin_attribute", "12287": "bin_bus_isa_table", "12288": "bin_bus_table", "12289": "bin_convert_t", "12290": "bin_dev_table", "12291": "bin_dir", "12292": "bin_dn_node_address", "12293": "bin_fs_ocfs2_nm_table", "12294": "bin_fs_ocfs2_table", "12295": "bin_fs_quota_table", "12296": "bin_fs_table", "12297": "bin_fs_xfs_table", "12298": "bin_inotify_table", "12299": "bin_intvec", "12300": "bin_ipmi_table", "12301": "bin_kern_table", "12302": "bin_mac_hid_files", "12303": "bin_net_atalk_table", "12304": "bin_net_ax25_param_table", "12305": "bin_net_ax25_table", "12306": "bin_net_core_table", "12307": "bin_net_decnet_conf", "12308": "bin_net_decnet_conf_vars", "12309": "bin_net_decnet_table", "12310": "bin_net_ipv4_conf_table", "12311": "bin_net_ipv4_conf_vars_table", "12312": "bin_net_ipv4_netfilter_table", "12313": "bin_net_ipv4_route_table", "12314": "bin_net_ipv4_table", "12315": "bin_net_ipv6_conf_table", "12316": "bin_net_ipv6_conf_var_table", "12317": "bin_net_ipv6_icmp_table", "12318": "bin_net_ipv6_route_table", "12319": "bin_net_ipv6_table", "12320": "bin_net_ipx_table", "12321": "bin_net_irda_table", "12322": "bin_net_llc_llc2_table", "12323": "bin_net_llc_llc2_timeout_table", "12324": "bin_net_llc_station_table", "12325": "bin_net_llc_table", "12326": "bin_net_neigh_table", "12327": "bin_net_neigh_vars_table", "12328": "bin_net_netfilter_table", "12329": "bin_net_netrom_table", "12330": "bin_net_rose_table", "12331": "bin_net_sctp_table", "12332": "bin_net_table", "12333": "bin_net_tr_table", "12334": "bin_net_unix_table", "12335": "bin_net_x25_table", "12336": "bin_pm_table", "12337": "bin_pty_table", "12338": "bin_raid_table", "12339": "bin_random_table", "12340": "bin_root_table", "12341": "bin_s390dbf_table", "12342": "bin_scsi_table", "12343": "bin_string", "12344": "bin_sunrpc_table", "12345": "bin_table", "12346": "bin_ulongvec", "12347": "bin_uuid", "12348": "bin_vm_table", "12349": "binary", "12350": "binary_sysctl", "12351": "bind", "12352": "binfmt", "12353": "binfmt_misc_table", "12354": "bio", "12355": "bio_add_page", "12356": "bio_alloc", "12357": "bio_chain", "12358": "bio_flagged", "12359": "bio_put", "12360": "bio_rw", "12361": "bit", "12362": "bit_a", "12363": "bit_b", "12364": "bit_backwards", "12365": "bit_forwards", "12366": "bit_nr", "12367": "bit_wait", "12368": "bit_wait_io", "12369": "bit_wait_io_timeout", "12370": "bit_wait_timeout", "12371": "bit_waitqueue", "12372": "bitcount", "12373": "bitfield", "12374": "bitfield_fetch_param", "12375": "bitmap", "12376": "bitmap_clear", "12377": "bitmap_copy", "12378": "bitmap_empty", "12379": "bitmap_find_next_zero_area", "12380": "bitmap_len", "12381": "bitmap_or", "12382": "bitmap_set", "12383": "bitmap_size", "12384": "bitmask_ptr", "12385": "bitmask_size", "12386": "bits", "12387": "bkt", "12388": "bl", "12389": "blimit", "12390": "blk_add_driver_data", "12391": "blk_add_trace_bio", "12392": "blk_add_trace_bio_backmerge", "12393": "blk_add_trace_bio_bounce", "12394": "blk_add_trace_bio_complete", "12395": "blk_add_trace_bio_frontmerge", "12396": "blk_add_trace_bio_queue", "12397": "blk_add_trace_bio_remap", "12398": "blk_add_trace_getrq", "12399": "blk_add_trace_plug", "12400": "blk_add_trace_rq", "12401": "blk_add_trace_rq_abort", "12402": "blk_add_trace_rq_complete", "12403": "blk_add_trace_rq_insert", "12404": "blk_add_trace_rq_issue", "12405": "blk_add_trace_rq_remap", "12406": "blk_add_trace_rq_requeue", "12407": "blk_add_trace_sleeprq", "12408": "blk_add_trace_split", "12409": "blk_add_trace_unplug", "12410": "blk_classic", "12411": "blk_create_buf_file_callback", "12412": "blk_dropped_fops", "12413": "blk_dropped_read", "12414": "blk_dump_cmd", "12415": "blk_flush_plug", "12416": "blk_io_trace", "12417": "blk_io_trace_remap", "12418": "blk_log_action", "12419": "blk_log_action_classic", "12420": "blk_log_action_t", "12421": "blk_log_dump_pdu", "12422": "blk_log_generic", "12423": "blk_log_msg", "12424": "blk_log_plug", "12425": "blk_log_remap", "12426": "blk_log_split", "12427": "blk_log_unplug", "12428": "blk_log_with_error", "12429": "blk_msg_fops", "12430": "blk_msg_write", "12431": "blk_needs_flush_plug", "12432": "blk_probes_ref", "12433": "blk_register_tracepoints", "12434": "blk_relay_callbacks", "12435": "blk_remove_buf_file_callback", "12436": "blk_rq_bytes", "12437": "blk_rq_pos", "12438": "blk_schedule_flush_plug", "12439": "blk_subbuf_start_callback", "12440": "blk_tr", "12441": "blk_trace", "12442": "blk_trace_attr_group", "12443": "blk_trace_attrs", "12444": "blk_trace_cleanup", "12445": "blk_trace_event_print", "12446": "blk_trace_event_print_binary", "12447": "blk_trace_free", "12448": "blk_trace_get_queue", "12449": "blk_trace_init_sysfs", "12450": "blk_trace_ioctl", "12451": "blk_trace_mask2str", "12452": "blk_trace_remove", "12453": "blk_trace_remove_queue", "12454": "blk_trace_remove_sysfs", "12455": "blk_trace_setup", "12456": "blk_trace_setup_lba", "12457": "blk_trace_setup_queue", "12458": "blk_trace_shutdown", "12459": "blk_trace_startstop", "12460": "blk_trace_str2mask", "12461": "blk_trace_synthesize_old_trace", "12462": "blk_tracer", "12463": "blk_tracer_enabled", "12464": "blk_tracer_flags", "12465": "blk_tracer_init", "12466": "blk_tracer_opts", "12467": "blk_tracer_print_header", "12468": "blk_tracer_print_line", "12469": "blk_tracer_reset", "12470": "blk_tracer_set_flag", "12471": "blk_tracer_start", "12472": "blk_tracer_stop", "12473": "blk_tree_mutex", "12474": "blk_tree_root", "12475": "blk_unregister_tracepoints", "12476": "blk_user_trace_setup", "12477": "blkd_tasks", "12478": "blkdev_get_by_dev", "12479": "blkdev_put", "12480": "blkio_count", "12481": "blkio_delay", "12482": "blkio_delay_total", "12483": "blkio_start", "12484": "blktrace_seq", "12485": "block", "12486": "block_all_signals", "12487": "block_device", "12488": "block_dump", "12489": "block_max", "12490": "block_nr", "12491": "block_start", "12492": "block_unplug", "12493": "blocked", "12494": "blocked_load_avg", "12495": "blocked_on", "12496": "blocking_notifier_call_chain", "12497": "blocking_notifier_chain_cond_register", "12498": "blocking_notifier_chain_register", "12499": "blocking_notifier_chain_unregister", "12500": "blocking_notifier_head", "12501": "blocks", "12502": "bm", "12503": "bm1", "12504": "bm2", "12505": "bm_avg", "12506": "bm_cnt", "12507": "bm_event_thread", "12508": "bm_first", "12509": "bm_last", "12510": "bm_max", "12511": "bm_min", "12512": "bm_std", "12513": "bm_stddev", "12514": "bm_str", "12515": "bm_total", "12516": "bm_totalsq", "12517": "bmagic", "12518": "bo", "12519": "body", "12520": "bool", "12521": "boolkp", "12522": "boolval", "12523": "boost", "12524": "boost_kthread_status", "12525": "boost_kthread_task", "12526": "boost_mtx", "12527": "boost_mutex", "12528": "boost_starttime", "12529": "boost_tasks", "12530": "boost_time", "12531": "boot", "12532": "boot_alloc_snapshot", "12533": "boot_cpu", "12534": "boot_delay", "12535": "boot_init_stack_canary", "12536": "boot_tvec_bases", "12537": "bootconsole", "12538": "bootloader_type", "12539": "bootloader_version", "12540": "bootmem_resource_free", "12541": "bootmem_resource_lock", "12542": "bootup", "12543": "bootup_event_buf", "12544": "bootup_tracer_buf", "12545": "bounce_acquired", "12546": "bounce_acquired_read", "12547": "bounce_acquired_write", "12548": "bounce_contended", "12549": "bounce_contended_read", "12550": "bounce_contended_write", "12551": "bounces", "12552": "bound_on", "12553": "bp", "12554": "bp_addr", "12555": "bp_check", "12556": "bp_delay", "12557": "bp_delayed", "12558": "bp_enabled", "12559": "bp_free", "12560": "bp_installed", "12561": "bp_type", "12562": "bp_vaddr", "12563": "bpage", "12564": "bpf", "12565": "bpf_access_type", "12566": "bpf_alu_string", "12567": "bpf_arg_type", "12568": "bpf_array", "12569": "bpf_attr", "12570": "bpf_binary_header", "12571": "bpf_check", "12572": "bpf_check_classic", "12573": "bpf_class_string", "12574": "bpf_convert_filter", "12575": "bpf_fill_ill_insns", "12576": "bpf_func", "12577": "bpf_func_id", "12578": "bpf_func_proto", "12579": "bpf_get_prandom_u32", "12580": "bpf_get_prandom_u32_proto", "12581": "bpf_get_smp_processor_id", "12582": "bpf_get_smp_processor_id_proto", "12583": "bpf_htab", "12584": "bpf_insn", "12585": "bpf_int_jit_compile", "12586": "bpf_internal_load_pointer_neg_helper", "12587": "bpf_jit_binary_alloc", "12588": "bpf_jit_binary_free", "12589": "bpf_jit_fill_hole_t", "12590": "bpf_jit_free", "12591": "bpf_jmp_string", "12592": "bpf_ktime_get_ns", "12593": "bpf_ktime_get_ns_proto", "12594": "bpf_ldst_string", "12595": "bpf_load_pointer", "12596": "bpf_map", "12597": "bpf_map_delete_elem", "12598": "bpf_map_delete_elem_proto", "12599": "bpf_map_fops", "12600": "bpf_map_free_deferred", "12601": "bpf_map_get", "12602": "bpf_map_lookup_elem", "12603": "bpf_map_lookup_elem_proto", "12604": "bpf_map_ops", "12605": "bpf_map_put", "12606": "bpf_map_release", "12607": "bpf_map_type_list", "12608": "bpf_map_types", "12609": "bpf_map_update_elem", "12610": "bpf_map_update_elem_proto", "12611": "bpf_probe_read", "12612": "bpf_probe_read_proto", "12613": "bpf_prog", "12614": "bpf_prog_active", "12615": "bpf_prog_alloc", "12616": "bpf_prog_aux", "12617": "bpf_prog_fops", "12618": "bpf_prog_free", "12619": "bpf_prog_free_deferred", "12620": "bpf_prog_get", "12621": "bpf_prog_load", "12622": "bpf_prog_lock_ro", "12623": "bpf_prog_put", "12624": "bpf_prog_realloc", "12625": "bpf_prog_release", "12626": "bpf_prog_select_runtime", "12627": "bpf_prog_size", "12628": "bpf_prog_type", "12629": "bpf_prog_type_list", "12630": "bpf_prog_types", "12631": "bpf_reg_type", "12632": "bpf_register_map_type", "12633": "bpf_register_prog_type", "12634": "bpf_size", "12635": "bpf_size_to_bytes", "12636": "bpf_stack_slot_type", "12637": "bpf_trace_printk", "12638": "bpf_trace_printk_proto", "12639": "bpf_verifier_lock", "12640": "bpf_verifier_ops", "12641": "bph_length", "12642": "bpn", "12643": "bpno", "12644": "bprint", "12645": "bprint_entry", "12646": "bprm", "12647": "bpt", "12648": "bpt_addr", "12649": "bpt_type", "12650": "bputs", "12651": "bputs_entry", "12652": "br_stack", "12653": "braille", "12654": "braille_register_console", "12655": "braille_set_options", "12656": "braille_unregister_console", "12657": "branch", "12658": "branch_print_header", "12659": "branch_stat_show", "12660": "branch_trace", "12661": "branch_trace_init", "12662": "branch_trace_reset", "12663": "branch_tracer", "12664": "branch_tracing_enabled", "12665": "branch_tracing_mutex", "12666": "break", "12667": "break_handler", "12668": "break_lock", "12669": "breakpoint", "12670": "brk", "12671": "brl", "12672": "brl_options", "12673": "broadcast", "12674": "broadcast_needs_cpu", "12675": "broadcast_shutdown_local", "12676": "broken_hierarchy", "12677": "brw", "12678": "bs", "12679": "bsd_acct_struct", "12680": "bsearch", "12681": "bsize", "12682": "bss_addr", "12683": "bss_align", "12684": "bss_pad", "12685": "bss_sz", "12686": "bt", "12687": "btaprompt", "12688": "btrace_mutex", "12689": "btrace_seq", "12690": "buckets", "12691": "buf", "12692": "buf_addr", "12693": "buf_align", "12694": "buf_len", "12695": "buf_max", "12696": "buf_min", "12697": "buf_nr", "12698": "buf_size", "12699": "buf_sz", "12700": "buff", "12701": "buffer", "12702": "buffer_a", "12703": "buffer_b", "12704": "buffer_bytes", "12705": "buffer_data_page", "12706": "buffer_disabled", "12707": "buffer_ftrace_now", "12708": "buffer_iter", "12709": "buffer_page", "12710": "buffer_size_kb", "12711": "buffer_total_size_kb", "12712": "bufferram", "12713": "buffers", "12714": "buflen", "12715": "bufp", "12716": "bufptr", "12717": "bufsz", "12718": "bug_cleanup", "12719": "bug_msg", "12720": "build_group_mask", "12721": "build_map_info", "12722": "build_overlap_sched_groups", "12723": "build_probe_list", "12724": "build_sched_domain", "12725": "build_sched_domains", "12726": "build_sched_groups", "12727": "burst", "12728": "bus", "12729": "bus_type", "12730": "busiest", "12731": "busiest_capacity", "12732": "busiest_cpu", "12733": "busiest_load", "12734": "busiest_rq", "12735": "busiest_stat", "12736": "bust_spinlocks", "12737": "busy", "12738": "busy_factor", "12739": "busy_hash", "12740": "busy_idx", "12741": "busy_sd", "12742": "but", "12743": "buts", "12744": "bv_page", "12745": "bw", "12746": "bx", "12747": "by", "12748": "byte", "12749": "bytes", "12750": "bytes_alloc", "12751": "bytes_alloc_nested", "12752": "bytes_dropped", "12753": "bytes_dropped_nested", "12754": "bytes_written", "12755": "bytes_written_nested", "12756": "bytesperword", "12757": "c", "12758": "c0", "12759": "c1", "12760": "cHz", "12761": "c_old", "12762": "c_out", "12763": "ca", "12764": "cache", "12765": "cache_hit", "12766": "cache_line_size", "12767": "cache_nice_tries", "12768": "cache_read", "12769": "cache_reader_page", "12770": "cachep", "12771": "cad_pid", "12772": "calc_cfs_shares", "12773": "calc_delta_fair", "12774": "calc_global_load", "12775": "calc_global_nohz", "12776": "calc_load", "12777": "calc_load_account_active", "12778": "calc_load_active", "12779": "calc_load_enter_idle", "12780": "calc_load_exit_idle", "12781": "calc_load_fold_active", "12782": "calc_load_fold_idle", "12783": "calc_load_idle", "12784": "calc_load_idx", "12785": "calc_load_migrate", "12786": "calc_load_n", "12787": "calc_load_read_idx", "12788": "calc_load_tasks", "12789": "calc_load_update", "12790": "calc_load_write_idx", "12791": "calc_tg_weight", "12792": "calc_timer_values", "12793": "calcnt", "12794": "calculate_imbalance", "12795": "call", "12796": "call_args", "12797": "call_fetch", "12798": "call_filter_check_discard", "12799": "call_function_data", "12800": "call_function_init", "12801": "call_modprobe", "12802": "call_panic", "12803": "call_rcu", "12804": "call_rcu_bh", "12805": "call_rcu_busted", "12806": "call_rcu_func_t", "12807": "call_rcu_sched", "12808": "call_rcu_tasks", "12809": "call_rcu_time", "12810": "call_single_data", "12811": "call_single_queue", "12812": "call_srcu", "12813": "call_timer_fn", "12814": "call_usermodehelper", "12815": "call_usermodehelper_exec", "12816": "call_usermodehelper_freeinfo", "12817": "call_usermodehelper_setup", "12818": "callback_head", "12819": "callback_lock", "12820": "callchain", "12821": "callchain_cpus_entries", "12822": "callchain_mutex", "12823": "callchain_recursion", "12824": "called", "12825": "caller", "12826": "caller_addr", "12827": "caller_saved", "12828": "calls", "12829": "calltime", "12830": "can", "12831": "can_add_hw", "12832": "can_attach", "12833": "can_boost", "12834": "can_cont", "12835": "can_expedite", "12836": "can_migrate_task", "12837": "can_nice", "12838": "can_request_irq", "12839": "can_stop_full_tick", "12840": "can_stop_idle_tick", "12841": "cancel_attach", "12842": "cancel_delayed_work", "12843": "cancel_delayed_work_sync", "12844": "cancel_ref", "12845": "cancel_txn", "12846": "cancel_waitq", "12847": "cancel_work_sync", "12848": "cancelled_write_bytes", "12849": "candidate", "12850": "cannot", "12851": "canrequest", "12852": "cap", "12853": "cap_array", "12854": "cap_bit0_is_deprecated", "12855": "cap_bset", "12856": "cap_effective", "12857": "cap_get_target_pid", "12858": "cap_inheritable", "12859": "cap_intersect", "12860": "cap_isclear", "12861": "cap_issubset", "12862": "cap_last_cap", "12863": "cap_permitted", "12864": "cap_setid", "12865": "cap_user_data_t", "12866": "cap_user_header_t", "12867": "cap_valid", "12868": "cap_validate_magic", "12869": "capa_move", "12870": "capa_now", "12871": "capabilities", "12872": "capable", "12873": "capable_wrt_inode_uidgid", "12874": "capacity", "12875": "capacity_of", "12876": "capacity_orig_of", "12877": "capget", "12878": "caps", "12879": "capset", "12880": "cascade", "12881": "case", "12882": "cat", "12883": "catchup_timer_jiffies", "12884": "cb", "12885": "cb_barrier", "12886": "cb_count", "12887": "cb_cpu", "12888": "cbcpu", "12889": "cbcpumask", "12890": "cbflood_inter_holdoff", "12891": "cbflood_intra_holdoff", "12892": "cbflood_n_burst", "12893": "cbflood_n_per_burst", "12894": "cbflood_task", "12895": "cbs", "12896": "cbs_ready", "12897": "cbuf", "12898": "cbuts", "12899": "cc", "12900": "cc_cyc2ns_backwards", "12901": "ccur", "12902": "cd", "12903": "cdev", "12904": "cdev_add", "12905": "cdev_del", "12906": "cdev_init", "12907": "ce", "12908": "ce_broadcast_hrtimer", "12909": "ce_unbind", "12910": "ced", "12911": "centisecs", "12912": "cev_delta2ns", "12913": "cfd", "12914": "cfd_data", "12915": "cfg", "12916": "cfg_checksum", "12917": "cflags", "12918": "cfs", "12919": "cfs_b", "12920": "cfs_bandwidth", "12921": "cfs_bandwidth_slack_period", "12922": "cfs_bandwidth_usage_dec", "12923": "cfs_bandwidth_usage_inc", "12924": "cfs_bandwidth_used", "12925": "cfs_constraints_mutex", "12926": "cfs_period_us", "12927": "cfs_quota_us", "12928": "cfs_rq", "12929": "cfs_rq_clock_task", "12930": "cfs_rq_of", "12931": "cfs_rq_throttled", "12932": "cfs_schedulable_data", "12933": "cfs_tasks", "12934": "cft", "12935": "cfts", "12936": "cftype", "12937": "cg_list", "12938": "cgroup", "12939": "cgroup_add_cftypes", "12940": "cgroup_add_dfl_cftypes", "12941": "cgroup_add_file", "12942": "cgroup_add_legacy_cftypes", "12943": "cgroup_addrm_files", "12944": "cgroup_apply_cftypes", "12945": "cgroup_assert_mutex_or_rcu_locked", "12946": "cgroup_attach_task", "12947": "cgroup_attach_task_all", "12948": "cgroup_calc_child_subsys_mask", "12949": "cgroup_clear_dir", "12950": "cgroup_clone_children_read", "12951": "cgroup_clone_children_write", "12952": "cgroup_controllers_show", "12953": "cgroup_css", "12954": "cgroup_css_links_read", "12955": "cgroup_destroy_locked", "12956": "cgroup_destroy_root", "12957": "cgroup_destroy_wq", "12958": "cgroup_dfl_base_files", "12959": "cgroup_disable", "12960": "cgroup_e_css", "12961": "cgroup_enable_task_cg_lists", "12962": "cgroup_exit", "12963": "cgroup_exit_cftypes", "12964": "cgroup_exit_root_id", "12965": "cgroup_file_mode", "12966": "cgroup_file_name", "12967": "cgroup_file_write", "12968": "cgroup_filetype", "12969": "cgroup_fork", "12970": "cgroup_free_root", "12971": "cgroup_freezing", "12972": "cgroup_fs", "12973": "cgroup_fs_type", "12974": "cgroup_get", "12975": "cgroup_get_e_css", "12976": "cgroup_has_tasks", "12977": "cgroup_hierarchy_idr", "12978": "cgroup_idr", "12979": "cgroup_idr_alloc", "12980": "cgroup_idr_lock", "12981": "cgroup_idr_remove", "12982": "cgroup_idr_replace", "12983": "cgroup_init", "12984": "cgroup_init_cftypes", "12985": "cgroup_init_early", "12986": "cgroup_init_root_id", "12987": "cgroup_init_subsys", "12988": "cgroup_is_dead", "12989": "cgroup_is_descendant", "12990": "cgroup_kf_ops", "12991": "cgroup_kf_single_ops", "12992": "cgroup_kf_syscall_ops", "12993": "cgroup_kill_sb", "12994": "cgroup_kn_lock_live", "12995": "cgroup_kn_set_ugid", "12996": "cgroup_kn_unlock", "12997": "cgroup_kobj", "12998": "cgroup_legacy_base_files", "12999": "cgroup_legacy_files_on_dfl", "13000": "cgroup_migrate", "13001": "cgroup_migrate_add_src", "13002": "cgroup_migrate_finish", "13003": "cgroup_migrate_prepare_dst", "13004": "cgroup_mkdir", "13005": "cgroup_mount", "13006": "cgroup_mutex", "13007": "cgroup_name", "13008": "cgroup_on_dfl", "13009": "cgroup_parent", "13010": "cgroup_path", "13011": "cgroup_pid_fry", "13012": "cgroup_pidlist", "13013": "cgroup_pidlist_destroy_all", "13014": "cgroup_pidlist_destroy_work_fn", "13015": "cgroup_pidlist_destroy_wq", "13016": "cgroup_pidlist_find", "13017": "cgroup_pidlist_find_create", "13018": "cgroup_pidlist_next", "13019": "cgroup_pidlist_show", "13020": "cgroup_pidlist_start", "13021": "cgroup_pidlist_stop", "13022": "cgroup_populate_dir", "13023": "cgroup_populated_show", "13024": "cgroup_post_fork", "13025": "cgroup_print_ss_mask", "13026": "cgroup_procs_write", "13027": "cgroup_put", "13028": "cgroup_read_notify_on_release", "13029": "cgroup_refresh_child_subsys_mask", "13030": "cgroup_release_agent", "13031": "cgroup_release_agent_show", "13032": "cgroup_release_agent_write", "13033": "cgroup_remount", "13034": "cgroup_rename", "13035": "cgroup_rm_cftypes", "13036": "cgroup_rm_cftypes_locked", "13037": "cgroup_rm_file", "13038": "cgroup_rmdir", "13039": "cgroup_root", "13040": "cgroup_root_controllers_show", "13041": "cgroup_root_count", "13042": "cgroup_root_from_kf", "13043": "cgroup_roots", "13044": "cgroup_sane_behavior_show", "13045": "cgroup_sb_opts", "13046": "cgroup_seqfile_next", "13047": "cgroup_seqfile_show", "13048": "cgroup_seqfile_start", "13049": "cgroup_seqfile_stop", "13050": "cgroup_set_legacy_files_on_dfl", "13051": "cgroup_setup_root", "13052": "cgroup_show_options", "13053": "cgroup_subsys", "13054": "cgroup_subsys_name", "13055": "cgroup_subsys_state", "13056": "cgroup_subtree_control_show", "13057": "cgroup_subtree_control_write", "13058": "cgroup_task_count", "13059": "cgroup_task_migrate", "13060": "cgroup_tasks_write", "13061": "cgroup_taskset", "13062": "cgroup_taskset_first", "13063": "cgroup_taskset_for_each", "13064": "cgroup_taskset_next", "13065": "cgroup_transfer_tasks", "13066": "cgroup_tryget", "13067": "cgroup_update_dfl_csses", "13068": "cgroup_update_populated", "13069": "cgroup_write_notify_on_release", "13070": "cgroups", "13071": "cgroupstats", "13072": "cgroupstats_build", "13073": "cgroupstats_cmd_get_policy", "13074": "cgroupstats_open", "13075": "cgroupstats_user_cmd", "13076": "cgrp", "13077": "cgrp1", "13078": "cgrp2", "13079": "cgrp_cset_link", "13080": "cgrp_dfl_root", "13081": "cgrp_dfl_root_inhibit_ss_mask", "13082": "cgrp_dfl_root_visible", "13083": "cgrp_link", "13084": "cgrp_links", "13085": "ch", "13086": "chain", "13087": "chain_alloc", "13088": "chain_allocator", "13089": "chain_head", "13090": "chain_hlocks", "13091": "chain_init", "13092": "chain_key", "13093": "chain_lookup_hits", "13094": "chain_lookup_misses", "13095": "chained", "13096": "chainhashentry", "13097": "chan", "13098": "change", "13099": "change_clocksource", "13100": "change_okay", "13101": "change_pid", "13102": "change_prot_numa", "13103": "char", "13104": "charge", "13105": "charp", "13106": "check", "13107": "check_alu_op", "13108": "check_asym_packing", "13109": "check_call", "13110": "check_cfg", "13111": "check_cfs_rq_runtime", "13112": "check_chain_key", "13113": "check_class_changed", "13114": "check_clocks", "13115": "check_cond_jmp_op", "13116": "check_cpu_capacity", "13117": "check_cpu_stall", "13118": "check_cpu_stall_init", "13119": "check_cpu_stalls", "13120": "check_critical_timing", "13121": "check_ctx_access", "13122": "check_data_rlimit", "13123": "check_deadlock", "13124": "check_enqueue_throttle", "13125": "check_flags", "13126": "check_for_release", "13127": "check_for_tasks", "13128": "check_free_space", "13129": "check_func_arg", "13130": "check_grep", "13131": "check_header", "13132": "check_holdout_task", "13133": "check_hung_task", "13134": "check_hung_uninterruptible_tasks", "13135": "check_image_kernel", "13136": "check_irq_entry", "13137": "check_irq_resend", "13138": "check_irq_return", "13139": "check_irq_usage", "13140": "check_kill_permission", "13141": "check_kprobe_address_safe", "13142": "check_kprobe_rereg", "13143": "check_kthr_stop", "13144": "check_ld_abs", "13145": "check_ld_imm", "13146": "check_map_access", "13147": "check_mem_access", "13148": "check_mm", "13149": "check_modinfo", "13150": "check_modstruct_version", "13151": "check_module_license_and_versions", "13152": "check_noncircular", "13153": "check_pgt_cache", "13154": "check_pred_data", "13155": "check_pred_tree", "13156": "check_pred_tree_cb", "13157": "check_preds", "13158": "check_preempt_curr", "13159": "check_preempt_curr_idle", "13160": "check_preempt_curr_rt", "13161": "check_preempt_equal_prio", "13162": "check_preempt_tick", "13163": "check_preempt_wakeup", "13164": "check_prev_add", "13165": "check_prev_add_irq", "13166": "check_prevs_add", "13167": "check_prlimit_permission", "13168": "check_reg_arg", "13169": "check_resched", "13170": "check_same_owner", "13171": "check_spread", "13172": "check_stack_boundary", "13173": "check_stack_read", "13174": "check_stack_write", "13175": "check_state", "13176": "check_symbol", "13177": "check_unlock", "13178": "check_unshare_flags", "13179": "check_usage", "13180": "check_usage_backwards", "13181": "check_usage_f", "13182": "check_usage_forwards", "13183": "check_version", "13184": "check_xadd", "13185": "checkcore", "13186": "checksum", "13187": "checkwait", "13188": "child", "13189": "child_cs", "13190": "child_list", "13191": "child_mutex", "13192": "child_reaper", "13193": "child_subsys_mask", "13194": "child_tidptr", "13195": "child_total_time_enabled", "13196": "child_total_time_running", "13197": "children", "13198": "chip", "13199": "chip_bus_lock", "13200": "chip_bus_sync_unlock", "13201": "chip_data", "13202": "chip_types", "13203": "choose", "13204": "chown16", "13205": "chunk", "13206": "chunk_entry", "13207": "chunk_hash", "13208": "chunk_hash_heads", "13209": "chunks", "13210": "chwalk", "13211": "ci_ptr", "13212": "cinblock", "13213": "cinterval", "13214": "circular", "13215": "circular_queue", "13216": "ck_cmdline", "13217": "cl", "13218": "claim_allocations", "13219": "clamp", "13220": "clamp_t", "13221": "clamp_val", "13222": "class", "13223": "class_cache", "13224": "class_filter", "13225": "class_idx", "13226": "class_interface", "13227": "class_interface_register", "13228": "class_interface_unregister", "13229": "class_intf", "13230": "classes", "13231": "classhashentry", "13232": "classic", "13233": "clc", "13234": "clean_sort_range", "13235": "cleanup", "13236": "cleanup_all_probes", "13237": "cleanup_rp_inst", "13238": "cleanup_srcu_struct", "13239": "clear", "13240": "clear_all_latency_tracing", "13241": "clear_bit", "13242": "clear_buddies", "13243": "clear_child_tid", "13244": "clear_code", "13245": "clear_event_triggers", "13246": "clear_fast_ctr", "13247": "clear_frozen", "13248": "clear_ftrace_function", "13249": "clear_ftrace_pid", "13250": "clear_ftrace_pid_task", "13251": "clear_ftrace_swapper", "13252": "clear_global_latency_tracing", "13253": "clear_idx", "13254": "clear_lock_stats", "13255": "clear_nosave_free", "13256": "clear_operand_string", "13257": "clear_page", "13258": "clear_page_nosave", "13259": "clear_pending", "13260": "clear_preempt_need_resched", "13261": "clear_restore_sigmask", "13262": "clear_sched_clock_stable", "13263": "clear_seq", "13264": "clear_thread_flag", "13265": "clear_tlb_flush_pending", "13266": "clear_trace", "13267": "clear_tsk_need_resched", "13268": "clear_tsk_thread_flag", "13269": "clear_tsk_trace_trace", "13270": "clear_user_return_notifier", "13271": "clk", "13272": "clock", "13273": "clock2alarm", "13274": "clock_adj", "13275": "clock_adjtime", "13276": "clock_base", "13277": "clock_boottime", "13278": "clock_event_device", "13279": "clock_event_mode", "13280": "clock_event_state", "13281": "clock_get", "13282": "clock_getres", "13283": "clock_gettime", "13284": "clock_id", "13285": "clock_monotonic", "13286": "clock_monotonic_coarse", "13287": "clock_monotonic_raw", "13288": "clock_nanosleep", "13289": "clock_nanosleep_restart", "13290": "clock_posix_dynamic", "13291": "clock_realtime", "13292": "clock_realtime_coarse", "13293": "clock_set", "13294": "clock_settime", "13295": "clock_skip_update", "13296": "clock_t", "13297": "clock_t_to_compat_clock_t", "13298": "clock_t_to_jiffies", "13299": "clock_tai", "13300": "clock_task", "13301": "clock_was_set", "13302": "clockevent_delta2ns", "13303": "clockevent_devices", "13304": "clockevents_calc_mult_shift", "13305": "clockevents_config", "13306": "clockevents_config_and_register", "13307": "clockevents_exchange_device", "13308": "clockevents_handle_noop", "13309": "clockevents_increase_min_delta", "13310": "clockevents_init_sysfs", "13311": "clockevents_lock", "13312": "clockevents_mutex", "13313": "clockevents_notify_released", "13314": "clockevents_program_event", "13315": "clockevents_program_min_delta", "13316": "clockevents_register_device", "13317": "clockevents_released", "13318": "clockevents_replace", "13319": "clockevents_resume", "13320": "clockevents_sanity_check", "13321": "clockevents_set_state", "13322": "clockevents_shutdown", "13323": "clockevents_subsys", "13324": "clockevents_suspend", "13325": "clockevents_tick_resume", "13326": "clockevents_unbind", "13327": "clockevents_unbind_device", "13328": "clockevents_update_freq", "13329": "clockid", "13330": "clockid_t", "13331": "clockid_to_kclock", "13332": "clocksource", "13333": "clocksource_cyc2ns", "13334": "clocksource_default_clock", "13335": "clocksource_delta", "13336": "clocksource_resume", "13337": "clocksource_suspend", "13338": "clocksource_touch_watchdog", "13339": "clone", "13340": "clone_ctx", "13341": "clone_flags", "13342": "clone_uts_ns", "13343": "close", "13344": "close_work", "13345": "clr", "13346": "cm", "13347": "cma", "13348": "cmaj_flt", "13349": "cmaxrss", "13350": "cmd", "13351": "cmd_attr_deregister_cpumask", "13352": "cmd_attr_pid", "13353": "cmd_attr_register_cpumask", "13354": "cmd_attr_tgid", "13355": "cmd_cur", "13356": "cmd_enable", "13357": "cmd_flags", "13358": "cmd_func", "13359": "cmd_head", "13360": "cmd_help", "13361": "cmd_hist", "13362": "cmd_len", "13363": "cmd_minlen", "13364": "cmd_name", "13365": "cmd_ops", "13366": "cmd_tail", "13367": "cmd_type", "13368": "cmd_usage", "13369": "cmdbuf", "13370": "cmdline", "13371": "cmdline_buf", "13372": "cmdline_buf_len", "13373": "cmdline_idx", "13374": "cmdline_len", "13375": "cmdline_num", "13376": "cmdline_ptr", "13377": "cmdptr", "13378": "cmdstr", "13379": "cmin_flt", "13380": "cmp", "13381": "cmp_data", "13382": "cmp_len", "13383": "cmp_name", "13384": "cmp_next_hrtimer_event", "13385": "cmp_stat_t", "13386": "cmppid", "13387": "cmpxchg", "13388": "cmpxchg64", "13389": "cmpxchg_cputime", "13390": "cnivcsw", "13391": "cnt", "13392": "cnts", "13393": "cnvcsw", "13394": "co", "13395": "code", "13396": "collect_garbage_slots", "13397": "collect_mounts", "13398": "collect_one_slot", "13399": "collect_signal", "13400": "collision", "13401": "colon", "13402": "color", "13403": "comm", "13404": "comm_event", "13405": "comm_size", "13406": "comma", "13407": "command", "13408": "commands", "13409": "commit", "13410": "commit_creds", "13411": "commit_overrun", "13412": "commit_page", "13413": "commit_txn", "13414": "commits", "13415": "committing", "13416": "common_end", "13417": "common_head", "13418": "common_nsleep", "13419": "common_timer_create", "13420": "common_timer_del", "13421": "common_timer_get", "13422": "common_timer_set", "13423": "comp", "13424": "compare_css_sets", "13425": "compare_root", "13426": "compat", "13427": "compat_alloc_user_space", "13428": "compat_arch_ptrace", "13429": "compat_blk_trace_setup", "13430": "compat_blk_user_trace_setup", "13431": "compat_clock_nanosleep_restart", "13432": "compat_clock_t", "13433": "compat_convert_timespec", "13434": "compat_exit_robust_list", "13435": "compat_get_bitmap", "13436": "compat_get_timespec", "13437": "compat_get_timeval", "13438": "compat_get_timex", "13439": "compat_get_user_cpu_mask", "13440": "compat_ioctl", "13441": "compat_iovec", "13442": "compat_itimerspec", "13443": "compat_itimerval", "13444": "compat_jiffies_to_clock_t", "13445": "compat_kexec_segment", "13446": "compat_loff_t", "13447": "compat_log", "13448": "compat_long_t", "13449": "compat_nanosleep_restart", "13450": "compat_old_sigaction", "13451": "compat_old_sigset_t", "13452": "compat_oldlenp", "13453": "compat_pid_t", "13454": "compat_ptr", "13455": "compat_put_timespec", "13456": "compat_put_timeval", "13457": "compat_put_timex", "13458": "compat_restore_altstack", "13459": "compat_resume_swap_area", "13460": "compat_rlimit", "13461": "compat_rmtp", "13462": "compat_robust_list", "13463": "compat_robust_list_head", "13464": "compat_rusage", "13465": "compat_sig_setmask", "13466": "compat_sigaction", "13467": "compat_sigevent", "13468": "compat_siginfo", "13469": "compat_siginfo_t", "13470": "compat_sigset_t", "13471": "compat_sigset_word", "13472": "compat_size_t", "13473": "compat_sock_fprog", "13474": "compat_stack_t", "13475": "compat_sys_epoll_pwait", "13476": "compat_sys_fanotify_mark", "13477": "compat_sys_futex", "13478": "compat_sys_get_mempolicy", "13479": "compat_sys_get_robust_list", "13480": "compat_sys_getsockopt", "13481": "compat_sys_ipc", "13482": "compat_sys_kexec_load", "13483": "compat_sys_keyctl", "13484": "compat_sys_lookup_dcookie", "13485": "compat_sys_mbind", "13486": "compat_sys_migrate_pages", "13487": "compat_sys_move_pages", "13488": "compat_sys_mq_getsetattr", "13489": "compat_sys_mq_notify", "13490": "compat_sys_mq_open", "13491": "compat_sys_mq_timedreceive", "13492": "compat_sys_mq_timedsend", "13493": "compat_sys_msgctl", "13494": "compat_sys_msgrcv", "13495": "compat_sys_msgsnd", "13496": "compat_sys_open_by_handle_at", "13497": "compat_sys_process_vm_readv", "13498": "compat_sys_process_vm_writev", "13499": "compat_sys_recv", "13500": "compat_sys_recvfrom", "13501": "compat_sys_recvmmsg", "13502": "compat_sys_recvmsg", "13503": "compat_sys_s390_ipc", "13504": "compat_sys_semctl", "13505": "compat_sys_semtimedop", "13506": "compat_sys_sendmmsg", "13507": "compat_sys_sendmsg", "13508": "compat_sys_set_mempolicy", "13509": "compat_sys_set_robust_list", "13510": "compat_sys_setsockopt", "13511": "compat_sys_shmat", "13512": "compat_sys_shmctl", "13513": "compat_sys_sigaltstack", "13514": "compat_sys_signalfd", "13515": "compat_sys_signalfd4", "13516": "compat_sys_socketcall", "13517": "compat_sys_sysctl", "13518": "compat_sys_timerfd_gettime", "13519": "compat_sys_timerfd_settime", "13520": "compat_sysctl_args", "13521": "compat_sysinfo", "13522": "compat_time_t", "13523": "compat_timespec", "13524": "compat_timeval", "13525": "compat_timex", "13526": "compat_tms", "13527": "compat_uint_t", "13528": "compat_ulong_t", "13529": "compat_uptr_t", "13530": "compat_user_stack_pointer", "13531": "compatible", "13532": "complete", "13533": "complete_formation", "13534": "complete_signal", "13535": "complete_vfork_done", "13536": "completed", "13537": "completion", "13538": "completion_done", "13539": "compressed", "13540": "compute_capacity", "13541": "con", "13542": "cond", "13543": "cond_func", "13544": "cond_resched", "13545": "cond_resched_completed", "13546": "cond_resched_rcu_qs", "13547": "cond_suspend_depth", "13548": "cond_sync", "13549": "cond_synchronize_rcu", "13550": "cond_syscall", "13551": "cond_unmask_eoi_irq", "13552": "cond_unmask_irq", "13553": "config", "13554": "configured", "13555": "conflict", "13556": "connects", "13557": "console", "13558": "console_cmdline", "13559": "console_drivers", "13560": "console_idx", "13561": "console_lock_dep_map", "13562": "console_locked", "13563": "console_loglevel", "13564": "console_may_schedule", "13565": "console_prev", "13566": "console_printk", "13567": "console_sem", "13568": "console_seq", "13569": "console_set_on_cmdline", "13570": "console_suspended", "13571": "console_verbose", "13572": "const", "13573": "const_debug", "13574": "constant", "13575": "constraint", "13576": "constraints", "13577": "consume", "13578": "consume_skb", "13579": "consumer", "13580": "consumer_add", "13581": "consumer_del", "13582": "consumer_fifo", "13583": "consumer_filter", "13584": "consumer_nice", "13585": "consumer_rwsem", "13586": "consumers", "13587": "consuming", "13588": "cont", "13589": "container", "13590": "container_of", "13591": "containing", "13592": "contending_lock", "13593": "contending_point", "13594": "content", "13595": "contention_point", "13596": "contents", "13597": "context", "13598": "context_equiv", "13599": "context_switch", "13600": "context_tracking", "13601": "context_tracking_cpu_set", "13602": "context_tracking_enabled", "13603": "context_tracking_enter", "13604": "context_tracking_exit", "13605": "context_tracking_in_user", "13606": "context_tracking_init", "13607": "context_tracking_is_enabled", "13608": "context_tracking_task_switch", "13609": "context_tracking_user_enter", "13610": "context_tracking_user_exit", "13611": "continue", "13612": "continue_balancing", "13613": "contrib", "13614": "contrib_delta", "13615": "contribution", "13616": "contributions", "13617": "control", "13618": "control_code_page", "13619": "control_ops", "13620": "control_ops_alloc", "13621": "control_ops_disable_all", "13622": "control_ops_free", "13623": "control_page", "13624": "control_pages", "13625": "conv", "13626": "convdiv", "13627": "convert", "13628": "convert_ctx_access", "13629": "convert_ctx_accesses", "13630": "convert_kthread_status", "13631": "convert_pseudo_ld_imm64", "13632": "convert_rloc_to_loc", "13633": "convert_to_gcda", "13634": "convmul", "13635": "cookie", "13636": "cookies", "13637": "copied", "13638": "copy", "13639": "copy_bm", "13640": "copy_chunked_from_user", "13641": "copy_creds", "13642": "copy_data_pages", "13643": "copy_file_from_fd", "13644": "copy_files", "13645": "copy_from_page", "13646": "copy_from_user", "13647": "copy_fs", "13648": "copy_fs_struct", "13649": "copy_highpage", "13650": "copy_insn", "13651": "copy_io", "13652": "copy_ipcs", "13653": "copy_kprobe", "13654": "copy_last_highmem_page", "13655": "copy_mm", "13656": "copy_mnt_ns", "13657": "copy_module_from_fd", "13658": "copy_module_from_user", "13659": "copy_namespaces", "13660": "copy_net_ns", "13661": "copy_page", "13662": "copy_page_range", "13663": "copy_pid_ns", "13664": "copy_process", "13665": "copy_regset_from_user", "13666": "copy_regset_to_user", "13667": "copy_seccomp", "13668": "copy_semundo", "13669": "copy_sighand", "13670": "copy_siginfo", "13671": "copy_siginfo_from_user32", "13672": "copy_siginfo_to_user", "13673": "copy_siginfo_to_user32", "13674": "copy_signal", "13675": "copy_thread", "13676": "copy_to_page", "13677": "copy_to_user", "13678": "copy_user_segment_list", "13679": "copy_utsname", "13680": "copy_workqueue_attrs", "13681": "copybytes", "13682": "core_initcall", "13683": "core_internal_state__do_not_mess_with_it", "13684": "core_kernel_data", "13685": "core_kernel_text", "13686": "core_note_type", "13687": "core_num_syms", "13688": "core_param", "13689": "core_pattern", "13690": "core_pipe_limit", "13691": "core_ro_size", "13692": "core_size", "13693": "core_state", "13694": "core_strtab", "13695": "core_symtab", "13696": "core_text_size", "13697": "core_uses_pid", "13698": "coredump_filter_setup", "13699": "coredump_params", "13700": "coremem", "13701": "coresize", "13702": "correct", "13703": "correct_hw_break", "13704": "correction", "13705": "coublock", "13706": "count", "13707": "count_data_pages", "13708": "count_fls", "13709": "count_free_highmem_pages", "13710": "count_highmem_image_pages", "13711": "count_highmem_pages", "13712": "count_lazy", "13713": "count_leafs", "13714": "count_leafs_cb", "13715": "count_matching_names", "13716": "count_overruns", "13717": "count_pages_for_highmem", "13718": "count_preds", "13719": "counter", "13720": "counter_active", "13721": "counters", "13722": "counts", "13723": "covered", "13724": "cp", "13725": "cp2", "13726": "cpl", "13727": "cpp", "13728": "cprm", "13729": "cprv", "13730": "cpu", "13731": "cpu0_err", "13732": "cpu1", "13733": "cpu2", "13734": "cpu_a", "13735": "cpu_access_lock", "13736": "cpu_active", "13737": "cpu_active_bits", "13738": "cpu_active_mask", "13739": "cpu_add_remove_lock", "13740": "cpu_all_bits", "13741": "cpu_all_mask", "13742": "cpu_attach_domain", "13743": "cpu_avg_load_per_task", "13744": "cpu_b", "13745": "cpu_base", "13746": "cpu_bit_bitmap", "13747": "cpu_buffer", "13748": "cpu_buffer_a", "13749": "cpu_buffer_b", "13750": "cpu_busy", "13751": "cpu_callback", "13752": "cpu_capacity", "13753": "cpu_capacity_orig", "13754": "cpu_cfs_period_read_u64", "13755": "cpu_cfs_period_write_u64", "13756": "cpu_cfs_quota_read_s64", "13757": "cpu_cfs_quota_write_s64", "13758": "cpu_cgroup_attach", "13759": "cpu_cgroup_can_attach", "13760": "cpu_cgroup_css_alloc", "13761": "cpu_cgroup_css_free", "13762": "cpu_cgroup_css_offline", "13763": "cpu_cgroup_css_online", "13764": "cpu_cgroup_exit", "13765": "cpu_cgroup_fork", "13766": "cpu_cgrp_id", "13767": "cpu_cgrp_subsys", "13768": "cpu_chain", "13769": "cpu_check_up_prepare", "13770": "cpu_clk", "13771": "cpu_clock", "13772": "cpu_cluster_pm_enter", "13773": "cpu_cluster_pm_exit", "13774": "cpu_core_flags", "13775": "cpu_coregroup_mask", "13776": "cpu_count", "13777": "cpu_cpu_mask", "13778": "cpu_ctx_sched_in", "13779": "cpu_ctx_sched_out", "13780": "cpu_curr", "13781": "cpu_current", "13782": "cpu_data", "13783": "cpu_dead_idle", "13784": "cpu_delay_total", "13785": "cpu_dma_constraints", "13786": "cpu_dma_lat_notifier", "13787": "cpu_dma_pm_qos", "13788": "cpu_down", "13789": "cpu_entries", "13790": "cpu_entry", "13791": "cpu_extra", "13792": "cpu_file", "13793": "cpu_files", "13794": "cpu_function_call", "13795": "cpu_going_down", "13796": "cpu_hardirq_time", "13797": "cpu_has_callbacks_ready_to_invoke", "13798": "cpu_hotplug", "13799": "cpu_hotplug_begin", "13800": "cpu_hotplug_disable", "13801": "cpu_hotplug_disabled", "13802": "cpu_hotplug_done", "13803": "cpu_hotplug_enable", "13804": "cpu_hotplug_pm_callback", "13805": "cpu_hotplug_pm_sync_init", "13806": "cpu_hotplug_state", "13807": "cpu_i", "13808": "cpu_id", "13809": "cpu_idle", "13810": "cpu_idle_force_poll", "13811": "cpu_idle_loop", "13812": "cpu_idle_poll", "13813": "cpu_idle_poll_ctrl", "13814": "cpu_idle_type", "13815": "cpu_idx", "13816": "cpu_index", "13817": "cpu_intensive", "13818": "cpu_is_hotpluggable", "13819": "cpu_is_offline", "13820": "cpu_isolated_map", "13821": "cpu_khz", "13822": "cpu_limit", "13823": "cpu_load", "13824": "cpu_lock_stats", "13825": "cpu_loop", "13826": "cpu_map", "13827": "cpu_maps_update_begin", "13828": "cpu_maps_update_done", "13829": "cpu_master_loop", "13830": "cpu_needs_another_gp", "13831": "cpu_nfb", "13832": "cpu_node", "13833": "cpu_notifier", "13834": "cpu_notifier_register_begin", "13835": "cpu_notifier_register_done", "13836": "cpu_notify", "13837": "cpu_notify_nofail", "13838": "cpu_ns", "13839": "cpu_num", "13840": "cpu_of", "13841": "cpu_off", "13842": "cpu_online", "13843": "cpu_online_bits", "13844": "cpu_online_mask", "13845": "cpu_pid_to_cpupid", "13846": "cpu_pm_enter", "13847": "cpu_pm_event", "13848": "cpu_pm_exit", "13849": "cpu_pm_init", "13850": "cpu_pm_notifier_chain", "13851": "cpu_pm_notifier_lock", "13852": "cpu_pm_notify", "13853": "cpu_pm_register_notifier", "13854": "cpu_pm_resume", "13855": "cpu_pm_suspend", "13856": "cpu_pm_syscore_ops", "13857": "cpu_pm_unregister_notifier", "13858": "cpu_pools", "13859": "cpu_possible", "13860": "cpu_possible_bits", "13861": "cpu_possible_mask", "13862": "cpu_present", "13863": "cpu_present_bits", "13864": "cpu_present_mask", "13865": "cpu_profile_flip", "13866": "cpu_profile_hits", "13867": "cpu_pwqs", "13868": "cpu_relax", "13869": "cpu_relax_lowlatency", "13870": "cpu_report_state", "13871": "cpu_rq", "13872": "cpu_rt_period_read_uint", "13873": "cpu_rt_period_write_uint", "13874": "cpu_rt_runtime_read", "13875": "cpu_rt_runtime_write", "13876": "cpu_run_real_total", "13877": "cpu_run_virtual_total", "13878": "cpu_scaled_run_real_total", "13879": "cpu_sdc", "13880": "cpu_set_state_online", "13881": "cpu_shares_read_u64", "13882": "cpu_shares_write_u64", "13883": "cpu_smt_flags", "13884": "cpu_smt_mask", "13885": "cpu_softirq_time", "13886": "cpu_startup_entry", "13887": "cpu_stats", "13888": "cpu_stats_show", "13889": "cpu_stop_create", "13890": "cpu_stop_done", "13891": "cpu_stop_fn_t", "13892": "cpu_stop_init", "13893": "cpu_stop_init_done", "13894": "cpu_stop_park", "13895": "cpu_stop_queue_work", "13896": "cpu_stop_should_run", "13897": "cpu_stop_signal_done", "13898": "cpu_stop_threads", "13899": "cpu_stop_unpark", "13900": "cpu_stop_work", "13901": "cpu_stopper", "13902": "cpu_stopper_task", "13903": "cpu_stopper_thread", "13904": "cpu_timers", "13905": "cpu_to_be16", "13906": "cpu_to_be32", "13907": "cpu_to_be64", "13908": "cpu_to_le16", "13909": "cpu_to_le32", "13910": "cpu_to_le64", "13911": "cpu_to_mem", "13912": "cpu_to_node", "13913": "cpu_up", "13914": "cpu_vfs_cap_data", "13915": "cpu_wait_death", "13916": "cpu_worker_pools", "13917": "cpuacct", "13918": "cpuacct_account_field", "13919": "cpuacct_cgrp_id", "13920": "cpuacct_cgrp_subsys", "13921": "cpuacct_charge", "13922": "cpuacct_cpuusage_read", "13923": "cpuacct_cpuusage_write", "13924": "cpuacct_css_alloc", "13925": "cpuacct_css_free", "13926": "cpuacct_percpu_seq_show", "13927": "cpuacct_stat_desc", "13928": "cpuacct_stat_index", "13929": "cpuacct_stats_show", "13930": "cpubuf_idx", "13931": "cpuctx", "13932": "cpudl", "13933": "cpudl_change_key", "13934": "cpudl_cleanup", "13935": "cpudl_clear_freecpu", "13936": "cpudl_exchange", "13937": "cpudl_find", "13938": "cpudl_heapify", "13939": "cpudl_init", "13940": "cpudl_item", "13941": "cpudl_maximum", "13942": "cpudl_set", "13943": "cpudl_set_freecpu", "13944": "cpudump", "13945": "cpudump_probe_ops", "13946": "cpuhp_lock_acquire", "13947": "cpuhp_lock_acquire_read", "13948": "cpuhp_lock_acquire_tryread", "13949": "cpuhp_lock_release", "13950": "cpuhp_state", "13951": "cpuidle_enter", "13952": "cpuidle_find_deepest_state", "13953": "cpuidle_idle_call", "13954": "cpuidle_reflect", "13955": "cpuidle_select", "13956": "cpuidle_state", "13957": "cpulist_parse", "13958": "cpumask", "13959": "cpumask_and", "13960": "cpumask_andnot", "13961": "cpumask_any", "13962": "cpumask_any_and", "13963": "cpumask_bits", "13964": "cpumask_change_notifier", "13965": "cpumask_clear", "13966": "cpumask_clear_cpu", "13967": "cpumask_copy", "13968": "cpumask_empty", "13969": "cpumask_equal", "13970": "cpumask_first", "13971": "cpumask_first_and", "13972": "cpumask_intersects", "13973": "cpumask_next", "13974": "cpumask_next_and", "13975": "cpumask_of", "13976": "cpumask_of_node", "13977": "cpumask_or", "13978": "cpumask_parse", "13979": "cpumask_parse_user", "13980": "cpumask_parselist_user", "13981": "cpumask_pr_args", "13982": "cpumask_set_cpu", "13983": "cpumask_setall", "13984": "cpumask_size", "13985": "cpumask_subset", "13986": "cpumask_t", "13987": "cpumask_test_and_clear_cpu", "13988": "cpumask_test_and_set_cpu", "13989": "cpumask_test_cpu", "13990": "cpumask_type", "13991": "cpumask_var_t", "13992": "cpumask_weight", "13993": "cpunum", "13994": "cpup", "13995": "cpupid", "13996": "cpupid_match_pid", "13997": "cpupid_pid_unset", "13998": "cpupid_to_cpu", "13999": "cpupid_to_nid", "14000": "cpupri", "14001": "cpupri_cleanup", "14002": "cpupri_find", "14003": "cpupri_init", "14004": "cpupri_set", "14005": "cpus", "14006": "cpus_allowed", "14007": "cpus_attach", "14008": "cpus_share_cache", "14009": "cpus_updated", "14010": "cpuset", "14011": "cpuset_attach", "14012": "cpuset_attach_nodemask_to", "14013": "cpuset_attach_old_cs", "14014": "cpuset_attach_wq", "14015": "cpuset_being_rebound", "14016": "cpuset_bind", "14017": "cpuset_can_attach", "14018": "cpuset_cancel_attach", "14019": "cpuset_cgrp_id", "14020": "cpuset_cgrp_subsys", "14021": "cpuset_change_task_nodemask", "14022": "cpuset_clone_children", "14023": "cpuset_common_seq_show", "14024": "cpuset_cpu_active", "14025": "cpuset_cpu_inactive", "14026": "cpuset_cpumask_can_shrink", "14027": "cpuset_cpus_allowed", "14028": "cpuset_cpus_allowed_fallback", "14029": "cpuset_css_alloc", "14030": "cpuset_css_free", "14031": "cpuset_css_offline", "14032": "cpuset_css_online", "14033": "cpuset_dec", "14034": "cpuset_filetype_t", "14035": "cpuset_flagbits_t", "14036": "cpuset_for_each_child", "14037": "cpuset_for_each_descendant_pre", "14038": "cpuset_fs_type", "14039": "cpuset_hotplug_update_tasks", "14040": "cpuset_hotplug_work", "14041": "cpuset_hotplug_workfn", "14042": "cpuset_inc", "14043": "cpuset_init", "14044": "cpuset_init_current_mems_allowed", "14045": "cpuset_init_smp", "14046": "cpuset_mem_spread_node", "14047": "cpuset_mem_spread_rotor", "14048": "cpuset_memory_pressure_enabled", "14049": "cpuset_mems_allowed", "14050": "cpuset_mems_allowed_intersects", "14051": "cpuset_migrate_mm", "14052": "cpuset_mount", "14053": "cpuset_mutex", "14054": "cpuset_nodemask_valid_mems_allowed", "14055": "cpuset_print_task_mems_allowed", "14056": "cpuset_read_s64", "14057": "cpuset_read_u64", "14058": "cpuset_slab_spread_node", "14059": "cpuset_slab_spread_rotor", "14060": "cpuset_spread_node", "14061": "cpuset_task_status_allowed", "14062": "cpuset_track_online_nodes", "14063": "cpuset_track_online_nodes_nb", "14064": "cpuset_update_active_cpus", "14065": "cpuset_update_task_spread_flag", "14066": "cpuset_write_resmask", "14067": "cpuset_write_s64", "14068": "cpuset_write_u64", "14069": "cpusets_enabled_key", "14070": "cpusets_overlap", "14071": "cpustat", "14072": "cpustride", "14073": "cputime", "14074": "cputime64_to_clock_t", "14075": "cputime_adjust", "14076": "cputime_advance", "14077": "cputime_expires", "14078": "cputime_one_jiffy", "14079": "cputime_scaled", "14080": "cputime_sub_ns", "14081": "cputime_t", "14082": "cputime_to_clock_t", "14083": "cputime_to_jiffies", "14084": "cputime_to_nsecs", "14085": "cputime_to_scaled", "14086": "cputime_to_timespec", "14087": "cputime_to_timeval", "14088": "cputime_to_usecs", "14089": "cputimer", "14090": "cputimer_running", "14091": "cpuusage", "14092": "cpuusage_read", "14093": "cpuusage_write", "14094": "cpy_name", "14095": "cq", "14096": "cq_depth", "14097": "cr", "14098": "crash_base", "14099": "crash_free_reserved_phys_range", "14100": "crash_get_memory_size", "14101": "crash_kexec", "14102": "crash_kexec_post_notifiers", "14103": "crash_map_reserved_pages", "14104": "crash_notes", "14105": "crash_notes_memory_init", "14106": "crash_save_cpu", "14107": "crash_save_vmcoreinfo", "14108": "crash_setup_regs", "14109": "crash_shrink_memory", "14110": "crash_size", "14111": "crash_unmap_reserved_pages", "14112": "crashk_low_res", "14113": "crashk_res", "14114": "crc", "14115": "crc32", "14116": "crc32_le", "14117": "crc32_threadfn", "14118": "crc_data", "14119": "crc_owner", "14120": "crcs", "14121": "create", "14122": "create_basic_memory_bitmaps", "14123": "create_buf_file", "14124": "create_chunk", "14125": "create_css", "14126": "create_event_filter", "14127": "create_event_toplevel_files", "14128": "create_filter", "14129": "create_filter_finish", "14130": "create_filter_start", "14131": "create_hash_tables", "14132": "create_image", "14133": "create_kthread", "14134": "create_mem_extents", "14135": "create_new_namespaces", "14136": "create_new_subsystem", "14137": "create_nsproxy", "14138": "create_pid_cachep", "14139": "create_pid_namespace", "14140": "create_pred", "14141": "create_proc_profile", "14142": "create_prof_cpu_mask", "14143": "create_reader", "14144": "create_singlethread_workqueue", "14145": "create_system_filter", "14146": "create_trace_kprobe", "14147": "create_trace_uprobe", "14148": "create_user_ns", "14149": "create_uts_ns", "14150": "create_worker", "14151": "create_zone_bm_rtree", "14152": "created_timer_id", "14153": "createfn", "14154": "creation", "14155": "cred", "14156": "cred_alloc_blank", "14157": "cred_cap_issubset", "14158": "cred_guard_mutex", "14159": "cred_init", "14160": "cred_jar", "14161": "credentials", "14162": "creds", "14163": "creds_are_invalid", "14164": "crf", "14165": "critical_end", "14166": "critical_sequence", "14167": "critical_start", "14168": "crypto_shash", "14169": "crypto_shash_final", "14170": "crypto_shash_init", "14171": "crypto_shash_update", "14172": "cs", "14173": "cs_cpus_allowed", "14174": "cs_last", "14175": "cs_now", "14176": "csa", "14177": "csd", "14178": "csd_data", "14179": "csd_lock", "14180": "csd_lock_wait", "14181": "csd_next", "14182": "csd_stack", "14183": "csd_unlock", "14184": "cset", "14185": "cset_cgroup_from_root", "14186": "cset_head", "14187": "cset_link", "14188": "cset_links", "14189": "cset_pos", "14190": "csets", "14191": "csn", "14192": "css", "14193": "css_advance_task_iter", "14194": "css_alloc", "14195": "css_ca", "14196": "css_cs", "14197": "css_disable", "14198": "css_e_css_changed", "14199": "css_enable", "14200": "css_for_each_child", "14201": "css_for_each_descendant_post", "14202": "css_for_each_descendant_pre", "14203": "css_free", "14204": "css_free_rcu_fn", "14205": "css_free_work_fn", "14206": "css_freezer", "14207": "css_from_id", "14208": "css_get", "14209": "css_has_online_children", "14210": "css_idr", "14211": "css_killed_ref_fn", "14212": "css_killed_work_fn", "14213": "css_leftmost_descendant", "14214": "css_next_child", "14215": "css_next_descendant_post", "14216": "css_next_descendant_pre", "14217": "css_offline", "14218": "css_online", "14219": "css_put", "14220": "css_release", "14221": "css_release_work_fn", "14222": "css_released", "14223": "css_reset", "14224": "css_rightmost_descendant", "14225": "css_serial_nr_next", "14226": "css_set", "14227": "css_set_count", "14228": "css_set_hash", "14229": "css_set_rwsem", "14230": "css_set_table", "14231": "css_task_iter", "14232": "css_task_iter_end", "14233": "css_task_iter_next", "14234": "css_task_iter_start", "14235": "css_tg", "14236": "css_tryget", "14237": "css_tryget_online", "14238": "css_tryget_online_from_dir", "14239": "cstime", "14240": "ct", "14241": "ct_idx", "14242": "ctime", "14243": "ctl_name", "14244": "ctl_path", "14245": "ctl_table", "14246": "ctl_table_header", "14247": "ctors", "14248": "ctr", "14249": "ctr_mask", "14250": "ctr_type", "14251": "ctrs", "14252": "cts", "14253": "ctv", "14254": "ctx", "14255": "ctx1", "14256": "ctx2", "14257": "ctx_flexible_sched_in", "14258": "ctx_pinned_sched_in", "14259": "ctx_sched_in", "14260": "ctx_sched_out", "14261": "ctx_state", "14262": "ctx_switch_entry", "14263": "ctx_time", "14264": "ctxn", "14265": "cu", "14266": "cur", "14267": "cur_cset", "14268": "cur_dl_b", "14269": "cur_ld_moved", "14270": "cur_ops", "14271": "cur_ret", "14272": "cur_setting", "14273": "cur_ss_mask", "14274": "cur_stack", "14275": "cur_state", "14276": "cur_swap", "14277": "cur_task", "14278": "cur_uprobe", "14279": "curdev", "14280": "curr", "14281": "curr_chain_key", "14282": "curr_cost", "14283": "curr_cpu", "14284": "curr_distance", "14285": "curr_jiffies", "14286": "curr_load_addr", "14287": "curr_operand", "14288": "curr_ret_stack", "14289": "curr_target", "14290": "curr_value", "14291": "current", "14292": "current_chrooted", "14293": "current_clr_polling_and_test", "14294": "current_context", "14295": "current_cpuset_is_being_rebound", "14296": "current_cred", "14297": "current_css_set_cg_links_read", "14298": "current_css_set_read", "14299": "current_css_set_refcount_read", "14300": "current_device", "14301": "current_egid", "14302": "current_euid", "14303": "current_fs_time", "14304": "current_fsgid", "14305": "current_fsuid", "14306": "current_func", "14307": "current_gid", "14308": "current_is_async", "14309": "current_is_workqueue_rescuer", "14310": "current_kernel_time", "14311": "current_pwq", "14312": "current_state", "14313": "current_thread_info", "14314": "current_trace", "14315": "current_tracer", "14316": "current_uid", "14317": "current_uid_gid", "14318": "current_user", "14319": "current_user_ns", "14320": "current_user_stack_pointer", "14321": "current_work", "14322": "current_wq_worker", "14323": "cursor", "14324": "curstate", "14325": "curtail", "14326": "curtask", "14327": "cutime", "14328": "cv_idx", "14329": "cv_size", "14330": "cval", "14331": "cwait", "14332": "cwt_wait", "14333": "cwt_wakefn", "14334": "cxt", "14335": "cycle", "14336": "cycle_delta", "14337": "cycle_interval", "14338": "cycle_last", "14339": "cycle_now", "14340": "cycle_t", "14341": "cycle_tstamp", "14342": "cyclecounter", "14343": "cyclecounter_cyc2ns", "14344": "cycles", "14345": "cycles_at_suspend", "14346": "d", "14347": "d_backing_inode", "14348": "d_child", "14349": "d_events", "14350": "d_inode", "14351": "d_is_positive", "14352": "d_lock", "14353": "d_name", "14354": "d_parent", "14355": "d_path", "14356": "d_really_is_positive", "14357": "d_sb", "14358": "d_subdirs", "14359": "d_tracer", "14360": "d_tracing", "14361": "dac_mmap_min_addr", "14362": "daemon", "14363": "dah_align", "14364": "dah_first", "14365": "dah_first_call", "14366": "dah_overhead", "14367": "dah_used", "14368": "dah_used_max", "14369": "dap_lock", "14370": "dap_locked", "14371": "dash2underscore", "14372": "dat", "14373": "data", "14374": "data_head", "14375": "data_len", "14376": "data_of", "14377": "data_offset", "14378": "data_page", "14379": "data_page_nr", "14380": "data_pages", "14381": "data_size", "14382": "data_src", "14383": "data_tail", "14384": "data_type", "14385": "datalp", "14386": "datap", "14387": "dataptr", "14388": "datasz", "14389": "datavp", "14390": "dattr", "14391": "dattr_cur", "14392": "day", "14393": "days", "14394": "db_result", "14395": "dbg_activate_sw_breakpoints", "14396": "dbg_deactivate_sw_breakpoints", "14397": "dbg_get_reg", "14398": "dbg_io_get_char", "14399": "dbg_io_ops", "14400": "dbg_is_early", "14401": "dbg_kdb_mode", "14402": "dbg_late_init", "14403": "dbg_master_lock", "14404": "dbg_module_load_nb", "14405": "dbg_notify_reboot", "14406": "dbg_reboot_notifier", "14407": "dbg_reg_def", "14408": "dbg_remove_all_break", "14409": "dbg_remove_sw_break", "14410": "dbg_set_reg", "14411": "dbg_set_sw_break", "14412": "dbg_slave_lock", "14413": "dbg_switch_cpu", "14414": "dbg_touch_watchdogs", "14415": "dci_ptr", "14416": "dcount", "14417": "ddebug_add_module", "14418": "ddebug_cleanup", "14419": "ddebug_dyndbg_module_param_cb", "14420": "ddebug_remove_module", "14421": "ddir_act", "14422": "de", "14423": "deactivate", "14424": "deactivate_mm", "14425": "deactivate_super", "14426": "deactivate_task", "14427": "dead", "14428": "dead_cpu", "14429": "deadcpu", "14430": "deadline", "14431": "deadlock_inject_countdown", "14432": "deadlock_inject_interval", "14433": "deadlock_lock", "14434": "deadlock_task_pid", "14435": "debug", "14436": "debug_activate", "14437": "debug_align", "14438": "debug_alloc_header", "14439": "debug_alloc_pool", "14440": "debug_alloc_pool_aligned", "14441": "debug_assert_init", "14442": "debug_atomic_dec", "14443": "debug_atomic_inc", "14444": "debug_atomic_read", "14445": "debug_cgrp_subsys", "14446": "debug_check_no_locks_freed", "14447": "debug_check_no_locks_held", "14448": "debug_css_alloc", "14449": "debug_css_free", "14450": "debug_deactivate", "14451": "debug_files", "14452": "debug_hint", "14453": "debug_init", "14454": "debug_kfree", "14455": "debug_kmalloc", "14456": "debug_kusage", "14457": "debug_kusage_one_time", "14458": "debug_lock", "14459": "debug_lockdep_rcu_enabled", "14460": "debug_locks", "14461": "debug_locks_off", "14462": "debug_locks_off_graph_unlock", "14463": "debug_locks_silent", "14464": "debug_mutex_add_waiter", "14465": "debug_mutex_free_waiter", "14466": "debug_mutex_init", "14467": "debug_mutex_lock_common", "14468": "debug_mutex_unlock", "14469": "debug_mutex_wake_waiter", "14470": "debug_obj_descr", "14471": "debug_obj_state", "14472": "debug_object_activate", "14473": "debug_object_active_state", "14474": "debug_object_assert_init", "14475": "debug_object_deactivate", "14476": "debug_object_free", "14477": "debug_object_init", "14478": "debug_object_init_on_stack", "14479": "debug_rcu_head_queue", "14480": "debug_rcu_head_unqueue", "14481": "debug_rt_mutex_deadlock", "14482": "debug_rt_mutex_detect_deadlock", "14483": "debug_rt_mutex_free_waiter", "14484": "debug_rt_mutex_init", "14485": "debug_rt_mutex_init_waiter", "14486": "debug_rt_mutex_lock", "14487": "debug_rt_mutex_print_deadlock", "14488": "debug_rt_mutex_proxy_lock", "14489": "debug_rt_mutex_proxy_unlock", "14490": "debug_rt_mutex_reset_waiter", "14491": "debug_rt_mutex_unlock", "14492": "debug_show_all_locks", "14493": "debug_show_held_locks", "14494": "debug_spin_lock_after", "14495": "debug_spin_lock_before", "14496": "debug_spin_unlock", "14497": "debug_table", "14498": "debug_taskcount_read", "14499": "debug_timer_activate", "14500": "debug_timer_assert_init", "14501": "debug_timer_deactivate", "14502": "debug_timer_free", "14503": "debug_timer_init", "14504": "debug_work_activate", "14505": "debug_work_deactivate", "14506": "debug_write_lock_after", "14507": "debug_write_lock_before", "14508": "debug_write_unlock", "14509": "debugfs", "14510": "debugfs_create_dir", "14511": "debugfs_create_file", "14512": "debugfs_create_symlink", "14513": "debugfs_kprobe_blacklist_ops", "14514": "debugfs_kprobes_operations", "14515": "debugfs_remove", "14516": "debugfs_remove_recursive", "14517": "debuggerinfo", "14518": "debuggerinfo_struct", "14519": "debugging", "14520": "dec", "14521": "dec_data", "14522": "dec_mm_counter", "14523": "dec_rt_group", "14524": "dec_rt_migration", "14525": "dec_rt_prio", "14526": "dec_rt_prio_smp", "14527": "dec_rt_tasks", "14528": "decay_count", "14529": "decay_counter", "14530": "decay_load", "14531": "decay_load_missed", "14532": "decayed", "14533": "decays", "14534": "decode_state", "14535": "decrement", "14536": "decrement_wakelocks_number", "14537": "decremented", "14538": "decrements", "14539": "def_dl_bandwidth", "14540": "def_flags", "14541": "def_root_domain", "14542": "def_rt_bandwidth", "14543": "default", "14544": "default_affinity_open", "14545": "default_affinity_proc_fops", "14546": "default_affinity_show", "14547": "default_affinity_write", "14548": "default_arch_gettimeoffset", "14549": "default_attrs", "14550": "default_bootup_tracer", "14551": "default_cfs_period", "14552": "default_dump_filter", "14553": "default_handle", "14554": "default_label", "14555": "default_llseek", "14556": "default_relax_domain_level", "14557": "default_scale_cpu_capacity", "14558": "default_timer_slack_ns", "14559": "default_topology", "14560": "default_value", "14561": "default_wake_function", "14562": "defcmd", "14563": "defcmd_in_progress", "14564": "defcmd_set", "14565": "defcmd_set_count", "14566": "deferred_free", "14567": "define_fields", "14568": "defined", "14569": "degrade_factor", "14570": "degrade_zero_ticks", "14571": "del", "14572": "del_singleshot_timer_sync", "14573": "del_timer", "14574": "del_timer_sync", "14575": "del_usage_links", "14576": "delay", "14577": "delayacct_add_tsk", "14578": "delayacct_blkio_end", "14579": "delayacct_blkio_start", "14580": "delayacct_cache", "14581": "delayacct_end", "14582": "delayacct_init", "14583": "delayacct_is_task_waiting_on_io", "14584": "delayacct_on", "14585": "delayacct_setup_disable", "14586": "delayacct_tsk_free", "14587": "delayacct_tsk_init", "14588": "delayed_free_pidns", "14589": "delayed_put_pid", "14590": "delayed_work", "14591": "delayed_work_pending", "14592": "delayed_work_timer_fn", "14593": "delayed_works", "14594": "delays", "14595": "delcount", "14596": "delete_all_elements", "14597": "delete_clock", "14598": "delete_irq_desc", "14599": "delete_module", "14600": "delete_uprobe", "14601": "delim", "14602": "delta", "14603": "delta_cpu", "14604": "delta_delta", "14605": "delta_exec", "14606": "delta_jiffies", "14607": "delta_ns", "14608": "delta_w", "14609": "dentry", "14610": "dentry_stat", "14611": "dep_gen_id", "14612": "dep_map", "14613": "dependencies", "14614": "dependency", "14615": "depends", "14616": "depends_on", "14617": "deprecated", "14618": "deprecated_sysctl_warning", "14619": "depth", "14620": "depth_irq", "14621": "dequeue", "14622": "dequeue_entity", "14623": "dequeue_entity_load_avg", "14624": "dequeue_pushable_task", "14625": "dequeue_rt_entity", "14626": "dequeue_rt_stack", "14627": "dequeue_signal", "14628": "dequeue_task", "14629": "dequeue_task_fair", "14630": "dequeue_task_idle", "14631": "dequeue_task_rt", "14632": "dequeue_top_rt_rq", "14633": "deref", "14634": "deref_fetch_param", "14635": "dereference_function_descriptor", "14636": "des_cs", "14637": "desc", "14638": "desc_node", "14639": "desc_set_defaults", "14640": "desc_size", "14641": "desc_smp_init", "14642": "desc_valid", "14643": "description", "14644": "deskew", "14645": "desktop", "14646": "dest", "14647": "dest_cfs_rq", "14648": "dest_cpu", "14649": "dest_image", "14650": "dest_pages", "14651": "destination", "14652": "destroy", "14653": "destroy_cfs_bandwidth", "14654": "destroy_context", "14655": "destroy_delayed_work_on_stack", "14656": "destroy_dwork", "14657": "destroy_header_iter", "14658": "destroy_params", "14659": "destroy_pid_namespace", "14660": "destroy_rcu_head", "14661": "destroy_rcu_head_on_stack", "14662": "destroy_root", "14663": "destroy_rt_bandwidth", "14664": "destroy_sched_domain", "14665": "destroy_sched_domains", "14666": "destroy_session", "14667": "destroy_timer_on_stack", "14668": "destroy_work", "14669": "destroy_work_on_stack", "14670": "destroy_worker", "14671": "destroy_workqueue", "14672": "detach_completion", "14673": "detach_expired_timer", "14674": "detach_group", "14675": "detach_if_pending", "14676": "detach_one_task", "14677": "detach_pid", "14678": "detach_task", "14679": "detach_tasks", "14680": "detach_timer", "14681": "detached", "14682": "detected", "14683": "dev", "14684": "dev_attr_act_mask", "14685": "dev_attr_current_device", "14686": "dev_attr_enable", "14687": "dev_attr_end_lba", "14688": "dev_attr_pid", "14689": "dev_attr_start_lba", "14690": "dev_attr_unbind_device", "14691": "dev_dbg", "14692": "dev_err", "14693": "dev_get_by_index", "14694": "dev_groups", "14695": "dev_id", "14696": "dev_name", "14697": "dev_pm_ops", "14698": "dev_put", "14699": "dev_set_uevent_suppress", "14700": "dev_t", "14701": "dev_table", "14702": "dev_to_node", "14703": "dev_to_part", "14704": "dev_to_wq", "14705": "devfn", "14706": "device", "14707": "device_attribute", "14708": "device_create_file", "14709": "device_from", "14710": "device_id", "14711": "device_initcall", "14712": "device_may_wakeup", "14713": "device_node", "14714": "device_register", "14715": "device_shutdown", "14716": "device_to", "14717": "device_unregister", "14718": "devices", "14719": "devid", "14720": "devm_region_match", "14721": "devm_region_release", "14722": "devm_release_resource", "14723": "devm_request_resource", "14724": "devm_resource_match", "14725": "devm_resource_release", "14726": "devname", "14727": "devres_add", "14728": "devres_alloc", "14729": "devres_destroy", "14730": "devres_free", "14731": "devres_release", "14732": "devtree", "14733": "df", "14734": "dfl_cftypes", "14735": "dfl_cgrp", "14736": "dfl_pwq", "14737": "dgc", "14738": "diag", "14739": "diagnostic", "14740": "dict_len", "14741": "did", "14742": "did_panic", "14743": "die_args", "14744": "die_chain", "14745": "die_val", "14746": "diff", "14747": "digest", "14748": "dir", "14749": "dir_notify_enable", "14750": "direct", "14751": "direct_max", "14752": "directory", "14753": "dirty", "14754": "dirty_background_bytes", "14755": "dirty_background_bytes_handler", "14756": "dirty_background_ratio", "14757": "dirty_background_ratio_handler", "14758": "dirty_bytes_handler", "14759": "dirty_bytes_min", "14760": "dirty_expire_interval", "14761": "dirty_paused_when", "14762": "dirty_ratio_handler", "14763": "dirty_writeback_centisecs_handler", "14764": "dirty_writeback_interval", "14765": "dirtytime_expire_interval", "14766": "dirtytime_interval_handler", "14767": "disable", "14768": "disable_TSC", "14769": "disable_branch_tracing", "14770": "disable_event", "14771": "disable_first", "14772": "disable_hardirq", "14773": "disable_hw_break", "14774": "disable_irq", "14775": "disable_irq_nosync", "14776": "disable_kprobe", "14777": "disable_kretprobe", "14778": "disable_mmiotrace", "14779": "disable_nonboot_cpus", "14780": "disable_percpu_irq", "14781": "disable_pid_allocation", "14782": "disable_reader", "14783": "disable_sched_clock_irqtime", "14784": "disable_trace_kprobe", "14785": "disable_trace_on_warning", "14786": "disabled", "14787": "disabled_wait", "14788": "disables", "14789": "disarm_kprobe", "14790": "disarm_kprobe_ftrace", "14791": "disarmed", "14792": "disk_devt", "14793": "disk_show", "14794": "displaced", "14795": "display", "14796": "dist", "14797": "distance", "14798": "distribute_cfs_runtime", "14799": "div64_u64", "14800": "div64_u64_rem", "14801": "div64_ul", "14802": "div_factor", "14803": "div_s64", "14804": "div_s64_rem", "14805": "div_u64", "14806": "div_u64_rem", "14807": "dividend", "14808": "divisor", "14809": "dj", "14810": "dl", "14811": "dl_b", "14812": "dl_bandwidth", "14813": "dl_bandwidth_enabled", "14814": "dl_boosted", "14815": "dl_bw", "14816": "dl_bw_cpus", "14817": "dl_bw_of", "14818": "dl_deadline", "14819": "dl_entity_preempt", "14820": "dl_new", "14821": "dl_nr_migratory", "14822": "dl_nr_running", "14823": "dl_overflow", "14824": "dl_param_changed", "14825": "dl_period", "14826": "dl_policy", "14827": "dl_prio", "14828": "dl_rq", "14829": "dl_runtime", "14830": "dl_runtime_lock", "14831": "dl_sched_class", "14832": "dl_se", "14833": "dl_task", "14834": "dl_throttled", "14835": "dl_time_before", "14836": "dl_yielded", "14837": "dlen", "14838": "dlo_count", "14839": "dlo_mask", "14840": "dma_chan", "14841": "dma_chan_busy", "14842": "dma_spin_lock", "14843": "dmanr", "14844": "dmesg_restrict", "14845": "dnaddr", "14846": "dname", "14847": "do", "14848": "do_acct_process", "14849": "do_adjtimex", "14850": "do_balance_runtime", "14851": "do_blk_trace_setup", "14852": "do_check", "14853": "do_coredump", "14854": "do_div", "14855": "do_each_pid_task", "14856": "do_each_pid_thread", "14857": "do_each_thread", "14858": "do_execve", "14859": "do_exit", "14860": "do_fault", "14861": "do_for_each_event_file", "14862": "do_for_each_event_file_safe", "14863": "do_for_each_ftrace_op", "14864": "do_for_each_ftrace_rec", "14865": "do_fork", "14866": "do_free_cleaned_kprobes", "14867": "do_free_init", "14868": "do_full_getstr", "14869": "do_futex", "14870": "do_getitimer", "14871": "do_gettimeofday", "14872": "do_group_exit", "14873": "do_init_module", "14874": "do_init_timer", "14875": "do_jobctl_trap", "14876": "do_kernel_restart", "14877": "do_kimage_alloc_init", "14878": "do_migrate_pages", "14879": "do_mod_ctors", "14880": "do_no_restart_syscall", "14881": "do_nocb_deferred_wakeup", "14882": "do_nothing", "14883": "do_notify_parent", "14884": "do_notify_parent_cldstop", "14885": "do_one_initcall", "14886": "do_optimize_kprobes", "14887": "do_poweroff", "14888": "do_print_state", "14889": "do_prlimit", "14890": "do_proc_dointvec", "14891": "do_proc_dointvec_conv", "14892": "do_proc_dointvec_jiffies_conv", "14893": "do_proc_dointvec_minmax_conv", "14894": "do_proc_dointvec_minmax_conv_param", "14895": "do_proc_doulongvec_minmax", "14896": "do_profile_hits", "14897": "do_raw_", "14898": "do_raw_read_lock", "14899": "do_raw_read_trylock", "14900": "do_raw_read_unlock", "14901": "do_raw_spin_lock", "14902": "do_raw_spin_lock_flags", "14903": "do_raw_spin_trylock", "14904": "do_raw_spin_unlock", "14905": "do_raw_write_lock", "14906": "do_raw_write_trylock", "14907": "do_raw_write_unlock", "14908": "do_rt_sigqueueinfo", "14909": "do_rt_tgsigqueueinfo", "14910": "do_sched_cfs_period_timer", "14911": "do_sched_cfs_slack_timer", "14912": "do_sched_rt_period_timer", "14913": "do_sched_setscheduler", "14914": "do_schedule_next_timer", "14915": "do_seccomp", "14916": "do_send_sig_info", "14917": "do_send_specific", "14918": "do_set_cpus_allowed", "14919": "do_setitimer", "14920": "do_settimeofday", "14921": "do_settimeofday64", "14922": "do_sigaction", "14923": "do_sigaltstack", "14924": "do_signal_stop", "14925": "do_sigpending", "14926": "do_sigtimedwait", "14927": "do_softirq", "14928": "do_softirq_own_stack", "14929": "do_switch", "14930": "do_sys_settimeofday", "14931": "do_sys_times", "14932": "do_sysctl", "14933": "do_sysinfo", "14934": "do_sysvsem", "14935": "do_test", "14936": "do_timer", "14937": "do_timer_last", "14938": "do_trace_rcu_torture_read", "14939": "do_trap", "14940": "do_unoptimize_kprobes", "14941": "do_usleep_range", "14942": "dodgy_cert", "14943": "does", "14944": "doing", "14945": "doit", "14946": "dolock", "14947": "domain", "14948": "domain_cost", "14949": "domain_list", "14950": "domain_num", "14951": "domainname", "14952": "domains", "14953": "doms", "14954": "doms_cur", "14955": "done", "14956": "done_acquire", "14957": "done_seqretry_irqrestore", "14958": "donetail", "14959": "dont_count", "14960": "dot", "14961": "double_lock", "14962": "double_lock_balance", "14963": "double_lock_irq", "14964": "double_raw_lock", "14965": "double_rq_lock", "14966": "double_rq_unlock", "14967": "double_unlock_balance", "14968": "down", "14969": "down_console_sem", "14970": "down_interruptible", "14971": "down_killable", "14972": "down_read", "14973": "down_read_nested", "14974": "down_read_non_owner", "14975": "down_read_trylock", "14976": "down_timeout", "14977": "down_trylock", "14978": "down_trylock_console_sem", "14979": "down_write", "14980": "down_write_nested", "14981": "down_write_trylock", "14982": "downgrade_write", "14983": "dp", "14984": "dpm_complete", "14985": "dpm_prepare", "14986": "dpm_resume", "14987": "dpm_resume_end", "14988": "dpm_resume_start", "14989": "dpm_suspend", "14990": "dpm_suspend_end", "14991": "dpm_suspend_start", "14992": "dprm", "14993": "dput", "14994": "dr", "14995": "drain_local_pages", "14996": "drain_workqueue", "14997": "drained", "14998": "driver", "14999": "drivers_dir", "15000": "drop", "15001": "drop_boost_mutex", "15002": "drop_caches_sysctl_handler", "15003": "drop_collected_mounts", "15004": "drop_precision", "15005": "dropped", "15006": "dropped_count", "15007": "dropped_events", "15008": "dropped_file", "15009": "drv", "15010": "dry_run", "15011": "dsize", "15012": "dst", "15013": "dst_capacity", "15014": "dst_cgrp", "15015": "dst_cpu", "15016": "dst_cset", "15017": "dst_csets", "15018": "dst_grpmask", "15019": "dst_load", "15020": "dst_nid", "15021": "dst_reg", "15022": "dst_root", "15023": "dst_rq", "15024": "dst_stats", "15025": "dst_task", "15026": "dtime", "15027": "dummy", "15028": "dummy_clock_read", "15029": "dummy_cmp", "15030": "dummy_irq_chip", "15031": "dummy_set_flag", "15032": "dummy_tracer_flags", "15033": "dummy_tracer_opt", "15034": "dump", "15035": "dump_cpu_task", "15036": "dump_kprobe", "15037": "dump_probe_ops", "15038": "dump_stack", "15039": "dumpable", "15040": "dumping", "15041": "dup", "15042": "dup_fd", "15043": "dup_mm", "15044": "dup_mmap", "15045": "dup_mmap_sem", "15046": "dup_task_struct", "15047": "dup_utask", "15048": "dup_xol_addr", "15049": "dup_xol_work", "15050": "duplicate_memory_bitmap", "15051": "duration", "15052": "during", "15053": "dwork", "15054": "dyn_ftrace", "15055": "dyn_ftrace_total_info", "15056": "dyn_ops", "15057": "dynamic_debug_remove", "15058": "dynamic_debug_setup", "15059": "dyntick_save_progress_counter", "15060": "dynticks", "15061": "dynticks_fqs", "15062": "dynticks_idle", "15063": "dynticks_idle_jiffies", "15064": "dynticks_idle_nesting", "15065": "dynticks_nesting", "15066": "dynticks_nmi_nesting", "15067": "dynticks_snap", "15068": "e", "15069": "e1", "15070": "e2", "15071": "e_cset_node", "15072": "e_csets", "15073": "e_entry", "15074": "e_ident", "15075": "e_shentsize", "15076": "e_shnum", "15077": "e_shoff", "15078": "e_shstrndx", "15079": "e_type", "15080": "each_symbol_in_section", "15081": "each_symbol_section", "15082": "eaddr", "15083": "earliest_dl", "15084": "early", "15085": "early_boot_irqs_disabled", "15086": "early_boot_test_call_rcu", "15087": "early_boot_test_call_rcu_bh", "15088": "early_boot_test_call_rcu_sched", "15089": "early_boot_test_counter", "15090": "early_enable_events", "15091": "early_event_add_tracer", "15092": "early_init", "15093": "early_initcall", "15094": "early_irq_init", "15095": "early_param", "15096": "echo", "15097": "ecode", "15098": "effective", "15099": "effective_cpus", "15100": "effective_flags", "15101": "effective_load", "15102": "effective_mems", "15103": "effective_prio", "15104": "egid", "15105": "egidp", "15106": "ehdr", "15107": "elapsed", "15108": "elapsed_centisecs64", "15109": "elapsed_msecs", "15110": "elapsed_msecs64", "15111": "elem", "15112": "elem_size", "15113": "element", "15114": "elements", "15115": "elemsize", "15116": "elen", "15117": "elf_check_arch", "15118": "elf_core_copy_kernel_regs", "15119": "elf_core_extra_data_size", "15120": "elf_core_extra_phdrs", "15121": "elf_core_write_extra_data", "15122": "elf_core_write_extra_phdrs", "15123": "elf_header_check", "15124": "elf_note", "15125": "elf_prstatus", "15126": "elf_type", "15127": "elfcorehdr_addr", "15128": "elfcorehdr_size", "15129": "elif", "15130": "else", "15131": "elt", "15132": "emergency_restart", "15133": "empty", "15134": "empty_buckets", "15135": "empty_exp", "15136": "empty_exp_now", "15137": "empty_hash", "15138": "empty_norm", "15139": "empty_rp", "15140": "en_flags", "15141": "enable", "15142": "enable_branch_tracing", "15143": "enable_data", "15144": "enable_event", "15145": "enable_irq", "15146": "enable_kprobe", "15147": "enable_kretprobe", "15148": "enable_mask", "15149": "enable_mmiotrace", "15150": "enable_nmi", "15151": "enable_nonboot_cpus", "15152": "enable_on_exec", "15153": "enable_percpu_irq", "15154": "enable_sched_clock_irqtime", "15155": "enable_stacktrace", "15156": "enable_trace_kprobe", "15157": "enable_trigger_data", "15158": "enabled", "15159": "enabled_functions", "15160": "enabled_kobj_attr", "15161": "enabled_perf_enter_syscalls", "15162": "enabled_perf_exit_syscalls", "15163": "enabled_show", "15164": "enabled_store", "15165": "enables", "15166": "encode_comp_t", "15167": "encode_float", "15168": "end", "15169": "end_addr", "15170": "end_code", "15171": "end_data", "15172": "end_lba", "15173": "end_of_stack", "15174": "end_p", "15175": "end_pfn", "15176": "end_swap_bio_read", "15177": "end_time", "15178": "ended", "15179": "endefcmd", "15180": "endp", "15181": "endtime", "15182": "enomem", "15183": "enomem_pwq", "15184": "enough_free_mem", "15185": "enough_swap", "15186": "enqueue", "15187": "enqueue_entity", "15188": "enqueue_entity_load_avg", "15189": "enqueue_flag", "15190": "enqueue_pushable_task", "15191": "enqueue_rt_entity", "15192": "enqueue_sleeper", "15193": "enqueue_task", "15194": "enqueue_task_fair", "15195": "enqueue_task_rt", "15196": "enqueue_top_rt_rq", "15197": "ent", "15198": "ent_cpu", "15199": "ent_size", "15200": "ent_ts", "15201": "enter", "15202": "enter_event", "15203": "enter_fields", "15204": "enter_funcs", "15205": "enter_kgdb", "15206": "enter_lazy_tlb", "15207": "enter_syscall_files", "15208": "entered_state", "15209": "entering_platform_hibernation", "15210": "entity_before", "15211": "entity_is_task", "15212": "entity_tick", "15213": "entries", "15214": "entries_bytes", "15215": "entry", "15216": "entry1", "15217": "entry2", "15218": "entry_count", "15219": "entry_handler", "15220": "entry_sidx", "15221": "entryfunc", "15222": "enum", "15223": "enum_map", "15224": "enum_replace", "15225": "enum_string", "15226": "enum_value", "15227": "env", "15228": "env_end", "15229": "env_start", "15230": "environment", "15231": "envp", "15232": "eof", "15233": "eoi", "15234": "epoll_table", "15235": "equals", "15236": "err", "15237": "err2", "15238": "err_alloc", "15239": "err_broadcast", "15240": "err_buffer", "15241": "err_cachep", "15242": "err_close", "15243": "err_code", "15244": "err_cpu", "15245": "err_desc", "15246": "err_destroy", "15247": "err_flags", "15248": "err_free", "15249": "err_free_css", "15250": "err_free_id", "15251": "err_free_info", "15252": "err_free_inst", "15253": "err_free_iter_info", "15254": "err_free_masks", "15255": "err_free_pd", "15256": "err_free_percpu_ref", "15257": "err_free_pqueue", "15258": "err_free_rq", "15259": "err_free_squeue", "15260": "err_free_wq", "15261": "err_kstat", "15262": "err_list_del", "15263": "err_no_task", "15264": "err_nomem", "15265": "err_out", "15266": "err_put", "15267": "err_readtime", "15268": "err_rel", "15269": "err_remove", "15270": "err_size", "15271": "err_suspend", "15272": "err_text", "15273": "err_undo_css", "15274": "err_unlock", "15275": "err_wakealarm", "15276": "errcnt", "15277": "errno", "15278": "error", "15279": "error_packet", "15280": "error_path", "15281": "error_put", "15282": "error_put_key", "15283": "errors", "15284": "errout", "15285": "erule", "15286": "escaped", "15287": "esize", "15288": "esterror", "15289": "etime", "15290": "etype", "15291": "euid", "15292": "euidp", "15293": "ev", "15294": "eval", "15295": "evector", "15296": "even_unformed", "15297": "event", "15298": "event_", "15299": "event_branch", "15300": "event_call", "15301": "event_class_ftrace_", "15302": "event_clear_filter", "15303": "event_clear_no_set_filter_flag", "15304": "event_command", "15305": "event_context_switch", "15306": "event_create_dir", "15307": "event_dir", "15308": "event_disable_cmd", "15309": "event_disable_count_probe_ops", "15310": "event_disable_count_trigger_ops", "15311": "event_disable_probe_ops", "15312": "event_disable_trigger_ops", "15313": "event_enable_cmd", "15314": "event_enable_count_probe", "15315": "event_enable_count_probe_ops", "15316": "event_enable_count_trigger", "15317": "event_enable_count_trigger_ops", "15318": "event_enable_file", "15319": "event_enable_free", "15320": "event_enable_func", "15321": "event_enable_get_trigger_ops", "15322": "event_enable_init", "15323": "event_enable_on_exec", "15324": "event_enable_print", "15325": "event_enable_probe", "15326": "event_enable_probe_ops", "15327": "event_enable_read", "15328": "event_enable_register_trigger", "15329": "event_enable_trigger", "15330": "event_enable_trigger_free", "15331": "event_enable_trigger_func", "15332": "event_enable_trigger_ops", "15333": "event_enable_trigger_print", "15334": "event_enable_unregister_trigger", "15335": "event_enable_write", "15336": "event_entry", "15337": "event_file", "15338": "event_file_data", "15339": "event_file_link", "15340": "event_filter", "15341": "event_filter_match", "15342": "event_filter_read", "15343": "event_filter_write", "15344": "event_funcgraph_entry", "15345": "event_funcgraph_exit", "15346": "event_function", "15347": "event_handler", "15348": "event_hash", "15349": "event_id", "15350": "event_id_read", "15351": "event_idx", "15352": "event_init", "15353": "event_len", "15354": "event_length", "15355": "event_limit", "15356": "event_list", "15357": "event_lock", "15358": "event_mapped", "15359": "event_mmiotrace_map", "15360": "event_mmiotrace_rw", "15361": "event_mutex", "15362": "event_no_set_filter_flag", "15363": "event_probe_data", "15364": "event_remove", "15365": "event_sched_in", "15366": "event_sched_out", "15367": "event_set_filter", "15368": "event_set_filtered_flag", "15369": "event_set_no_set_filter_flag", "15370": "event_source", "15371": "event_status", "15372": "event_subsystem", "15373": "event_subsystem_dir", "15374": "event_subsystems", "15375": "event_test_stuff", "15376": "event_test_thread", "15377": "event_trace_add_tracer", "15378": "event_trace_del_tracer", "15379": "event_trace_enable", "15380": "event_trace_enable_again", "15381": "event_trace_init", "15382": "event_trace_memsetup", "15383": "event_trace_self_test_with_function", "15384": "event_trace_self_tests", "15385": "event_trigger_callback", "15386": "event_trigger_data", "15387": "event_trigger_fops", "15388": "event_trigger_free", "15389": "event_trigger_init", "15390": "event_trigger_open", "15391": "event_trigger_ops", "15392": "event_trigger_print", "15393": "event_trigger_regex_open", "15394": "event_trigger_regex_release", "15395": "event_trigger_regex_write", "15396": "event_trigger_release", "15397": "event_trigger_type", "15398": "event_trigger_unlock_commit", "15399": "event_trigger_unlock_commit_regs", "15400": "event_trigger_write", "15401": "event_triggers_call", "15402": "event_triggers_post_call", "15403": "event_triggers_seq_ops", "15404": "event_type", "15405": "event_type_t", "15406": "event_unmapped", "15407": "event_wakeup", "15408": "events", "15409": "events_check_enabled", "15410": "events_nested", "15411": "every", "15412": "evict_chunk", "15413": "evt", "15414": "evtdev", "15415": "ew", "15416": "ex_vector", "15417": "example", "15418": "exception", "15419": "exception_enter", "15420": "exception_exit", "15421": "exception_level", "15422": "exception_state", "15423": "exception_table_entry", "15424": "exchange", "15425": "excl_bit", "15426": "exclude_callchain_kernel", "15427": "exclude_callchain_user", "15428": "exclusive", "15429": "exclusive_bit", "15430": "exclusive_cnt", "15431": "exclusive_console", "15432": "exclusive_event_destroy", "15433": "exclusive_event_init", "15434": "exclusive_event_installable", "15435": "exclusive_event_match", "15436": "exe", "15437": "exe_fd", "15438": "exe_file", "15439": "exec", "15440": "exec_clock", "15441": "exec_fdpic_loadmap", "15442": "exec_max", "15443": "exec_start", "15444": "exec_vm", "15445": "execdomains_proc_fops", "15446": "execdomains_proc_open", "15447": "execdomains_proc_show", "15448": "executable", "15449": "execute_in_process_context", "15450": "execute_work", "15451": "executed", "15452": "execve", "15453": "existing", "15454": "exists", "15455": "exit", "15456": "exit_aio", "15457": "exit_code", "15458": "exit_creds", "15459": "exit_err", "15460": "exit_event", "15461": "exit_files", "15462": "exit_free", "15463": "exit_free_rbtree", "15464": "exit_fs", "15465": "exit_idle", "15466": "exit_io_context", "15467": "exit_itimers", "15468": "exit_latency", "15469": "exit_loop", "15470": "exit_mmap", "15471": "exit_nofree", "15472": "exit_pi_state_list", "15473": "exit_ptrace", "15474": "exit_put", "15475": "exit_rcu", "15476": "exit_robust_list", "15477": "exit_root_id", "15478": "exit_sem", "15479": "exit_shm", "15480": "exit_signal", "15481": "exit_signals", "15482": "exit_state", "15483": "exit_syscall_files", "15484": "exit_task_namespaces", "15485": "exitcode", "15486": "exited", "15487": "exitf", "15488": "exp", "15489": "exp_sync", "15490": "exp_tasks", "15491": "expanded", "15492": "expect", "15493": "expected_type", "15494": "expedited_done", "15495": "expedited_done_exit", "15496": "expedited_done_lost", "15497": "expedited_done_tries", "15498": "expedited_normal", "15499": "expedited_start", "15500": "expedited_stoppedcpus", "15501": "expedited_tryfail", "15502": "expedited_workdone1", "15503": "expedited_workdone2", "15504": "expedited_wrap", "15505": "expediting", "15506": "expire", "15507": "expire_cfs_rq_runtime", "15508": "expire_func", "15509": "expires", "15510": "expires_limit", "15511": "expires_next", "15512": "explicit", "15513": "explored_states", "15514": "expmask", "15515": "exported", "15516": "ext", "15517": "ext3", "15518": "extable", "15519": "extent", "15520": "extents", "15521": "extern", "15522": "external", "15523": "extra", "15524": "extra1", "15525": "extra2", "15526": "extra_flags", "15527": "extra_pages", "15528": "extra_size", "15529": "f", "15530": "fE", "15531": "f_bavail", "15532": "f_blocks", "15533": "f_cred", "15534": "f_diff", "15535": "f_flags", "15536": "f_mapping", "15537": "f_mode", "15538": "f_next", "15539": "f_op", "15540": "f_path", "15541": "f_pos", "15542": "f_show", "15543": "f_start", "15544": "f_weight", "15545": "facility", "15546": "fact", "15547": "factor", "15548": "fail", "15549": "fail_address_parse", "15550": "fail_all_buf", "15551": "fail_count", "15552": "fail_data_pages", "15553": "fail_defcmd", "15554": "fail_deprobe", "15555": "fail_deprobe_wake_new", "15556": "fail_free_buffer", "15557": "fail_free_buffers", "15558": "fail_free_cpumask", "15559": "fail_free_freeinit", "15560": "fail_free_reader", "15561": "fail_help", "15562": "fail_mem", "15563": "fail_name", "15564": "fail_nocontext", "15565": "fail_nomem", "15566": "fail_nomem_anon_vma_fork", "15567": "fail_nomem_policy", "15568": "fail_nopgd", "15569": "fail_usage", "15570": "fail_user_page", "15571": "failed", "15572": "failed_css", "15573": "failure", "15574": "fair_policy", "15575": "fair_sched_class", "15576": "fake_sched_class", "15577": "fake_signal_wake_up", "15578": "fake_task", "15579": "fakewriter_tasks", "15580": "fallback_doms", "15581": "false", "15582": "family", "15583": "family_registered", "15584": "fast_no_hz", "15585": "fast_read_ctr", "15586": "fasync", "15587": "fasync_helper", "15588": "fatal_signal_pending", "15589": "fault", "15590": "fault_handler", "15591": "fault_types", "15592": "faults", "15593": "faults_cpu", "15594": "fbq_classify_group", "15595": "fbq_classify_rq", "15596": "fbq_type", "15597": "fbuffer", "15598": "fcap", "15599": "fcap_ver", "15600": "fcheck_files", "15601": "fchown16", "15602": "fcount", "15603": "fd", "15604": "fd1", "15605": "fd2", "15606": "fdget", "15607": "fdput", "15608": "fds", "15609": "feature", "15610": "feature_bitmap", "15611": "features", "15612": "fentry", "15613": "fetch", "15614": "fetch_", "15615": "fetch_bitfield_string", "15616": "fetch_bitfield_string_size", "15617": "fetch_file_offset_string", "15618": "fetch_file_offset_string_size", "15619": "fetch_file_offset_u16", "15620": "fetch_file_offset_u32", "15621": "fetch_file_offset_u64", "15622": "fetch_file_offset_u8", "15623": "fetch_func_t", "15624": "fetch_kernel_stack_address", "15625": "fetch_memory_", "15626": "fetch_or", "15627": "fetch_param", "15628": "fetch_reg_string", "15629": "fetch_reg_string_size", "15630": "fetch_retval_string", "15631": "fetch_retval_string_size", "15632": "fetch_robust_entry", "15633": "fetch_size", "15634": "fetch_stack_string", "15635": "fetch_stack_string_size", "15636": "fetch_symbol_string", "15637": "fetch_symbol_string_size", "15638": "fetch_symbol_u16", "15639": "fetch_symbol_u32", "15640": "fetch_symbol_u64", "15641": "fetch_symbol_u8", "15642": "fetch_task_cputime", "15643": "fetch_type", "15644": "fetch_user_stack_address", "15645": "ffs", "15646": "ffz", "15647": "fget", "15648": "fgraph_cpu_data", "15649": "fgraph_data", "15650": "fi_idx", "15651": "fi_ptr", "15652": "fi_size", "15653": "field", "15654": "field_cachep", "15655": "field_count", "15656": "field_is_signed", "15657": "field_len", "15658": "field_size", "15659": "fieldflags", "15660": "fields", "15661": "file", "15662": "file_cachep", "15663": "file_caps_disable", "15664": "file_caps_enabled", "15665": "file_end_write", "15666": "file_inode", "15667": "file_mode", "15668": "file_name", "15669": "file_ns_capable", "15670": "file_offset", "15671": "file_open_name", "15672": "file_open_root", "15673": "file_operations", "15674": "file_size", "15675": "file_start_write_trylock", "15676": "file_system_type", "15677": "filename", "15678": "files", "15679": "files_cachep", "15680": "files_stat", "15681": "files_struct", "15682": "filesystems", "15683": "fill_ac", "15684": "fill_rwbs", "15685": "fill_stats", "15686": "fill_stats_for_pid", "15687": "fill_stats_for_tgid", "15688": "fill_tgid_exit", "15689": "filp", "15690": "filp1", "15691": "filp2", "15692": "filp_close", "15693": "filter", "15694": "filter_add_pred", "15695": "filter_assign_type", "15696": "filter_build_regex", "15697": "filter_chain", "15698": "filter_check_discard", "15699": "filter_disable", "15700": "filter_free_subsystem_filters", "15701": "filter_free_subsystem_preds", "15702": "filter_func_t", "15703": "filter_hash", "15704": "filter_item", "15705": "filter_list", "15706": "filter_match_preds", "15707": "filter_match_preds_cb", "15708": "filter_match_preds_data", "15709": "filter_op", "15710": "filter_op_ids", "15711": "filter_ops", "15712": "filter_opstack_clear", "15713": "filter_opstack_empty", "15714": "filter_opstack_pop", "15715": "filter_opstack_push", "15716": "filter_opstack_top", "15717": "filter_parse", "15718": "filter_parse_regex", "15719": "filter_parse_state", "15720": "filter_pred", "15721": "filter_pred_", "15722": "filter_pred_16", "15723": "filter_pred_32", "15724": "filter_pred_64", "15725": "filter_pred_8", "15726": "filter_pred_fn_t", "15727": "filter_pred_none", "15728": "filter_pred_pchar", "15729": "filter_pred_s16", "15730": "filter_pred_s32", "15731": "filter_pred_s64", "15732": "filter_pred_s8", "15733": "filter_pred_string", "15734": "filter_pred_strloc", "15735": "filter_pred_u16", "15736": "filter_pred_u32", "15737": "filter_pred_u64", "15738": "filter_pred_u8", "15739": "filter_pred_walkcb_t", "15740": "filter_ret", "15741": "filter_set_pred", "15742": "filter_str", "15743": "filter_string", "15744": "filter_type", "15745": "filtered", "15746": "filtering", "15747": "filterkey", "15748": "filterp", "15749": "final_count", "15750": "final_note", "15751": "find_active_uprobe", "15752": "find_and_alloc_map", "15753": "find_busiest_group", "15754": "find_busiest_queue", "15755": "find_chunk", "15756": "find_css_set", "15757": "find_event_file", "15758": "find_event_file_link", "15759": "find_existing_css_set", "15760": "find_fetch_type", "15761": "find_first_bit", "15762": "find_first_elem", "15763": "find_first_zero_bit", "15764": "find_ge_pid", "15765": "find_get_context", "15766": "find_get_pid", "15767": "find_idlest_cpu", "15768": "find_idlest_group", "15769": "find_lively_task_by_vpid", "15770": "find_lock_lowest_rq", "15771": "find_lowest_rq", "15772": "find_matching_se", "15773": "find_module", "15774": "find_module_all", "15775": "find_module_sections", "15776": "find_new_ilb", "15777": "find_next", "15778": "find_next_bit", "15779": "find_next_iomem_res", "15780": "find_next_mod_format", "15781": "find_next_offset", "15782": "find_next_push_cpu", "15783": "find_next_zero_bit", "15784": "find_node_in_range", "15785": "find_numa_distance", "15786": "find_pcpusec", "15787": "find_pid_ns", "15788": "find_pm_qos_object_by_minor", "15789": "find_probe_event", "15790": "find_process_by_pid", "15791": "find_prog_type", "15792": "find_regset", "15793": "find_resource", "15794": "find_sec", "15795": "find_symbol", "15796": "find_symbol_arg", "15797": "find_symbol_in_section", "15798": "find_syscall_meta", "15799": "find_task_by_pid_ns", "15800": "find_task_by_vpid", "15801": "find_trace_kprobe", "15802": "find_trace_probe_file", "15803": "find_uprobe", "15804": "find_usage_backwards", "15805": "find_usage_forwards", "15806": "find_user", "15807": "find_vma", "15808": "find_vpid", "15809": "find_worker_executing_work", "15810": "finish", "15811": "finish_arch_post_lock_switch", "15812": "finish_arch_switch", "15813": "finish_lock_switch", "15814": "finish_task_switch", "15815": "finish_wait", "15816": "finished", "15817": "finished_loading", "15818": "finit_module", "15819": "fire_sched_in_preempt_notifiers", "15820": "fire_sched_out_preempt_notifiers", "15821": "first", "15822": "first_colon", "15823": "first_cpu", "15824": "first_filter", "15825": "first_flusher", "15826": "first_free_id", "15827": "first_idle_worker", "15828": "first_irq", "15829": "first_level_children_only", "15830": "first_node", "15831": "first_notrace", "15832": "first_online_node", "15833": "first_page", "15834": "first_sector", "15835": "first_space", "15836": "first_trees", "15837": "first_uprobe", "15838": "firstc", "15839": "firsterr", "15840": "firstnonnull", "15841": "firstreport", "15842": "firstsnap", "15843": "firsttime", "15844": "fix_small_imbalance", "15845": "fixed_power_int", "15846": "fixed_regs", "15847": "fixup_activate", "15848": "fixup_assert_init", "15849": "fixup_bpf_calls", "15850": "fixup_free", "15851": "fixup_init", "15852": "fixup_owner", "15853": "fk", "15854": "fl_mask", "15855": "flag", "15856": "flag_array", "15857": "flag_changed", "15858": "flags", "15859": "flags_p", "15860": "flavor_mask", "15861": "flavors", "15862": "flen", "15863": "flexible_groups", "15864": "flim", "15865": "floor", "15866": "fls64", "15867": "flush", "15868": "flush_cache_dup_mm", "15869": "flush_cache_page", "15870": "flush_cache_range", "15871": "flush_cnt", "15872": "flush_color", "15873": "flush_dcache_mmap_lock", "15874": "flush_dcache_mmap_unlock", "15875": "flush_dcache_page", "15876": "flush_delayed_work", "15877": "flush_hold_queue", "15878": "flush_icache_range", "15879": "flush_insn_slot", "15880": "flush_itimer_signals", "15881": "flush_kthread_work", "15882": "flush_kthread_worker", "15883": "flush_module_icache", "15884": "flush_scheduled_work", "15885": "flush_signal_handlers", "15886": "flush_signals", "15887": "flush_sigqueue", "15888": "flush_sigqueue_mask", "15889": "flush_smp_call_function_queue", "15890": "flush_swap_writer", "15891": "flush_tlb_mm", "15892": "flush_work", "15893": "flush_workqueue", "15894": "flush_workqueue_prep_pwqs", "15895": "flusher_overflow", "15896": "flusher_queue", "15897": "fmeter", "15898": "fmeter_getrate", "15899": "fmeter_init", "15900": "fmeter_markevent", "15901": "fmeter_update", "15902": "fmode_t", "15903": "fmp", "15904": "fmt", "15905": "fmt_cnt", "15906": "fmt_size", "15907": "fmtchar", "15908": "fmtstr", "15909": "fmttype", "15910": "fn", "15911": "fold_pred", "15912": "fold_pred_cb", "15913": "fold_pred_data", "15914": "fold_pred_tree", "15915": "fold_pred_tree_cb", "15916": "foo", "15917": "fops", "15918": "for", "15919": "for_each_active_irq", "15920": "for_each_buffer_cpu", "15921": "for_each_class", "15922": "for_each_cpu", "15923": "for_each_cpu_and", "15924": "for_each_cpu_worker_pool", "15925": "for_each_css", "15926": "for_each_domain", "15927": "for_each_e_css", "15928": "for_each_event", "15929": "for_each_irq_desc", "15930": "for_each_irq_desc_reverse", "15931": "for_each_kdbcmd", "15932": "for_each_kimage_entry", "15933": "for_each_leaf_cfs_rq", "15934": "for_each_lower_domain", "15935": "for_each_msi_entry", "15936": "for_each_node", "15937": "for_each_node_mask", "15938": "for_each_online_cpu", "15939": "for_each_online_node", "15940": "for_each_pool", "15941": "for_each_pool_worker", "15942": "for_each_populated_zone", "15943": "for_each_possible_cpu", "15944": "for_each_present_cpu", "15945": "for_each_process", "15946": "for_each_process_thread", "15947": "for_each_pwq", "15948": "for_each_rcu_flavor", "15949": "for_each_root", "15950": "for_each_rt_rq", "15951": "for_each_sched_entity", "15952": "for_each_sched_rt_entity", "15953": "for_each_sd_topology", "15954": "for_each_set_bit", "15955": "for_each_subsys", "15956": "for_each_task_context_nr", "15957": "for_each_thread", "15958": "for_each_tracing_cpu", "15959": "for_ptracer", "15960": "forbidden_pages_map", "15961": "force", "15962": "force_balance", "15963": "force_default", "15964": "force_irqthreads", "15965": "force_qs_rnp", "15966": "force_quiescent_state", "15967": "force_resume_depth", "15968": "force_sig", "15969": "force_sig_info", "15970": "force_sigsegv", "15971": "force_successful_syscall_return", "15972": "force_unoptimize_kprobe", "15973": "force_up", "15974": "force_update", "15975": "forced", "15976": "fork", "15977": "fork_idle", "15978": "fork_init", "15979": "fork_out", "15980": "forkexec_idx", "15981": "format", "15982": "format_mod_start", "15983": "format_mod_stop", "15984": "forward", "15985": "forwards", "15986": "found", "15987": "found_child", "15988": "found_it", "15989": "found_parent", "15990": "four", "15991": "fp", "15992": "fp_old", "15993": "fp_size", "15994": "fpid", "15995": "fpid_next", "15996": "fpid_show", "15997": "fpid_start", "15998": "fpid_stop", "15999": "fprm", "16000": "fprog", "16001": "fprog32", "16002": "fput", "16003": "fqs", "16004": "fqs_burst_remaining", "16005": "fqs_duration", "16006": "fqs_holdoff", "16007": "fqs_resume_time", "16008": "fqs_state", "16009": "fqs_state_in", "16010": "fqs_stutter", "16011": "fqs_task", "16012": "fqslock", "16013": "frac", "16014": "frac_bits", "16015": "frame_pointer", "16016": "free", "16017": "free_aggr_kprobe", "16018": "free_all_swap_pages", "16019": "free_arch_cleanup", "16020": "free_area", "16021": "free_argv", "16022": "free_aux", "16023": "free_basic_memory_bitmaps", "16024": "free_bitfield_fetch_param", "16025": "free_bitmap", "16026": "free_bitmaps", "16027": "free_bt", "16028": "free_buffer", "16029": "free_buffer_page", "16030": "free_cgrp_cset_links", "16031": "free_chunk", "16032": "free_copy", "16033": "free_cpumask", "16034": "free_cpumask_var", "16035": "free_cpus", "16036": "free_cs", "16037": "free_deref_fetch_param", "16038": "free_desc", "16039": "free_dlo_mask", "16040": "free_dma", "16041": "free_env", "16042": "free_event", "16043": "free_event_filter", "16044": "free_event_rcu", "16045": "free_fair_sched_group", "16046": "free_filter", "16047": "free_filter_prog", "16048": "free_fs_struct", "16049": "free_ftrace_hash", "16050": "free_ftrace_hash_rcu", "16051": "free_hash", "16052": "free_hash_entry", "16053": "free_highmem", "16054": "free_highmem_data", "16055": "free_htab", "16056": "free_image_page", "16057": "free_info", "16058": "free_insn_page", "16059": "free_instances", "16060": "free_irq", "16061": "free_key", "16062": "free_kmem_pages", "16063": "free_list", "16064": "free_list_of_pages", "16065": "free_log_buf", "16066": "free_map_info", "16067": "free_masks", "16068": "free_mem_extents", "16069": "free_mm", "16070": "free_modinfo", "16071": "free_modinfo_", "16072": "free_modprobe_argv", "16073": "free_module", "16074": "free_module_name", "16075": "free_module_param_attrs", "16076": "free_next_key", "16077": "free_notes_attrs", "16078": "free_nsproxy", "16079": "free_online", "16080": "free_out", "16081": "free_page", "16082": "free_pages", "16083": "free_pages_map", "16084": "free_percpu", "16085": "free_percpu_irq", "16086": "free_pid", "16087": "free_pid_ns", "16088": "free_pidmap", "16089": "free_prog", "16090": "free_pt", "16091": "free_resource", "16092": "free_rootdomain", "16093": "free_rp_inst", "16094": "free_rt_sched_group", "16095": "free_rto_mask", "16096": "free_sched_domain", "16097": "free_sched_group", "16098": "free_sched_group_rcu", "16099": "free_sched_groups", "16100": "free_sect_attrs", "16101": "free_sgc", "16102": "free_signal_struct", "16103": "free_snapshot", "16104": "free_span", "16105": "free_states", "16106": "free_symbol_cache", "16107": "free_syscall_print_fmt", "16108": "free_task", "16109": "free_task_struct", "16110": "free_thread_info", "16111": "free_ti", "16112": "free_trace_kprobe", "16113": "free_trace_uprobe", "16114": "free_tree_refs", "16115": "free_trial_cpuset", "16116": "free_tsk", "16117": "free_uid", "16118": "free_unbound_pwq", "16119": "free_unload", "16120": "free_used_maps", "16121": "free_user", "16122": "free_user_ns", "16123": "free_uts_ns", "16124": "free_value", "16125": "free_workqueue_attrs", "16126": "free_zone_bm_rtree", "16127": "freed", "16128": "freehigh", "16129": "freeing_list", "16130": "freeinit", "16131": "freeme", "16132": "freepages_count", "16133": "freepages_delay", "16134": "freepages_delay_total", "16135": "freepages_start", "16136": "freeram", "16137": "frees", "16138": "freeswap", "16139": "freezable", "16140": "freezable_schedule", "16141": "freezable_schedule_timeout_interruptible", "16142": "freeze", "16143": "freeze_cgroup", "16144": "freeze_kernel_threads", "16145": "freeze_processes", "16146": "freeze_task", "16147": "freeze_timeout_msecs", "16148": "freeze_workqueues_begin", "16149": "freeze_workqueues_busy", "16150": "freezer", "16151": "freezer_apply_state", "16152": "freezer_attach", "16153": "freezer_cgrp_id", "16154": "freezer_cgrp_subsys", "16155": "freezer_change_state", "16156": "freezer_count", "16157": "freezer_css_alloc", "16158": "freezer_css_free", "16159": "freezer_css_offline", "16160": "freezer_css_online", "16161": "freezer_delta", "16162": "freezer_delta_lock", "16163": "freezer_do_not_count", "16164": "freezer_fork", "16165": "freezer_lock", "16166": "freezer_mutex", "16167": "freezer_parent_freezing_read", "16168": "freezer_read", "16169": "freezer_self_freezing_read", "16170": "freezer_should_skip", "16171": "freezer_state_flags", "16172": "freezer_state_strs", "16173": "freezer_test_done", "16174": "freezer_write", "16175": "freezing", "16176": "freezing_slow_path", "16177": "freq", "16178": "freq_count_stamp", "16179": "freq_norm", "16180": "frequency", "16181": "frequency_fls", "16182": "fried_cmppid", "16183": "from", "16184": "from_ancestor_ns", "16185": "from_cgrp", "16186": "from_kgid", "16187": "from_kgid_munged", "16188": "from_kprojid", "16189": "from_kprojid_munged", "16190": "from_kuid", "16191": "from_kuid_munged", "16192": "front", "16193": "frozen", "16194": "frozen_cpus", "16195": "fs", "16196": "fs_cachep", "16197": "fs_initcall", "16198": "fs_kobj", "16199": "fs_overflowgid", "16200": "fs_overflowuid", "16201": "fs_pin", "16202": "fs_struct", "16203": "fs_table", "16204": "fs_type", "16205": "fsa", "16206": "fsgid", "16207": "fsnotify_add_mark", "16208": "fsnotify_alloc_group", "16209": "fsnotify_destroy_mark", "16210": "fsnotify_duplicate_mark", "16211": "fsnotify_find_inode_mark", "16212": "fsnotify_get_mark", "16213": "fsnotify_group", "16214": "fsnotify_init_mark", "16215": "fsnotify_mark", "16216": "fsnotify_ops", "16217": "fsnotify_put_mark", "16218": "fsuid", "16219": "ftbl", "16220": "ftest", "16221": "ftrace", "16222": "ftrace_add_profile", "16223": "ftrace_addr", "16224": "ftrace_allocate_pages", "16225": "ftrace_allocate_records", "16226": "ftrace_arch_code_modify_post_process", "16227": "ftrace_arch_code_modify_prepare", "16228": "ftrace_avail_fops", "16229": "ftrace_branch_data", "16230": "ftrace_bug", "16231": "ftrace_callsites", "16232": "ftrace_check_record", "16233": "ftrace_clear_events", "16234": "ftrace_cmp_recs", "16235": "ftrace_code_disable", "16236": "ftrace_common_fields", "16237": "ftrace_control_list", "16238": "ftrace_cpu_disabled", "16239": "ftrace_cpudump_print", "16240": "ftrace_cpudump_probe", "16241": "ftrace_create_filter_files", "16242": "ftrace_create_function_files", "16243": "ftrace_define_fields_", "16244": "ftrace_destroy_filter_files", "16245": "ftrace_destroy_function_files", "16246": "ftrace_disable_ftrace_graph_caller", "16247": "ftrace_disabled", "16248": "ftrace_dump", "16249": "ftrace_dump_buf", "16250": "ftrace_dump_mode", "16251": "ftrace_dump_on_oops", "16252": "ftrace_dump_print", "16253": "ftrace_dump_probe", "16254": "ftrace_enable_fops", "16255": "ftrace_enable_ftrace_graph_caller", "16256": "ftrace_enable_sysctl", "16257": "ftrace_enabled", "16258": "ftrace_entry", "16259": "ftrace_event_avail_open", "16260": "ftrace_event_buffer", "16261": "ftrace_event_buffer_commit", "16262": "ftrace_event_buffer_reserve", "16263": "ftrace_event_call", "16264": "ftrace_event_class", "16265": "ftrace_event_enable_disable", "16266": "ftrace_event_field", "16267": "ftrace_event_file", "16268": "ftrace_event_filter_fops", "16269": "ftrace_event_format_fops", "16270": "ftrace_event_id_fops", "16271": "ftrace_event_is_function", "16272": "ftrace_event_list", "16273": "ftrace_event_name", "16274": "ftrace_event_open", "16275": "ftrace_event_reg", "16276": "ftrace_event_release", "16277": "ftrace_event_set_open", "16278": "ftrace_event_write", "16279": "ftrace_events", "16280": "ftrace_file", "16281": "ftrace_filter", "16282": "ftrace_filter_param", "16283": "ftrace_filter_write", "16284": "ftrace_find_event", "16285": "ftrace_find_profiled_func", "16286": "ftrace_find_tramp_ops_any", "16287": "ftrace_find_tramp_ops_curr", "16288": "ftrace_find_tramp_ops_new", "16289": "ftrace_free_filter", "16290": "ftrace_func_command", "16291": "ftrace_func_entry", "16292": "ftrace_func_hash", "16293": "ftrace_func_probe", "16294": "ftrace_func_t", "16295": "ftrace_function_check_pred", "16296": "ftrace_function_filter_re", "16297": "ftrace_function_local_disable", "16298": "ftrace_function_local_disabled", "16299": "ftrace_function_local_enable", "16300": "ftrace_function_set_filter", "16301": "ftrace_function_set_filter_cb", "16302": "ftrace_function_set_regexp", "16303": "ftrace_get_addr_curr", "16304": "ftrace_get_addr_new", "16305": "ftrace_graph_active", "16306": "ftrace_graph_addr", "16307": "ftrace_graph_ent", "16308": "ftrace_graph_ent_entry", "16309": "ftrace_graph_entry", "16310": "ftrace_graph_entry_stub", "16311": "ftrace_graph_entry_test", "16312": "ftrace_graph_exit_task", "16313": "ftrace_graph_filter", "16314": "ftrace_graph_ignore_irqs", "16315": "ftrace_graph_init_idle_task", "16316": "ftrace_graph_init_task", "16317": "ftrace_graph_is_dead", "16318": "ftrace_graph_notrace", "16319": "ftrace_graph_notrace_addr", "16320": "ftrace_graph_probe_sched_switch", "16321": "ftrace_graph_ret", "16322": "ftrace_graph_ret_entry", "16323": "ftrace_graph_return", "16324": "ftrace_graph_skip_irqs", "16325": "ftrace_graph_stop", "16326": "ftrace_hash", "16327": "ftrace_hash_clear", "16328": "ftrace_hash_empty", "16329": "ftrace_hash_ipmodify_disable", "16330": "ftrace_hash_ipmodify_enable", "16331": "ftrace_hash_ipmodify_update", "16332": "ftrace_hash_move", "16333": "ftrace_hash_rec_disable", "16334": "ftrace_hash_rec_disable_modify", "16335": "ftrace_hash_rec_enable", "16336": "ftrace_hash_rec_enable_modify", "16337": "ftrace_hash_rec_update_modify", "16338": "ftrace_init_array_ops", "16339": "ftrace_init_dyn_tracefs", "16340": "ftrace_init_global_array_ops", "16341": "ftrace_init_tracefs", "16342": "ftrace_is_dead", "16343": "ftrace_iterator", "16344": "ftrace_kill", "16345": "ftrace_likely_update", "16346": "ftrace_list_end", "16347": "ftrace_location", "16348": "ftrace_location_range", "16349": "ftrace_lock", "16350": "ftrace_lookup_ip", "16351": "ftrace_make_call", "16352": "ftrace_make_nop", "16353": "ftrace_modify_all_code", "16354": "ftrace_modify_call", "16355": "ftrace_module_file_ops", "16356": "ftrace_module_init", "16357": "ftrace_nodyn_init", "16358": "ftrace_notrace", "16359": "ftrace_now", "16360": "ftrace_nr_registered_ops", "16361": "ftrace_old_addr", "16362": "ftrace_ops", "16363": "ftrace_ops_control_func", "16364": "ftrace_ops_get_func", "16365": "ftrace_ops_get_list_func", "16366": "ftrace_ops_hash", "16367": "ftrace_ops_init", "16368": "ftrace_ops_list", "16369": "ftrace_ops_list_func", "16370": "ftrace_ops_no_ops", "16371": "ftrace_ops_recurs_func", "16372": "ftrace_ops_test", "16373": "ftrace_output_call", "16374": "ftrace_output_raw", "16375": "ftrace_page", "16376": "ftrace_pages", "16377": "ftrace_pages_start", "16378": "ftrace_pid", "16379": "ftrace_pid_add", "16380": "ftrace_pid_fops", "16381": "ftrace_pid_func", "16382": "ftrace_pid_function", "16383": "ftrace_pid_open", "16384": "ftrace_pid_release", "16385": "ftrace_pid_reset", "16386": "ftrace_pid_sops", "16387": "ftrace_pid_write", "16388": "ftrace_pids", "16389": "ftrace_pop_return_trace", "16390": "ftrace_print_bitmask_seq", "16391": "ftrace_print_flags_seq", "16392": "ftrace_print_hex_seq", "16393": "ftrace_print_symbols_seq", "16394": "ftrace_print_symbols_seq_u64", "16395": "ftrace_probe_ops", "16396": "ftrace_probe_print", "16397": "ftrace_profile", "16398": "ftrace_profile_alloc", "16399": "ftrace_profile_enabled", "16400": "ftrace_profile_fops", "16401": "ftrace_profile_free_filter", "16402": "ftrace_profile_init", "16403": "ftrace_profile_init_cpu", "16404": "ftrace_profile_lock", "16405": "ftrace_profile_ops", "16406": "ftrace_profile_page", "16407": "ftrace_profile_pages_init", "16408": "ftrace_profile_reset", "16409": "ftrace_profile_set_filter", "16410": "ftrace_profile_stat", "16411": "ftrace_profile_stats", "16412": "ftrace_profile_tracefs", "16413": "ftrace_profile_write", "16414": "ftrace_raw_ftrace_test_filter", "16415": "ftrace_raw_output_prep", "16416": "ftrace_rec_count", "16417": "ftrace_rec_iter", "16418": "ftrace_rec_iter_next", "16419": "ftrace_rec_iter_record", "16420": "ftrace_rec_iter_start", "16421": "ftrace_regex_open", "16422": "ftrace_regex_release", "16423": "ftrace_replace_code", "16424": "ftrace_reset_array_ops", "16425": "ftrace_ret_stack", "16426": "ftrace_return_to_handler", "16427": "ftrace_run_modify_code", "16428": "ftrace_run_stop_machine", "16429": "ftrace_run_update_code", "16430": "ftrace_set_clr_event", "16431": "ftrace_set_early_filter", "16432": "ftrace_set_event_fops", "16433": "ftrace_set_filter", "16434": "ftrace_set_filter_ip", "16435": "ftrace_set_global_filter", "16436": "ftrace_set_notrace", "16437": "ftrace_show_header_fops", "16438": "ftrace_shutdown", "16439": "ftrace_shutdown_sysctl", "16440": "ftrace_stacktrace", "16441": "ftrace_stacktrace_count", "16442": "ftrace_stacktrace_print", "16443": "ftrace_start_up", "16444": "ftrace_startup", "16445": "ftrace_startup_all", "16446": "ftrace_startup_enable", "16447": "ftrace_startup_sysctl", "16448": "ftrace_stub", "16449": "ftrace_subsystem_dir", "16450": "ftrace_subsystem_filter_fops", "16451": "ftrace_suspend_notifier", "16452": "ftrace_suspend_notifier_call", "16453": "ftrace_swapper_pid", "16454": "ftrace_sync", "16455": "ftrace_sync_ipi", "16456": "ftrace_syscall_enter", "16457": "ftrace_syscall_exit", "16458": "ftrace_system_enable_fops", "16459": "ftrace_test_event_disable", "16460": "ftrace_test_event_filter", "16461": "ftrace_test_filter", "16462": "ftrace_test_record", "16463": "ftrace_text_reserved", "16464": "ftrace_timestamp", "16465": "ftrace_tr_enable_fops", "16466": "ftrace_trace_arrays", "16467": "ftrace_trace_function", "16468": "ftrace_trace_probe_callback", "16469": "ftrace_trace_stack", "16470": "ftrace_trace_stack_regs", "16471": "ftrace_trace_task", "16472": "ftrace_trace_userstack", "16473": "ftrace_traceoff", "16474": "ftrace_traceoff_count", "16475": "ftrace_traceoff_print", "16476": "ftrace_traceon", "16477": "ftrace_traceon_count", "16478": "ftrace_traceon_print", "16479": "ftrace_trigger_soft_disabled", "16480": "ftrace_update_code", "16481": "ftrace_update_ftrace_func", "16482": "ftrace_update_pid_func", "16483": "ftrace_update_record", "16484": "ftrace_update_time", "16485": "ftrace_update_tot_cnt", "16486": "ftrace_update_trampoline", "16487": "ftype", "16488": "full", "16489": "full_sysidle_state", "16490": "full_waiters", "16491": "full_waiters_pending", "16492": "fullstop", "16493": "fullstop_mutex", "16494": "func", "16495": "func1_name", "16496": "func2_name", "16497": "func_begin", "16498": "func_end", "16499": "func_flags", "16500": "func_full_name", "16501": "func_graph_set_flag", "16502": "func_hash", "16503": "func_id", "16504": "func_match", "16505": "func_middle", "16506": "func_name", "16507": "func_opts", "16508": "func_pos", "16509": "func_prolog_dec", "16510": "func_prolog_preempt_disable", "16511": "func_ptr_is_kernel_text", "16512": "func_set_flag", "16513": "func_stack", "16514": "func_stack_trace", "16515": "funcgraph", "16516": "funcgraph_entry", "16517": "funcgraph_exit", "16518": "funcs", "16519": "function", "16520": "function_enabled", "16521": "function_filter_data", "16522": "function_graph", "16523": "function_name", "16524": "function_profile_call", "16525": "function_stack_trace_call", "16526": "function_stat_cmp", "16527": "function_stat_headers", "16528": "function_stat_next", "16529": "function_stat_show", "16530": "function_stat_start", "16531": "function_stats", "16532": "function_test_events_call", "16533": "function_trace", "16534": "function_trace_call", "16535": "function_trace_init", "16536": "function_trace_op", "16537": "function_trace_reset", "16538": "function_trace_start", "16539": "functions", "16540": "futex", "16541": "futex_cmpxchg_enabled", "16542": "futex_hashsize", "16543": "futex_offset", "16544": "futex_queues", "16545": "futex_uaddr", "16546": "fwork", "16547": "g", "16548": "gattr", "16549": "gc", "16550": "gc_flags", "16551": "gc_list", "16552": "gc_lock", "16553": "gcflags", "16554": "gcov_action", "16555": "gcov_ctr_info", "16556": "gcov_data_fops", "16557": "gcov_enable_events", "16558": "gcov_event", "16559": "gcov_events_enabled", "16560": "gcov_fn_info", "16561": "gcov_fs_init", "16562": "gcov_info", "16563": "gcov_info_add", "16564": "gcov_info_dup", "16565": "gcov_info_filename", "16566": "gcov_info_free", "16567": "gcov_info_head", "16568": "gcov_info_is_compatible", "16569": "gcov_info_link", "16570": "gcov_info_next", "16571": "gcov_info_reset", "16572": "gcov_info_unlink", "16573": "gcov_info_version", "16574": "gcov_init", "16575": "gcov_iter_free", "16576": "gcov_iter_get_info", "16577": "gcov_iter_new", "16578": "gcov_iter_next", "16579": "gcov_iter_start", "16580": "gcov_iter_write", "16581": "gcov_iterator", "16582": "gcov_link", "16583": "gcov_lock", "16584": "gcov_module_notifier", "16585": "gcov_nb", "16586": "gcov_node", "16587": "gcov_persist", "16588": "gcov_persist_setup", "16589": "gcov_reset_fops", "16590": "gcov_seq_next", "16591": "gcov_seq_open", "16592": "gcov_seq_ops", "16593": "gcov_seq_release", "16594": "gcov_seq_show", "16595": "gcov_seq_start", "16596": "gcov_seq_stop", "16597": "gcov_seq_write", "16598": "gcov_type", "16599": "gcov_version", "16600": "gdb_bpt_instr", "16601": "gdb_cmd_binwrite", "16602": "gdb_cmd_break", "16603": "gdb_cmd_detachkill", "16604": "gdb_cmd_exception_pass", "16605": "gdb_cmd_getregs", "16606": "gdb_cmd_memread", "16607": "gdb_cmd_memwrite", "16608": "gdb_cmd_query", "16609": "gdb_cmd_reboot", "16610": "gdb_cmd_reg_get", "16611": "gdb_cmd_reg_set", "16612": "gdb_cmd_setregs", "16613": "gdb_cmd_status", "16614": "gdb_cmd_task", "16615": "gdb_cmd_thread", "16616": "gdb_get_regs_helper", "16617": "gdb_hex_reg_helper", "16618": "gdb_regs", "16619": "gdb_regs_to_pt_regs", "16620": "gdb_serial_stub", "16621": "gdbmsgbuf", "16622": "gdbstub_exit", "16623": "gdbstub_msg_write", "16624": "gdbstub_prev_in_buf_pos", "16625": "gdbstub_read_wait", "16626": "gdbstub_state", "16627": "gdbstub_use_prev_in_buf", "16628": "gen", "16629": "generate_sched_domains", "16630": "generated", "16631": "generation", "16632": "generic_exec_single", "16633": "generic_file_llseek", "16634": "generic_handle_irq", "16635": "generic_handle_irq_desc", "16636": "generic_ptrace_peekdata", "16637": "generic_ptrace_pokedata", "16638": "generic_smp_call_function_single_interrupt", "16639": "genl_family", "16640": "genl_info", "16641": "genl_ops", "16642": "genl_register_family_with_ops", "16643": "genlhdr", "16644": "genlmsg_data", "16645": "genlmsg_end", "16646": "genlmsg_new", "16647": "genlmsg_put", "16648": "genlmsg_put_reply", "16649": "genlmsg_reply", "16650": "genlmsg_unicast", "16651": "genlmsghdr", "16652": "get", "16653": "get_accumulated_info", "16654": "get_avenrun", "16655": "get_buffer", "16656": "get_cached_msi_msg", "16657": "get_callchain_buffers", "16658": "get_callchain_entry", "16659": "get_char_func", "16660": "get_child_by_name", "16661": "get_clock_desc", "16662": "get_cmdline", "16663": "get_compat_itimerspec", "16664": "get_compat_itimerval", "16665": "get_compat_sigevent", "16666": "get_count_order", "16667": "get_cpu", "16668": "get_cpu_idle_time_us", "16669": "get_cpu_iowait_time_us", "16670": "get_cpu_itimer", "16671": "get_cpu_usage", "16672": "get_cpu_var", "16673": "get_cred", "16674": "get_css_set", "16675": "get_ctx", "16676": "get_current_user", "16677": "get_dap_lock", "16678": "get_device", "16679": "get_dumpable", "16680": "get_fetch_size_function", "16681": "get_fields", "16682": "get_file", "16683": "get_file_raw_ptr", "16684": "get_file_rcu", "16685": "get_fn_info", "16686": "get_fn_size", "16687": "get_fs", "16688": "get_fs_pwd", "16689": "get_fs_type", "16690": "get_func", "16691": "get_func_proto", "16692": "get_gendisk", "16693": "get_group", "16694": "get_group_info", "16695": "get_highmem_buffer", "16696": "get_highmem_page_buffer", "16697": "get_hwirq", "16698": "get_image_page", "16699": "get_incorrect_percent", "16700": "get_info_index", "16701": "get_iowait_load", "16702": "get_irq_regs", "16703": "get_jiffies_64", "16704": "get_kprobe", "16705": "get_ksymbol", "16706": "get_ksymbol_core", "16707": "get_ksymbol_mod", "16708": "get_ktype", "16709": "get_last_crashkernel", "16710": "get_link_target", "16711": "get_loc_data", "16712": "get_lock_depth", "16713": "get_lock_parent", "16714": "get_lock_stats", "16715": "get_mm_exe_file", "16716": "get_mm_hiwater_rss", "16717": "get_mm_hiwater_vm", "16718": "get_mm_rss", "16719": "get_modinfo", "16720": "get_monotonic_boottime", "16721": "get_monotonic_coarse", "16722": "get_monotonic_coarse64", "16723": "get_net", "16724": "get_next_timer_interrupt", "16725": "get_node_by_name", "16726": "get_node_info", "16727": "get_nohz_timer_target", "16728": "get_nr_threads", "16729": "get_nsproxy", "16730": "get_num_physpages", "16731": "get_numa_group", "16732": "get_offset", "16733": "get_online_cpus", "16734": "get_optimized_kprobe", "16735": "get_option", "16736": "get_order", "16737": "get_packet", "16738": "get_page", "16739": "get_parent", "16740": "get_parent_ip", "16741": "get_pdu_int", "16742": "get_pdu_remap", "16743": "get_pid", "16744": "get_pid_ns", "16745": "get_pid_task", "16746": "get_posix_clock", "16747": "get_pred_parent", "16748": "get_proc_ns", "16749": "get_prog", "16750": "get_pwq", "16751": "get_random_bytes", "16752": "get_random_int", "16753": "get_recursion_context", "16754": "get_return_for_leaf", "16755": "get_rloc_data", "16756": "get_rloc_len", "16757": "get_rloc_offs", "16758": "get_robust_list", "16759": "get_rq_runnable_load", "16760": "get_rr_interval", "16761": "get_rr_interval_fair", "16762": "get_rr_interval_idle", "16763": "get_rr_interval_rt", "16764": "get_safe_page", "16765": "get_saved_cmdlines", "16766": "get_sd_balance_interval", "16767": "get_sd_load_idx", "16768": "get_seccomp_filter", "16769": "get_seconds", "16770": "get_signal", "16771": "get_softlockup_thresh", "16772": "get_state", "16773": "get_state_synchronize_rcu", "16774": "get_swap_page_of_type", "16775": "get_swap_reader", "16776": "get_swap_writer", "16777": "get_symbol_offset", "16778": "get_symbol_pos", "16779": "get_sysctl", "16780": "get_sysctl_timer_migration", "16781": "get_taint", "16782": "get_task_comm", "16783": "get_task_cred", "16784": "get_task_io_context", "16785": "get_task_mm", "16786": "get_task_pid", "16787": "get_task_struct", "16788": "get_time", "16789": "get_timestamp", "16790": "get_trampoline_vaddr", "16791": "get_tree", "16792": "get_trigger_ops", "16793": "get_type", "16794": "get_uid", "16795": "get_unaligned_be16", "16796": "get_unaligned_be32", "16797": "get_unbound_pool", "16798": "get_unmapped_area", "16799": "get_update_sysctl_factor", "16800": "get_usage_char", "16801": "get_usage_chars", "16802": "get_user", "16803": "get_user_cpu_mask", "16804": "get_user_ns", "16805": "get_user_pages", "16806": "get_user_stack_nth", "16807": "get_utask", "16808": "get_uts_ns", "16809": "get_value", "16810": "get_vfs_caps_from_disk", "16811": "get_vtime_delta", "16812": "get_wchan", "16813": "get_work_color", "16814": "get_work_pool", "16815": "get_work_pool_id", "16816": "get_work_pwq", "16817": "get_xol_area", "16818": "get_zeroed_page", "16819": "getboottime64", "16820": "getcpu", "16821": "getcpu_cache", "16822": "getegid", "16823": "getegid16", "16824": "geteuid", "16825": "geteuid16", "16826": "getgid", "16827": "getgid16", "16828": "getgroups16", "16829": "gethostname", "16830": "getitimer", "16831": "getname", "16832": "getname_kernel", "16833": "getnstime_raw_and_real", "16834": "getnstimeofday", "16835": "getnstimeofday64", "16836": "getpgid", "16837": "getpgrp", "16838": "getpid", "16839": "getppid", "16840": "getpriority", "16841": "getrawmonotonic", "16842": "getrawmonotonic64", "16843": "getresgid", "16844": "getresgid16", "16845": "getresuid16", "16846": "getrlimit", "16847": "getrusage", "16848": "getsid", "16849": "getthread", "16850": "gettid", "16851": "gettime", "16852": "gettimeofday", "16853": "getuid", "16854": "getuid16", "16855": "gf", "16856": "gfp", "16857": "gfp_extra_flags", "16858": "gfp_flags", "16859": "gfp_mask", "16860": "gfp_t", "16861": "gfpflags", "16862": "gid", "16863": "gid_eq", "16864": "gid_gt", "16865": "gid_gte", "16866": "gid_lt", "16867": "gid_lte", "16868": "gid_m_show", "16869": "gid_m_start", "16870": "gid_map", "16871": "gid_t", "16872": "gid_valid", "16873": "gidsetsize", "16874": "glob", "16875": "global", "16876": "global_list", "16877": "global_ops", "16878": "global_page_state", "16879": "global_rt_period", "16880": "global_rt_runtime", "16881": "global_trace", "16882": "go", "16883": "going", "16884": "goner", "16885": "good_mm", "16886": "good_one", "16887": "good_sigevent", "16888": "got_name", "16889": "got_nohz_idle_kick", "16890": "gotcbs", "16891": "goto", "16892": "gp_activity", "16893": "gp_cond", "16894": "gp_cond1", "16895": "gp_duration", "16896": "gp_exp", "16897": "gp_exp1", "16898": "gp_flags", "16899": "gp_init_delay", "16900": "gp_kthread", "16901": "gp_max", "16902": "gp_normal", "16903": "gp_normal1", "16904": "gp_snap", "16905": "gp_start", "16906": "gp_state", "16907": "gp_sync", "16908": "gp_sync1", "16909": "gp_tasks", "16910": "gp_wq", "16911": "gpa", "16912": "gpage", "16913": "gpkt", "16914": "gpl_compatible", "16915": "gpl_crcs", "16916": "gpl_future_crcs", "16917": "gpl_future_syms", "16918": "gpl_only", "16919": "gpl_syms", "16920": "gplok", "16921": "gpmax", "16922": "gpnum", "16923": "gps", "16924": "gpwrap", "16925": "gran", "16926": "graph", "16927": "graph_array", "16928": "graph_depth_fops", "16929": "graph_depth_read", "16930": "graph_depth_write", "16931": "graph_ent", "16932": "graph_functions", "16933": "graph_hang_thresh", "16934": "graph_init_task", "16935": "graph_lock", "16936": "graph_ops", "16937": "graph_ret", "16938": "graph_trace", "16939": "graph_trace_close", "16940": "graph_trace_entry_event", "16941": "graph_trace_init", "16942": "graph_trace_open", "16943": "graph_trace_reset", "16944": "graph_trace_ret_event", "16945": "graph_trace_update_thresh", "16946": "graph_unlock", "16947": "greater", "16948": "greatest", "16949": "grep", "16950": "group", "16951": "group_balance_cpu", "16952": "group_can_go_on", "16953": "group_capacity", "16954": "group_cfs_rq", "16955": "group_classify", "16956": "group_dead", "16957": "group_entry", "16958": "group_error", "16959": "group_event", "16960": "group_exit", "16961": "group_exit_code", "16962": "group_faults", "16963": "group_faults_cpu", "16964": "group_first_cpu", "16965": "group_flags", "16966": "group_has_capacity", "16967": "group_imbalance", "16968": "group_imbalanced", "16969": "group_info", "16970": "group_is_overloaded", "16971": "group_leader", "16972": "group_load", "16973": "group_lock", "16974": "group_no_capacity", "16975": "group_node", "16976": "group_other", "16977": "group_overloaded", "16978": "group_path", "16979": "group_rq", "16980": "group_rt_rq", "16981": "group_rwsem", "16982": "group_sched_in", "16983": "group_sched_out", "16984": "group_send_sig_info", "16985": "group_stop", "16986": "group_stop_count", "16987": "group_type", "16988": "group_usage", "16989": "group_weight", "16990": "groupimp", "16991": "grouplist", "16992": "groupmask", "16993": "groups", "16994": "groups16_from_user", "16995": "groups16_to_user", "16996": "groups_alloc", "16997": "groupweight", "16998": "grow_tree_refs", "16999": "grp", "17000": "grphi", "17001": "grplo", "17002": "grpmask", "17003": "grpnum", "17004": "gstop", "17005": "gstop_done", "17006": "gtime", "17007": "guarantee_online_cpus", "17008": "guarantee_online_mems", "17009": "h", "17010": "h_free", "17011": "h_load", "17012": "h_load_next", "17013": "h_nr_running", "17014": "h_offset", "17015": "h_used", "17016": "halt_fast_timekeeper", "17017": "handle", "17018": "handle_bad_irq", "17019": "handle_ctrl_cmd", "17020": "handle_edge_eoi_irq", "17021": "handle_edge_irq", "17022": "handle_error", "17023": "handle_event", "17024": "handle_fasteoi_irq", "17025": "handle_futex_death", "17026": "handle_irq", "17027": "handle_irq_event", "17028": "handle_irq_event_percpu", "17029": "handle_level_irq", "17030": "handle_nested_irq", "17031": "handle_one", "17032": "handle_op", "17033": "handle_path", "17034": "handle_percpu_devid_irq", "17035": "handle_percpu_irq", "17036": "handle_poweroff", "17037": "handle_simple_irq", "17038": "handle_singlestep", "17039": "handle_swbp", "17040": "handle_trampoline", "17041": "handle_unknown", "17042": "handle_uretprobe_chain", "17043": "handled", "17044": "handler", "17045": "handler_chain", "17046": "handler_data", "17047": "handler_errors", "17048": "handler_fn", "17049": "handler_name", "17050": "happens", "17051": "hard", "17052": "hard_irq_disable", "17053": "hard_watchdog_warn", "17054": "hardirq", "17055": "hardirq_context", "17056": "hardirq_count", "17057": "hardirq_disable_event", "17058": "hardirq_disable_ip", "17059": "hardirq_enable_event", "17060": "hardirq_enable_ip", "17061": "hardirq_offset", "17062": "hardirqs_enabled", "17063": "hardirqs_off", "17064": "hardirqs_off_events", "17065": "hardirqs_on_events", "17066": "hardlockup_panic", "17067": "hardpps", "17068": "hardpps_update_phase", "17069": "hardsoft_irq", "17070": "has", "17071": "has_aux", "17072": "has_branch_stack", "17073": "has_child_subreaper", "17074": "has_cntl", "17075": "has_crcs", "17076": "has_free_capacity", "17077": "has_in_flight", "17078": "has_ns_capability", "17079": "has_ns_capability_noaudit", "17080": "has_pending", "17081": "has_pending_signals", "17082": "has_perm", "17083": "has_pushable_tasks", "17084": "hash", "17085": "hash32_ptr", "17086": "hash_32", "17087": "hash_add", "17088": "hash_algo_name", "17089": "hash_contains_ip", "17090": "hash_del", "17091": "hash_entry", "17092": "hash_for_each", "17093": "hash_for_each_possible", "17094": "hash_head", "17095": "hash_init", "17096": "hash_lock", "17097": "hash_long", "17098": "hash_node", "17099": "hash_ptr", "17100": "hashent", "17101": "have", "17102": "have_lost", "17103": "have_rcu_nocb_mask", "17104": "hc", "17105": "hcpu", "17106": "hd", "17107": "hd_struct", "17108": "hdr", "17109": "head", "17110": "head_bit", "17111": "head_page", "17112": "head_page_with_bit", "17113": "head_ptr", "17114": "header", "17115": "header_iter", "17116": "header_size", "17117": "height", "17118": "held_lock", "17119": "held_locks", "17120": "help", "17121": "help_msg", "17122": "helper_lock", "17123": "helper_unlock", "17124": "hentry", "17125": "here", "17126": "hex", "17127": "hex_asc", "17128": "hex_asc_hi", "17129": "hex_asc_lo", "17130": "hex_byte_pack", "17131": "hex_to_bin", "17132": "hhd", "17133": "hi1", "17134": "hi2", "17135": "hi_shift", "17136": "hib_bio_read_page", "17137": "hib_bio_write_page", "17138": "hib_resume_bdev", "17139": "hib_wait_on_bio_chain", "17140": "hibernate", "17141": "hibernate_image_size_init", "17142": "hibernate_preallocate_memory", "17143": "hibernate_reserved_size_init", "17144": "hibernation_available", "17145": "hibernation_debug_sleep", "17146": "hibernation_mode", "17147": "hibernation_modes", "17148": "hibernation_ops", "17149": "hibernation_platform_enter", "17150": "hibernation_restore", "17151": "hibernation_set_ops", "17152": "hibernation_snapshot", "17153": "hibernation_test", "17154": "hidden", "17155": "hidx", "17156": "hierarchical_quota", "17157": "hierarchy_id", "17158": "high", "17159": "high2lowgid", "17160": "high2lowuid", "17161": "highbp", "17162": "highest_flag_domain", "17163": "highest_prio", "17164": "highmem_pbe", "17165": "highmem_pblist", "17166": "highpri", "17167": "highres", "17168": "hit", "17169": "hiter", "17170": "hits", "17171": "hiwater_rss", "17172": "hiwater_vm", "17173": "hlist", "17174": "hlist_add_head", "17175": "hlist_add_head_rcu", "17176": "hlist_del", "17177": "hlist_del_init", "17178": "hlist_del_rcu", "17179": "hlist_empty", "17180": "hlist_entry", "17181": "hlist_entry_safe", "17182": "hlist_first_rcu", "17183": "hlist_for_each_entry", "17184": "hlist_for_each_entry_rcu", "17185": "hlist_for_each_entry_rcu_notrace", "17186": "hlist_for_each_entry_safe", "17187": "hlist_head", "17188": "hlist_lock", "17189": "hlist_next_rcu", "17190": "hlist_node", "17191": "hlist_replace_rcu", "17192": "hlock", "17193": "hlock_class", "17194": "hlock_curr", "17195": "hnd", "17196": "hold_ctx", "17197": "hold_module_trace_bprintk_format", "17198": "holders_dir", "17199": "holding", "17200": "holdtime", "17201": "holdtime_stamp", "17202": "hole", "17203": "hole_end", "17204": "hole_start", "17205": "home_node", "17206": "hook", "17207": "host_data", "17208": "hostname", "17209": "hotcpu_notifier", "17210": "hotplug_cfd", "17211": "hotplug_cfd_notifier", "17212": "hotplug_cpu__broadcast_tick_pull", "17213": "hotplug_hrtick", "17214": "hotplug_threads", "17215": "hotplug_update_tasks", "17216": "hotplug_update_tasks_legacy", "17217": "hour", "17218": "housekeeping_affine", "17219": "housekeeping_mask", "17220": "how", "17221": "hr1", "17222": "hr2", "17223": "hr_delta", "17224": "hres_active", "17225": "hrint", "17226": "hrtick", "17227": "hrtick_clear", "17228": "hrtick_csd", "17229": "hrtick_csd_pending", "17230": "hrtick_enabled", "17231": "hrtick_start", "17232": "hrtick_start_fair", "17233": "hrtick_timer", "17234": "hrtick_update", "17235": "hrtimer", "17236": "hrtimer_active", "17237": "hrtimer_add_expires", "17238": "hrtimer_add_expires_ns", "17239": "hrtimer_bases", "17240": "hrtimer_callback_running", "17241": "hrtimer_cancel", "17242": "hrtimer_cb_get_time", "17243": "hrtimer_cpu_base", "17244": "hrtimer_expires_remaining", "17245": "hrtimer_forward", "17246": "hrtimer_forward_now", "17247": "hrtimer_get_expires", "17248": "hrtimer_get_next_event", "17249": "hrtimer_get_remaining", "17250": "hrtimer_get_res", "17251": "hrtimer_get_softexpires", "17252": "hrtimer_init", "17253": "hrtimer_interrupt", "17254": "hrtimer_interrupts", "17255": "hrtimer_interrupts_saved", "17256": "hrtimer_is_hres_active", "17257": "hrtimer_is_queued", "17258": "hrtimer_mode", "17259": "hrtimer_nanosleep", "17260": "hrtimer_nanosleep_restart", "17261": "hrtimer_restart", "17262": "hrtimer_run_pending", "17263": "hrtimer_run_queues", "17264": "hrtimer_set_expires", "17265": "hrtimer_sleeper", "17266": "hrtimer_start", "17267": "hrtimer_start_expires", "17268": "hrtimer_try_to_cancel", "17269": "hrtimers_resume", "17270": "hsd", "17271": "ht", "17272": "htab", "17273": "htab_elem", "17274": "htab_map_alloc", "17275": "htab_map_delete_elem", "17276": "htab_map_free", "17277": "htab_map_get_next_key", "17278": "htab_map_hash", "17279": "htab_map_lookup_elem", "17280": "htab_map_update_elem", "17281": "htab_ops", "17282": "htab_type", "17283": "hugepages_treat_as_movable", "17284": "hugetlb_mempolicy_sysctl_handler", "17285": "hugetlb_overcommit_handler", "17286": "hugetlb_sysctl_handler", "17287": "hung_task_init", "17288": "hung_task_panic", "17289": "hung_task_panic_setup", "17290": "hung_task_timeout_max", "17291": "hw", "17292": "hw_breakpoint", "17293": "hw_irq", "17294": "hw_nmi_get_sample_period", "17295": "hw_perf_event", "17296": "hwc", "17297": "hweight64", "17298": "hwirq", "17299": "hwirq_base", "17300": "hwirq_max", "17301": "i", "17302": "i_cdev", "17303": "i_fsnotify_marks", "17304": "i_generation", "17305": "i_gid", "17306": "i_ino", "17307": "i_mapping", "17308": "i_mmap", "17309": "i_mmap_lock_read", "17310": "i_mmap_lock_write", "17311": "i_mmap_unlock_read", "17312": "i_mmap_unlock_write", "17313": "i_mmap_writable", "17314": "i_mode", "17315": "i_mutex", "17316": "i_next", "17317": "i_private", "17318": "i_rdev", "17319": "i_sb", "17320": "i_size_read", "17321": "i_uid", "17322": "i_writecount", "17323": "ia_gid", "17324": "ia_uid", "17325": "ia_valid", "17326": "iattr", "17327": "id", "17328": "id2", "17329": "id_buf", "17330": "id_header_size", "17331": "id_type", "17332": "ida", "17333": "ida_destroy", "17334": "ida_init", "17335": "ida_simple_get", "17336": "ida_simple_remove", "17337": "idata", "17338": "ideal_runtime", "17339": "ident", "17340": "idle", "17341": "idle_active", "17342": "idle_balance", "17343": "idle_calls", "17344": "idle_cpu", "17345": "idle_cpus", "17346": "idle_cpus_mask", "17347": "idle_enter_fair", "17348": "idle_entrytime", "17349": "idle_exit_fair", "17350": "idle_exittime", "17351": "idle_expires", "17352": "idle_get_state", "17353": "idle_idx", "17354": "idle_init", "17355": "idle_jiffies", "17356": "idle_list", "17357": "idle_ret_stack", "17358": "idle_sched_class", "17359": "idle_set_state", "17360": "idle_sleeps", "17361": "idle_sleeptime", "17362": "idle_stamp", "17363": "idle_state", "17364": "idle_task", "17365": "idle_task_exit", "17366": "idle_thread_get", "17367": "idle_thread_set_boot_cpu", "17368": "idle_threads", "17369": "idle_threads_init", "17370": "idle_time_ns", "17371": "idle_timer", "17372": "idle_waketime", "17373": "idle_worker_timeout", "17374": "idlest", "17375": "idr", "17376": "idr_alloc", "17377": "idr_alloc_cyclic", "17378": "idr_destroy", "17379": "idr_find", "17380": "idr_get_next", "17381": "idr_init", "17382": "idr_preload", "17383": "idr_preload_end", "17384": "idr_remove", "17385": "idr_replace", "17386": "idx", "17387": "idx1", "17388": "idx2", "17389": "if", "17390": "ignore", "17391": "ignore_errors", "17392": "ignore_loglevel", "17393": "ignore_signals", "17394": "ignore_state", "17395": "ignored", "17396": "ignoring", "17397": "ignoring_children", "17398": "igrab", "17399": "ikconfig_cleanup", "17400": "ikconfig_file_ops", "17401": "ikconfig_init", "17402": "ikconfig_read_current", "17403": "ilb", "17404": "ilb_cpu", "17405": "illegal", "17406": "ilog2", "17407": "image", "17408": "image_loader_data", "17409": "image_pages", "17410": "image_ptr", "17411": "image_size", "17412": "imb", "17413": "imbalance", "17414": "imbalance_pct", "17415": "imbn", "17416": "iminor", "17417": "imm", "17418": "imm64", "17419": "immediately", "17420": "imp", "17421": "implementation", "17422": "in", "17423": "in_atomic", "17424": "in_atomic_preempt_off", "17425": "in_dbg_master", "17426": "in_egroup_p", "17427": "in_exec", "17428": "in_group_p", "17429": "in_hardirq", "17430": "in_hash", "17431": "in_interrupt", "17432": "in_iowait", "17433": "in_irq", "17434": "in_lock_functions", "17435": "in_mask", "17436": "in_new", "17437": "in_nmi", "17438": "in_ns", "17439": "in_old", "17440": "in_other_hash", "17441": "in_quote", "17442": "in_serving_softirq", "17443": "in_softirq", "17444": "in_string", "17445": "in_suspend", "17446": "in_syscall", "17447": "inactive", "17448": "inblock", "17449": "inc", "17450": "inc_chains", "17451": "inc_mm_counter", "17452": "inc_rt_group", "17453": "inc_rt_migration", "17454": "inc_rt_prio", "17455": "inc_rt_prio_smp", "17456": "inc_rt_tasks", "17457": "incby", "17458": "include", "17459": "incorrect", "17460": "incr", "17461": "incr_error", "17462": "increment", "17463": "increment_cpu_stall_ticks", "17464": "increment_wakelocks_number", "17465": "ind", "17466": "ind_page", "17467": "index", "17468": "individual", "17469": "infix", "17470": "infix_advance", "17471": "infix_get_op", "17472": "infix_next", "17473": "infix_peek", "17474": "infix_string", "17475": "inflight", "17476": "info", "17477": "info1", "17478": "info2", "17479": "info_test", "17480": "information", "17481": "infosec", "17482": "ing", "17483": "inh", "17484": "inherit", "17485": "inherit_stat", "17486": "inheritable", "17487": "inidle", "17488": "init", "17489": "init_aggr_kprobe", "17490": "init_and_link_css", "17491": "init_annotated_branch_stats", "17492": "init_blk_tracer", "17493": "init_branch_tracer", "17494": "init_callback_list", "17495": "init_cfs_bandwidth", "17496": "init_cfs_rq", "17497": "init_cfs_rq_runtime", "17498": "init_cgroup_housekeeping", "17499": "init_cgroup_root", "17500": "init_completion", "17501": "init_cpu_online", "17502": "init_cpu_possible", "17503": "init_cpu_present", "17504": "init_cred", "17505": "init_css_set", "17506": "init_default_callback_list", "17507": "init_defrootdomain", "17508": "init_dl_bandwidth", "17509": "init_dl_bw", "17510": "init_dl_rq", "17511": "init_dl_task_timer", "17512": "init_fs_pin", "17513": "init_ftrace_syscalls", "17514": "init_graph_trace", "17515": "init_graph_tracefs", "17516": "init_groups", "17517": "init_header", "17518": "init_header_complete", "17519": "init_hrtick", "17520": "init_idle", "17521": "init_idle_bootup_task", "17522": "init_idle_pids", "17523": "init_idle_preempt_count", "17524": "init_ipc_ns", "17525": "init_irq_default_affinity", "17526": "init_irq_proc", "17527": "init_irq_work", "17528": "init_irqsoff_tracer", "17529": "init_kernel_text", "17530": "init_kprobe_trace", "17531": "init_kprobes", "17532": "init_kstat_irqs", "17533": "init_llist_head", "17534": "init_lstats_procfs", "17535": "init_mm", "17536": "init_mmio_trace", "17537": "init_module", "17538": "init_name", "17539": "init_net", "17540": "init_new_context", "17541": "init_nocb_callback_list", "17542": "init_node", "17543": "init_nsproxy", "17544": "init_pid_ns", "17545": "init_pids", "17546": "init_posix_timers", "17547": "init_pred", "17548": "init_pwq", "17549": "init_rcu_head", "17550": "init_rcu_head_on_stack", "17551": "init_reg_state", "17552": "init_ret", "17553": "init_ro_size", "17554": "init_rootdomain", "17555": "init_rq_hrtick", "17556": "init_rt_bandwidth", "17557": "init_rt_rq", "17558": "init_rttest", "17559": "init_rwsem", "17560": "init_sched_dl_class", "17561": "init_sched_domains", "17562": "init_sched_fair_class", "17563": "init_sched_groups_capacity", "17564": "init_sched_rt_class", "17565": "init_sd_lb_stats", "17566": "init_sigpending", "17567": "init_size", "17568": "init_srcu_struct", "17569": "init_srcu_struct_fields", "17570": "init_stat_file", "17571": "init_struct_pid", "17572": "init_syscall_trace", "17573": "init_task", "17574": "init_task_pid", "17575": "init_task_preempt_count", "17576": "init_task_runnable_average", "17577": "init_task_work", "17578": "init_test_thread", "17579": "init_text_size", "17580": "init_tg_cfs_entry", "17581": "init_tg_rt_entry", "17582": "init_timer_cpu", "17583": "init_timer_cpus", "17584": "init_timer_deferrable", "17585": "init_timer_key", "17586": "init_timer_on_stack_key", "17587": "init_timer_stats", "17588": "init_timers", "17589": "init_trace_uprobe_filter", "17590": "init_uprobe_trace", "17591": "init_uprobes", "17592": "init_user_ns", "17593": "init_uts_ns", "17594": "init_utsname", "17595": "init_wait", "17596": "init_waitqueue_head", "17597": "init_wakeup_tracer", "17598": "init_worker_pool", "17599": "init_workqueues", "17600": "initcall_debug", "17601": "initcnt", "17602": "initial", "17603": "initial_count", "17604": "initialiser", "17605": "initialization", "17606": "initrd_buf", "17607": "initrd_buf_len", "17608": "initrd_fd", "17609": "initsize", "17610": "initstate", "17611": "inlin", "17612": "inline", "17613": "ino", "17614": "ino_generation", "17615": "inode", "17616": "inode_f", "17617": "inode_mark", "17618": "inode_permission", "17619": "inodes_stat", "17620": "inotify_table", "17621": "inprogress", "17622": "input", "17623": "insert_hash", "17624": "insert_kthread_work", "17625": "insert_resource", "17626": "insert_resource_conflict", "17627": "insert_resource_expand_to_fit", "17628": "insert_stat", "17629": "insert_uprobe", "17630": "insert_work", "17631": "insert_wq_barrier", "17632": "insn", "17633": "insn_buf", "17634": "insn_cnt", "17635": "insn_idx", "17636": "insn_processed", "17637": "insn_size", "17638": "insn_stack", "17639": "insn_state", "17640": "insns", "17641": "insnsi", "17642": "inst", "17643": "install", "17644": "install_breakpoint", "17645": "install_special_mapping", "17646": "install_thread_keyring_to_cred", "17647": "installed", "17648": "instance", "17649": "instances", "17650": "instruction_pointer", "17651": "instruction_pointer_set", "17652": "int", "17653": "int64_t", "17654": "int_sqrt", "17655": "int_to_threadref", "17656": "inter", "17657": "internal", "17658": "internal_add_timer", "17659": "internal_trace_puts", "17660": "interp_fdpic_loadmap", "17661": "interrupt", "17662": "interrupted", "17663": "interrupts", "17664": "interval", "17665": "into", "17666": "inum", "17667": "inuse", "17668": "inv_weight", "17669": "invalid", "17670": "invalidating", "17671": "invoke_rcu_callbacks", "17672": "invoke_rcu_callbacks_kthread", "17673": "invoke_rcu_core", "17674": "invoke_softirq", "17675": "io_context", "17676": "io_delay_type", "17677": "io_num", "17678": "io_schedule", "17679": "io_schedule_timeout", "17680": "io_start", "17681": "ioac", "17682": "ioc", "17683": "ioc_task_link", "17684": "ioctl", "17685": "ioctx_lock", "17686": "ioctx_table", "17687": "iomem_is_exclusive", "17688": "iomem_map_sanity_check", "17689": "iomem_open", "17690": "iomem_resource", "17691": "ioport_resource", "17692": "ioports_open", "17693": "ioprio", "17694": "ioprio_valid", "17695": "ioread32be", "17696": "ioresources_init", "17697": "iov_base", "17698": "iov_len", "17699": "iovec", "17700": "iowait", "17701": "iowait_count", "17702": "iowait_sleeptime", "17703": "iowait_sum", "17704": "iowrite32be", "17705": "ip", "17706": "ipc", "17707": "ipc_ns", "17708": "ipcp", "17709": "iput", "17710": "irq", "17711": "irq_ack", "17712": "irq_affinity_hint_proc_fops", "17713": "irq_affinity_hint_proc_open", "17714": "irq_affinity_hint_proc_show", "17715": "irq_affinity_list_proc_fops", "17716": "irq_affinity_list_proc_open", "17717": "irq_affinity_list_proc_show", "17718": "irq_affinity_list_proc_write", "17719": "irq_affinity_notify", "17720": "irq_affinity_proc_fops", "17721": "irq_affinity_proc_open", "17722": "irq_affinity_proc_show", "17723": "irq_affinity_proc_write", "17724": "irq_alloc_descs", "17725": "irq_alloc_domain_generic_chips", "17726": "irq_alloc_generic_chip", "17727": "irq_alloc_hwirqs", "17728": "irq_base", "17729": "irq_bus_lock", "17730": "irq_bus_sync_unlock", "17731": "irq_calc_mask", "17732": "irq_can_move_pcntxt", "17733": "irq_can_set_affinity", "17734": "irq_capable", "17735": "irq_check_poll", "17736": "irq_chip", "17737": "irq_chip_ack_parent", "17738": "irq_chip_compose_msi_msg", "17739": "irq_chip_eoi_parent", "17740": "irq_chip_generic", "17741": "irq_chip_mask_parent", "17742": "irq_chip_retrigger_hierarchy", "17743": "irq_chip_set_affinity_parent", "17744": "irq_chip_set_wake_parent", "17745": "irq_chip_type", "17746": "irq_chip_unmask_parent", "17747": "irq_chip_write_msi_msg", "17748": "irq_clear_status_flags", "17749": "irq_cnt", "17750": "irq_compose_msi_msg", "17751": "irq_context", "17752": "irq_copy_pending", "17753": "irq_count", "17754": "irq_cpu_offline", "17755": "irq_cpu_online", "17756": "irq_cpu_stop_queue_work", "17757": "irq_cpu_stop_queue_work_info", "17758": "irq_cpustat_t", "17759": "irq_create_direct_mapping", "17760": "irq_create_mapping", "17761": "irq_data", "17762": "irq_data_get_chip_type", "17763": "irq_data_get_irq_chip", "17764": "irq_data_get_irq_chip_data", "17765": "irq_data_to_desc", "17766": "irq_default_affinity", "17767": "irq_default_domain", "17768": "irq_default_primary_handler", "17769": "irq_delta", "17770": "irq_depth", "17771": "irq_desc", "17772": "irq_desc_get_chip", "17773": "irq_desc_get_irq_data", "17774": "irq_desc_lock_class", "17775": "irq_desc_tree", "17776": "irq_disable", "17777": "irq_do_set_affinity", "17778": "irq_domain", "17779": "irq_domain_activate_irq", "17780": "irq_domain_add_hierarchy", "17781": "irq_domain_add_simple", "17782": "irq_domain_alloc_descs", "17783": "irq_domain_alloc_irqs_parent", "17784": "irq_domain_associate", "17785": "irq_domain_associate_many", "17786": "irq_domain_check_hierarchy", "17787": "irq_domain_chip_generic", "17788": "irq_domain_deactivate_irq", "17789": "irq_domain_disassociate", "17790": "irq_domain_free_irqs", "17791": "irq_domain_free_irqs_top", "17792": "irq_domain_list", "17793": "irq_domain_mapping", "17794": "irq_domain_mutex", "17795": "irq_domain_ops", "17796": "irq_domain_remove", "17797": "irq_domain_set_hwirq_and_chip", "17798": "irq_domain_xlate_onetwocell", "17799": "irq_enable", "17800": "irq_enter", "17801": "irq_eoi", "17802": "irq_events", "17803": "irq_exit", "17804": "irq_expand_nr_irqs", "17805": "irq_finalize_oneshot", "17806": "irq_find_host", "17807": "irq_find_mapping", "17808": "irq_flags", "17809": "irq_flags_to_clear", "17810": "irq_flags_to_set", "17811": "irq_flow_handler_t", "17812": "irq_forced_thread_fn", "17813": "irq_found", "17814": "irq_free_desc", "17815": "irq_free_descs", "17816": "irq_free_hwirqs", "17817": "irq_gc_ack_clr_bit", "17818": "irq_gc_ack_set_bit", "17819": "irq_gc_eoi", "17820": "irq_gc_flags", "17821": "irq_gc_get_irq_data", "17822": "irq_gc_init_mask_cache", "17823": "irq_gc_init_ops", "17824": "irq_gc_lock", "17825": "irq_gc_mask_clr_bit", "17826": "irq_gc_mask_disable_reg", "17827": "irq_gc_mask_disable_reg_and_ack", "17828": "irq_gc_mask_set_bit", "17829": "irq_gc_noop", "17830": "irq_gc_resume", "17831": "irq_gc_set_wake", "17832": "irq_gc_shutdown", "17833": "irq_gc_suspend", "17834": "irq_gc_syscore_ops", "17835": "irq_gc_unlock", "17836": "irq_gc_unmask_enable_reg", "17837": "irq_generic_chip_ops", "17838": "irq_get_desc_buslock", "17839": "irq_get_desc_lock", "17840": "irq_get_domain_generic_chip", "17841": "irq_get_irq_data", "17842": "irq_get_irqchip_state", "17843": "irq_get_msi_desc", "17844": "irq_get_next_irq", "17845": "irq_get_pending", "17846": "irq_handler_t", "17847": "irq_hw_number_t", "17848": "irq_init_desc", "17849": "irq_init_generic_chip", "17850": "irq_insert_desc", "17851": "irq_lock_sparse", "17852": "irq_map_generic_chip", "17853": "irq_mark_irq", "17854": "irq_mask", "17855": "irq_mask_ack", "17856": "irq_may_run", "17857": "irq_modify_status", "17858": "irq_move_irq", "17859": "irq_move_masked_irq", "17860": "irq_move_pending", "17861": "irq_nested_lock_class", "17862": "irq_nested_primary_handler", "17863": "irq_node_proc_fops", "17864": "irq_node_proc_open", "17865": "irq_node_proc_show", "17866": "irq_offset", "17867": "irq_percpu_disable", "17868": "irq_percpu_enable", "17869": "irq_pm_check_wakeup", "17870": "irq_pm_init_ops", "17871": "irq_pm_install_action", "17872": "irq_pm_remove_action", "17873": "irq_pm_shutdown", "17874": "irq_pm_syscore_ops", "17875": "irq_pm_syscore_resume", "17876": "irq_poll_active", "17877": "irq_poll_cpu", "17878": "irq_print_chip", "17879": "irq_put_desc_busunlock", "17880": "irq_put_desc_unlock", "17881": "irq_readl_be", "17882": "irq_reg_readl", "17883": "irq_reg_writel", "17884": "irq_release_resources", "17885": "irq_remove_generic_chip", "17886": "irq_request_resources", "17887": "irq_resume", "17888": "irq_retrigger", "17889": "irq_select_affinity", "17890": "irq_select_affinity_usr", "17891": "irq_set_affinity", "17892": "irq_set_affinity_hint", "17893": "irq_set_affinity_locked", "17894": "irq_set_affinity_notifier", "17895": "irq_set_chip", "17896": "irq_set_chip_and_handler", "17897": "irq_set_chip_and_handler_name", "17898": "irq_set_chip_data", "17899": "irq_set_default_host", "17900": "irq_set_handler", "17901": "irq_set_handler_data", "17902": "irq_set_irq_type", "17903": "irq_set_irq_wake", "17904": "irq_set_irqchip_state", "17905": "irq_set_lockdep_class", "17906": "irq_set_msi_desc", "17907": "irq_set_msi_desc_off", "17908": "irq_set_parent", "17909": "irq_set_percpu_devid", "17910": "irq_set_percpu_devid_flags", "17911": "irq_set_status_flags", "17912": "irq_set_thread_affinity", "17913": "irq_set_type", "17914": "irq_set_wake", "17915": "irq_settings_can_autoenable", "17916": "irq_settings_can_move_pcntxt", "17917": "irq_settings_can_probe", "17918": "irq_settings_can_request", "17919": "irq_settings_can_thread", "17920": "irq_settings_clr_and_set", "17921": "irq_settings_clr_level", "17922": "irq_settings_clr_noprobe", "17923": "irq_settings_clr_norequest", "17924": "irq_settings_clr_nothread", "17925": "irq_settings_get_trigger_mask", "17926": "irq_settings_has_no_balance_set", "17927": "irq_settings_is_level", "17928": "irq_settings_is_nested_thread", "17929": "irq_settings_is_per_cpu", "17930": "irq_settings_is_per_cpu_devid", "17931": "irq_settings_is_polled", "17932": "irq_settings_set_level", "17933": "irq_settings_set_no_balancing", "17934": "irq_settings_set_noprobe", "17935": "irq_settings_set_norequest", "17936": "irq_settings_set_nothread", "17937": "irq_settings_set_per_cpu", "17938": "irq_settings_set_trigger_mask", "17939": "irq_setup_alt_chip", "17940": "irq_setup_forced_threading", "17941": "irq_setup_generic_chip", "17942": "irq_shutdown", "17943": "irq_spurious_proc_fops", "17944": "irq_spurious_proc_open", "17945": "irq_spurious_proc_show", "17946": "irq_start_time", "17947": "irq_startup", "17948": "irq_stat", "17949": "irq_state_clr_disabled", "17950": "irq_state_clr_masked", "17951": "irq_state_set_disabled", "17952": "irq_state_set_masked", "17953": "irq_suspend", "17954": "irq_thread", "17955": "irq_thread_check_affinity", "17956": "irq_thread_dtor", "17957": "irq_thread_fn", "17958": "irq_time", "17959": "irq_time_read", "17960": "irq_time_seq", "17961": "irq_time_write_begin", "17962": "irq_time_write_end", "17963": "irq_to_desc", "17964": "irq_trace", "17965": "irq_unlock_sparse", "17966": "irq_unmask", "17967": "irq_wait_for_interrupt", "17968": "irq_wait_for_poll", "17969": "irq_wake_thread", "17970": "irq_was_disabled", "17971": "irq_work", "17972": "irq_work_claim", "17973": "irq_work_needs_cpu", "17974": "irq_work_queue", "17975": "irq_work_queue_on", "17976": "irq_work_run", "17977": "irq_work_run_list", "17978": "irq_work_sync", "17979": "irq_work_tick", "17980": "irq_write_msi_msg", "17981": "irq_writel_be", "17982": "irqaction", "17983": "irqchip_irq_state", "17984": "irqclass", "17985": "irqd_can_balance", "17986": "irqd_can_move_in_process_context", "17987": "irqd_clear", "17988": "irqd_clr_move_pending", "17989": "irqd_get_trigger_type", "17990": "irqd_has_set", "17991": "irqd_irq_disabled", "17992": "irqd_irq_inprogress", "17993": "irqd_irq_masked", "17994": "irqd_is_level_type", "17995": "irqd_is_setaffinity_pending", "17996": "irqd_is_wakeup_armed", "17997": "irqd_is_wakeup_set", "17998": "irqd_set", "17999": "irqd_set_move_pending", "18000": "irqfixup", "18001": "irqfixup_setup", "18002": "irqflags", "18003": "irqpoll_setup", "18004": "irqreader", "18005": "irqreturn_t", "18006": "irqs", "18007": "irqs_disabled", "18008": "irqs_disabled_flags", "18009": "irqs_off", "18010": "irqs_per_chip", "18011": "irqs_resend", "18012": "irqs_sum", "18013": "irqs_unhandled", "18014": "irqsafe", "18015": "irqsoff_busy", "18016": "irqsoff_flag_changed", "18017": "irqsoff_function_set", "18018": "irqsoff_graph_entry", "18019": "irqsoff_graph_return", "18020": "irqsoff_print_header", "18021": "irqsoff_print_line", "18022": "irqsoff_set_flag", "18023": "irqsoff_trace", "18024": "irqsoff_trace_close", "18025": "irqsoff_trace_open", "18026": "irqsoff_tracer", "18027": "irqsoff_tracer_call", "18028": "irqsoff_tracer_init", "18029": "irqsoff_tracer_reset", "18030": "irqsoff_tracer_start", "18031": "irqsoff_tracer_stop", "18032": "irqtime_account_hi_update", "18033": "irqtime_account_idle_ticks", "18034": "irqtime_account_irq", "18035": "irqtime_account_process_tick", "18036": "irqtime_account_si_update", "18037": "is", "18038": "is_active", "18039": "is_add", "18040": "is_affinity_mask_valid", "18041": "is_ancestor", "18042": "is_arm_mapping_symbol", "18043": "is_audit_feature_set", "18044": "is_cgroup_event", "18045": "is_chained", "18046": "is_chained_work", "18047": "is_child_reaper", "18048": "is_child_subreaper", "18049": "is_compat_task", "18050": "is_core_symbol", "18051": "is_cpu_exclusive", "18052": "is_cpuset_online", "18053": "is_cpuset_subset", "18054": "is_current_pgrp_orphaned", "18055": "is_delete", "18056": "is_dwork", "18057": "is_early", "18058": "is_empty", "18059": "is_error_status", "18060": "is_event_hup", "18061": "is_exported", "18062": "is_ftrace_trampoline", "18063": "is_function_field", "18064": "is_global", "18065": "is_global_init", "18066": "is_good_name", "18067": "is_gpl", "18068": "is_graph", "18069": "is_hardlockup", "18070": "is_highmem", "18071": "is_idle_task", "18072": "is_kernel_event", "18073": "is_kernel_inittext", "18074": "is_kprobe", "18075": "is_ksym_addr", "18076": "is_kthread_should_stop", "18077": "is_last", "18078": "is_legal_op", "18079": "is_mem_exclusive", "18080": "is_mem_hardwall", "18081": "is_memory_migrate", "18082": "is_module_address", "18083": "is_module_percpu_address", "18084": "is_module_text_address", "18085": "is_op_char", "18086": "is_orphaned_child", "18087": "is_power_of_2", "18088": "is_precedence_lower", "18089": "is_ready", "18090": "is_register", "18091": "is_ret", "18092": "is_ret_probe", "18093": "is_return", "18094": "is_same_group", "18095": "is_sampling_event", "18096": "is_sched_load_balance", "18097": "is_si_special", "18098": "is_signed", "18099": "is_signed_type", "18100": "is_singleblock", "18101": "is_singlestep", "18102": "is_softlockup", "18103": "is_software_event", "18104": "is_spread_page", "18105": "is_spread_slab", "18106": "is_state_visited", "18107": "is_string_field", "18108": "is_swbp", "18109": "is_swbp_insn", "18110": "is_sysemu_singlestep", "18111": "is_sysidle_rcu_state", "18112": "is_thread_group", "18113": "is_tracing_stopped", "18114": "is_trap_at_addr", "18115": "is_trap_insn", "18116": "is_valid", "18117": "is_valid_access", "18118": "is_vm_hugetlb_page", "18119": "isadd", "18120": "isalnum", "18121": "isalpha", "18122": "isdigit", "18123": "isidle", "18124": "ismax", "18125": "isolated_cpu_setup", "18126": "isprint", "18127": "ispunct", "18128": "isspace", "18129": "istate", "18130": "it", "18131": "it_clock", "18132": "it_id", "18133": "it_id_set", "18134": "it_interval", "18135": "it_lock", "18136": "it_new", "18137": "it_old", "18138": "it_overrun", "18139": "it_overrun_last", "18140": "it_pid", "18141": "it_real_fn", "18142": "it_real_incr", "18143": "it_requeue_pending", "18144": "it_sigev_notify", "18145": "it_signal", "18146": "it_value", "18147": "item", "18148": "items", "18149": "iter", "18150": "iter_end", "18151": "iter_event", "18152": "iter_flags", "18153": "iter_start", "18154": "iter_stop", "18155": "iterate_chain_key", "18156": "iterate_mounts", "18157": "iterk", "18158": "iters", "18159": "itimer_delete", "18160": "itimer_get_remtime", "18161": "itimerspec", "18162": "itimerval", "18163": "itype", "18164": "iv", "18165": "ixol", "18166": "j", "18167": "j1", "18168": "jea", "18169": "jeb", "18170": "jf_left", "18171": "jhash", "18172": "jhash_1word", "18173": "jif", "18174": "jiffies", "18175": "jiffies_64", "18176": "jiffies_64_to_clock_t", "18177": "jiffies_force_qs", "18178": "jiffies_lock", "18179": "jiffies_resched", "18180": "jiffies_snap", "18181": "jiffies_stall", "18182": "jiffies_till_first_fqs", "18183": "jiffies_till_next_fqs", "18184": "jiffies_till_sched_qs", "18185": "jiffies_to_AHZ", "18186": "jiffies_to_clock_t", "18187": "jiffies_to_cputime", "18188": "jiffies_to_msecs", "18189": "jiffies_to_nsecs", "18190": "jiffies_to_timespec", "18191": "jiffies_to_timeval", "18192": "jiffies_to_usecs", "18193": "jit_keyring", "18194": "jitcnt", "18195": "jited", "18196": "jitter", "18197": "jlm", "18198": "jobctl", "18199": "join", "18200": "jp", "18201": "jph_val", "18202": "jprobe", "18203": "jps", "18204": "js", "18205": "jump_entries", "18206": "jump_entry", "18207": "jump_label_add_module", "18208": "jump_label_apply_nops", "18209": "jump_label_cmp", "18210": "jump_label_del_module", "18211": "jump_label_get_branch_default", "18212": "jump_label_get_entries", "18213": "jump_label_init", "18214": "jump_label_init_module", "18215": "jump_label_invalidate_module_init", "18216": "jump_label_lock", "18217": "jump_label_module_nb", "18218": "jump_label_module_notify", "18219": "jump_label_mutex", "18220": "jump_label_rate_limit", "18221": "jump_label_sort_entries", "18222": "jump_label_t", "18223": "jump_label_text_reserved", "18224": "jump_label_type", "18225": "jump_label_unlock", "18226": "jump_label_update", "18227": "jump_label_update_timeout", "18228": "jumptable", "18229": "just", "18230": "k", "18231": "k_clock", "18232": "k_getrusage", "18233": "k_itimer", "18234": "k_itimer_rcu_free", "18235": "k_sigaction", "18236": "ka", "18237": "ka_restorer", "18238": "kaddr", "18239": "kallsym_iter", "18240": "kallsyms_addresses", "18241": "kallsyms_expand_symbol", "18242": "kallsyms_get_symbol_type", "18243": "kallsyms_init", "18244": "kallsyms_lookup", "18245": "kallsyms_lookup_name", "18246": "kallsyms_lookup_size_offset", "18247": "kallsyms_markers", "18248": "kallsyms_names", "18249": "kallsyms_num_syms", "18250": "kallsyms_on_each_symbol", "18251": "kallsyms_op", "18252": "kallsyms_open", "18253": "kallsyms_operations", "18254": "kallsyms_symbol_next", "18255": "kallsyms_token_index", "18256": "kallsyms_token_table", "18257": "kasprintf", "18258": "kauditd_send_multicast_skb", "18259": "kauditd_send_skb", "18260": "kauditd_task", "18261": "kauditd_thread", "18262": "kauditd_wait", "18263": "kbasename", "18264": "kbuf", "18265": "kc", "18266": "kcalloc", "18267": "kcmp", "18268": "kcmp_cookies_init", "18269": "kcmp_lock", "18270": "kcmp_ptr", "18271": "kcmp_type", "18272": "kcmp_unlock", "18273": "kcpustat", "18274": "kcpustat_this_cpu", "18275": "kdata", "18276": "kdb", "18277": "kdb_base_commands", "18278": "kdb_bc", "18279": "kdb_bfd_vma_fmt", "18280": "kdb_bfd_vma_fmt0", "18281": "kdb_bp", "18282": "kdb_bp_install", "18283": "kdb_bp_remove", "18284": "kdb_bp_t", "18285": "kdb_bptype", "18286": "kdb_breakpoints", "18287": "kdb_bt", "18288": "kdb_bt1", "18289": "kdb_check_flags", "18290": "kdb_check_regs", "18291": "kdb_cmd_enabled", "18292": "kdb_cmd_init", "18293": "kdb_cmdflags_t", "18294": "kdb_cmds", "18295": "kdb_command_extend", "18296": "kdb_commands", "18297": "kdb_common_deinit_state", "18298": "kdb_common_init_state", "18299": "kdb_continue_catastrophic", "18300": "kdb_cpu", "18301": "kdb_curr_task", "18302": "kdb_current", "18303": "kdb_current_regs", "18304": "kdb_current_task", "18305": "kdb_dbtrap_t", "18306": "kdb_defcmd", "18307": "kdb_defcmd2", "18308": "kdb_diemsg", "18309": "kdb_disable_nmi", "18310": "kdb_dmesg", "18311": "kdb_do_each_thread", "18312": "kdb_dumpregs", "18313": "kdb_ef", "18314": "kdb_env", "18315": "kdb_event", "18316": "kdb_exec_defcmd", "18317": "kdb_flags", "18318": "kdb_flags_index", "18319": "kdb_flags_stack", "18320": "kdb_ftdump", "18321": "kdb_func_t", "18322": "kdb_gdb_state_pass", "18323": "kdb_getarea", "18324": "kdb_getarea_size", "18325": "kdb_getphys", "18326": "kdb_getphysword", "18327": "kdb_getstr", "18328": "kdb_getword", "18329": "kdb_gmtime", "18330": "kdb_go", "18331": "kdb_go_count", "18332": "kdb_grep_help", "18333": "kdb_grep_leading", "18334": "kdb_grep_string", "18335": "kdb_grep_trailing", "18336": "kdb_grepping_flag", "18337": "kdb_handle_bp", "18338": "kdb_help", "18339": "kdb_init", "18340": "kdb_init_lvl", "18341": "kdb_initbptab", "18342": "kdb_initial_cpu", "18343": "kdb_inittab", "18344": "kdb_kgdb", "18345": "kdb_kill", "18346": "kdb_ks", "18347": "kdb_local", "18348": "kdb_lsmod", "18349": "kdb_machreg_fmt", "18350": "kdb_machreg_fmt0", "18351": "kdb_main_loop", "18352": "kdb_max_commands", "18353": "kdb_md", "18354": "kdb_md_line", "18355": "kdb_mdr", "18356": "kdb_mm", "18357": "kdb_name_table", "18358": "kdb_nextline", "18359": "kdb_parse", "18360": "kdb_parsebp", "18361": "kdb_per_cpu", "18362": "kdb_pid", "18363": "kdb_poll_funcs", "18364": "kdb_poll_idx", "18365": "kdb_prev_t", "18366": "kdb_print_nameval", "18367": "kdb_printbp", "18368": "kdb_printf", "18369": "kdb_private", "18370": "kdb_process_cpu", "18371": "kdb_prompt_str", "18372": "kdb_ps", "18373": "kdb_ps1", "18374": "kdb_ps_suppressed", "18375": "kdb_putarea_size", "18376": "kdb_putword", "18377": "kdb_rd", "18378": "kdb_reason_t", "18379": "kdb_reboot", "18380": "kdb_register", "18381": "kdb_register_flags", "18382": "kdb_restore_flags", "18383": "kdb_rm", "18384": "kdb_rwtypes", "18385": "kdb_save_flags", "18386": "kdb_send_sig_info", "18387": "kdb_set", "18388": "kdb_set_current_task", "18389": "kdb_setsinglestep", "18390": "kdb_show_stack", "18391": "kdb_sr", "18392": "kdb_ss", "18393": "kdb_state", "18394": "kdb_strdup", "18395": "kdb_stub", "18396": "kdb_summary", "18397": "kdb_symbol_print", "18398": "kdb_symtab_t", "18399": "kdb_sysinfo", "18400": "kdb_task_has_cpu", "18401": "kdb_task_state", "18402": "kdb_task_state_char", "18403": "kdb_task_state_string", "18404": "kdb_tm", "18405": "kdb_trap_printk", "18406": "kdb_unregister", "18407": "kdb_walk_kallsyms", "18408": "kdb_walk_kallsyms_iter", "18409": "kdb_while_each_thread", "18410": "kdbgetaddrarg", "18411": "kdbgetenv", "18412": "kdbgetintenv", "18413": "kdbgetsymval", "18414": "kdbgetu64arg", "18415": "kdbgetularg", "18416": "kdbnearsym", "18417": "kdbnearsym_cleanup", "18418": "kdbtab_t", "18419": "kdebug", "18420": "keep_bootcon", "18421": "keep_regs", "18422": "keep_working", "18423": "kegid", "18424": "kern_ipc_perm", "18425": "kern_path", "18426": "kern_path_locked", "18427": "kern_table", "18428": "kern_version", "18429": "kernel", "18430": "kernel_add_sysfs_param", "18431": "kernel_attr_group", "18432": "kernel_buf", "18433": "kernel_buf_len", "18434": "kernel_cap_t", "18435": "kernel_config_data", "18436": "kernel_config_data_size", "18437": "kernel_cpustat", "18438": "kernel_fd", "18439": "kernel_halt", "18440": "kernel_kexec", "18441": "kernel_kobj", "18442": "kernel_param", "18443": "kernel_param_ops", "18444": "kernel_power_off", "18445": "kernel_read", "18446": "kernel_restart", "18447": "kernel_restart_prepare", "18448": "kernel_shutdown_prepare", "18449": "kernel_sigaction", "18450": "kernel_stack", "18451": "kernel_stack_pointer", "18452": "kernel_stat", "18453": "kernel_symbol", "18454": "kernel_text_address", "18455": "kernel_thread", "18456": "kernel_tp", "18457": "kernel_write", "18458": "kernfs_activate", "18459": "kernfs_break_active_protection", "18460": "kernfs_create_dir", "18461": "kernfs_create_root", "18462": "kernfs_destroy_root", "18463": "kernfs_get", "18464": "kernfs_kill_sb", "18465": "kernfs_mount", "18466": "kernfs_node", "18467": "kernfs_node_from_dentry", "18468": "kernfs_notify", "18469": "kernfs_open_file", "18470": "kernfs_ops", "18471": "kernfs_pin_sb", "18472": "kernfs_put", "18473": "kernfs_remove", "18474": "kernfs_remove_by_name", "18475": "kernfs_rename", "18476": "kernfs_root", "18477": "kernfs_root_from_sb", "18478": "kernfs_setattr", "18479": "kernfs_syscall_ops", "18480": "kernfs_type", "18481": "kernfs_unbreak_active_protection", "18482": "keuid", "18483": "kevent", "18484": "kexec_add_buffer", "18485": "kexec_apply_relocations", "18486": "kexec_buf", "18487": "kexec_calculate_store_digests", "18488": "kexec_crash_image", "18489": "kexec_crash_loaded", "18490": "kexec_crash_loaded_show", "18491": "kexec_crash_size_show", "18492": "kexec_crash_size_store", "18493": "kexec_flush_icache_page", "18494": "kexec_image", "18495": "kexec_in_progress", "18496": "kexec_load", "18497": "kexec_load_disabled", "18498": "kexec_load_purgatory", "18499": "kexec_loaded", "18500": "kexec_loaded_show", "18501": "kexec_mutex", "18502": "kexec_on_panic", "18503": "kexec_purgatory", "18504": "kexec_purgatory_find_symbol", "18505": "kexec_purgatory_get_set_symbol", "18506": "kexec_purgatory_get_symbol_addr", "18507": "kexec_purgatory_size", "18508": "kexec_segment", "18509": "kexec_sha_region", "18510": "kexec_should_crash", "18511": "key", "18512": "key2", "18513": "key_create_or_update", "18514": "key_fsgid_changed", "18515": "key_fsuid_changed", "18516": "key_get", "18517": "key_id", "18518": "key_id_len", "18519": "key_len", "18520": "key_name", "18521": "key_put", "18522": "key_ref_put", "18523": "key_ref_t", "18524": "key_ref_to_ptr", "18525": "key_serial", "18526": "key_size", "18527": "key_sysctls", "18528": "key_type_asymmetric", "18529": "keyring_alloc", "18530": "keyring_search", "18531": "kf_ops", "18532": "kf_root", "18533": "kfree", "18534": "kfree_call_rcu", "18535": "kfree_rcu", "18536": "kfree_skb", "18537": "kgdb", "18538": "kgdb_active", "18539": "kgdb_arch_exit", "18540": "kgdb_arch_handle_exception", "18541": "kgdb_arch_init", "18542": "kgdb_arch_late", "18543": "kgdb_arch_pc", "18544": "kgdb_arch_remove_breakpoint", "18545": "kgdb_arch_set_breakpoint", "18546": "kgdb_arch_set_pc", "18547": "kgdb_bkpt", "18548": "kgdb_break", "18549": "kgdb_break_asap", "18550": "kgdb_break_tasklet_var", "18551": "kgdb_breakpoint", "18552": "kgdb_con_registered", "18553": "kgdb_connected", "18554": "kgdb_console_write", "18555": "kgdb_contthread", "18556": "kgdb_cpu_doing_single_step", "18557": "kgdb_cpu_enter", "18558": "kgdb_do_roundup", "18559": "kgdb_ebin2mem", "18560": "kgdb_exit", "18561": "kgdb_flush_swbreak_addr", "18562": "kgdb_handle_exception", "18563": "kgdb_hex2long", "18564": "kgdb_hex2mem", "18565": "kgdb_info", "18566": "kgdb_initial_breakpoint", "18567": "kgdb_io", "18568": "kgdb_io_module_registered", "18569": "kgdb_io_ready", "18570": "kgdb_mem2hex", "18571": "kgdb_nmicallback", "18572": "kgdb_nmicallin", "18573": "kgdb_panic_event", "18574": "kgdb_panic_event_nb", "18575": "kgdb_reenter_check", "18576": "kgdb_register_callbacks", "18577": "kgdb_register_io_module", "18578": "kgdb_registration_lock", "18579": "kgdb_restore", "18580": "kgdb_roundup_cpus", "18581": "kgdb_schedule_breakpoint", "18582": "kgdb_setting_breakpoint", "18583": "kgdb_single_step", "18584": "kgdb_skipexception", "18585": "kgdb_sstep_pid", "18586": "kgdb_state", "18587": "kgdb_tasklet_bpt", "18588": "kgdb_tasklet_breakpoint", "18589": "kgdb_unregister_callbacks", "18590": "kgdb_unregister_io_module", "18591": "kgdb_use_con", "18592": "kgdb_usethread", "18593": "kgdb_usethreadid", "18594": "kgdb_validate_break_address", "18595": "kgdb_var", "18596": "kgdbcons", "18597": "kgdbreboot", "18598": "kgid", "18599": "kgid_has_mapping", "18600": "kgid_t", "18601": "khelper_wq", "18602": "khugepaged_exit", "18603": "khugepaged_fork", "18604": "kick", "18605": "kick_all_cpus_sync", "18606": "kick_kprobe_optimizer", "18607": "kick_process", "18608": "kill", "18609": "kill_as_cred_perm", "18610": "kill_css", "18611": "kill_fasync", "18612": "kill_ftrace_graph", "18613": "kill_kprobe", "18614": "kill_ok_by_cred", "18615": "kill_optimized_kprobe", "18616": "kill_pgrp", "18617": "kill_pid", "18618": "kill_pid_info", "18619": "kill_pid_info_as_cred", "18620": "kill_proc_info", "18621": "kill_rules", "18622": "kill_sb", "18623": "kill_something_info", "18624": "kill_test", "18625": "killed", "18626": "killed_trees", "18627": "killing", "18628": "kimage", "18629": "kimage_add_entry", "18630": "kimage_add_page", "18631": "kimage_alloc_control_pages", "18632": "kimage_alloc_crash_control_pages", "18633": "kimage_alloc_init", "18634": "kimage_alloc_normal_control_pages", "18635": "kimage_alloc_page", "18636": "kimage_alloc_pages", "18637": "kimage_dst_used", "18638": "kimage_entry_t", "18639": "kimage_file_alloc_init", "18640": "kimage_file_post_load_cleanup", "18641": "kimage_file_prepare_segments", "18642": "kimage_free", "18643": "kimage_free_entry", "18644": "kimage_free_extra_pages", "18645": "kimage_free_page_list", "18646": "kimage_free_pages", "18647": "kimage_is_destination_range", "18648": "kimage_load_crash_segment", "18649": "kimage_load_normal_segment", "18650": "kimage_load_segment", "18651": "kimage_set_destination", "18652": "kimage_terminate", "18653": "kin", "18654": "kiov", "18655": "kip", "18656": "kit", "18657": "kj", "18658": "kloginuid", "18659": "klp_alive", "18660": "klp_arch_set_pc", "18661": "klp_check_compiler_support", "18662": "klp_disable_func", "18663": "klp_disable_object", "18664": "klp_disable_patch", "18665": "klp_enable_func", "18666": "klp_enable_object", "18667": "klp_enable_patch", "18668": "klp_find_arg", "18669": "klp_find_callback", "18670": "klp_find_external_symbol", "18671": "klp_find_object_module", "18672": "klp_find_object_symbol", "18673": "klp_find_ops", "18674": "klp_find_verify_func_addr", "18675": "klp_free_funcs_limited", "18676": "klp_free_object_loaded", "18677": "klp_free_objects_limited", "18678": "klp_free_patch", "18679": "klp_ftrace_handler", "18680": "klp_func", "18681": "klp_init", "18682": "klp_init_func", "18683": "klp_init_object", "18684": "klp_init_object_loaded", "18685": "klp_init_patch", "18686": "klp_initialized", "18687": "klp_is_module", "18688": "klp_is_object_loaded", "18689": "klp_is_patch_registered", "18690": "klp_kobj_release_func", "18691": "klp_kobj_release_patch", "18692": "klp_ktype_func", "18693": "klp_ktype_patch", "18694": "klp_module_nb", "18695": "klp_module_notify", "18696": "klp_module_notify_coming", "18697": "klp_module_notify_going", "18698": "klp_mutex", "18699": "klp_object", "18700": "klp_ops", "18701": "klp_patch", "18702": "klp_patch_attrs", "18703": "klp_patches", "18704": "klp_register_patch", "18705": "klp_reloc", "18706": "klp_root_kobj", "18707": "klp_unregister_patch", "18708": "klp_verify_args", "18709": "klp_verify_callback", "18710": "klp_verify_vmlinux_symbol", "18711": "klp_write_module_reloc", "18712": "klp_write_object_relocations", "18713": "km", "18714": "kmalloc", "18715": "kmalloc_array", "18716": "kmalloc_node", "18717": "kmalloc_parameter", "18718": "kmalloced_param", "18719": "kmalloced_params", "18720": "kmap", "18721": "kmap_atomic", "18722": "kmem", "18723": "kmem_cache", "18724": "kmem_cache_alloc", "18725": "kmem_cache_alloc_node", "18726": "kmem_cache_create", "18727": "kmem_cache_free", "18728": "kmem_cache_zalloc", "18729": "kmemcheck_annotate_bitfield", "18730": "kmemcheck_enabled", "18731": "kmemcheck_mark_initialized", "18732": "kmemdup", "18733": "kmemleak_ignore", "18734": "kmemleak_load_module", "18735": "kmemleak_not_leak", "18736": "kmemleak_scan_area", "18737": "kmin", "18738": "kmod_concurrent", "18739": "kmod_loop_msg", "18740": "kmsg_dump", "18741": "kn", "18742": "knt1", "18743": "knt1_size", "18744": "kobj", "18745": "kobj2pinst", "18746": "kobj_attribute", "18747": "kobj_completion", "18748": "kobj_sysfs_ops", "18749": "kobj_type", "18750": "kobject", "18751": "kobject_action", "18752": "kobject_action_type", "18753": "kobject_create_and_add", "18754": "kobject_get", "18755": "kobject_init", "18756": "kobject_init_and_add", "18757": "kobject_put", "18758": "kobject_uevent", "18759": "koldloginuid", "18760": "kout", "18761": "kp", "18762": "kp_post_handler", "18763": "kp_pre_handler", "18764": "kpage", "18765": "kparam", "18766": "kparam_array", "18767": "kparam_string", "18768": "kprobe", "18769": "kprobe_addr", "18770": "kprobe_aggrprobe", "18771": "kprobe_blacklist", "18772": "kprobe_blacklist_entry", "18773": "kprobe_blacklist_open", "18774": "kprobe_blacklist_seq_next", "18775": "kprobe_blacklist_seq_ops", "18776": "kprobe_blacklist_seq_show", "18777": "kprobe_blacklist_seq_start", "18778": "kprobe_disabled", "18779": "kprobe_disarmed", "18780": "kprobe_dispatcher", "18781": "kprobe_event_define_fields", "18782": "kprobe_events_ops", "18783": "kprobe_exceptions_nb", "18784": "kprobe_exceptions_notify", "18785": "kprobe_flush_task", "18786": "kprobe_ftrace", "18787": "kprobe_ftrace_enabled", "18788": "kprobe_ftrace_handler", "18789": "kprobe_ftrace_ops", "18790": "kprobe_funcs", "18791": "kprobe_gone", "18792": "kprobe_insn_cache", "18793": "kprobe_insn_page", "18794": "kprobe_insn_slots", "18795": "kprobe_instance", "18796": "kprobe_lookup_name", "18797": "kprobe_module_nb", "18798": "kprobe_mutex", "18799": "kprobe_opcode_t", "18800": "kprobe_optimized", "18801": "kprobe_optimizer", "18802": "kprobe_optinsn_slots", "18803": "kprobe_optready", "18804": "kprobe_perf_func", "18805": "kprobe_profile_ops", "18806": "kprobe_prog_func_proto", "18807": "kprobe_prog_is_valid_access", "18808": "kprobe_prog_ops", "18809": "kprobe_queued", "18810": "kprobe_register", "18811": "kprobe_seq_next", "18812": "kprobe_seq_start", "18813": "kprobe_seq_stop", "18814": "kprobe_slot_state", "18815": "kprobe_table", "18816": "kprobe_target", "18817": "kprobe_tl", "18818": "kprobe_trace_entry_head", "18819": "kprobe_trace_func", "18820": "kprobe_trace_self_tests_init", "18821": "kprobe_trace_selftest_target", "18822": "kprobe_type", "18823": "kprobe_unused", "18824": "kprobes", "18825": "kprobes_all_disarmed", "18826": "kprobes_allow_optimization", "18827": "kprobes_fetch_type_table", "18828": "kprobes_inc_nmissed_count", "18829": "kprobes_initialized", "18830": "kprobes_module_callback", "18831": "kprobes_open", "18832": "kprobes_seq_ops", "18833": "kprojid", "18834": "kprojid_t", "18835": "kps", "18836": "kptr_obfuscate", "18837": "kptr_restrict", "18838": "krealloc", "18839": "kref", "18840": "kref_get", "18841": "kref_init", "18842": "kref_put", "18843": "kretprobe", "18844": "kretprobe_blacklist", "18845": "kretprobe_blacklist_size", "18846": "kretprobe_dispatcher", "18847": "kretprobe_event_define_fields", "18848": "kretprobe_funcs", "18849": "kretprobe_hash_lock", "18850": "kretprobe_hash_unlock", "18851": "kretprobe_inst_table", "18852": "kretprobe_instance", "18853": "kretprobe_perf_func", "18854": "kretprobe_table_lock", "18855": "kretprobe_table_lock_ptr", "18856": "kretprobe_table_unlock", "18857": "kretprobe_trace_entry_head", "18858": "kretprobe_trace_func", "18859": "kretprobed", "18860": "krgid", "18861": "kruid", "18862": "krule", "18863": "ks", "18864": "ks_namebuf_prev", "18865": "ksegment", "18866": "ksegments", "18867": "kset", "18868": "kset_create_and_add", "18869": "kset_exit", "18870": "kset_find_obj", "18871": "kset_uevent_ops", "18872": "ksgid", "18873": "ksig", "18874": "ksignal", "18875": "ksm_exit", "18876": "ksm_fork", "18877": "ksoftirqd", "18878": "ksoftirqd_should_run", "18879": "kstack_depth_to_print", "18880": "kstat", "18881": "kstat_incr_irq_this_cpu", "18882": "kstat_incr_irqs_this_cpu", "18883": "kstat_incr_softirqs_this_cpu", "18884": "kstat_irqs", "18885": "kstat_irqs_cpu", "18886": "kstat_irqs_usr", "18887": "kstat_softirqs_cpu", "18888": "kstatfs", "18889": "kstrdup", "18890": "kstrndup", "18891": "kstrtoint", "18892": "kstrtol", "18893": "kstrtoll", "18894": "kstrtos16", "18895": "kstrtos32_from_user", "18896": "kstrtou16", "18897": "kstrtou32", "18898": "kstrtou64", "18899": "kstrtou8", "18900": "kstrtouint", "18901": "kstrtoul", "18902": "kstrtoul_from_user", "18903": "kstrtoull", "18904": "ksuid", "18905": "ksym", "18906": "ksym_buf", "18907": "ksysfs_init", "18908": "kt", "18909": "kthread", "18910": "kthread_bind", "18911": "kthread_create", "18912": "kthread_create_info", "18913": "kthread_create_list", "18914": "kthread_create_lock", "18915": "kthread_create_on_cpu", "18916": "kthread_create_on_node", "18917": "kthread_data", "18918": "kthread_flush_work", "18919": "kthread_flush_work_fn", "18920": "kthread_freezable_should_stop", "18921": "kthread_park", "18922": "kthread_parkme", "18923": "kthread_prio", "18924": "kthread_prio_in", "18925": "kthread_run", "18926": "kthread_should_park", "18927": "kthread_should_stop", "18928": "kthread_status", "18929": "kthread_stop", "18930": "kthread_unpark", "18931": "kthread_work", "18932": "kthread_worker", "18933": "kthread_worker_fn", "18934": "kthreadd", "18935": "kthreadd_task", "18936": "ktime", "18937": "ktime_add", "18938": "ktime_add_ns", "18939": "ktime_add_safe", "18940": "ktime_divns", "18941": "ktime_equal", "18942": "ktime_get", "18943": "ktime_get_boot_ns", "18944": "ktime_get_boottime", "18945": "ktime_get_mono_fast_ns", "18946": "ktime_get_ns", "18947": "ktime_get_raw", "18948": "ktime_get_raw_fast_ns", "18949": "ktime_get_real", "18950": "ktime_get_real_seconds", "18951": "ktime_get_real_ts", "18952": "ktime_get_seconds", "18953": "ktime_get_ts", "18954": "ktime_get_ts64", "18955": "ktime_get_update_offsets_now", "18956": "ktime_get_update_offsets_tick", "18957": "ktime_get_with_offset", "18958": "ktime_mono_to_any", "18959": "ktime_now", "18960": "ktime_sec", "18961": "ktime_set", "18962": "ktime_sub", "18963": "ktime_t", "18964": "ktime_to_ns", "18965": "ktime_to_timespec", "18966": "ktime_to_timespec64", "18967": "ktime_to_timeval", "18968": "ktime_to_us", "18969": "kts", "18970": "ktv", "18971": "ktx", "18972": "ktype", "18973": "kuid", "18974": "kuid_has_mapping", "18975": "kuid_t", "18976": "kunmap", "18977": "kunmap_atomic", "18978": "kvfree", "18979": "kvm_check_and_clear_guest_paused", "18980": "kwatchdog", "18981": "kzalloc", "18982": "kzalloc_node", "18983": "l", "18984": "l1", "18985": "l2", "18986": "l_new", "18987": "l_next", "18988": "l_old", "18989": "l_show", "18990": "l_start", "18991": "l_stop", "18992": "label", "18993": "lagged", "18994": "laptop_mode", "18995": "large", "18996": "largest", "18997": "last", "18998": "last_accelerate", "18999": "last_active", "19000": "last_addr", "19001": "last_advance_all", "19002": "last_arrival", "19003": "last_balance", "19004": "last_bytesperword", "19005": "last_check", "19006": "last_cpupid", "19007": "last_decay", "19008": "last_entry", "19009": "last_ftrace_enabled", "19010": "last_h_load_update", "19011": "last_highmem_page", "19012": "last_highmem_page_copied", "19013": "last_i", "19014": "last_index", "19015": "last_jiffies", "19016": "last_jiffies_update", "19017": "last_load_update_tick", "19018": "last_msg", "19019": "last_overrun", "19020": "last_page", "19021": "last_pid", "19022": "last_pool", "19023": "last_queued", "19024": "last_radix", "19025": "last_repeat", "19026": "last_residency", "19027": "last_runnable_update", "19028": "last_sched_tick", "19029": "last_seed", "19030": "last_siginfo", "19031": "last_stack_tracer_enabled", "19032": "last_sum_exec_runtime", "19033": "last_switch_count", "19034": "last_system", "19035": "last_task", "19036": "last_task_numa_placement", "19037": "last_tick", "19038": "last_time", "19039": "last_unhandled", "19040": "last_unloaded_module", "19041": "last_update", "19042": "last_update_time", "19043": "last_wakee", "19044": "last_write", "19045": "lasterr", "19046": "lasterr_pos", "19047": "lastp", "19048": "lastreport", "19049": "lat", "19050": "lat_flag", "19051": "lat_print_generic", "19052": "lat_print_timestamp", "19053": "latch", "19054": "late", "19055": "late_initcall", "19056": "late_initcall_sync", "19057": "latency", "19058": "latency_lock", "19059": "latency_record", "19060": "latency_record_count", "19061": "latencytop_enabled", "19062": "later_mask", "19063": "latest_idle_timestamp", "19064": "latest_ns", "19065": "layout_and_allocate", "19066": "layout_sections", "19067": "layout_symtab", "19068": "lazy", "19069": "lazy_list", "19070": "lb_balanced", "19071": "lb_count", "19072": "lb_env", "19073": "lb_failed", "19074": "lb_gained", "19075": "lb_hot_gained", "19076": "lb_imbalance", "19077": "lb_nobusyg", "19078": "lb_nobusyq", "19079": "lbuf", "19080": "lc_next", "19081": "lc_show", "19082": "lc_start", "19083": "lc_stop", "19084": "lchown16", "19085": "ld", "19086": "ld_imm64_to_map_ptr", "19087": "ld_moved", "19088": "ldata", "19089": "le16_to_cpu", "19090": "leader", "19091": "leader_pid", "19092": "leaf", "19093": "leaf_cfs_rq_list", "19094": "leaf_ret", "19095": "leap", "19096": "lease_break_time", "19097": "leases_enable", "19098": "leave", "19099": "leaves", "19100": "left", "19101": "left_child", "19102": "leftmost", "19103": "legacy_cftypes", "19104": "legacy_queue", "19105": "len", "19106": "len1", "19107": "len2", "19108": "len_left", "19109": "len_ptr", "19110": "len_sent", "19111": "length", "19112": "lenp", "19113": "level", "19114": "levelcnt", "19115": "levels", "19116": "levels_needed", "19117": "levelspread", "19118": "lg", "19119": "lg_global_lock", "19120": "lg_global_unlock", "19121": "lg_local_lock", "19122": "lg_local_lock_cpu", "19123": "lg_local_unlock", "19124": "lg_local_unlock_cpu", "19125": "lg_lock_init", "19126": "lglock", "19127": "lhs", "19128": "licence", "19129": "license", "19130": "license_is_gpl_compatible", "19131": "likely", "19132": "lim", "19133": "limit", "19134": "limited", "19135": "limits", "19136": "line", "19137": "linear", "19138": "linear_revmap", "19139": "lineno_checksum", "19140": "lines", "19141": "link", "19142": "link1", "19143": "link2", "19144": "link_css_set", "19145": "link_pwq", "19146": "link_target", "19147": "linked", "19148": "linked_page", "19149": "links", "19150": "links_to_free", "19151": "linux_binprm", "19152": "linux_regs", "19153": "list", "19154": "list_add", "19155": "list_add_event", "19156": "list_add_leaf_cfs_rq", "19157": "list_add_rcu", "19158": "list_add_tail", "19159": "list_add_tail_rcu", "19160": "list_del", "19161": "list_del_event", "19162": "list_del_init", "19163": "list_del_leaf_cfs_rq", "19164": "list_del_rcu", "19165": "list_empty", "19166": "list_empty_careful", "19167": "list_entries", "19168": "list_entry", "19169": "list_entry_rcu", "19170": "list_first_entry", "19171": "list_first_entry_or_null", "19172": "list_first_or_null_rcu", "19173": "list_for_each", "19174": "list_for_each_entry", "19175": "list_for_each_entry_continue", "19176": "list_for_each_entry_rcu", "19177": "list_for_each_entry_reverse", "19178": "list_for_each_entry_safe", "19179": "list_for_each_entry_safe_continue", "19180": "list_for_each_entry_safe_from", "19181": "list_head", "19182": "list_is_last", "19183": "list_is_singular", "19184": "list_move", "19185": "list_move_tail", "19186": "list_next_entry", "19187": "list_node", "19188": "list_op_pending", "19189": "list_p", "19190": "list_prev_entry", "19191": "list_replace", "19192": "list_replace_init", "19193": "list_replace_rcu", "19194": "list_rotate_left", "19195": "list_splice_init", "19196": "list_splice_tail", "19197": "list_splice_tail_init", "19198": "listener", "19199": "listener_array", "19200": "listener_list", "19201": "listeners", "19202": "listnr", "19203": "live", "19204": "lld", "19205": "llist", "19206": "llist_add", "19207": "llist_del_all", "19208": "llist_empty", "19209": "llist_entry", "19210": "llist_for_each_entry", "19211": "llist_for_each_entry_safe", "19212": "llist_head", "19213": "llist_next", "19214": "llist_node", "19215": "llist_reverse_order", "19216": "llnode", "19217": "llseek", "19218": "llu", "19219": "lluns", "19220": "llx", "19221": "load", "19222": "load_a", "19223": "load_above_capacity", "19224": "load_addr", "19225": "load_avg", "19226": "load_avg_contrib", "19227": "load_b", "19228": "load_balance", "19229": "load_balance_mask", "19230": "load_byte", "19231": "load_contrib", "19232": "load_half", "19233": "load_header", "19234": "load_idx", "19235": "load_image", "19236": "load_image_lzo", "19237": "load_info", "19238": "load_module", "19239": "load_per_task", "19240": "load_system_certificate_list", "19241": "load_too_imbalanced", "19242": "load_weight", "19243": "load_word", "19244": "loaded", "19245": "loaded_info", "19246": "loads", "19247": "loc", "19248": "local", "19249": "local64_read", "19250": "local64_set", "19251": "local64_xchg", "19252": "local_add", "19253": "local_add_return", "19254": "local_bh_disable", "19255": "local_bh_enable", "19256": "local_clock", "19257": "local_clock_stable", "19258": "local_cmpxchg", "19259": "local_cpu", "19260": "local_cpu_mask", "19261": "local_debuggerinfo", "19262": "local_dec", "19263": "local_dec_and_test", "19264": "local_group", "19265": "local_hash", "19266": "local_inc", "19267": "local_inc_return", "19268": "local_irq_disable", "19269": "local_irq_enable", "19270": "local_irq_restore", "19271": "local_irq_save", "19272": "local_list", "19273": "local_n", "19274": "local_read", "19275": "local_samples_len", "19276": "local_save_flags", "19277": "local_set", "19278": "local_softirq_pending", "19279": "local_stat", "19280": "local_sub", "19281": "local_t", "19282": "local_xchg", "19283": "locate_mem_hole_bottom_up", "19284": "locate_mem_hole_callback", "19285": "locate_mem_hole_top_down", "19286": "locate_module_kobject", "19287": "lock", "19288": "lock_accessed", "19289": "lock_acquire", "19290": "lock_acquire_exclusive", "19291": "lock_acquire_shared", "19292": "lock_acquired", "19293": "lock_busted_ops", "19294": "lock_chain", "19295": "lock_chain_get_class", "19296": "lock_chains", "19297": "lock_class", "19298": "lock_class_key", "19299": "lock_class_stats", "19300": "lock_classes", "19301": "lock_contended", "19302": "lock_count", "19303": "lock_cq", "19304": "lock_dep_map", "19305": "lock_device_hotplug", "19306": "lock_entry", "19307": "lock_flag", "19308": "lock_from", "19309": "lock_id", "19310": "lock_init_error", "19311": "lock_is_held", "19312": "lock_is_read_held", "19313": "lock_is_write_held", "19314": "lock_key", "19315": "lock_len", "19316": "lock_limit", "19317": "lock_list", "19318": "lock_map_acquire", "19319": "lock_map_acquire_read", "19320": "lock_map_acquire_tryread", "19321": "lock_map_release", "19322": "lock_name", "19323": "lock_page", "19324": "lock_point", "19325": "lock_release", "19326": "lock_release_holdtime", "19327": "lock_release_nested", "19328": "lock_release_non_nested", "19329": "lock_set_class", "19330": "lock_set_subclass", "19331": "lock_stat", "19332": "lock_stat_cmp", "19333": "lock_stat_data", "19334": "lock_stat_open", "19335": "lock_stat_release", "19336": "lock_stat_seq", "19337": "lock_stat_write", "19338": "lock_stats", "19339": "lock_stress_stats", "19340": "lock_system_sleep", "19341": "lock_task_sighand", "19342": "lock_time", "19343": "lock_time_add", "19344": "lock_time_inc", "19345": "lock_timer", "19346": "lock_timer_base", "19347": "lock_torture_cleanup", "19348": "lock_torture_cxt", "19349": "lock_torture_init", "19350": "lock_torture_ops", "19351": "lock_torture_print_module_parms", "19352": "lock_torture_reader", "19353": "lock_torture_stats", "19354": "lock_torture_stats_print", "19355": "lock_torture_writer", "19356": "lock_usage_bit", "19357": "lockdep", "19358": "lockdep_assert_held", "19359": "lockdep_chains_open", "19360": "lockdep_chains_ops", "19361": "lockdep_clear_current_reclaim_state", "19362": "lockdep_copy_map", "19363": "lockdep_count_backward_deps", "19364": "lockdep_count_forward_deps", "19365": "lockdep_dependency_gen_id", "19366": "lockdep_depth", "19367": "lockdep_free_key_range", "19368": "lockdep_init", "19369": "lockdep_init_error", "19370": "lockdep_init_map", "19371": "lockdep_init_trace", "19372": "lockdep_init_trace_data", "19373": "lockdep_initialized", "19374": "lockdep_is_held", "19375": "lockdep_key", "19376": "lockdep_lock", "19377": "lockdep_map", "19378": "lockdep_off", "19379": "lockdep_ok", "19380": "lockdep_on", "19381": "lockdep_open", "19382": "lockdep_ops", "19383": "lockdep_print_held_locks", "19384": "lockdep_proc_init", "19385": "lockdep_rcu_suspicious", "19386": "lockdep_reclaim_gfp", "19387": "lockdep_recursion", "19388": "lockdep_reset", "19389": "lockdep_reset_lock", "19390": "lockdep_set_class", "19391": "lockdep_set_class_and_name", "19392": "lockdep_set_current_reclaim_state", "19393": "lockdep_softirq_end", "19394": "lockdep_softirq_enter", "19395": "lockdep_softirq_exit", "19396": "lockdep_softirq_start", "19397": "lockdep_stats", "19398": "lockdep_stats_debug_show", "19399": "lockdep_stats_open", "19400": "lockdep_stats_show", "19401": "lockdep_subclass_key", "19402": "lockdep_sys_exit", "19403": "lockdep_tasklist_lock_is_held", "19404": "lockdep_trace_alloc", "19405": "locked", "19406": "locked_shm", "19407": "locked_vm", "19408": "locking", "19409": "locks_after", "19410": "locks_before", "19411": "lockstat_clock", "19412": "lockstat_ops", "19413": "locktype", "19414": "lockup_detector_init", "19415": "lockwakeup", "19416": "loff_t", "19417": "log", "19418": "log_action", "19419": "log_buf", "19420": "log_buf_len", "19421": "log_first_idx", "19422": "log_first_seq", "19423": "log_flags", "19424": "log_from_idx", "19425": "log_len", "19426": "log_level", "19427": "log_lvl", "19428": "log_make_free_space", "19429": "log_next", "19430": "log_next_idx", "19431": "log_next_seq", "19432": "log_passwd", "19433": "log_size", "19434": "log_ubuf", "19435": "log_wait", "19436": "logarithmic_accumulation", "19437": "logbuf_has_space", "19438": "logbuf_lock", "19439": "logged", "19440": "loginuid", "19441": "loglevel", "19442": "long", "19443": "long_act", "19444": "longdelay", "19445": "longdelay_ms", "19446": "longdelay_us", "19447": "longjmp_break_handler", "19448": "look_up_lock_class", "19449": "lookup", "19450": "lookup_chain_cache", "19451": "lookup_elem_raw", "19452": "lookup_format", "19453": "lookup_module_symbol_attrs", "19454": "lookup_module_symbol_name", "19455": "lookup_resource", "19456": "lookup_symbol", "19457": "lookup_symbol_attrs", "19458": "lookup_symbol_name", "19459": "loop", "19460": "loop_break", "19461": "loop_max", "19462": "loops", "19463": "loops_per_jiffy", "19464": "loops_per_msec", "19465": "lost", "19466": "lost_event", "19467": "lost_events", "19468": "low", "19469": "low2highgid", "19470": "low2highuid", "19471": "low_free_pages", "19472": "low_shift", "19473": "lowbp", "19474": "lower", "19475": "lower_first", "19476": "lower_last", "19477": "lower_ns", "19478": "lowering", "19479": "lowest_flag_domain", "19480": "lowest_in_progress", "19481": "lowest_mask", "19482": "lowest_rq", "19483": "lowmem_reserve_ratio_sysctl_handler", "19484": "lp", "19485": "lparam", "19486": "lpj", "19487": "lr", "19488": "lrsa", "19489": "lrsp", "19490": "lru", "19491": "lru_cache_add_active_or_unevictable", "19492": "ls", "19493": "ls_next", "19494": "ls_show", "19495": "ls_start", "19496": "ls_stop", "19497": "lsm_rule", "19498": "lsm_str", "19499": "lstats_fops", "19500": "lstats_open", "19501": "lstats_show", "19502": "lstats_write", "19503": "lt", "19504": "lu", "19505": "lval", "19506": "lvalp", "19507": "lvl", "19508": "lw", "19509": "lwsa", "19510": "lwsp", "19511": "lx", "19512": "lzero", "19513": "lzo1x_1_compress", "19514": "lzo1x_decompress_safe", "19515": "lzo1x_worst_compress", "19516": "lzo_compress_threadfn", "19517": "lzo_decompress_threadfn", "19518": "m", "19519": "m1", "19520": "m2", "19521": "m_next", "19522": "m_show", "19523": "m_start", "19524": "m_stop", "19525": "machine", "19526": "machine_crash_shutdown", "19527": "machine_emergency_restart", "19528": "machine_halt", "19529": "machine_kexec", "19530": "machine_kexec_cleanup", "19531": "machine_kexec_prepare", "19532": "machine_power_off", "19533": "machine_restart", "19534": "machine_shutdown", "19535": "machine_suspend", "19536": "maddr", "19537": "magic", "19538": "magic1", "19539": "magic2", "19540": "magic_etc", "19541": "main", "19542": "main_extable_sort_needed", "19543": "main_ops", "19544": "maj", "19545": "maj_flt", "19546": "major", "19547": "make_data_rloc", "19548": "make_key_ref", "19549": "make_kgid", "19550": "make_kprojid", "19551": "make_kuid", "19552": "manage_workers", "19553": "manager", "19554": "manager_arb", "19555": "managing", "19556": "map", "19557": "map_alloc", "19558": "map_cmdline_to_pid", "19559": "map_count", "19560": "map_create", "19561": "map_delete_elem", "19562": "map_fd", "19563": "map_flags", "19564": "map_free", "19565": "map_get_next_key", "19566": "map_id", "19567": "map_id_down", "19568": "map_id_range_down", "19569": "map_id_up", "19570": "map_info", "19571": "map_lookup_elem", "19572": "map_pid_to_cmdline", "19573": "map_ptr", "19574": "map_type", "19575": "map_update_elem", "19576": "map_write", "19577": "mapp", "19578": "mapped", "19579": "mapping", "19580": "mappings_overlap", "19581": "maps", "19582": "mark", "19583": "mark_explored", "19584": "mark_free_pages", "19585": "mark_held_locks", "19586": "mark_irqflags", "19587": "mark_lock", "19588": "mark_lock_accessed", "19589": "mark_lock_irq", "19590": "mark_nosave_pages", "19591": "mark_reg_unknown_value", "19592": "mark_swapfiles", "19593": "mark_type", "19594": "mark_unsafe_pages", "19595": "mark_work_canceling", "19596": "markerlen", "19597": "mask", "19598": "mask_I", "19599": "mask_M", "19600": "mask_ack_irq", "19601": "mask_cache", "19602": "mask_cache_priv", "19603": "mask_irq", "19604": "mask_maps", "19605": "mask_type", "19606": "masked", "19607": "maskp", "19608": "masks", "19609": "masters_in_kgdb", "19610": "match", "19611": "match_data", "19612": "match_entries", "19613": "match_held_lock", "19614": "match_state", "19615": "match_tree_refs", "19616": "match_uprobe", "19617": "mattr", "19618": "max", "19619": "max_active", "19620": "max_active_show", "19621": "max_active_store", "19622": "max_bfs_queue_depth", "19623": "max_buf", "19624": "max_buffer", "19625": "max_bytes_for_cpu", "19626": "max_cfs_quota_period", "19627": "max_clock", "19628": "max_cost", "19629": "max_count", "19630": "max_cycles", "19631": "max_data", "19632": "max_delta", "19633": "max_delta_ns", "19634": "max_delta_ticks", "19635": "max_depth", "19636": "max_entries", "19637": "max_execve_audit_len", "19638": "max_extfrag_threshold", "19639": "max_faults", "19640": "max_files", "19641": "max_graph_depth", "19642": "max_group", "19643": "max_group_faults", "19644": "max_group_nid", "19645": "max_hang_time", "19646": "max_idle_balance_cost", "19647": "max_idle_ns", "19648": "max_interval", "19649": "max_latency", "19650": "max_level", "19651": "max_load_balance_interval", "19652": "max_load_idx", "19653": "max_lock", "19654": "max_lock_depth", "19655": "max_lockdep_depth", "19656": "max_modprobes", "19657": "max_newidle_lb_cost", "19658": "max_nid", "19659": "max_node", "19660": "max_offline", "19661": "max_online", "19662": "max_order", "19663": "max_pull", "19664": "max_restart", "19665": "max_samples_per_tick", "19666": "max_scan", "19667": "max_sched_granularity_ns", "19668": "max_sched_tunable_scaling", "19669": "max_score", "19670": "max_sequence", "19671": "max_size", "19672": "max_size_nested", "19673": "max_stack_lock", "19674": "max_stack_size", "19675": "max_stack_trace", "19676": "max_t", "19677": "max_threads", "19678": "max_threads_suggested", "19679": "max_trace_lock", "19680": "max_vruntime", "19681": "max_wakeup_granularity_ns", "19682": "max_write_len", "19683": "max_zone_pfn", "19684": "maxactive", "19685": "maxadj", "19686": "maxattr", "19687": "maxcpu", "19688": "maxdist", "19689": "maxerror", "19690": "maxj", "19691": "maxlen", "19692": "maxolduid", "19693": "maxrss", "19694": "maxshift", "19695": "may", "19696": "may_access_skb", "19697": "may_init_module", "19698": "may_ptrace_stop", "19699": "may_setgroups", "19700": "may_start_working", "19701": "maybe_create_worker", "19702": "maybe_kfree_parameter", "19703": "maybe_relocated", "19704": "mayday_node", "19705": "mayday_timer", "19706": "maydays", "19707": "mb_ret", "19708": "mbytes", "19709": "mchunk", "19710": "mcs_spin_lock", "19711": "mcs_spin_unlock", "19712": "mcs_spinlock", "19713": "mdcount", "19714": "mdelay", "19715": "me", "19716": "means", "19717": "mem", "19718": "mem_bm_set_bit_check", "19719": "mem_cgroup", "19720": "mem_cgroup_cancel_charge", "19721": "mem_cgroup_commit_charge", "19722": "mem_cgroup_try_charge", "19723": "mem_extent", "19724": "mem_extents", "19725": "mem_from", "19726": "mem_idx", "19727": "mem_len", "19728": "mem_node", "19729": "mem_to", "19730": "mem_total", "19731": "mem_unit", "19732": "mem_zone_bm_rtree", "19733": "memblock_virt_alloc", "19734": "membuf_idx", "19735": "memcg", "19736": "memchr_inv", "19737": "memcmp", "19738": "memcpy", "19739": "memcpy_func", "19740": "memmove", "19741": "memory", "19742": "memory_bandwidth_notifier", "19743": "memory_bandwidth_pm_qos", "19744": "memory_bitmap", "19745": "memory_bm_clear_bit", "19746": "memory_bm_clear_current", "19747": "memory_bm_create", "19748": "memory_bm_find_bit", "19749": "memory_bm_free", "19750": "memory_bm_next_pfn", "19751": "memory_bm_pfn_present", "19752": "memory_bm_position_reset", "19753": "memory_bm_set_bit", "19754": "memory_bm_test_bit", "19755": "memory_bw_constraints", "19756": "memparse", "19757": "mempolicy", "19758": "mems_allowed", "19759": "mems_allowed_seq", "19760": "mems_updated", "19761": "memset", "19762": "memsz", "19763": "mend", "19764": "merge", "19765": "message", "19766": "messages", "19767": "meta", "19768": "method", "19769": "mg_dst_cset", "19770": "mg_node", "19771": "mg_preload_node", "19772": "mg_src_cgrp", "19773": "mg_tasks", "19774": "mg_tasks_head", "19775": "mid", "19776": "middle", "19777": "might", "19778": "might_sleep", "19779": "might_sleep_if", "19780": "migrate", "19781": "migrate_degrades_locality", "19782": "migrate_improves_locality", "19783": "migrate_swap", "19784": "migrate_swap_stop", "19785": "migrate_task_rq", "19786": "migrate_task_rq_fair", "19787": "migrate_task_to", "19788": "migrate_tasks", "19789": "migrate_timer_list", "19790": "migrate_timers", "19791": "migrate_to_reboot_cpu", "19792": "migrated", "19793": "migration_arg", "19794": "migration_call", "19795": "migration_cpu_stop", "19796": "migration_init", "19797": "migration_notifier", "19798": "migration_swap_arg", "19799": "min", "19800": "min_amount", "19801": "min_bandwidth_expiration", "19802": "min_cfs_quota_period", "19803": "min_cfs_rq_runtime", "19804": "min_clock", "19805": "min_delta", "19806": "min_delta_ns", "19807": "min_delta_ticks", "19808": "min_exit_latency", "19809": "min_expire", "19810": "min_extfrag_threshold", "19811": "min_flt", "19812": "min_free_kbytes", "19813": "min_free_kbytes_sysctl_handler", "19814": "min_interval", "19815": "min_level", "19816": "min_load", "19817": "min_load_idx", "19818": "min_offline", "19819": "min_online", "19820": "min_sched_granularity_ns", "19821": "min_sched_tunable_scaling", "19822": "min_size", "19823": "min_size_nested", "19824": "min_t", "19825": "min_vruntime", "19826": "min_vruntime_copy", "19827": "min_wakeup_granularity_ns", "19828": "mini", "19829": "minimum_image_size", "19830": "minlen", "19831": "minolduid", "19832": "minor", "19833": "misc", "19834": "misc_register", "19835": "miscdevice", "19836": "mismatch", "19837": "misrouted_irq", "19838": "missed_events", "19839": "missed_updates", "19840": "missing", "19841": "mk", "19842": "mk_pid", "19843": "mk_pte", "19844": "mk_reply", "19845": "mkdir", "19846": "mkobj", "19847": "mktime64", "19848": "mm", "19849": "mm_access", "19850": "mm_alloc", "19851": "mm_alloc_pgd", "19852": "mm_cachep", "19853": "mm_count", "19854": "mm_free_pgd", "19855": "mm_init", "19856": "mm_init_aio", "19857": "mm_init_cpumask", "19858": "mm_init_owner", "19859": "mm_nr_pmds", "19860": "mm_nr_pmds_init", "19861": "mm_rb", "19862": "mm_release", "19863": "mm_segment_t", "19864": "mm_struct", "19865": "mm_users", "19866": "mmap", "19867": "mmap2", "19868": "mmap_count", "19869": "mmap_data", "19870": "mmap_event", "19871": "mmap_init", "19872": "mmap_locked", "19873": "mmap_max_addr", "19874": "mmap_min_addr_handler", "19875": "mmap_mutex", "19876": "mmap_sem", "19877": "mmap_user", "19878": "mmdrop", "19879": "mmf_recalc_uprobes", "19880": "mmio_close", "19881": "mmio_pipe_open", "19882": "mmio_print_line", "19883": "mmio_print_map", "19884": "mmio_print_mark", "19885": "mmio_print_pcidev", "19886": "mmio_print_rw", "19887": "mmio_read", "19888": "mmio_reset_data", "19889": "mmio_trace_array", "19890": "mmio_trace_init", "19891": "mmio_trace_mapping", "19892": "mmio_trace_printk", "19893": "mmio_trace_reset", "19894": "mmio_trace_rw", "19895": "mmio_trace_start", "19896": "mmio_tracer", "19897": "mmiotrace_map", "19898": "mmiotrace_rw", "19899": "mmlist", "19900": "mmlist_lock", "19901": "mmput", "19902": "mmu_notifier_invalidate_range_end", "19903": "mmu_notifier_invalidate_range_start", "19904": "mmu_notifier_mm_destroy", "19905": "mmu_notifier_mm_init", "19906": "mmun_end", "19907": "mmun_start", "19908": "mnt", "19909": "mnt_clone_internal", "19910": "mnt_drop_write", "19911": "mnt_flags", "19912": "mnt_ns", "19913": "mnt_root", "19914": "mnt_want_write", "19915": "mntput", "19916": "mod", "19917": "mod_delayed_work", "19918": "mod_delayed_work_on", "19919": "mod_extract_mpi_array", "19920": "mod_find_symname", "19921": "mod_fmt", "19922": "mod_initfree", "19923": "mod_kobject_put", "19924": "mod_make_digest", "19925": "mod_name", "19926": "mod_percpu", "19927": "mod_sysfs_fini", "19928": "mod_sysfs_init", "19929": "mod_sysfs_setup", "19930": "mod_sysfs_teardown", "19931": "mod_timer", "19932": "mod_timer_pending", "19933": "mod_timer_pinned", "19934": "mod_verify_sig", "19935": "mod_zone_page_state", "19936": "modaddr", "19937": "mode", "19938": "mode1_syscalls", "19939": "mode1_syscalls_32", "19940": "modes", "19941": "modify", "19942": "modinfo_", "19943": "modinfo_attrs", "19944": "modinfo_coresize", "19945": "modinfo_initsize", "19946": "modinfo_initstate", "19947": "modinfo_refcnt", "19948": "modinfo_srcversion", "19949": "modinfo_taint", "19950": "modinfo_version", "19951": "modlen", "19952": "modmagic", "19953": "modname", "19954": "modprobe_path", "19955": "module", "19956": "module_add_modinfo_attrs", "19957": "module_addr_max", "19958": "module_address_lookup", "19959": "module_alloc", "19960": "module_alloc_update_bounds", "19961": "module_arch_cleanup", "19962": "module_arch_freeing_init", "19963": "module_attr_show", "19964": "module_attr_store", "19965": "module_attribute", "19966": "module_bug_cleanup", "19967": "module_core", "19968": "module_deallocate", "19969": "module_event", "19970": "module_exit", "19971": "module_finalize", "19972": "module_flags", "19973": "module_flags_taint", "19974": "module_frob_arch_sections", "19975": "module_get", "19976": "module_get_kallsym", "19977": "module_init", "19978": "module_is_live", "19979": "module_kallsyms_lookup_name", "19980": "module_kallsyms_on_each_symbol", "19981": "module_kobj_release", "19982": "module_kobject", "19983": "module_kset", "19984": "module_ktype", "19985": "module_layout", "19986": "module_memfree", "19987": "module_mutex", "19988": "module_name", "19989": "module_notes_attrs", "19990": "module_notes_read", "19991": "module_notify_list", "19992": "module_param", "19993": "module_param_attrs", "19994": "module_param_named", "19995": "module_param_sysfs_remove", "19996": "module_param_sysfs_setup", "19997": "module_put", "19998": "module_refcount", "19999": "module_region", "20000": "module_remove_modinfo_attrs", "20001": "module_sect_attr", "20002": "module_sect_attrs", "20003": "module_sect_show", "20004": "module_sig_check", "20005": "module_signature", "20006": "module_sysfs_initialized", "20007": "module_sysfs_ops", "20008": "module_trace_bprintk_format_nb", "20009": "module_trace_bprintk_format_notify", "20010": "module_uevent", "20011": "module_uevent_ops", "20012": "module_unload_free", "20013": "module_unload_init", "20014": "module_use", "20015": "module_version_attribute", "20016": "module_wq", "20017": "modules", "20018": "modules_disabled", "20019": "modules_op", "20020": "modules_open", "20021": "modversion_info", "20022": "mon", "20023": "mon_day", "20024": "mono", "20025": "more", "20026": "more2boost", "20027": "more_balance", "20028": "most", "20029": "mount", "20030": "mountopts", "20031": "move", "20032": "move_linked_works", "20033": "move_module", "20034": "move_pages", "20035": "move_queued_task", "20036": "move_type", "20037": "moved_load", "20038": "moveimp", "20039": "mp", "20040": "mpi", "20041": "mpnt", "20042": "mpol_dup", "20043": "mpol_get", "20044": "mpol_put", "20045": "mpol_rebind_mm", "20046": "mpol_rebind_task", "20047": "mq_attr", "20048": "mq_curmsgs", "20049": "mq_flags", "20050": "mq_getsetattr", "20051": "mq_maxmsg", "20052": "mq_msgsize", "20053": "mq_notify", "20054": "mq_open", "20055": "mq_sendrecv", "20056": "mqd_t", "20057": "mqdes", "20058": "mqstat", "20059": "ms", "20060": "msdata", "20061": "msec", "20062": "msecs", "20063": "msecs_to_jiffies", "20064": "msg", "20065": "msg_data", "20066": "msg_file", "20067": "msg_len", "20068": "msg_prio", "20069": "msg_size", "20070": "msg_type", "20071": "msi_alloc_info_t", "20072": "msi_check", "20073": "msi_create_irq_domain", "20074": "msi_desc", "20075": "msi_domain_activate", "20076": "msi_domain_alloc", "20077": "msi_domain_alloc_irqs", "20078": "msi_domain_deactivate", "20079": "msi_domain_free", "20080": "msi_domain_free_irqs", "20081": "msi_domain_info", "20082": "msi_domain_ops", "20083": "msi_domain_ops_check", "20084": "msi_domain_ops_default", "20085": "msi_domain_ops_get_hwirq", "20086": "msi_domain_ops_init", "20087": "msi_domain_ops_prepare", "20088": "msi_domain_ops_set_desc", "20089": "msi_domain_set_affinity", "20090": "msi_domain_update_chip_ops", "20091": "msi_domain_update_dom_ops", "20092": "msi_finish", "20093": "msi_free", "20094": "msi_get_domain_info", "20095": "msi_init", "20096": "msi_msg", "20097": "msi_prepare", "20098": "msk", "20099": "mskptr", "20100": "mskreg", "20101": "msleep", "20102": "msleep_interruptible", "20103": "mstart", "20104": "much", "20105": "mul_u64_u32_shr", "20106": "mult", "20107": "mult_adj", "20108": "multi", "20109": "multi_cpu_stop", "20110": "multi_stop_data", "20111": "multi_stop_state", "20112": "multiplier", "20113": "munlock_vma_page", "20114": "munmap_notifier", "20115": "mutex", "20116": "mutex_acquire", "20117": "mutex_acquire_nest", "20118": "mutex_can_spin_on_owner", "20119": "mutex_clear_owner", "20120": "mutex_destroy", "20121": "mutex_init", "20122": "mutex_is_locked", "20123": "mutex_lock", "20124": "mutex_lock_interruptible", "20125": "mutex_lock_interruptible_nested", "20126": "mutex_lock_killable", "20127": "mutex_lock_killable_nested", "20128": "mutex_lock_nested", "20129": "mutex_lock_ops", "20130": "mutex_optimistic_spin", "20131": "mutex_release", "20132": "mutex_remove_waiter", "20133": "mutex_set_owner", "20134": "mutex_spin_on_owner", "20135": "mutex_try_to_acquire", "20136": "mutex_trylock", "20137": "mutex_unlock", "20138": "mutex_waiter", "20139": "mutexes", "20140": "muxed_resource_wait", "20141": "my_grp", "20142": "my_q", "20143": "my_rdp", "20144": "my_scd", "20145": "mylat", "20146": "mynode", "20147": "mypatch", "20148": "n", "20149": "nOnly", "20150": "nYou", "20151": "n_balk_blkd_tasks", "20152": "n_balk_boost_tasks", "20153": "n_balk_exp_gp_tasks", "20154": "n_balk_nos", "20155": "n_balk_notblocked", "20156": "n_balk_notyet", "20157": "n_barrier_attempts", "20158": "n_barrier_cbs", "20159": "n_barrier_done", "20160": "n_barrier_successes", "20161": "n_buckets", "20162": "n_cbfloods", "20163": "n_cbs_adopted", "20164": "n_cbs_invoked", "20165": "n_cbs_orphaned", "20166": "n_counters", "20167": "n_ctrs", "20168": "n_descsz", "20169": "n_exp_boosts", "20170": "n_force_qs", "20171": "n_force_qs_gpstart", "20172": "n_force_qs_lh", "20173": "n_force_qs_ngp", "20174": "n_force_qs_snap", "20175": "n_functions", "20176": "n_lock_acquired", "20177": "n_lock_fail", "20178": "n_lock_torture_errors", "20179": "n_logical_preds", "20180": "n_namesz", "20181": "n_nocbs_invoked", "20182": "n_normal_boosts", "20183": "n_normal_preds", "20184": "n_offline_attempts", "20185": "n_offline_successes", "20186": "n_online_attempts", "20187": "n_online_successes", "20188": "n_preds", "20189": "n_rcu_pending", "20190": "n_rcu_torture_alloc", "20191": "n_rcu_torture_alloc_fail", "20192": "n_rcu_torture_barrier_error", "20193": "n_rcu_torture_boost_failure", "20194": "n_rcu_torture_boost_ktrerror", "20195": "n_rcu_torture_boost_rterror", "20196": "n_rcu_torture_boosts", "20197": "n_rcu_torture_error", "20198": "n_rcu_torture_free", "20199": "n_rcu_torture_mberror", "20200": "n_rcu_torture_timers", "20201": "n_rp_cb_ready", "20202": "n_rp_cpu_needs_gp", "20203": "n_rp_gp_completed", "20204": "n_rp_gp_started", "20205": "n_rp_need_nothing", "20206": "n_rp_nocb_defer_wakeup", "20207": "n_rp_qs_pending", "20208": "n_rp_report_qs", "20209": "n_stress", "20210": "n_tasks_boosted", "20211": "n_type", "20212": "n_utask", "20213": "na", "20214": "name", "20215": "name_buf", "20216": "name_count", "20217": "name_len", "20218": "name_match", "20219": "name_skip", "20220": "name_struct", "20221": "name_to_dev_t", "20222": "name_unique", "20223": "name_user", "20224": "name_version", "20225": "namebuf", "20226": "namefmt", "20227": "namelen", "20228": "nameoff", "20229": "names_list", "20230": "nand", "20231": "nanosleep", "20232": "narg", "20233": "nargs", "20234": "nattr", "20235": "nb", "20236": "nb_args", "20237": "nblock", "20238": "nbut", "20239": "nbytes", "20240": "ncbflooders", "20241": "ncsw", "20242": "ndetected", "20243": "ndoms", "20244": "ndoms_cur", "20245": "ndots", "20246": "ndst", "20247": "ndw", "20248": "nearest_hardwall_ancestor", "20249": "need", "20250": "need_active_balance", "20251": "need_decay", "20252": "need_forkexit_callback", "20253": "need_future_gp", "20254": "need_loop", "20255": "need_more_worker", "20256": "need_prep", "20257": "need_prune", "20258": "need_pull_rt_task", "20259": "need_qs", "20260": "need_rcu_nocb_mask", "20261": "need_rebuild_sched_domains", "20262": "need_resched", "20263": "need_seqretry", "20264": "need_serialize", "20265": "need_sid", "20266": "need_siglock", "20267": "need_to_create_worker", "20268": "needcheck", "20269": "needed", "20270": "needgp", "20271": "needmore", "20272": "needreport", "20273": "needs_unthr", "20274": "needwake", "20275": "neg", "20276": "neg_one", "20277": "negative", "20278": "negp", "20279": "nentry", "20280": "nest", "20281": "nest_lock", "20282": "nested", "20283": "net", "20284": "net_device", "20285": "net_generic", "20286": "net_ns", "20287": "netlink_ack", "20288": "netlink_capable", "20289": "netlink_has_listeners", "20290": "netlink_kernel_cfg", "20291": "netlink_kernel_create", "20292": "netlink_kernel_release", "20293": "netlink_unicast", "20294": "network_lat_constraints", "20295": "network_lat_notifier", "20296": "network_lat_pm_qos", "20297": "network_throughput_notifier", "20298": "network_throughput_pm_qos", "20299": "network_tput_constraints", "20300": "never", "20301": "new", "20302": "new32", "20303": "new64", "20304": "new_action", "20305": "new_attrs", "20306": "new_base", "20307": "new_bit", "20308": "new_blocked", "20309": "new_bm", "20310": "new_bw", "20311": "new_cap", "20312": "new_cgrp", "20313": "new_class", "20314": "new_clock", "20315": "new_count", "20316": "new_cpu", "20317": "new_cpumask", "20318": "new_cpus", "20319": "new_cred", "20320": "new_cset", "20321": "new_css", "20322": "new_dbg_io_ops", "20323": "new_decode_dev", "20324": "new_dl", "20325": "new_dst_cpu", "20326": "new_exe_file", "20327": "new_ext", "20328": "new_fd", "20329": "new_fdp", "20330": "new_feature", "20331": "new_filter_string", "20332": "new_flag", "20333": "new_fs", "20334": "new_fsp", "20335": "new_func", "20336": "new_hash", "20337": "new_head", "20338": "new_idmap_permitted", "20339": "new_index", "20340": "new_ioc", "20341": "new_ka", "20342": "new_len", "20343": "new_load", "20344": "new_lock", "20345": "new_map", "20346": "new_mask", "20347": "new_mems", "20348": "new_mp", "20349": "new_name_str", "20350": "new_node", "20351": "new_ns", "20352": "new_nsp", "20353": "new_nsproxy", "20354": "new_opcode", "20355": "new_page", "20356": "new_pages", "20357": "new_parent", "20358": "new_pcap", "20359": "new_pgs", "20360": "new_pos", "20361": "new_prog", "20362": "new_rd", "20363": "new_res", "20364": "new_rlim", "20365": "new_sa", "20366": "new_sb", "20367": "new_sc", "20368": "new_set", "20369": "new_setting", "20370": "new_size", "20371": "new_sl", "20372": "new_spec", "20373": "new_ss", "20374": "new_ss_mask", "20375": "new_t", "20376": "new_tasks", "20377": "new_timer", "20378": "new_timer_id", "20379": "new_tp", "20380": "new_ts", "20381": "new_tz", "20382": "new_user", "20383": "new_utsname", "20384": "new_value", "20385": "newblocked", "20386": "newcookie", "20387": "newdev", "20388": "newf", "20389": "newidle_idx", "20390": "newlen", "20391": "newmask", "20392": "newmems", "20393": "newmm", "20394": "newoldstate", "20395": "newprio", "20396": "newset", "20397": "newset32", "20398": "newsize", "20399": "newsp", "20400": "newstate", "20401": "newtail", "20402": "newts", "20403": "newuname", "20404": "newval", "20405": "next", "20406": "next_arg", "20407": "next_balance", "20408": "next_bio", "20409": "next_buddy_marked", "20410": "next_color", "20411": "next_cookie", "20412": "next_cpu", "20413": "next_ctx", "20414": "next_decay_max_lb_cost", "20415": "next_entry", "20416": "next_event", "20417": "next_event_type", "20418": "next_group", "20419": "next_index", "20420": "next_insn", "20421": "next_instance", "20422": "next_jiffies", "20423": "next_key", "20424": "next_l", "20425": "next_line", "20426": "next_nb", "20427": "next_node", "20428": "next_nr", "20429": "next_page", "20430": "next_parent", "20431": "next_pi", "20432": "next_pid", "20433": "next_pidmap", "20434": "next_pool", "20435": "next_prio", "20436": "next_queue", "20437": "next_res", "20438": "next_resource", "20439": "next_rq", "20440": "next_scan", "20441": "next_signal", "20442": "next_state", "20443": "next_string", "20444": "next_swap", "20445": "next_task", "20446": "next_task_group", "20447": "next_thread", "20448": "next_timer", "20449": "next_ts", "20450": "next_uentry", "20451": "next_update", "20452": "nextarg", "20453": "nextargp", "20454": "nextc", "20455": "nextevt", "20456": "nextp", "20457": "nextr", "20458": "nextseq", "20459": "nextval", "20460": "nextw", "20461": "nfakewriters", "20462": "nfb", "20463": "nflags", "20464": "nfreed", "20465": "ng", "20466": "ngarbage", "20467": "ngroups", "20468": "ngroups_max", "20469": "nh", "20470": "nhit", "20471": "nice", "20472": "nice_rlim", "20473": "nice_to_rlimit", "20474": "niceval", "20475": "nid", "20476": "ninterval", "20477": "nivcsw", "20478": "nj", "20479": "nl", "20480": "nla_get_u32", "20481": "nla_len", "20482": "nla_policy", "20483": "nla_total_size", "20484": "nlattr", "20485": "nlen", "20486": "nlh", "20487": "nlmsg_data", "20488": "nlmsg_flags", "20489": "nlmsg_free", "20490": "nlmsg_hdr", "20491": "nlmsg_len", "20492": "nlmsg_multicast", "20493": "nlmsg_new", "20494": "nlmsg_next", "20495": "nlmsg_ok", "20496": "nlmsg_pid", "20497": "nlmsg_put", "20498": "nlmsg_seq", "20499": "nlmsg_type", "20500": "nlmsghdr", "20501": "nloaded", "20502": "nlpd", "20503": "nlsk", "20504": "nmaskbits", "20505": "nmi_watchdog_enabled", "20506": "nmissed", "20507": "nmsk", "20508": "no", "20509": "no_action", "20510": "no_blink", "20511": "no_children", "20512": "no_console_suspend", "20513": "no_constraint_value", "20514": "no_irq_affinity", "20515": "no_irq_chip", "20516": "no_join", "20517": "no_llseek", "20518": "no_nice", "20519": "no_numa", "20520": "no_printk", "20521": "no_suspend_depth", "20522": "no_unaligned_warning", "20523": "no_uprobe_events", "20524": "nocb", "20525": "nocb_defer_wakeup", "20526": "nocb_follower_head", "20527": "nocb_follower_tail", "20528": "nocb_follower_wait", "20529": "nocb_gp_head", "20530": "nocb_gp_tail", "20531": "nocb_gp_wq", "20532": "nocb_head", "20533": "nocb_kthread", "20534": "nocb_leader", "20535": "nocb_leader_sleep", "20536": "nocb_leader_wait", "20537": "nocb_next_follower", "20538": "nocb_q_count", "20539": "nocb_q_count_lazy", "20540": "nocb_tail", "20541": "nocb_wq", "20542": "noclean", "20543": "nocompress", "20544": "node", "20545": "node_bit", "20546": "node_distance", "20547": "node_found", "20548": "node_isset", "20549": "node_lock", "20550": "node_online_map", "20551": "node_pfn", "20552": "node_possible_map", "20553": "node_random", "20554": "node_set", "20555": "node_stamp", "20556": "node_states", "20557": "nodelist_parse", "20558": "nodemask", "20559": "nodemask_pr_args", "20560": "nodemask_t", "20561": "nodename", "20562": "nodep", "20563": "nodes", "20564": "nodes_and", "20565": "nodes_clear", "20566": "nodes_empty", "20567": "nodes_equal", "20568": "nodes_intersects", "20569": "nodes_or", "20570": "nodes_setall", "20571": "nodes_subset", "20572": "nodes_weight", "20573": "nohibernate", "20574": "nohz", "20575": "nohz_balance_enter_idle", "20576": "nohz_balance_exit_idle", "20577": "nohz_balancer_kick", "20578": "nohz_flags", "20579": "nohz_full_kick_ipi", "20580": "nohz_full_kick_work", "20581": "nohz_full_kick_work_func", "20582": "nohz_idle", "20583": "nohz_idle_balance", "20584": "nohz_kick_needed", "20585": "nohz_mode", "20586": "nohz_stamp", "20587": "noinline", "20588": "noirq", "20589": "noirqdebug", "20590": "noirqdebug_setup", "20591": "nokprobe_inline", "20592": "non_isolated_cpus", "20593": "none", "20594": "nonlazy_posted", "20595": "nonlazy_posted_snap", "20596": "nonseekable_open", "20597": "noop", "20598": "noop_llseek", "20599": "noop_ret", "20600": "nop", "20601": "nop_test_accept", "20602": "nop_test_refuse", "20603": "nop_trace", "20604": "noresume", "20605": "norm", "20606": "normal_prio", "20607": "normalize_cfs_quota", "20608": "normalize_rt_tasks", "20609": "normalize_task", "20610": "normalized_sysctl_", "20611": "normalized_sysctl_sched_latency", "20612": "normalized_sysctl_sched_min_granularity", "20613": "normalized_sysctl_sched_wakeup_granularity", "20614": "nosave_region", "20615": "nosave_regions", "20616": "nosect", "20617": "nosmp", "20618": "not", "20619": "not_in_range", "20620": "not_visited", "20621": "note", "20622": "note_buf_t", "20623": "note_gp_changes", "20624": "note_interrupt", "20625": "notes", "20626": "notes_attr", "20627": "notes_attrs", "20628": "notes_size", "20629": "nother", "20630": "notification", "20631": "notification_mask", "20632": "notifier", "20633": "notifier_block", "20634": "notifier_call", "20635": "notifier_call_chain", "20636": "notifier_chain_cond_register", "20637": "notifier_chain_register", "20638": "notifier_chain_unregister", "20639": "notifier_data", "20640": "notifier_from_errno", "20641": "notifier_mask", "20642": "notifier_to_errno", "20643": "notifiers", "20644": "notify", "20645": "notify_cpu_starting", "20646": "notify_die", "20647": "notify_on_release", "20648": "notrace", "20649": "notrace_hash", "20650": "notused", "20651": "now", "20652": "now_gtod", "20653": "nowarn", "20654": "np", "20655": "nr", "20656": "nr_actions", "20657": "nr_active", "20658": "nr_alloc", "20659": "nr_args", "20660": "nr_balance_failed", "20661": "nr_blocks", "20662": "nr_busy", "20663": "nr_busy_cpus", "20664": "nr_bytes", "20665": "nr_callchain_events", "20666": "nr_calls", "20667": "nr_cgrps", "20668": "nr_chain_hlocks", "20669": "nr_comm_events", "20670": "nr_compat_longs", "20671": "nr_context_switches", "20672": "nr_copy_pages", "20673": "nr_cpu_ids", "20674": "nr_cpumask_bits", "20675": "nr_cpus", "20676": "nr_cpus_allowed", "20677": "nr_cpusets", "20678": "nr_cyclic_check_recursions", "20679": "nr_cyclic_checks", "20680": "nr_dirtied", "20681": "nr_dirtied_pause", "20682": "nr_drainers", "20683": "nr_entries", "20684": "nr_events", "20685": "nr_exclusive", "20686": "nr_extents", "20687": "nr_failed_migrations_affine", "20688": "nr_failed_migrations_hot", "20689": "nr_failed_migrations_running", "20690": "nr_faults", "20691": "nr_find_usage_backwards_checks", "20692": "nr_find_usage_backwards_recursions", "20693": "nr_find_usage_forwards_checks", "20694": "nr_find_usage_forwards_recursions", "20695": "nr_forced_migrations", "20696": "nr_free", "20697": "nr_free_highpages", "20698": "nr_free_pages", "20699": "nr_freq", "20700": "nr_freq_events", "20701": "nr_garbage", "20702": "nr_hangs", "20703": "nr_hardirq_chains", "20704": "nr_hardirq_read_safe", "20705": "nr_hardirq_read_unsafe", "20706": "nr_hardirq_safe", "20707": "nr_hardirq_unsafe", "20708": "nr_hashed", "20709": "nr_highmem", "20710": "nr_highmem_p", "20711": "nr_hits", "20712": "nr_idle", "20713": "nr_ids", "20714": "nr_in_flight", "20715": "nr_io_wait", "20716": "nr_iowait", "20717": "nr_iowait_cpu", "20718": "nr_irq_read_safe", "20719": "nr_irq_read_unsafe", "20720": "nr_irq_safe", "20721": "nr_irq_unsafe", "20722": "nr_irqs", "20723": "nr_latency", "20724": "nr_list_entries", "20725": "nr_load_updates", "20726": "nr_lock_chains", "20727": "nr_lock_classes", "20728": "nr_loops", "20729": "nr_meta_pages", "20730": "nr_migrations", "20731": "nr_migrations_cold", "20732": "nr_mmap_events", "20733": "nr_mpi", "20734": "nr_node_ids", "20735": "nr_numa_running", "20736": "nr_of_irqs", "20737": "nr_opts", "20738": "nr_pages", "20739": "nr_pages_same", "20740": "nr_pages_to_update", "20741": "nr_periods", "20742": "nr_preferred_running", "20743": "nr_process_chains", "20744": "nr_processes", "20745": "nr_pte_updates", "20746": "nr_ptes", "20747": "nr_pwqs_to_flush", "20748": "nr_range", "20749": "nr_removed", "20750": "nr_retries", "20751": "nr_rq", "20752": "nr_running", "20753": "nr_scan_pages", "20754": "nr_sects", "20755": "nr_segments", "20756": "nr_siblings", "20757": "nr_sleeping", "20758": "nr_softirq_chains", "20759": "nr_softirq_read_safe", "20760": "nr_softirq_read_unsafe", "20761": "nr_softirq_safe", "20762": "nr_softirq_unsafe", "20763": "nr_spread_over", "20764": "nr_stack_trace_entries", "20765": "nr_stat", "20766": "nr_stopped", "20767": "nr_switches", "20768": "nr_systemwide", "20769": "nr_task_events", "20770": "nr_tasks", "20771": "nr_threads", "20772": "nr_throttled", "20773": "nr_ticks", "20774": "nr_to_call", "20775": "nr_to_read", "20776": "nr_to_write", "20777": "nr_todo", "20778": "nr_uncategorized", "20779": "nr_uninterruptible", "20780": "nr_unused", "20781": "nr_unused_locks", "20782": "nr_waiters", "20783": "nr_wakeups", "20784": "nr_wakeups_affine", "20785": "nr_wakeups_affine_attempts", "20786": "nr_wakeups_idle", "20787": "nr_wakeups_local", "20788": "nr_wakeups_migrate", "20789": "nr_wakeups_passive", "20790": "nr_wakeups_remote", "20791": "nr_wakeups_sync", "20792": "nr_workers", "20793": "nrcpus", "20794": "nreaders", "20795": "nreaders_stress", "20796": "nrealreaders", "20797": "nrealreaders_stress", "20798": "nrealwriters_stress", "20799": "nrq", "20800": "ns", "20801": "ns2usecs", "20802": "ns_alloc_inum", "20803": "ns_capable", "20804": "ns_common", "20805": "ns_free_inum", "20806": "ns_ninterval", "20807": "ns_nval", "20808": "ns_of_pid", "20809": "ns_offset", "20810": "ns_to_ktime", "20811": "ns_to_timespec", "20812": "ns_to_timespec64", "20813": "nsec", "20814": "nsec_fls", "20815": "nsec_high", "20816": "nsec_rem", "20817": "nsec_to_AHZ", "20818": "nsec_to_clock_t", "20819": "nsecps", "20820": "nsecs", "20821": "nsecs_raw", "20822": "nsecs_real", "20823": "nsecs_rem", "20824": "nsecs_str", "20825": "nsecs_to_cputime", "20826": "nsecs_to_cputime64", "20827": "nsecs_to_jiffies", "20828": "nsecs_to_jiffies64", "20829": "nsecs_to_usecs", "20830": "nsections", "20831": "nset", "20832": "nsleep", "20833": "nsleep_restart", "20834": "nslot", "20835": "nsproxy", "20836": "nsproxy_cache_init", "20837": "nsproxy_cachep", "20838": "nsrc", "20839": "nstack", "20840": "nstype", "20841": "nsynctypes", "20842": "nte", "20843": "nthe", "20844": "nto", "20845": "ntp_clear", "20846": "ntp_err_mult", "20847": "ntp_error", "20848": "ntp_error_shift", "20849": "ntp_init", "20850": "ntp_notify_cmos_timer", "20851": "ntp_offset_chunk", "20852": "ntp_synced", "20853": "ntp_tick", "20854": "ntp_tick_length", "20855": "ntp_update_frequency", "20856": "ntp_update_offset", "20857": "ntp_update_offset_fll", "20858": "ntp_validate_timex", "20859": "ntpinterval", "20860": "null_pm_qos", "20861": "nullsz", "20862": "num", "20863": "num_active_cpus", "20864": "num_chips", "20865": "num_counter_active", "20866": "num_cpus", "20867": "num_cpus_frozen", "20868": "num_ct", "20869": "num_ctors", "20870": "num_debug", "20871": "num_exentries", "20872": "num_ftrace_callsites", "20873": "num_gpl_future_syms", "20874": "num_gpl_syms", "20875": "num_jump_entries", "20876": "num_kp", "20877": "num_loaded", "20878": "num_obj", "20879": "num_online_cpus", "20880": "num_pages", "20881": "num_params", "20882": "num_physpages", "20883": "num_possible_cpus", "20884": "num_possible_nodes", "20885": "num_rcu_lvl", "20886": "num_syms", "20887": "num_symtab", "20888": "num_tests", "20889": "num_threads", "20890": "num_to_init", "20891": "num_trace_bprintk_fmt", "20892": "num_trace_enums", "20893": "num_trace_events", "20894": "num_tracepoints", "20895": "num_types", "20896": "num_unused_gpl_syms", "20897": "num_unused_syms", "20898": "num_versions", "20899": "numa", "20900": "numa_faults", "20901": "numa_faults_locality", "20902": "numa_faults_stats", "20903": "numa_get_avg_runtime", "20904": "numa_group", "20905": "numa_level", "20906": "numa_migrate_preferred", "20907": "numa_migrate_retry", "20908": "numa_next_scan", "20909": "numa_pages_migrated", "20910": "numa_preferred_nid", "20911": "numa_pwq_tbl", "20912": "numa_pwq_tbl_install", "20913": "numa_scan_offset", "20914": "numa_scan_period", "20915": "numa_scan_period_max", "20916": "numa_scan_seq", "20917": "numa_stats", "20918": "numa_topology_type", "20919": "numa_work", "20920": "numa_zonelist_order", "20921": "numa_zonelist_order_handler", "20922": "numabalancing_enabled", "20923": "number", "20924": "number_of_wakelocks", "20925": "numbers", "20926": "numchips", "20927": "nused", "20928": "nval", "20929": "nvcsw", "20930": "nvec", "20931": "nvec_used", "20932": "nvisit", "20933": "nwatch", "20934": "nwhich", "20935": "nwriters_stress", "20936": "nxt", "20937": "nxtcompleted", "20938": "nxtlist", "20939": "nxttail", "20940": "o", "20941": "o_utask", "20942": "oact", "20943": "obj", "20944": "object_debug", "20945": "object_size", "20946": "objname", "20947": "objs", "20948": "objtree", "20949": "oentry", "20950": "of", "20951": "of_cft", "20952": "of_css", "20953": "of_node", "20954": "of_node_full_name", "20955": "of_node_get", "20956": "of_node_put", "20957": "of_node_to_nid", "20958": "off", "20959": "offline", "20960": "offline_css", "20961": "offline_fqs", "20962": "offline_waitq", "20963": "offp", "20964": "offs", "20965": "offs_boot", "20966": "offs_real", "20967": "offs_tai", "20968": "offset", "20969": "offset64", "20970": "offset_to_vaddr", "20971": "offsetof", "20972": "offsets", "20973": "oflag", "20974": "oflags", "20975": "ok", "20976": "old", "20977": "old32", "20978": "old64", "20979": "old_addr", "20980": "old_base", "20981": "old_bt", "20982": "old_bw", "20983": "old_cgrp", "20984": "old_clock", "20985": "old_contrib", "20986": "old_count", "20987": "old_cset", "20988": "old_css", "20989": "old_dbg_io_ops", "20990": "old_delta", "20991": "old_encode_dev", "20992": "old_entries", "20993": "old_entry", "20994": "old_exe", "20995": "old_exe_file", "20996": "old_ext", "20997": "old_feature", "20998": "old_flag", "20999": "old_flags", "21000": "old_fs", "21001": "old_fsgid", "21002": "old_fsuid", "21003": "old_getrlimit", "21004": "old_gid_t", "21005": "old_hash", "21006": "old_idx", "21007": "old_index", "21008": "old_iowait", "21009": "old_ka", "21010": "old_load", "21011": "old_lock", "21012": "old_lvl", "21013": "old_mems_allowed", "21014": "old_name", "21015": "old_notify", "21016": "old_ns", "21017": "old_opcode", "21018": "old_p", "21019": "old_page", "21020": "old_pcap", "21021": "old_period", "21022": "old_prio", "21023": "old_ptr", "21024": "old_pwq", "21025": "old_rb", "21026": "old_rd", "21027": "old_regs", "21028": "old_rhpp", "21029": "old_rlim", "21030": "old_rp", "21031": "old_runtime", "21032": "old_sa", "21033": "old_sc", "21034": "old_set", "21035": "old_setting", "21036": "old_sigaction", "21037": "old_sigset_t", "21038": "old_size", "21039": "old_spec", "21040": "old_ss", "21041": "old_stop", "21042": "old_tail", "21043": "old_tk", "21044": "old_tu", "21045": "old_uid_t", "21046": "old_userobj", "21047": "old_utsname", "21048": "old_val", "21049": "old_vsyscall_fixup", "21050": "old_write", "21051": "oldcount", "21052": "oldcs", "21053": "oldest", "21054": "oldf", "21055": "oldfs", "21056": "oldlen", "21057": "oldlenp", "21058": "oldloginuid", "21059": "oldmask", "21060": "oldmm", "21061": "oldold_utsname", "21062": "oldpolicy", "21063": "oldprio", "21064": "oldrss", "21065": "oldsessionid", "21066": "oldset", "21067": "oldstarttime", "21068": "oldstate", "21069": "oldtail", "21070": "oldts", "21071": "olduname", "21072": "oldval", "21073": "omsk", "21074": "on", "21075": "on_cpu", "21076": "on_dfl", "21077": "on_each_cpu", "21078": "on_each_cpu_cond", "21079": "on_each_cpu_mask", "21080": "on_exit_work", "21081": "on_list", "21082": "on_null_domain", "21083": "on_rq", "21084": "on_rt_rq", "21085": "on_sig_stack", "21086": "oncpu", "21087": "one", "21088": "one_hundred", "21089": "one_jiffy_scaled", "21090": "one_ss", "21091": "one_ul", "21092": "oneshot", "21093": "online", "21094": "online_cpus", "21095": "online_css", "21096": "only", "21097": "onoff_get_trigger_ops", "21098": "onoff_holdoff", "21099": "onoff_interval", "21100": "onoff_task", "21101": "onstack", "21102": "oom_callback_count", "21103": "oom_callback_wq", "21104": "oom_head", "21105": "oom_killer_disable", "21106": "oom_killer_enable", "21107": "oom_score_adj", "21108": "oom_score_adj_min", "21109": "oops_in_progress", "21110": "oops_setup", "21111": "op", "21112": "opcode", "21113": "opdata", "21114": "open", "21115": "open_softirq", "21116": "operand", "21117": "operand1", "21118": "operand2", "21119": "operation", "21120": "operations", "21121": "ops", "21122": "ops_references_rec", "21123": "ops_traces_mod", "21124": "opstack", "21125": "opstack_op", "21126": "opstr", "21127": "opt", "21128": "opt_kgdb_con", "21129": "opt_kgdb_wait", "21130": "opt_nokgdbroundup", "21131": "opt_pre_handler", "21132": "optimize_all_kprobes", "21133": "optimize_kprobe", "21134": "optimized_kprobe", "21135": "optimizing_list", "21136": "optimizing_work", "21137": "optinsn", "21138": "option", "21139": "options", "21140": "opts", "21141": "or", "21142": "or_softirq_pending", "21143": "order", "21144": "ordered_wq_attrs", "21145": "orig", "21146": "orig_address", "21147": "orig_bm", "21148": "orig_cred", "21149": "orig_end", "21150": "orig_fn", "21151": "orig_p", "21152": "orig_page", "21153": "orig_prog", "21154": "orig_ret_vaddr", "21155": "orig_sig", "21156": "orig_src_load", "21157": "orig_tai", "21158": "original", "21159": "orphan_donelist", "21160": "orphan_donetail", "21161": "orphan_lock", "21162": "orphan_nxtlist", "21163": "orphan_nxttail", "21164": "orphans_remove", "21165": "orphans_remove_sched", "21166": "orphans_remove_work", "21167": "oset", "21168": "osid", "21169": "osq", "21170": "osq_lock", "21171": "osq_lock_init", "21172": "osq_unlock", "21173": "osrelease", "21174": "oss", "21175": "ostype", "21176": "other", "21177": "other_branch", "21178": "other_hash", "21179": "oublock", "21180": "out", "21181": "out_again", "21182": "out_all_pinned", "21183": "out_alloc", "21184": "out_balanced", "21185": "out_bdput", "21186": "out_bug", "21187": "out_cancel_attach", "21188": "out_cancel_ref", "21189": "out_clean", "21190": "out_cleanup", "21191": "out_deactivate", "21192": "out_dec", "21193": "out_destroy", "21194": "out_disable", "21195": "out_enable", "21196": "out_eoi", "21197": "out_err", "21198": "out_err_free", "21199": "out_fail", "21200": "out_finish", "21201": "out_free", "21202": "out_free_ca", "21203": "out_free_cgrp", "21204": "out_free_control_pages", "21205": "out_free_cpus_allowed", "21206": "out_free_cpuusage", "21207": "out_free_desc", "21208": "out_free_digest", "21209": "out_free_id", "21210": "out_free_image", "21211": "out_free_map", "21212": "out_free_new_mask", "21213": "out_free_post_load_bufs", "21214": "out_free_sha_regions", "21215": "out_free_tfm", "21216": "out_ipc", "21217": "out_irq", "21218": "out_iter_end", "21219": "out_kfree_skb", "21220": "out_kill", "21221": "out_locked", "21222": "out_mask", "21223": "out_mput", "21224": "out_net", "21225": "out_no_start", "21226": "out_nocheck", "21227": "out_notify", "21228": "out_ns", "21229": "out_null", "21230": "out_of_line_wait_on_atomic_t", "21231": "out_of_line_wait_on_bit", "21232": "out_of_line_wait_on_bit_lock", "21233": "out_of_line_wait_on_bit_timeout", "21234": "out_one_pinned", "21235": "out_pid", "21236": "out_put", "21237": "out_put_task", "21238": "out_put_task_struct", "21239": "out_putname", "21240": "out_reg", "21241": "out_release", "21242": "out_release_tset", "21243": "out_replace", "21244": "out_reset", "21245": "out_restore", "21246": "out_save", "21247": "out_set", "21248": "out_set_class_cache", "21249": "out_thread", "21250": "out_unlock", "21251": "out_unlock_bdev", "21252": "out_unlock_cgroup", "21253": "out_unlock_set", "21254": "out_unlocked", "21255": "out_unreg", "21256": "out_unreg_holders", "21257": "out_unreg_param", "21258": "out_uts", "21259": "out_va_end", "21260": "outgoingcpu", "21261": "output", "21262": "output_event", "21263": "output_printk", "21264": "outsparse", "21265": "ovalue", "21266": "over", "21267": "overcommit_kbytes_handler", "21268": "overcommit_ratio_handler", "21269": "overflow", "21270": "overflow_count", "21271": "overflowgid", "21272": "overflowuid", "21273": "overhead", "21274": "overload", "21275": "overloaded", "21276": "override", "21277": "override_architecture", "21278": "override_creds", "21279": "override_release", "21280": "override_rlimit", "21281": "overrun", "21282": "overrun_detected", "21283": "overruns", "21284": "overwrite", "21285": "overwrite_flag", "21286": "owatch", "21287": "owner", "21288": "owner_cpu", "21289": "owner_entry", "21290": "ownername", "21291": "owners", "21292": "p", "21293": "p1", "21294": "p2", "21295": "pE", "21296": "pEp", "21297": "pF", "21298": "pI", "21299": "pIp", "21300": "pK", "21301": "pP", "21302": "pPp", "21303": "pS", "21304": "p_event", "21305": "p_list", "21306": "p_rq", "21307": "pacct", "21308": "pacct_struct", "21309": "pack_threadid", "21310": "padata", "21311": "padata_add_cpu", "21312": "padata_alloc", "21313": "padata_alloc_pd", "21314": "padata_alloc_possible", "21315": "padata_attr_type", "21316": "padata_cpu_callback", "21317": "padata_cpu_hash", "21318": "padata_default_attrs", "21319": "padata_do_parallel", "21320": "padata_do_serial", "21321": "padata_flush_queues", "21322": "padata_free", "21323": "padata_free_pd", "21324": "padata_get_next", "21325": "padata_index_to_cpu", "21326": "padata_init_pqueues", "21327": "padata_init_squeues", "21328": "padata_instance", "21329": "padata_list", "21330": "padata_parallel_queue", "21331": "padata_parallel_worker", "21332": "padata_priv", "21333": "padata_register_cpumask_notifier", "21334": "padata_remove_cpu", "21335": "padata_reorder", "21336": "padata_reorder_timer", "21337": "padata_replace", "21338": "padata_serial_queue", "21339": "padata_serial_worker", "21340": "padata_set_cpumask", "21341": "padata_set_cpumasks", "21342": "padata_setup_cpumasks", "21343": "padata_start", "21344": "padata_stop", "21345": "padata_sysfs_entry", "21346": "padata_sysfs_ops", "21347": "padata_sysfs_release", "21348": "padata_sysfs_show", "21349": "padata_sysfs_store", "21350": "padata_unregister_cpumask_notifier", "21351": "padata_validate_cpumask", "21352": "page", "21353": "page_add_new_anon_rmap", "21354": "page_address", "21355": "page_cache_release", "21356": "page_check_address", "21357": "page_cluster", "21358": "page_cpupid_xchg_last", "21359": "page_entries", "21360": "page_is_guard", "21361": "page_is_ram", "21362": "page_key_alloc", "21363": "page_key_free", "21364": "page_key_write", "21365": "page_mapped", "21366": "page_mkwrite", "21367": "page_off", "21368": "page_order", "21369": "page_remove_rmap", "21370": "page_shift", "21371": "page_table_lock", "21372": "page_to_pfn", "21373": "page_zone", "21374": "pagebusy", "21375": "pagefault_disable", "21376": "pagefault_enable", "21377": "pages", "21378": "pages32", "21379": "pages_highmem", "21380": "panic", "21381": "panic_blink", "21382": "panic_block", "21383": "panic_lock", "21384": "panic_notifier_list", "21385": "panic_on_io_nmi", "21386": "panic_on_oops", "21387": "panic_on_unrecovered_nmi", "21388": "panic_on_warn", "21389": "panic_smp_self_stop", "21390": "panic_timeout", "21391": "par", "21392": "parallel", "21393": "parallel_cpumask", "21394": "parallel_cpumask_attr", "21395": "parallel_data", "21396": "parallel_mask", "21397": "parallel_work", "21398": "param", "21399": "param_array", "21400": "param_array_free", "21401": "param_array_get", "21402": "param_array_ops", "21403": "param_array_set", "21404": "param_attr_show", "21405": "param_attr_store", "21406": "param_attribute", "21407": "param_check_unsafe", "21408": "param_free_charp", "21409": "param_get_", "21410": "param_get_bool", "21411": "param_get_charp", "21412": "param_get_int", "21413": "param_get_invbool", "21414": "param_get_string", "21415": "param_lock", "21416": "param_ops_", "21417": "param_ops_bint", "21418": "param_ops_bool", "21419": "param_ops_charp", "21420": "param_ops_invbool", "21421": "param_ops_string", "21422": "param_set_", "21423": "param_set_bint", "21424": "param_set_bool", "21425": "param_set_charp", "21426": "param_set_copystring", "21427": "param_set_invbool", "21428": "param_sysfs_builtin", "21429": "param_sysfs_init", "21430": "parameqn", "21431": "params", "21432": "paravirt_steal_clock", "21433": "paravirt_steal_enabled", "21434": "paravirt_steal_rq_enabled", "21435": "parent", "21436": "parent_b", "21437": "parent_ca", "21438": "parent_cs", "21439": "parent_css", "21440": "parent_ctx", "21441": "parent_data", "21442": "parent_entity", "21443": "parent_event", "21444": "parent_exec_id", "21445": "parent_freezer", "21446": "parent_gen", "21447": "parent_ip", "21448": "parent_irq", "21449": "parent_kn", "21450": "parent_len", "21451": "parent_map", "21452": "parent_ns", "21453": "parent_path", "21454": "parent_pid_ns", "21455": "parent_quota", "21456": "parent_tidptr", "21457": "parentlen", "21458": "parg", "21459": "park", "21460": "parked", "21461": "parse", "21462": "parse_args", "21463": "parse_cgroupfs_options", "21464": "parse_crashkernel_mem", "21465": "parse_crashkernel_simple", "21466": "parse_crashkernel_suffix", "21467": "parse_error", "21468": "parse_grep", "21469": "parse_init", "21470": "parse_one", "21471": "parse_operand", "21472": "parse_probe_arg", "21473": "parse_probe_vars", "21474": "parse_rcu_nocb_poll", "21475": "parser", "21476": "part", "21477": "part_devt", "21478": "partial_group", "21479": "partition_sched_domains", "21480": "partno", "21481": "pass_exception", "21482": "passed_quiesce", "21483": "passing", "21484": "patch", "21485": "path", "21486": "path1", "21487": "path2", "21488": "path_equal", "21489": "path_is_under", "21490": "path_put", "21491": "pathbuf", "21492": "pathlen", "21493": "pathname", "21494": "pattern", "21495": "pause", "21496": "pause_graph_tracing", "21497": "pause_on_oops", "21498": "pause_on_oops_flag", "21499": "pause_on_oops_lock", "21500": "payload", "21501": "pb", "21502": "pbe", "21503": "pbuf", "21504": "pc", "21505": "pc_clock_adjtime", "21506": "pc_clock_getres", "21507": "pc_clock_gettime", "21508": "pc_clock_settime", "21509": "pc_timer_create", "21510": "pc_timer_delete", "21511": "pc_timer_gettime", "21512": "pc_timer_settime", "21513": "pcache", "21514": "pci_dev", "21515": "pci_dev_driver", "21516": "pci_dev_put", "21517": "pci_driver", "21518": "pci_get_device", "21519": "pci_msi_mask_irq", "21520": "pci_msi_unmask_irq", "21521": "pcount", "21522": "pcpu", "21523": "pcpu_list", "21524": "pcpumask", "21525": "pcpusec", "21526": "pcred", "21527": "pcs", "21528": "pd", "21529": "pd_list", "21530": "pd_new", "21531": "pd_old", "21532": "pdata", "21533": "pdeath_signal", "21534": "pdev", "21535": "pdflush_proc_obsolete", "21536": "pdu", "21537": "pdu_buf", "21538": "pdu_data", "21539": "pdu_len", "21540": "pdu_start", "21541": "peek_stack", "21542": "pend", "21543": "pending", "21544": "pending_disable", "21545": "pending_kill", "21546": "pending_list", "21547": "pending_mask", "21548": "pending_only", "21549": "pending_updates", "21550": "pending_wakeup", "21551": "pentry", "21552": "per", "21553": "per_cpu", "21554": "per_cpu_ptr", "21555": "per_cpu_ref", "21556": "per_cpu_show", "21557": "percent", "21558": "percent_a", "21559": "percent_b", "21560": "percpu", "21561": "percpu_dev_id", "21562": "percpu_dir", "21563": "percpu_down_read", "21564": "percpu_down_write", "21565": "percpu_enabled", "21566": "percpu_free_rwsem", "21567": "percpu_modalloc", "21568": "percpu_modcopy", "21569": "percpu_modfree", "21570": "percpu_pagelist_fraction", "21571": "percpu_pagelist_fraction_sysctl_handler", "21572": "percpu_ref", "21573": "percpu_ref_exit", "21574": "percpu_ref_init", "21575": "percpu_ref_kill", "21576": "percpu_ref_kill_and_confirm", "21577": "percpu_ref_tryget_live", "21578": "percpu_rw_semaphore", "21579": "percpu_size", "21580": "percpu_up_read", "21581": "percpu_up_write", "21582": "perf", "21583": "perf_adjust_freq_unthr_context", "21584": "perf_adjust_period", "21585": "perf_aux_output_begin", "21586": "perf_aux_output_end", "21587": "perf_aux_output_skip", "21588": "perf_aux_size", "21589": "perf_branch_entry", "21590": "perf_calculate_period", "21591": "perf_callchain", "21592": "perf_callchain_entry", "21593": "perf_callchain_kernel", "21594": "perf_callchain_store", "21595": "perf_callchain_user", "21596": "perf_cgroup_defer_enabled", "21597": "perf_cgroup_events", "21598": "perf_cgroup_match", "21599": "perf_cgroup_sched_in", "21600": "perf_cgroup_sched_out", "21601": "perf_cgroup_set_shadow_time", "21602": "perf_cgroup_set_timestamp", "21603": "perf_clock", "21604": "perf_comm_event", "21605": "perf_compat_ioctl", "21606": "perf_cpu_context", "21607": "perf_cpu_hrtimer_restart", "21608": "perf_cpu_time_max_percent_handler", "21609": "perf_ctx_lock", "21610": "perf_ctx_unlock", "21611": "perf_data_size", "21612": "perf_detach_cgroup", "21613": "perf_duration_warn", "21614": "perf_duration_work", "21615": "perf_event", "21616": "perf_event__output_id_sample", "21617": "perf_event_attr", "21618": "perf_event_aux", "21619": "perf_event_aux_ctx", "21620": "perf_event_aux_event", "21621": "perf_event_aux_output_cb", "21622": "perf_event_can_stop_tick", "21623": "perf_event_clock", "21624": "perf_event_comm", "21625": "perf_event_comm_event", "21626": "perf_event_comm_match", "21627": "perf_event_comm_output", "21628": "perf_event_context", "21629": "perf_event_context_sched_in", "21630": "perf_event_context_sched_out", "21631": "perf_event_count", "21632": "perf_event_create_kernel_counter", "21633": "perf_event_ctx_activate", "21634": "perf_event_ctx_deactivate", "21635": "perf_event_ctx_lock", "21636": "perf_event_ctx_lock_nested", "21637": "perf_event_ctx_unlock", "21638": "perf_event_ctxp", "21639": "perf_event_disable", "21640": "perf_event_enable", "21641": "perf_event_enable_on_exec", "21642": "perf_event_exec", "21643": "perf_event_for_each", "21644": "perf_event_for_each_child", "21645": "perf_event_fork", "21646": "perf_event_free_bpf_prog", "21647": "perf_event_free_filter", "21648": "perf_event_free_task", "21649": "perf_event_header", "21650": "perf_event_header__init_id", "21651": "perf_event_index", "21652": "perf_event_init_task", "21653": "perf_event_init_userpage", "21654": "perf_event_list", "21655": "perf_event_max_sample_rate", "21656": "perf_event_mmap_event", "21657": "perf_event_mmap_match", "21658": "perf_event_mmap_output", "21659": "perf_event_mmap_page", "21660": "perf_event_mutex", "21661": "perf_event_output", "21662": "perf_event_period", "21663": "perf_event_pid", "21664": "perf_event_read", "21665": "perf_event_read_event", "21666": "perf_event_read_group", "21667": "perf_event_read_one", "21668": "perf_event_read_value", "21669": "perf_event_refresh", "21670": "perf_event_release_kernel", "21671": "perf_event_sched_in", "21672": "perf_event_set_bpf_prog", "21673": "perf_event_set_filter", "21674": "perf_event_set_output", "21675": "perf_event_sync_stat", "21676": "perf_event_task", "21677": "perf_event_task_disable", "21678": "perf_event_task_match", "21679": "perf_event_task_output", "21680": "perf_event_task_sched_in", "21681": "perf_event_task_sched_out", "21682": "perf_event_task_tick", "21683": "perf_event_tid", "21684": "perf_event_time", "21685": "perf_event_update_userpage", "21686": "perf_event_wakeup", "21687": "perf_events", "21688": "perf_fasync", "21689": "perf_fetch_caller_regs", "21690": "perf_fget_light", "21691": "perf_fops", "21692": "perf_ftrace_event_register", "21693": "perf_ftrace_function_call", "21694": "perf_ftrace_function_disable", "21695": "perf_ftrace_function_enable", "21696": "perf_ftrace_function_register", "21697": "perf_ftrace_function_unregister", "21698": "perf_get_aux", "21699": "perf_get_regs_user", "21700": "perf_group_attach", "21701": "perf_group_detach", "21702": "perf_guest_cbs", "21703": "perf_guest_info_callbacks", "21704": "perf_install_in_context", "21705": "perf_instruction_pointer", "21706": "perf_ioctl", "21707": "perf_lock_task_context", "21708": "perf_log_itrace_start", "21709": "perf_log_throttle", "21710": "perf_misc_flags", "21711": "perf_mmap", "21712": "perf_mmap_alloc_page", "21713": "perf_mmap_close", "21714": "perf_mmap_event", "21715": "perf_mmap_fault", "21716": "perf_mmap_free_page", "21717": "perf_mmap_open", "21718": "perf_mmap_to_page", "21719": "perf_mmap_unmark_page", "21720": "perf_mmap_vmops", "21721": "perf_output_begin", "21722": "perf_output_copy", "21723": "perf_output_end", "21724": "perf_output_get_handle", "21725": "perf_output_handle", "21726": "perf_output_put", "21727": "perf_output_put_handle", "21728": "perf_output_read", "21729": "perf_output_read_group", "21730": "perf_output_read_one", "21731": "perf_output_sample", "21732": "perf_output_sample_regs", "21733": "perf_output_sample_ustack", "21734": "perf_output_skip", "21735": "perf_output_wakeup", "21736": "perf_paranoid_cpu", "21737": "perf_paranoid_tracepoint_raw", "21738": "perf_pending_event", "21739": "perf_perm", "21740": "perf_pmu_disable", "21741": "perf_pmu_enable", "21742": "perf_pmu_sched_task", "21743": "perf_poll", "21744": "perf_prepare_sample", "21745": "perf_probe", "21746": "perf_proc_update_handler", "21747": "perf_read", "21748": "perf_read_event", "21749": "perf_read_hw", "21750": "perf_refcount", "21751": "perf_reg_abi", "21752": "perf_reg_value", "21753": "perf_register_guest_info_callbacks", "21754": "perf_regs", "21755": "perf_release", "21756": "perf_remove_from_context", "21757": "perf_remove_from_owner", "21758": "perf_rotate_context", "21759": "perf_sample_allowed_ns", "21760": "perf_sample_data", "21761": "perf_sample_event_took", "21762": "perf_sample_period_ns", "21763": "perf_sample_regs_intr", "21764": "perf_sample_regs_user", "21765": "perf_sample_ustack_size", "21766": "perf_sched_cb_dec", "21767": "perf_sched_cb_inc", "21768": "perf_sched_cb_usages", "21769": "perf_sched_events", "21770": "perf_set_shadow_time", "21771": "perf_sw_event_sched", "21772": "perf_swevent_get_recursion_context", "21773": "perf_swevent_put_recursion_context", "21774": "perf_syscall_enter", "21775": "perf_syscall_exit", "21776": "perf_sysenter_disable", "21777": "perf_sysenter_enable", "21778": "perf_sysexit_disable", "21779": "perf_sysexit_enable", "21780": "perf_task_event", "21781": "perf_throttled_count", "21782": "perf_throttled_seq", "21783": "perf_trace_add", "21784": "perf_trace_buf", "21785": "perf_trace_buf_prepare", "21786": "perf_trace_buf_submit", "21787": "perf_trace_del", "21788": "perf_trace_destroy", "21789": "perf_trace_event_close", "21790": "perf_trace_event_init", "21791": "perf_trace_event_open", "21792": "perf_trace_event_perm", "21793": "perf_trace_event_reg", "21794": "perf_trace_event_unreg", "21795": "perf_trace_init", "21796": "perf_trace_t", "21797": "perf_unregister_guest_info_callbacks", "21798": "perf_user_stack_pointer", "21799": "perf_ustack_task_size", "21800": "perf_workqueue_init", "21801": "perf_wq", "21802": "perform", "21803": "period", "21804": "period_left", "21805": "period_slot", "21806": "period_timer", "21807": "periodic", "21808": "periods", "21809": "perm", "21810": "perm_gid", "21811": "perm_mode", "21812": "perm_tr", "21813": "perm_tr_len", "21814": "perm_uid", "21815": "permitted", "21816": "pernet_operations", "21817": "persistent_clock_exists", "21818": "persistent_clock_is_local", "21819": "persistent_keyring_register", "21820": "persistent_keyring_register_sem", "21821": "personality", "21822": "pflags", "21823": "pfn", "21824": "pfn_is_nosave", "21825": "pfn_to_page", "21826": "pfn_valid", "21827": "pg", "21828": "pg_offp", "21829": "pgd", "21830": "pgd_alloc", "21831": "pgd_free", "21832": "pgid", "21833": "pgoff", "21834": "pgoff_t", "21835": "pgrp", "21836": "phase1_result", "21837": "phase_ts", "21838": "phys", "21839": "phys_to_virt", "21840": "pi", "21841": "pi_blocked_on", "21842": "pi_lock", "21843": "pi_state_cache", "21844": "pi_state_list", "21845": "pi_task", "21846": "pi_tree_entry", "21847": "pi_waiters", "21848": "pi_waiters_leftmost", "21849": "pick_highest_pushable_task", "21850": "pick_next_entity", "21851": "pick_next_pushable_task", "21852": "pick_next_rt_entity", "21853": "pick_next_task", "21854": "pick_next_task_fair", "21855": "pick_next_task_idle", "21856": "pick_next_task_rt", "21857": "pick_rt_task", "21858": "pid", "21859": "pid1", "21860": "pid2", "21861": "pid_alive", "21862": "pid_before", "21863": "pid_cache", "21864": "pid_cachep", "21865": "pid_caches_lh", "21866": "pid_caches_mutex", "21867": "pid_chain", "21868": "pid_count", "21869": "pid_fry", "21870": "pid_hash", "21871": "pid_hashfn", "21872": "pid_link", "21873": "pid_max", "21874": "pid_max_max", "21875": "pid_max_min", "21876": "pid_namespace", "21877": "pid_namespaces_init", "21878": "pid_nr", "21879": "pid_nr_ns", "21880": "pid_ns", "21881": "pid_ns_cachep", "21882": "pid_ns_ctl_handler", "21883": "pid_ns_ctl_table", "21884": "pid_ns_for_children", "21885": "pid_ns_prepare_proc", "21886": "pid_ns_release_proc", "21887": "pid_t", "21888": "pid_task", "21889": "pid_type", "21890": "pid_vnr", "21891": "pidhash_init", "21892": "pidhash_shift", "21893": "pidhash_size", "21894": "pidlist_allocate", "21895": "pidlist_array_load", "21896": "pidlist_free", "21897": "pidlist_mutex", "21898": "pidlist_uniq", "21899": "pidlists", "21900": "pidmap", "21901": "pidmap_lock", "21902": "pidns_get", "21903": "pidns_install", "21904": "pidns_operations", "21905": "pidns_put", "21906": "pids", "21907": "pin", "21908": "pin_count", "21909": "pin_insert", "21910": "pin_kill", "21911": "pin_remove", "21912": "pinned", "21913": "pinned_groups", "21914": "pinned_sb", "21915": "pinned_vm", "21916": "pinst", "21917": "pinst_has_cpu", "21918": "pip", "21919": "pipe", "21920": "pipe_close", "21921": "pipe_count", "21922": "pipe_inode_info", "21923": "pipe_max_size", "21924": "pipe_min_size", "21925": "pipe_open", "21926": "pipe_proc_fn", "21927": "pipesummary", "21928": "pks", "21929": "pkt", "21930": "place_entity", "21931": "platform", "21932": "platform_begin", "21933": "platform_device", "21934": "platform_driver", "21935": "platform_end", "21936": "platform_finish", "21937": "platform_hibernation_ops", "21938": "platform_leave", "21939": "platform_mode", "21940": "platform_pre_restore", "21941": "platform_pre_snapshot", "21942": "platform_recover", "21943": "platform_restore_cleanup", "21944": "platform_support", "21945": "please", "21946": "plen", "21947": "plist_add", "21948": "plist_del", "21949": "plist_first", "21950": "plist_first_entry", "21951": "plist_for_each", "21952": "plist_for_each_entry", "21953": "plist_head", "21954": "plist_head_empty", "21955": "plist_head_init", "21956": "plist_last", "21957": "plist_node", "21958": "plist_node_init", "21959": "plug", "21960": "plug_thread", "21961": "pm", "21962": "pm_async", "21963": "pm_async_enabled", "21964": "pm_async_show", "21965": "pm_async_store", "21966": "pm_autosleep_init", "21967": "pm_autosleep_lock", "21968": "pm_autosleep_set_state", "21969": "pm_autosleep_state", "21970": "pm_autosleep_unlock", "21971": "pm_chain_head", "21972": "pm_freezing", "21973": "pm_get_wakeup_count", "21974": "pm_labels", "21975": "pm_message_t", "21976": "pm_mutex", "21977": "pm_nosig_freezing", "21978": "pm_notifier", "21979": "pm_notifier_call_chain", "21980": "pm_power_off", "21981": "pm_power_off_prepare", "21982": "pm_prepare_console", "21983": "pm_print_active_wakeup_sources", "21984": "pm_print_times", "21985": "pm_print_times_enabled", "21986": "pm_print_times_init", "21987": "pm_qos_add_notifier", "21988": "pm_qos_add_request", "21989": "pm_qos_array", "21990": "pm_qos_class", "21991": "pm_qos_constraints", "21992": "pm_qos_dbg_open", "21993": "pm_qos_dbg_show_requests", "21994": "pm_qos_debug_fops", "21995": "pm_qos_flags", "21996": "pm_qos_flags_remove_req", "21997": "pm_qos_flags_request", "21998": "pm_qos_get_value", "21999": "pm_qos_lock", "22000": "pm_qos_object", "22001": "pm_qos_power_fops", "22002": "pm_qos_power_init", "22003": "pm_qos_power_miscdev", "22004": "pm_qos_power_open", "22005": "pm_qos_power_read", "22006": "pm_qos_power_release", "22007": "pm_qos_power_write", "22008": "pm_qos_read_value", "22009": "pm_qos_remove_notifier", "22010": "pm_qos_remove_request", "22011": "pm_qos_req_action", "22012": "pm_qos_request", "22013": "pm_qos_request_active", "22014": "pm_qos_set_value", "22015": "pm_qos_update_flags", "22016": "pm_qos_update_request", "22017": "pm_qos_update_request_timeout", "22018": "pm_qos_update_target", "22019": "pm_qos_work_fn", "22020": "pm_restore_console", "22021": "pm_restore_gfp_mask", "22022": "pm_restrict_gfp_mask", "22023": "pm_save_wakeup_count", "22024": "pm_show_wakelocks", "22025": "pm_states", "22026": "pm_suspend", "22027": "pm_sysrq_init", "22028": "pm_system_wakeup", "22029": "pm_test_level", "22030": "pm_test_show", "22031": "pm_tests", "22032": "pm_wake_lock", "22033": "pm_wake_unlock", "22034": "pm_wakep_autosleep_enabled", "22035": "pm_wakeup_clear", "22036": "pm_wakeup_pending", "22037": "pmask", "22038": "pmd_huge_pte", "22039": "pmod", "22040": "pmtmr", "22041": "pmu", "22042": "pmu_cpu_context", "22043": "pmus", "22044": "pmus_lock", "22045": "pmus_srcu", "22046": "pn", "22047": "pnr", "22048": "pnt", "22049": "pointer", "22050": "points", "22051": "pol", "22052": "policy", "22053": "poll", "22054": "poll_spurious_irq_timer", "22055": "poll_spurious_irqs", "22056": "poll_table", "22057": "poll_wait", "22058": "pool", "22059": "pool_id", "22060": "pool_ids", "22061": "pool_mayday_timeout", "22062": "pool_workqueue", "22063": "pop_stack", "22064": "populate_kprobe_blacklist", "22065": "populate_seccomp_data", "22066": "populated", "22067": "populated_cnt", "22068": "populated_kn", "22069": "port", "22070": "portid", "22071": "pos", "22072": "pos_css", "22073": "pos_f", "22074": "posix_clock", "22075": "posix_clock_compat_ioctl", "22076": "posix_clock_desc", "22077": "posix_clock_fasync", "22078": "posix_clock_file_operations", "22079": "posix_clock_ioctl", "22080": "posix_clock_mmap", "22081": "posix_clock_open", "22082": "posix_clock_poll", "22083": "posix_clock_read", "22084": "posix_clock_realtime_adj", "22085": "posix_clock_realtime_get", "22086": "posix_clock_realtime_set", "22087": "posix_clock_register", "22088": "posix_clock_release", "22089": "posix_clock_unregister", "22090": "posix_clocks", "22091": "posix_cpu_timers_can_stop_tick", "22092": "posix_cpu_timers_init", "22093": "posix_cpu_timers_init_group", "22094": "posix_get_boottime", "22095": "posix_get_coarse_res", "22096": "posix_get_monotonic_coarse", "22097": "posix_get_monotonic_raw", "22098": "posix_get_realtime_coarse", "22099": "posix_get_tai", "22100": "posix_ktime_get_ts", "22101": "posix_timer_add", "22102": "posix_timer_by_id", "22103": "posix_timer_event", "22104": "posix_timer_fn", "22105": "posix_timer_id", "22106": "posix_timers", "22107": "posix_timers_cache", "22108": "posix_timers_hashtable", "22109": "posix_timers_register_clock", "22110": "possible", "22111": "post_exception", "22112": "post_handler", "22113": "post_relocation", "22114": "post_schedule", "22115": "post_schedule_rt", "22116": "post_trigger", "22117": "postfix", "22118": "postfix_append_op", "22119": "postfix_append_operand", "22120": "postfix_clear", "22121": "postfix_elt", "22122": "posth_val", "22123": "postponed", "22124": "power", "22125": "power_attr", "22126": "power_down", "22127": "power_kobj", "22128": "poweroff_cmd", "22129": "poweroff_work", "22130": "powner", "22131": "pp", "22132": "ppc_rtas", "22133": "ppid", "22134": "ppos", "22135": "pprev", "22136": "pps_calcnt", "22137": "pps_clear", "22138": "pps_dec_valid", "22139": "pps_errcnt", "22140": "pps_fbase", "22141": "pps_fill_timex", "22142": "pps_freq", "22143": "pps_inc_freq_interval", "22144": "pps_intcnt", "22145": "pps_jitcnt", "22146": "pps_jitter", "22147": "pps_normalize_ts", "22148": "pps_normtime", "22149": "pps_phase_filter_add", "22150": "pps_phase_filter_get", "22151": "pps_reset_freq_interval", "22152": "pps_set_freq", "22153": "pps_shift", "22154": "pps_stabil", "22155": "pps_stbcnt", "22156": "pps_tf", "22157": "pps_valid", "22158": "ppsfreq", "22159": "pqf", "22160": "pqueue", "22161": "pr_alert", "22162": "pr_cont", "22163": "pr_cont_cgroup_name", "22164": "pr_cont_pool_info", "22165": "pr_cont_work", "22166": "pr_crit", "22167": "pr_crit_once", "22168": "pr_debug", "22169": "pr_devel", "22170": "pr_emerg", "22171": "pr_err", "22172": "pr_fmt", "22173": "pr_info", "22174": "pr_info_once", "22175": "pr_notice", "22176": "pr_notice_once", "22177": "pr_pid", "22178": "pr_reg", "22179": "pr_warn", "22180": "pr_warn_once", "22181": "pr_warning", "22182": "prandom_u32", "22183": "prctl", "22184": "prctl_get_tid_address", "22185": "prctl_map", "22186": "prctl_mm_map", "22187": "prctl_set_mm", "22188": "prctl_set_mm_exe_file", "22189": "prctl_set_mm_map", "22190": "prctl_set_seccomp", "22191": "pre_exception", "22192": "pre_handler", "22193": "pre_handler_kretprobe", "22194": "pre_restore", "22195": "pre_snapshot", "22196": "pre_ssout", "22197": "pre_unpark", "22198": "preallocate_image_highmem", "22199": "preallocate_image_memory", "22200": "preallocated_names", "22201": "prec", "22202": "precedence", "22203": "precision", "22204": "pred", "22205": "pred_stack", "22206": "preds", "22207": "preempt", "22208": "preempt_check_resched", "22209": "preempt_count", "22210": "preempt_count_add", "22211": "preempt_count_dec", "22212": "preempt_count_equals", "22213": "preempt_count_set", "22214": "preempt_count_sub", "22215": "preempt_disable", "22216": "preempt_disable_ip", "22217": "preempt_disable_notrace", "22218": "preempt_enable", "22219": "preempt_enable_no_resched", "22220": "preempt_enable_notrace", "22221": "preempt_fold_need_resched", "22222": "preempt_notifier", "22223": "preempt_notifier_register", "22224": "preempt_notifier_unregister", "22225": "preempt_notifiers", "22226": "preempt_offset", "22227": "preempt_schedule", "22228": "preempt_schedule_common", "22229": "preempt_schedule_context", "22230": "preempt_schedule_irq", "22231": "preempt_set_need_resched", "22232": "preempt_timestamp", "22233": "preempt_trace", "22234": "preemptible", "22235": "preemption", "22236": "preemptirqsoff_tracer", "22237": "preemptirqsoff_tracer_init", "22238": "preemptoff_tracer", "22239": "preemptoff_tracer_init", "22240": "pref_node_fork", "22241": "prefer_sibling", "22242": "preferred_console", "22243": "preferred_group_nid", "22244": "prefetch", "22245": "prefix", "22246": "prefix_len", "22247": "prefix_name", "22248": "preflow_handler", "22249": "preh_val", "22250": "preloaded_csets", "22251": "prelock_base", "22252": "prepare", "22253": "prepare_arch_switch", "22254": "prepare_creds", "22255": "prepare_highmem_image", "22256": "prepare_image", "22257": "prepare_kernel_cred", "22258": "prepare_kprobe", "22259": "prepare_lock_switch", "22260": "prepare_optimized_kprobe", "22261": "prepare_reply", "22262": "prepare_signal", "22263": "prepare_task_switch", "22264": "prepare_to_wait", "22265": "prepare_to_wait_event", "22266": "prepare_to_wait_exclusive", "22267": "prepare_uprobe", "22268": "prepare_uretprobe", "22269": "prepared", "22270": "present", "22271": "preserve_context", "22272": "preset_lpj", "22273": "prev", "22274": "prev_bit", "22275": "prev_chain_key", "22276": "prev_class", "22277": "prev_count", "22278": "prev_cpu", "22279": "prev_cputime", "22280": "prev_ctx", "22281": "prev_eff_load", "22282": "prev_hlock", "22283": "prev_insn_idx", "22284": "prev_irq_time", "22285": "prev_jiffy", "22286": "prev_len", "22287": "prev_lower_first", "22288": "prev_lower_last", "22289": "prev_mm", "22290": "prev_nr", "22291": "prev_offset", "22292": "prev_overruns", "22293": "prev_padding", "22294": "prev_page", "22295": "prev_pid", "22296": "prev_prio", "22297": "prev_state", "22298": "prev_steal_time", "22299": "prev_steal_time_rq", "22300": "prev_subbuf", "22301": "prev_sum_exec_runtime", "22302": "prev_time", "22303": "prev_upper_first", "22304": "prev_upper_last", "22305": "prev_value", "22306": "primary", "22307": "primary_event_id", "22308": "print", "22309": "print_base", "22310": "print_bpf_insn", "22311": "print_cfs_group_stats", "22312": "print_cfs_rq", "22313": "print_cfs_stats", "22314": "print_circular_bug", "22315": "print_counts", "22316": "print_cpu", "22317": "print_cpu_stall", "22318": "print_cpu_stall_fast_no_hz", "22319": "print_cpu_stall_info", "22320": "print_cpu_stall_info_begin", "22321": "print_cpu_stall_info_end", "22322": "print_deadlock_bug", "22323": "print_deadlock_scenario", "22324": "print_disabled", "22325": "print_dl_rq", "22326": "print_dl_stats", "22327": "print_entry", "22328": "print_event_filter", "22329": "print_fatal_signal", "22330": "print_fatal_signals", "22331": "print_fmt", "22332": "print_fn_t", "22333": "print_freed_lock_bug", "22334": "print_graph_abs_time", "22335": "print_graph_comment", "22336": "print_graph_cpu", "22337": "print_graph_duration", "22338": "print_graph_entry", "22339": "print_graph_entry_leaf", "22340": "print_graph_entry_nested", "22341": "print_graph_function", "22342": "print_graph_function_event", "22343": "print_graph_function_flags", "22344": "print_graph_headers", "22345": "print_graph_headers_flags", "22346": "print_graph_irq", "22347": "print_graph_lat_fmt", "22348": "print_graph_proc", "22349": "print_graph_prologue", "22350": "print_graph_return", "22351": "print_header", "22352": "print_held_locks_bug", "22353": "print_ip_ins", "22354": "print_ip_sym", "22355": "print_irq_desc", "22356": "print_irq_lock_scenario", "22357": "print_irqtrace_events", "22358": "print_kernel_ident", "22359": "print_kprobe_event", "22360": "print_kretprobe_event", "22361": "print_lat_header", "22362": "print_line", "22363": "print_line_t", "22364": "print_lock", "22365": "print_lock_contention_bug", "22366": "print_lock_name", "22367": "print_lock_nested_lock_not_held", "22368": "print_lockdep_cache", "22369": "print_lockdep_off", "22370": "print_max", "22371": "print_max_stack", "22372": "print_modules", "22373": "print_name", "22374": "print_name_offset", "22375": "print_once", "22376": "print_one_line", "22377": "print_one_rcu_data", "22378": "print_one_rcu_node_boost", "22379": "print_one_rcu_pending", "22380": "print_one_rcu_state", "22381": "print_oops_end_marker", "22382": "print_other_cpu_stall", "22383": "print_out", "22384": "print_owner", "22385": "print_rq", "22386": "print_rt_rq", "22387": "print_rt_stats", "22388": "print_shortest_lock_dependencies", "22389": "print_stack_trace", "22390": "print_subsystem_event_filter", "22391": "print_symbol", "22392": "print_syscall_exit", "22393": "print_tainted", "22394": "print_task", "22395": "print_tickdevice", "22396": "print_trace_header", "22397": "print_trace_line", "22398": "print_type_", "22399": "print_type_format_", "22400": "print_type_func_t", "22401": "print_unload_info", "22402": "print_unlock_imbalance_bug", "22403": "print_uprobe_event", "22404": "print_usage_bug", "22405": "print_usage_bug_scenario", "22406": "print_verifier_state", "22407": "print_worker_info", "22408": "printed", "22409": "printed_something", "22410": "printk", "22411": "printk_deferred", "22412": "printk_deferred_once", "22413": "printk_delay_msec", "22414": "printk_lock", "22415": "printk_log", "22416": "printk_once", "22417": "printk_ratelimit", "22418": "printk_ratelimit_state", "22419": "printk_ratelimited", "22420": "printk_task", "22421": "prints", "22422": "prio", "22423": "prio_changed", "22424": "prio_changed_fair", "22425": "prio_changed_idle", "22426": "prio_changed_rt", "22427": "prio_high", "22428": "prio_low", "22429": "prio_to_weight", "22430": "prio_to_wmult", "22431": "priority", "22432": "priv", "22433": "private", "22434": "private_data", "22435": "prlimit64", "22436": "probe", "22437": "probe_arg", "22438": "probe_event_disable", "22439": "probe_event_enable", "22440": "probe_irq_mask", "22441": "probe_irq_off", "22442": "probe_irq_on", "22443": "probe_kernel_address", "22444": "probe_kernel_read", "22445": "probe_kernel_write", "22446": "probe_kthread_data", "22447": "probe_likely_condition", "22448": "probe_list", "22449": "probe_lock", "22450": "probe_remove_event_call", "22451": "probe_sched_switch", "22452": "probe_sched_wakeup", "22453": "probe_wakeup", "22454": "probe_wakeup_migrate_task", "22455": "probe_wakeup_sched_switch", "22456": "probed_mod", "22457": "probes_open", "22458": "probes_profile_seq_show", "22459": "probes_seq_next", "22460": "probes_seq_op", "22461": "probes_seq_show", "22462": "probes_seq_start", "22463": "probes_seq_stop", "22464": "probes_write", "22465": "probing_active", "22466": "proc", "22467": "proc_caches_init", "22468": "proc_cap_handler", "22469": "proc_cgroupstats_operations", "22470": "proc_cgroupstats_show", "22471": "proc_cleanup_work", "22472": "proc_clear_tty", "22473": "proc_coredump_connector", "22474": "proc_cpuset_show", "22475": "proc_create", "22476": "proc_create_data", "22477": "proc_dir_entry", "22478": "proc_dma_show", "22479": "proc_do_cad_pid", "22480": "proc_dohung_task_timeout_secs", "22481": "proc_dointvec", "22482": "proc_dointvec_jiffies", "22483": "proc_dointvec_minmax", "22484": "proc_dointvec_minmax_coredump", "22485": "proc_dointvec_minmax_sysadmin", "22486": "proc_dointvec_ms_jiffies", "22487": "proc_dointvec_userhz_jiffies", "22488": "proc_dostring", "22489": "proc_dostring_coredump", "22490": "proc_doulongvec_minmax", "22491": "proc_doulongvec_ms_jiffies_minmax", "22492": "proc_execdomains_init", "22493": "proc_fork_connector", "22494": "proc_get_long", "22495": "proc_gid_map_write", "22496": "proc_gid_seq_operations", "22497": "proc_handler", "22498": "proc_id_connector", "22499": "proc_iomem_operations", "22500": "proc_ioports_operations", "22501": "proc_kprobes_optimization_handler", "22502": "proc_lock_stat_operations", "22503": "proc_lockdep_chains_operations", "22504": "proc_lockdep_operations", "22505": "proc_lockdep_stats_operations", "22506": "proc_mkdir", "22507": "proc_mnt", "22508": "proc_modules_init", "22509": "proc_modules_operations", "22510": "proc_nmi_watchdog", "22511": "proc_nr_dentry", "22512": "proc_nr_files", "22513": "proc_nr_inodes", "22514": "proc_ns_fget", "22515": "proc_ns_operations", "22516": "proc_profile_operations", "22517": "proc_projid_map_write", "22518": "proc_projid_seq_operations", "22519": "proc_ptrace_connector", "22520": "proc_put_char", "22521": "proc_put_long", "22522": "proc_remove", "22523": "proc_sched_autogroup_set_nice", "22524": "proc_sched_autogroup_show_task", "22525": "proc_sched_set_task", "22526": "proc_sched_show_task", "22527": "proc_set_size", "22528": "proc_setgroups_show", "22529": "proc_setgroups_write", "22530": "proc_sid_connector", "22531": "proc_skip_char", "22532": "proc_skip_spaces", "22533": "proc_soft_watchdog", "22534": "proc_taint", "22535": "proc_uid_map_write", "22536": "proc_uid_seq_operations", "22537": "proc_watchdog", "22538": "proc_watchdog_common", "22539": "proc_watchdog_thresh", "22540": "proc_watchdog_update", "22541": "proc_work", "22542": "proc_wspace_sep", "22543": "process", "22544": "process_adj_status", "22545": "process_adjtimex_modes", "22546": "process_bpf_exit", "22547": "process_counts", "22548": "process_keyring", "22549": "process_one_work", "22550": "process_ops", "22551": "process_scheduled_works", "22552": "process_srcu", "22553": "process_timeout", "22554": "processed", "22555": "processes", "22556": "procname", "22557": "procs", "22558": "proctitle", "22559": "producer", "22560": "producer_fifo", "22561": "producer_nice", "22562": "production", "22563": "prof_buffer", "22564": "prof_cpu_mask", "22565": "prof_cpu_mask_proc_fops", "22566": "prof_cpu_mask_proc_open", "22567": "prof_cpu_mask_proc_show", "22568": "prof_cpu_mask_proc_write", "22569": "prof_exp", "22570": "prof_len", "22571": "prof_on", "22572": "prof_shift", "22573": "profile_cpu_callback", "22574": "profile_discard_flip_buffers", "22575": "profile_event_register", "22576": "profile_event_unregister", "22577": "profile_flip_buffers", "22578": "profile_flip_mutex", "22579": "profile_graph_entry", "22580": "profile_graph_return", "22581": "profile_handoff_task", "22582": "profile_hit", "22583": "profile_hits", "22584": "profile_init", "22585": "profile_munmap", "22586": "profile_nop", "22587": "profile_open", "22588": "profile_pc", "22589": "profile_seq_op", "22590": "profile_setup", "22591": "profile_task_exit", "22592": "profile_tick", "22593": "profile_type", "22594": "profiling", "22595": "profiling_show", "22596": "profiling_store", "22597": "prog", "22598": "prog_fd", "22599": "prog_type", "22600": "proglen", "22601": "projid", "22602": "projid_m_show", "22603": "projid_m_start", "22604": "projid_map", "22605": "projid_t", "22606": "prompt", "22607": "prot", "22608": "prove_locking", "22609": "proxy_owner", "22610": "prstatus", "22611": "prune_list", "22612": "prune_one", "22613": "prune_thread", "22614": "prune_tree_thread", "22615": "prv", "22616": "ps", "22617": "pse", "22618": "pse_depth", "22619": "psig", "22620": "pskb_expand_head", "22621": "psp", "22622": "pstart", "22623": "pt_regs", "22624": "pt_regs_to_gdb_regs", "22625": "pte_pfn", "22626": "pte_t", "22627": "pte_unmap_unlock", "22628": "ptep", "22629": "ptep_clear_flush_notify", "22630": "ptid", "22631": "ptl", "22632": "ptr", "22633": "ptr_to_compat", "22634": "ptrace", "22635": "ptrace_attach", "22636": "ptrace_check_attach", "22637": "ptrace_detach", "22638": "ptrace_disable", "22639": "ptrace_do_notify", "22640": "ptrace_entry", "22641": "ptrace_event", "22642": "ptrace_event_enabled", "22643": "ptrace_event_pid", "22644": "ptrace_freeze_traced", "22645": "ptrace_get_task_struct", "22646": "ptrace_getsiginfo", "22647": "ptrace_has_cap", "22648": "ptrace_init_task", "22649": "ptrace_may_access", "22650": "ptrace_message", "22651": "ptrace_notify", "22652": "ptrace_peek_siginfo", "22653": "ptrace_peeksiginfo_args", "22654": "ptrace_readdata", "22655": "ptrace_regset", "22656": "ptrace_reparented", "22657": "ptrace_request", "22658": "ptrace_resume", "22659": "ptrace_setoptions", "22660": "ptrace_setsiginfo", "22661": "ptrace_signal", "22662": "ptrace_signal_deliver", "22663": "ptrace_signal_wake_up", "22664": "ptrace_stop", "22665": "ptrace_traceme", "22666": "ptrace_trap_notify", "22667": "ptrace_unfreeze_traced", "22668": "ptrace_writedata", "22669": "ptraced", "22670": "pts_norm", "22671": "ptype", "22672": "public_key_signature", "22673": "pull_rt_task", "22674": "pulled_task", "22675": "punc", "22676": "purgatory_buf", "22677": "purgatory_info", "22678": "purgatory_load_addr", "22679": "push_cpu", "22680": "push_flags", "22681": "push_insn", "22682": "push_irq_work_func", "22683": "push_lock", "22684": "push_rt_task", "22685": "push_rt_tasks", "22686": "push_stack", "22687": "push_work", "22688": "pushable_dl_tasks", "22689": "pushable_dl_tasks_leftmost", "22690": "pushable_dl_tasks_root", "22691": "pushable_tasks", "22692": "put", "22693": "put_addr", "22694": "put_callchain_buffers", "22695": "put_callchain_entry", "22696": "put_clock_desc", "22697": "put_compat_itimerspec", "22698": "put_compat_itimerval", "22699": "put_compat_rusage", "22700": "put_cpu", "22701": "put_cpu_ptr", "22702": "put_cpu_var", "22703": "put_cred", "22704": "put_cred_rcu", "22705": "put_cset", "22706": "put_css_set", "22707": "put_css_set_locked", "22708": "put_ctx", "22709": "put_event", "22710": "put_files_struct", "22711": "put_filesystem", "22712": "put_group_info", "22713": "put_io_context", "22714": "put_ipc_ns", "22715": "put_lock_stats", "22716": "put_mnt_ns", "22717": "put_net", "22718": "put_numa_group", "22719": "put_online_cpus", "22720": "put_packet", "22721": "put_page", "22722": "put_pid", "22723": "put_pid_ns", "22724": "put_posix_clock", "22725": "put_prev_entity", "22726": "put_prev_task", "22727": "put_prev_task_fair", "22728": "put_prev_task_fake", "22729": "put_prev_task_idle", "22730": "put_prev_task_rt", "22731": "put_pwq", "22732": "put_pwq_unlocked", "22733": "put_recursion_context", "22734": "put_seccomp_filter", "22735": "put_signal_struct", "22736": "put_system", "22737": "put_task_struct", "22738": "put_tree", "22739": "put_tree_ref", "22740": "put_unbound_pool", "22741": "put_uprobe", "22742": "put_user", "22743": "put_user_ns", "22744": "put_uts_ns", "22745": "putname", "22746": "pvclock_gtod_chain", "22747": "pvclock_gtod_register_notifier", "22748": "pvclock_gtod_unregister_notifier", "22749": "pwd", "22750": "pwq", "22751": "pwq_activate_delayed_work", "22752": "pwq_activate_first_delayed", "22753": "pwq_adjust_max_active", "22754": "pwq_cache", "22755": "pwq_dec_nr_in_flight", "22756": "pwq_tbl", "22757": "pwq_unbound_release_workfn", "22758": "pwqs", "22759": "pwqs_node", "22760": "pwrsw_enabled", "22761": "q", "22762": "qSupported", "22763": "qbytes", "22764": "qcfs_rq", "22765": "qhimark", "22766": "ql", "22767": "qlen", "22768": "qlen_last_fqs_check", "22769": "qlen_lazy", "22770": "qll", "22771": "qlowmark", "22772": "qos", "22773": "qrwlock", "22774": "qs_pending", "22775": "qsmask", "22776": "qsmaskinit", "22777": "qsmaskinitnext", "22778": "queue", "22779": "queue_delayed_work", "22780": "queue_delayed_work_on", "22781": "queue_kthread_work", "22782": "queue_lock", "22783": "queue_read_lock_slowpath", "22784": "queue_stop_cpus_work", "22785": "queue_up_suspend_work", "22786": "queue_work", "22787": "queue_work_on", "22788": "queue_write_lock_slowpath", "22789": "queued", "22790": "quick", "22791": "quota", "22792": "quota_us", "22793": "quote", "22794": "quoted", "22795": "r", "22796": "r1", "22797": "r2", "22798": "r3", "22799": "r4", "22800": "r5", "22801": "r_next", "22802": "r_open", "22803": "r_show", "22804": "r_start", "22805": "r_stop", "22806": "radix", "22807": "radix_tree_delete", "22808": "radix_tree_insert", "22809": "radix_tree_lookup", "22810": "raise_softirq", "22811": "raise_softirq_irqoff", "22812": "raised", "22813": "raised_list", "22814": "ram_res", "22815": "ran", "22816": "rand", "22817": "rand1", "22818": "rand_lock", "22819": "random_table", "22820": "randomize_va_space", "22821": "range", "22822": "rate_limit", "22823": "ratelimit", "22824": "rating", "22825": "ratio", "22826": "raw", "22827": "raw_", "22828": "raw_cpu_inc", "22829": "raw_cpu_ptr", "22830": "raw_cpu_read", "22831": "raw_cpu_write", "22832": "raw_data", "22833": "raw_init", "22834": "raw_interval", "22835": "raw_local_irq_restore", "22836": "raw_local_irq_save", "22837": "raw_lock", "22838": "raw_notifier_call_chain", "22839": "raw_notifier_chain_register", "22840": "raw_notifier_chain_unregister", "22841": "raw_notifier_head", "22842": "raw_nsecs", "22843": "raw_read_can_lock", "22844": "raw_read_seqcount", "22845": "raw_rq", "22846": "raw_secs", "22847": "raw_smp_processor_id", "22848": "raw_spin_is_locked", "22849": "raw_spin_lock", "22850": "raw_spin_lock_init", "22851": "raw_spin_lock_irq", "22852": "raw_spin_lock_irqsave", "22853": "raw_spin_lock_nested", "22854": "raw_spin_trylock", "22855": "raw_spin_trylock_irqsave", "22856": "raw_spin_unlock", "22857": "raw_spin_unlock_irq", "22858": "raw_spin_unlock_irqrestore", "22859": "raw_spin_unlock_wait", "22860": "raw_spinlock", "22861": "raw_spinlock_t", "22862": "raw_time", "22863": "raw_ts", "22864": "raw_write_can_lock", "22865": "raw_write_seqcount_latch", "22866": "rb", "22867": "rb_add_time_stamp", "22868": "rb_advance_iter", "22869": "rb_advance_reader", "22870": "rb_alloc", "22871": "rb_alloc_aux", "22872": "rb_alloc_aux_page", "22873": "rb_allocate_cpu_buffer", "22874": "rb_allocate_pages", "22875": "rb_buffer_peek", "22876": "rb_calculate_event_length", "22877": "rb_check_bpage", "22878": "rb_check_list", "22879": "rb_check_pages", "22880": "rb_commit", "22881": "rb_commit_index", "22882": "rb_cpu_notify", "22883": "rb_data", "22884": "rb_decrement_entry", "22885": "rb_end_commit", "22886": "rb_entry", "22887": "rb_erase", "22888": "rb_event_data", "22889": "rb_event_data_length", "22890": "rb_event_discard", "22891": "rb_event_index", "22892": "rb_event_is_commit", "22893": "rb_event_length", "22894": "rb_event_set_padding", "22895": "rb_event_ts_length", "22896": "rb_first", "22897": "rb_free", "22898": "rb_free_aux", "22899": "rb_free_aux_page", "22900": "rb_free_cpu_buffer", "22901": "rb_free_rcu", "22902": "rb_free_work", "22903": "rb_get_reader_page", "22904": "rb_hammer", "22905": "rb_hammer_test", "22906": "rb_handle_head_page", "22907": "rb_has_aux", "22908": "rb_head_page_activate", "22909": "rb_head_page_deactivate", "22910": "rb_head_page_replace", "22911": "rb_head_page_set", "22912": "rb_head_page_set_head", "22913": "rb_head_page_set_normal", "22914": "rb_head_page_set_update", "22915": "rb_inc_iter", "22916": "rb_inc_page", "22917": "rb_init_page", "22918": "rb_insert_color", "22919": "rb_insert_pages", "22920": "rb_ipi", "22921": "rb_irq_work", "22922": "rb_is_head_page", "22923": "rb_is_reader_page", "22924": "rb_item", "22925": "rb_iter_head_event", "22926": "rb_iter_peek", "22927": "rb_iter_reset", "22928": "rb_last", "22929": "rb_left", "22930": "rb_leftmost", "22931": "rb_link", "22932": "rb_link_node", "22933": "rb_list_head", "22934": "rb_list_head_clear", "22935": "rb_lost_events", "22936": "rb_move_tail", "22937": "rb_next", "22938": "rb_node", "22939": "rb_null_event", "22940": "rb_num_of_entries", "22941": "rb_ok_to_lock", "22942": "rb_page", "22943": "rb_page_commit", "22944": "rb_page_entries", "22945": "rb_page_size", "22946": "rb_page_write", "22947": "rb_parent", "22948": "rb_per_cpu_empty", "22949": "rb_prev", "22950": "rb_reader_event", "22951": "rb_remove_pages", "22952": "rb_reserve_next_event", "22953": "rb_reset_cpu", "22954": "rb_reset_reader_page", "22955": "rb_reset_tail", "22956": "rb_right", "22957": "rb_root", "22958": "rb_set_commit_to_write", "22959": "rb_set_head_page", "22960": "rb_set_list_to_head", "22961": "rb_start_commit", "22962": "rb_string", "22963": "rb_tail_page_update", "22964": "rb_test", "22965": "rb_test_data", "22966": "rb_test_started", "22967": "rb_threads", "22968": "rb_time_stamp", "22969": "rb_try_to_discard", "22970": "rb_update_event", "22971": "rb_update_iter_read_stamp", "22972": "rb_update_pages", "22973": "rb_update_read_stamp", "22974": "rb_update_write_stamp", "22975": "rb_wake_up_waiters", "22976": "rb_wakeups", "22977": "rb_write_something", "22978": "rbi", "22979": "rbip", "22980": "rbtree_postorder_for_each_entry_safe", "22981": "rbwork", "22982": "rc", "22983": "rchan", "22984": "rchan_buf", "22985": "rchan_callbacks", "22986": "rchar", "22987": "rcp", "22988": "rcrmp", "22989": "rctx", "22990": "rctxp", "22991": "rcu", "22992": "rcu_accelerate_cbs", "22993": "rcu_access_pointer", "22994": "rcu_adopt_orphan_cbs", "22995": "rcu_advance_cbs", "22996": "rcu_all_qs", "22997": "rcu_assign_pointer", "22998": "rcu_barrier", "22999": "rcu_barrier_bh", "23000": "rcu_barrier_callback", "23001": "rcu_barrier_func", "23002": "rcu_barrier_sched", "23003": "rcu_barrier_tasks", "23004": "rcu_batch", "23005": "rcu_batch_dequeue", "23006": "rcu_batch_empty", "23007": "rcu_batch_init", "23008": "rcu_batch_move", "23009": "rcu_batch_queue", "23010": "rcu_batches", "23011": "rcu_batches_completed", "23012": "rcu_batches_completed_bh", "23013": "rcu_batches_completed_sched", "23014": "rcu_batches_started", "23015": "rcu_batches_started_bh", "23016": "rcu_batches_started_sched", "23017": "rcu_bh", "23018": "rcu_bh_ctrlblk", "23019": "rcu_bh_data", "23020": "rcu_bh_force_quiescent_state", "23021": "rcu_bh_lock_key", "23022": "rcu_bh_lock_map", "23023": "rcu_bh_ops", "23024": "rcu_bh_qs", "23025": "rcu_bh_state", "23026": "rcu_bh_torture_deferred_free", "23027": "rcu_bh_torture_read_lock", "23028": "rcu_bh_torture_read_unlock", "23029": "rcu_bind_gp_kthread", "23030": "rcu_blocked_node", "23031": "rcu_blocking_is_gp", "23032": "rcu_boost", "23033": "rcu_boost_inflight", "23034": "rcu_boost_kthread", "23035": "rcu_boost_kthread_setaffinity", "23036": "rcu_boot_init_nocb_percpu_data", "23037": "rcu_boot_init_percpu_data", "23038": "rcu_bootup_announce", "23039": "rcu_bootup_announce_oddness", "23040": "rcu_busted_ops", "23041": "rcu_busted_torture_deferred_free", "23042": "rcu_callback_key", "23043": "rcu_callback_map", "23044": "rcu_can_boost", "23045": "rcu_capacity", "23046": "rcu_cbs_completed", "23047": "rcu_check_callbacks", "23048": "rcu_check_gp_kthread_starvation", "23049": "rcu_check_quiescent_state", "23050": "rcu_cleanup_after_idle", "23051": "rcu_cleanup_dead_cpu", "23052": "rcu_cleanup_dead_rnp", "23053": "rcu_cleanup_dying_cpu", "23054": "rcu_cleanup_dying_idle_cpu", "23055": "rcu_copy_process", "23056": "rcu_cpu_has_callbacks", "23057": "rcu_cpu_has_work", "23058": "rcu_cpu_kthread", "23059": "rcu_cpu_kthread_cpu", "23060": "rcu_cpu_kthread_loops", "23061": "rcu_cpu_kthread_park", "23062": "rcu_cpu_kthread_setup", "23063": "rcu_cpu_kthread_should_run", "23064": "rcu_cpu_kthread_status", "23065": "rcu_cpu_kthread_task", "23066": "rcu_cpu_notify", "23067": "rcu_cpu_stall_reset", "23068": "rcu_cpu_stall_suppress", "23069": "rcu_cpu_stall_timeout", "23070": "rcu_cpu_thread_spec", "23071": "rcu_ctrlblk", "23072": "rcu_data", "23073": "rcu_delta_jiffies", "23074": "rcu_dereference", "23075": "rcu_dereference_bh", "23076": "rcu_dereference_check", "23077": "rcu_dereference_check_sched_domain", "23078": "rcu_dereference_raw", "23079": "rcu_dereference_raw_notrace", "23080": "rcu_dereference_sched", "23081": "rcu_do_batch", "23082": "rcu_dump_cpu_stacks", "23083": "rcu_dynticks", "23084": "rcu_dynticks_task_enter", "23085": "rcu_dynticks_task_exit", "23086": "rcu_early_boot_tests", "23087": "rcu_end_inkernel_boot", "23088": "rcu_eqs_enter", "23089": "rcu_eqs_enter_common", "23090": "rcu_eqs_exit", "23091": "rcu_eqs_exit_common", "23092": "rcu_expedite_gp", "23093": "rcu_expedited", "23094": "rcu_expedited_nesting", "23095": "rcu_fanout_leaf", "23096": "rcu_for_each_leaf_node", "23097": "rcu_for_each_node_breadth_first", "23098": "rcu_for_each_nonleaf_node_breadth_first", "23099": "rcu_force_quiescent_state", "23100": "rcu_fqs_class", "23101": "rcu_free_pool", "23102": "rcu_free_pwq", "23103": "rcu_free_wq", "23104": "rcu_future_gp_cleanup", "23105": "rcu_future_needs_gp", "23106": "rcu_get_root", "23107": "rcu_gp_cleanup", "23108": "rcu_gp_fqs", "23109": "rcu_gp_in_progress", "23110": "rcu_gp_init", "23111": "rcu_gp_is_expedited", "23112": "rcu_gp_kthread", "23113": "rcu_gp_kthread_wake", "23114": "rcu_head", "23115": "rcu_idle_count_callbacks_posted", "23116": "rcu_idle_enter", "23117": "rcu_idle_exit", "23118": "rcu_idle_gp_delay", "23119": "rcu_idle_lazy_gp_delay", "23120": "rcu_implicit_dynticks_qs", "23121": "rcu_init", "23122": "rcu_init_geometry", "23123": "rcu_init_levelspread", "23124": "rcu_init_new_rnp", "23125": "rcu_init_nohz", "23126": "rcu_init_one", "23127": "rcu_init_one_nocb", "23128": "rcu_init_percpu_data", "23129": "rcu_initiate_boost", "23130": "rcu_initiate_boost_trace", "23131": "rcu_irq_enter", "23132": "rcu_irq_exit", "23133": "rcu_is_callbacks_kthread", "23134": "rcu_is_cpu_rrupt_from_idle", "23135": "rcu_is_nocb_cpu", "23136": "rcu_is_watching", "23137": "rcu_jiffies_till_stall_check", "23138": "rcu_kick_nohz_cpu", "23139": "rcu_kthread_do_work", "23140": "rcu_leak_callback", "23141": "rcu_lock_acquire", "23142": "rcu_lock_break", "23143": "rcu_lock_key", "23144": "rcu_lock_map", "23145": "rcu_lock_release", "23146": "rcu_lockdep_assert", "23147": "rcu_lockdep_current_cpu_online", "23148": "rcu_momentary_dyntick_idle", "23149": "rcu_needs_cpu", "23150": "rcu_next_node_entry", "23151": "rcu_nmi_enter", "23152": "rcu_nmi_exit", "23153": "rcu_no_completed", "23154": "rcu_nocb_adopt_orphan_cbs", "23155": "rcu_nocb_cpu_needs_barrier", "23156": "rcu_nocb_gp_cleanup", "23157": "rcu_nocb_gp_set", "23158": "rcu_nocb_kthread", "23159": "rcu_nocb_leader_stride", "23160": "rcu_nocb_mask", "23161": "rcu_nocb_need_deferred_wakeup", "23162": "rcu_nocb_poll", "23163": "rcu_nocb_q_lengths", "23164": "rcu_nocb_setup", "23165": "rcu_nocb_wait_gp", "23166": "rcu_node", "23167": "rcu_node_boost_fops", "23168": "rcu_node_boost_open", "23169": "rcu_node_class", "23170": "rcu_node_entry", "23171": "rcu_nohz_full_cpu", "23172": "rcu_note_context_switch", "23173": "rcu_note_voluntary_context_switch", "23174": "rcu_num_lvls", "23175": "rcu_num_nodes", "23176": "rcu_oom_callback", "23177": "rcu_oom_nb", "23178": "rcu_oom_notify", "23179": "rcu_oom_notify_cpu", "23180": "rcu_ops", "23181": "rcu_organize_nocb_kthreads", "23182": "rcu_panic", "23183": "rcu_panic_block", "23184": "rcu_pending", "23185": "rcu_pending_fops", "23186": "rcu_pending_op", "23187": "rcu_pending_open", "23188": "rcu_pm_notify", "23189": "rcu_preempt", "23190": "rcu_preempt_blocked_readers_cgp", "23191": "rcu_preempt_boost_start_gp", "23192": "rcu_preempt_check_blocked_tasks", "23193": "rcu_preempt_check_callbacks", "23194": "rcu_preempt_data", "23195": "rcu_preempt_depth", "23196": "rcu_preempt_do_callbacks", "23197": "rcu_preempt_has_tasks", "23198": "rcu_preempt_note_context_switch", "23199": "rcu_preempt_qs", "23200": "rcu_preempt_state", "23201": "rcu_preempted_readers_exp", "23202": "rcu_prepare_cpu", "23203": "rcu_prepare_for_idle", "23204": "rcu_prepare_kthreads", "23205": "rcu_print_detail_task_stall", "23206": "rcu_print_detail_task_stall_rnp", "23207": "rcu_print_task_stall", "23208": "rcu_print_task_stall_begin", "23209": "rcu_print_task_stall_end", "23210": "rcu_process_callbacks", "23211": "rcu_qs_ctr", "23212": "rcu_qs_ctr_snap", "23213": "rcu_qsctr_help", "23214": "rcu_read_delay", "23215": "rcu_read_lock", "23216": "rcu_read_lock_bh", "23217": "rcu_read_lock_bh_held", "23218": "rcu_read_lock_held", "23219": "rcu_read_lock_nesting", "23220": "rcu_read_lock_sched", "23221": "rcu_read_lock_sched_held", "23222": "rcu_read_unlock", "23223": "rcu_read_unlock_bh", "23224": "rcu_read_unlock_sched", "23225": "rcu_read_unlock_special", "23226": "rcu_register_oom_notifier", "23227": "rcu_report_exp_rnp", "23228": "rcu_report_qs_rdp", "23229": "rcu_report_qs_rnp", "23230": "rcu_report_qs_rsp", "23231": "rcu_report_unblock_qs_rnp", "23232": "rcu_rnp_online_cpus", "23233": "rcu_sched", "23234": "rcu_sched_ctrlblk", "23235": "rcu_sched_data", "23236": "rcu_sched_force_quiescent_state", "23237": "rcu_sched_lock_key", "23238": "rcu_sched_lock_map", "23239": "rcu_sched_qs", "23240": "rcu_sched_qs_mask", "23241": "rcu_sched_state", "23242": "rcu_sched_torture_deferred_free", "23243": "rcu_scheduler_active", "23244": "rcu_scheduler_fully_active", "23245": "rcu_scheduler_starting", "23246": "rcu_self_test", "23247": "rcu_self_test_bh", "23248": "rcu_self_test_counter", "23249": "rcu_self_test_sched", "23250": "rcu_send_cbs_to_orphanage", "23251": "rcu_sleep_check", "23252": "rcu_spawn_all_nocb_kthreads", "23253": "rcu_spawn_boost_kthreads", "23254": "rcu_spawn_gp_kthread", "23255": "rcu_spawn_nocb_kthreads", "23256": "rcu_spawn_one_boost_kthread", "23257": "rcu_spawn_one_nocb_kthread", "23258": "rcu_spawn_tasks_kthread", "23259": "rcu_special", "23260": "rcu_start_future_gp", "23261": "rcu_start_gp", "23262": "rcu_start_gp_advanced", "23263": "rcu_state", "23264": "rcu_state_p", "23265": "rcu_struct_flavors", "23266": "rcu_sync_torture_init", "23267": "rcu_synchronize", "23268": "rcu_sys_is_idle", "23269": "rcu_sysidle_cb", "23270": "rcu_sysidle_check_cpu", "23271": "rcu_sysidle_delay", "23272": "rcu_sysidle_enter", "23273": "rcu_sysidle_exit", "23274": "rcu_sysidle_force_exit", "23275": "rcu_sysidle_head", "23276": "rcu_sysidle_init_percpu_data", "23277": "rcu_sysidle_report", "23278": "rcu_sysidle_report_gp", "23279": "rcu_sysrq_end", "23280": "rcu_sysrq_start", "23281": "rcu_task_stall_timeout", "23282": "rcu_tasks_cbs_head", "23283": "rcu_tasks_cbs_lock", "23284": "rcu_tasks_cbs_tail", "23285": "rcu_tasks_cbs_wq", "23286": "rcu_tasks_holdout", "23287": "rcu_tasks_holdout_list", "23288": "rcu_tasks_holdouts", "23289": "rcu_tasks_idle_cpu", "23290": "rcu_tasks_kthread", "23291": "rcu_tasks_kthread_mutex", "23292": "rcu_tasks_kthread_ptr", "23293": "rcu_tasks_nvcsw", "23294": "rcu_tasks_torture_deferred_free", "23295": "rcu_test_debug_objects", "23296": "rcu_torture", "23297": "rcu_torture_alloc", "23298": "rcu_torture_barrier", "23299": "rcu_torture_barrier_cbf", "23300": "rcu_torture_barrier_cleanup", "23301": "rcu_torture_barrier_init", "23302": "rcu_torture_batch", "23303": "rcu_torture_boost", "23304": "rcu_torture_boost_cb", "23305": "rcu_torture_cb", "23306": "rcu_torture_cbflood", "23307": "rcu_torture_cbflood_cb", "23308": "rcu_torture_cleanup", "23309": "rcu_torture_count", "23310": "rcu_torture_current", "23311": "rcu_torture_current_version", "23312": "rcu_torture_deferred_free", "23313": "rcu_torture_err_cb", "23314": "rcu_torture_fqs", "23315": "rcu_torture_free", "23316": "rcu_torture_freelist", "23317": "rcu_torture_init", "23318": "rcu_torture_leak_cb", "23319": "rcu_torture_lock", "23320": "rcu_torture_ops", "23321": "rcu_torture_pipe_update", "23322": "rcu_torture_pipe_update_one", "23323": "rcu_torture_print_module_parms", "23324": "rcu_torture_read_lock", "23325": "rcu_torture_read_unlock", "23326": "rcu_torture_reader", "23327": "rcu_torture_removed", "23328": "rcu_torture_stall", "23329": "rcu_torture_stall_init", "23330": "rcu_torture_stats", "23331": "rcu_torture_stats_print", "23332": "rcu_torture_timer", "23333": "rcu_torture_wcount", "23334": "rcu_torture_writer", "23335": "rcu_torture_writer_state", "23336": "rcu_tortures", "23337": "rcu_trace_clock_local", "23338": "rcu_trace_sub_qlen", "23339": "rcu_try_advance_all_cbs", "23340": "rcu_unexpedite_gp", "23341": "rcu_user_enter", "23342": "rcu_user_exit", "23343": "rcu_verify_early_boot_tests", "23344": "rcu_wait", "23345": "rcu_wake_cond", "23346": "rcubarrier_fops", "23347": "rcubarrier_open", "23348": "rcucblist", "23349": "rcudata", "23350": "rcudata_fops", "23351": "rcudata_open", "23352": "rcudate_op", "23353": "rcudir", "23354": "rcuexp_fops", "23355": "rcuexp_open", "23356": "rcugp_fops", "23357": "rcugp_open", "23358": "rcuhead_debug_descr", "23359": "rcuhead_fixup_activate", "23360": "rcuhier_fops", "23361": "rcuhier_open", "23362": "rcutorture_booster_cleanup", "23363": "rcutorture_booster_init", "23364": "rcutorture_cpu_nb", "23365": "rcutorture_fops", "23366": "rcutorture_get_gp_data", "23367": "rcutorture_open", "23368": "rcutorture_record_progress", "23369": "rcutorture_record_test_transition", "23370": "rcutorture_testseq", "23371": "rcutorture_trace_dump", "23372": "rcutorture_type", "23373": "rcutorture_vernum", "23374": "rcutorturename", "23375": "rcutree_trace_cleanup", "23376": "rcutree_trace_init", "23377": "rd", "23378": "rda", "23379": "rdev", "23380": "rdp", "23381": "rdp_last", "23382": "rdp_leader", "23383": "rdp_old_leader", "23384": "rdp_prev", "23385": "rdp_spawn", "23386": "rdtp", "23387": "re", "23388": "re_cnt", "23389": "reached", "23390": "read", "23391": "read_boot_clock", "23392": "read_boot_clock64", "23393": "read_bytes", "23394": "read_can_lock", "23395": "read_char", "23396": "read_cred_subscribers", "23397": "read_delay", "23398": "read_done", "23399": "read_event", "23400": "read_events", "23401": "read_format", "23402": "read_holdtime", "23403": "read_lock", "23404": "read_lock_irq", "23405": "read_lock_irqsave", "23406": "read_mapping_page", "23407": "read_page", "23408": "read_pages", "23409": "read_persistent_clock", "23410": "read_persistent_clock64", "23411": "read_profile", "23412": "read_s64", "23413": "read_seqbegin", "23414": "read_seqbegin_or_lock_irqsave", "23415": "read_seqcount_begin", "23416": "read_seqcount_retry", "23417": "read_seqretry", "23418": "read_size", "23419": "read_stamp", "23420": "read_start", "23421": "read_syscalls", "23422": "read_trylock", "23423": "read_u64", "23424": "read_unlock", "23425": "read_unlock_irq", "23426": "read_unlock_irqrestore", "23427": "read_waittime", "23428": "reader", "23429": "reader_finish", "23430": "reader_lock", "23431": "reader_lock_key", "23432": "reader_page", "23433": "reader_tasks", "23434": "readlock", "23435": "readpage", "23436": "readpos", "23437": "readunlock", "23438": "ready", "23439": "real", "23440": "real_blocked", "23441": "real_cred", "23442": "real_end", "23443": "real_ns", "23444": "real_parent", "23445": "real_root_dev", "23446": "real_start_time", "23447": "real_timer", "23448": "real_tk", "23449": "reallocate_resource", "23450": "rear", "23451": "reason", "23452": "rebalance_domains", "23453": "rebind_subsystems", "23454": "rebind_workers", "23455": "reboot", "23456": "reboot_command", "23457": "reboot_cpu", "23458": "reboot_default", "23459": "reboot_force", "23460": "reboot_mode", "23461": "reboot_mutex", "23462": "reboot_notifier_list", "23463": "reboot_pid_ns", "23464": "reboot_type", "23465": "rebuild_sched_domains", "23466": "rebuild_sched_domains_locked", "23467": "rec", "23468": "recalc_sigpending", "23469": "recalc_sigpending_and_wake", "23470": "recalc_sigpending_tsk", "23471": "recent", "23472": "recheck", "23473": "record", "23474": "record_disabled", "23475": "record_gp_stall_check_time", "23476": "record_it", "23477": "record_num", "23478": "record_wakee", "23479": "records", "23480": "recover", "23481": "recursion", "23482": "recursive", "23483": "recycle_rp_inst", "23484": "redo", "23485": "redundant_hardirqs_off", "23486": "redundant_hardirqs_on", "23487": "redundant_softirqs_off", "23488": "redundant_softirqs_on", "23489": "ref", "23490": "ref_count", "23491": "ref_module", "23492": "refcnt", "23493": "refcount", "23494": "referenced_filters", "23495": "references", "23496": "reflect", "23497": "reflush", "23498": "refresh", "23499": "refresh_timer", "23500": "refs", "23501": "refuse", "23502": "refusing", "23503": "reg", "23504": "reg16", "23505": "reg32", "23506": "reg64", "23507": "reg8", "23508": "reg_arg_type", "23509": "reg_base", "23510": "reg_event_syscall_enter", "23511": "reg_event_syscall_exit", "23512": "reg_readl", "23513": "reg_state", "23514": "reg_type_str", "23515": "reg_writel", "23516": "regex", "23517": "regex_lock", "23518": "regex_match_end", "23519": "regex_match_front", "23520": "regex_match_full", "23521": "regex_match_middle", "23522": "regex_type", "23523": "regfn", "23524": "region", "23525": "region_devres", "23526": "region_is_ram", "23527": "register", "23528": "register_aggr_kprobe", "23529": "register_array_map", "23530": "register_console", "23531": "register_cpu_notifier", "23532": "register_default_affinity_proc", "23533": "register_die_notifier", "23534": "register_event_cmds", "23535": "register_event_command", "23536": "register_filesystem", "23537": "register_for_each_vma", "23538": "register_ftrace_command", "23539": "register_ftrace_event", "23540": "register_ftrace_function", "23541": "register_ftrace_function_probe", "23542": "register_ftrace_graph", "23543": "register_ftrace_profiler", "23544": "register_handler_proc", "23545": "register_hotcpu_notifier", "23546": "register_hotmemory_notifier", "23547": "register_htab_map", "23548": "register_irq_proc", "23549": "register_irqsoff", "23550": "register_irqsoff_function", "23551": "register_jprobe", "23552": "register_jprobes", "23553": "register_kprobe", "23554": "register_kprobe_event", "23555": "register_kprobe_prog_ops", "23556": "register_kprobes", "23557": "register_kretprobe", "23558": "register_kretprobes", "23559": "register_lock_class", "23560": "register_module_notifier", "23561": "register_oom_notifier", "23562": "register_pernet_subsys", "23563": "register_pm_notifier", "23564": "register_pm_qos_misc", "23565": "register_preemptirqsoff", "23566": "register_preemptoff", "23567": "register_reboot_notifier", "23568": "register_restart_handler", "23569": "register_rwsem", "23570": "register_sched_domain_sysctl", "23571": "register_snapshot_trigger", "23572": "register_stat_tracer", "23573": "register_syscore_ops", "23574": "register_sysctl_paths", "23575": "register_sysctl_table", "23576": "register_sysrq_key", "23577": "register_trace_block_bio_backmerge", "23578": "register_trace_block_bio_bounce", "23579": "register_trace_block_bio_complete", "23580": "register_trace_block_bio_frontmerge", "23581": "register_trace_block_bio_queue", "23582": "register_trace_block_bio_remap", "23583": "register_trace_block_getrq", "23584": "register_trace_block_plug", "23585": "register_trace_block_rq_abort", "23586": "register_trace_block_rq_complete", "23587": "register_trace_block_rq_insert", "23588": "register_trace_block_rq_issue", "23589": "register_trace_block_rq_remap", "23590": "register_trace_block_rq_requeue", "23591": "register_trace_block_sleeprq", "23592": "register_trace_block_split", "23593": "register_trace_block_unplug", "23594": "register_trace_kprobe", "23595": "register_trace_sched_migrate_task", "23596": "register_trace_sched_switch", "23597": "register_trace_sched_wakeup", "23598": "register_trace_sched_wakeup_new", "23599": "register_trace_sys_enter", "23600": "register_trace_sys_exit", "23601": "register_trace_uprobe", "23602": "register_tracer", "23603": "register_trigger", "23604": "register_trigger_cmds", "23605": "register_trigger_enable_disable_cmds", "23606": "register_trigger_snapshot_cmd", "23607": "register_trigger_stacktrace_cmd", "23608": "register_uprobe_event", "23609": "register_wakeup_function", "23610": "registered", "23611": "registers", "23612": "registration", "23613": "regno", "23614": "regnum", "23615": "regs", "23616": "regs_get_kernel_stack_nth", "23617": "regs_get_register", "23618": "regs_intr", "23619": "regs_query_register_offset", "23620": "regs_return_value", "23621": "regs_user", "23622": "regs_user_copy", "23623": "regset", "23624": "regset_no", "23625": "regsets", "23626": "regular", "23627": "rel", "23628": "rel_msec", "23629": "rel_ts", "23630": "rel_usec", "23631": "relative_expiry_time", "23632": "relative_sleep_states", "23633": "relax_domain_level", "23634": "relay", "23635": "relay_buf_full", "23636": "relay_close", "23637": "relay_file_operations", "23638": "relay_flush", "23639": "relay_hotcpu_callback", "23640": "relay_open", "23641": "relay_reserve", "23642": "releasable_read", "23643": "release", "23644": "release_agent", "23645": "release_agent_path", "23646": "release_agent_path_lock", "23647": "release_agent_work", "23648": "release_all_trace_kprobes", "23649": "release_callchain_buffers", "23650": "release_callchain_buffers_rcu", "23651": "release_child_resources", "23652": "release_maps", "23653": "release_mem_region_adjustable", "23654": "release_node", "23655": "release_posix_timer", "23656": "release_resource", "23657": "release_swap_reader", "23658": "release_swap_writer", "23659": "reloc", "23660": "reloc_start", "23661": "relock", "23662": "relocs", "23663": "rem", "23664": "remain", "23665": "remainder", "23666": "remaining", "23667": "remcom_in_buffer", "23668": "remcom_out_buffer", "23669": "remote", "23670": "remote_clock", "23671": "remote_function", "23672": "remote_function_call", "23673": "remount_fs", "23674": "remove", "23675": "remove_breakpoint", "23676": "remove_buf_file", "23677": "remove_event", "23678": "remove_event_file_dir", "23679": "remove_event_from_tracers", "23680": "remove_filter_string", "23681": "remove_ftrace_list_ops", "23682": "remove_ftrace_ops", "23683": "remove_hash_entry", "23684": "remove_hw_breakpoint", "23685": "remove_info", "23686": "remove_irq", "23687": "remove_links", "23688": "remove_node", "23689": "remove_notes_attrs", "23690": "remove_percpu_irq", "23691": "remove_proc_entry", "23692": "remove_sect_attrs", "23693": "remove_subsystem", "23694": "remove_tasks_in_empty_cpuset", "23695": "remove_wait_queue", "23696": "removed_load", "23697": "removed_mask", "23698": "removed_ops", "23699": "removing", "23700": "rename", "23701": "rename_lock", "23702": "reopt", "23703": "reorder", "23704": "reorder_objects", "23705": "rep_skb", "23706": "repeat", "23707": "replace_filter_string", "23708": "replace_map_fd_with_map_ptr", "23709": "replace_preds", "23710": "replace_system_preds", "23711": "replenish", "23712": "reply", "23713": "report", "23714": "report_bad_irq", "23715": "report_latency", "23716": "report_probe", "23717": "req", "23718": "req_cpu", "23719": "reqd_free_pages", "23720": "request", "23721": "request_any_context_irq", "23722": "request_asymmetric_key", "23723": "request_dma", "23724": "request_irq", "23725": "request_key_auth", "23726": "request_percpu_irq", "23727": "request_queue", "23728": "request_resource", "23729": "request_resource_conflict", "23730": "request_skb", "23731": "request_threaded_irq", "23732": "requeue_rt_entity", "23733": "requeue_task_rt", "23734": "required", "23735": "res", "23736": "resched", "23737": "resched_cpu", "23738": "resched_curr", "23739": "resched_mask", "23740": "rescue_wq", "23741": "rescuer", "23742": "rescuer_thread", "23743": "resend", "23744": "resend_irqs", "23745": "resend_tasklet", "23746": "reserve", "23747": "reserve_region_with_split", "23748": "reserve_setup", "23749": "reserved", "23750": "reserved_field_names", "23751": "reserved_size", "23752": "reset", "23753": "reset_counts", "23754": "reset_cpu_stall_ticks", "23755": "reset_dentry", "23756": "reset_entries", "23757": "reset_hung_task", "23758": "reset_hung_task_detector", "23759": "reset_iter", "23760": "reset_iter_read", "23761": "reset_kprobe_instance", "23762": "reset_node", "23763": "reset_on_fork", "23764": "reset_ptenuma_scan", "23765": "reset_read", "23766": "reset_stat_session", "23767": "reset_vma_resv_huge_pages", "23768": "reset_write", "23769": "resize_buffer_duplicate_size", "23770": "resize_disabled", "23771": "resolution", "23772": "resolve_symbol", "23773": "resolve_symbol_wait", "23774": "resource", "23775": "resource_alignment", "23776": "resource_clip", "23777": "resource_constraint", "23778": "resource_contains", "23779": "resource_entry", "23780": "resource_list_create_entry", "23781": "resource_list_destroy_entry", "23782": "resource_list_free", "23783": "resource_lock", "23784": "resource_op", "23785": "resource_size", "23786": "resource_size_t", "23787": "resource_type", "23788": "rest", "23789": "restart", "23790": "restart_block", "23791": "restart_handler_list", "23792": "restart_syscall", "23793": "restart_watchdog_hrtimer", "23794": "restore_altstack", "23795": "restore_cleanup", "23796": "restore_highmem", "23797": "restore_pblist", "23798": "restore_processor_state", "23799": "restore_unbound_workers_cpumask", "23800": "restorer", "23801": "result", "23802": "resume", "23803": "resume_console", "23804": "resume_delay", "23805": "resume_device_irqs", "23806": "resume_file", "23807": "resume_irq", "23808": "resume_irqs", "23809": "resume_swap_area", "23810": "resume_target_kernel", "23811": "resume_wait", "23812": "resuming", "23813": "ret", "23814": "ret_addr", "23815": "ret_entry", "23816": "ret_handler", "23817": "ret_ip", "23818": "ret_stack", "23819": "ret_stack_list", "23820": "ret_state", "23821": "ret_type", "23822": "retain", "23823": "retarget", "23824": "retarget_shared_pending", "23825": "retfunc", "23826": "retries", "23827": "retry", "23828": "retry_delete", "23829": "retry_find_task", "23830": "rettime", "23831": "return", "23832": "return_cfs_rq_runtime", "23833": "return_code", "23834": "return_instance", "23835": "return_instances", "23836": "return_normal", "23837": "return_valid", "23838": "retval", "23839": "reuse_unused_kprobe", "23840": "reverse", "23841": "revert_creds", "23842": "revmap_direct_max_irq", "23843": "revmap_size", "23844": "revmap_tree", "23845": "revmap_trees_mutex", "23846": "reweight_entity", "23847": "rewrite_section_headers", "23848": "rgid", "23849": "rgidp", "23850": "rh", "23851": "rh1", "23852": "rh2", "23853": "rhcount", "23854": "rhcount_lazy", "23855": "rhp", "23856": "rhs", "23857": "rhtp", "23858": "ri", "23859": "right", "23860": "right_child", "23861": "rimage", "23862": "ring", "23863": "ring_buffer", "23864": "ring_buffer_alloc", "23865": "ring_buffer_alloc_read_page", "23866": "ring_buffer_attach", "23867": "ring_buffer_benchmark_exit", "23868": "ring_buffer_benchmark_init", "23869": "ring_buffer_bytes_cpu", "23870": "ring_buffer_change_overwrite", "23871": "ring_buffer_commit_overrun_cpu", "23872": "ring_buffer_consume", "23873": "ring_buffer_discard_commit", "23874": "ring_buffer_dropped_events_cpu", "23875": "ring_buffer_empty", "23876": "ring_buffer_empty_cpu", "23877": "ring_buffer_entries", "23878": "ring_buffer_entries_cpu", "23879": "ring_buffer_event", "23880": "ring_buffer_event_data", "23881": "ring_buffer_event_length", "23882": "ring_buffer_expanded", "23883": "ring_buffer_flags", "23884": "ring_buffer_free", "23885": "ring_buffer_free_read_page", "23886": "ring_buffer_get", "23887": "ring_buffer_init", "23888": "ring_buffer_iter", "23889": "ring_buffer_iter_empty", "23890": "ring_buffer_iter_peek", "23891": "ring_buffer_iter_reset", "23892": "ring_buffer_lock_reserve", "23893": "ring_buffer_normalize_time_stamp", "23894": "ring_buffer_oldest_event_ts", "23895": "ring_buffer_overrun_cpu", "23896": "ring_buffer_overruns", "23897": "ring_buffer_page_len", "23898": "ring_buffer_peek", "23899": "ring_buffer_per_cpu", "23900": "ring_buffer_poll_wait", "23901": "ring_buffer_print_entry_header", "23902": "ring_buffer_print_page_header", "23903": "ring_buffer_put", "23904": "ring_buffer_read", "23905": "ring_buffer_read_events_cpu", "23906": "ring_buffer_read_finish", "23907": "ring_buffer_read_page", "23908": "ring_buffer_read_prepare", "23909": "ring_buffer_read_prepare_sync", "23910": "ring_buffer_read_start", "23911": "ring_buffer_record_disable", "23912": "ring_buffer_record_disable_cpu", "23913": "ring_buffer_record_enable", "23914": "ring_buffer_record_enable_cpu", "23915": "ring_buffer_record_is_on", "23916": "ring_buffer_record_off", "23917": "ring_buffer_record_on", "23918": "ring_buffer_reset", "23919": "ring_buffer_reset_cpu", "23920": "ring_buffer_resize", "23921": "ring_buffer_set_clock", "23922": "ring_buffer_size", "23923": "ring_buffer_swap_cpu", "23924": "ring_buffer_time_stamp", "23925": "ring_buffer_unlock_commit", "23926": "ring_buffer_wait", "23927": "ring_buffer_wakeup", "23928": "ring_buffer_write", "23929": "ring_iter", "23930": "ring_size", "23931": "rl", "23932": "rlen", "23933": "rlim", "23934": "rlim64", "23935": "rlim64_is_infinity", "23936": "rlim64_to_rlim", "23937": "rlim_cur", "23938": "rlim_max", "23939": "rlim_rtprio", "23940": "rlim_to_rlim64", "23941": "rlimit", "23942": "rlimit64", "23943": "rlist", "23944": "rloc", "23945": "rlock", "23946": "rmb", "23947": "rmdir", "23948": "rmt", "23949": "rmtp", "23950": "rn", "23951": "rname", "23952": "rnd", "23953": "rnp", "23954": "rnp_c", "23955": "rnp_index", "23956": "rnp_leaf", "23957": "rnp_old", "23958": "rnp_p", "23959": "rnp_root", "23960": "rnp_up", "23961": "ro_size", "23962": "robust_list", "23963": "roffs", "23964": "rollback", "23965": "room_left", "23966": "root", "23967": "root_cgrp", "23968": "root_cpuacct", "23969": "root_cpuacct_cpuusage", "23970": "root_cs", "23971": "root_css", "23972": "root_domain", "23973": "root_irq_dir", "23974": "root_list", "23975": "root_mnt", "23976": "root_node", "23977": "root_swap", "23978": "root_task_group", "23979": "root_user", "23980": "rotate", "23981": "rotate_ctx", "23982": "rotate_disable", "23983": "rotor", "23984": "round_jiffies", "23985": "round_jiffies_common", "23986": "round_jiffies_relative", "23987": "round_up", "23988": "roundup", "23989": "roundup_pow_of_two", "23990": "rp", "23991": "rp1", "23992": "rpage", "23993": "rpdu", "23994": "rpm_idle", "23995": "rpm_resume", "23996": "rpm_return_int", "23997": "rpm_suspend", "23998": "rpos", "23999": "rps", "24000": "rq", "24001": "rq0_min_vruntime", "24002": "rq1", "24003": "rq2", "24004": "rq_attach_root", "24005": "rq_clock", "24006": "rq_clock_skip_update", "24007": "rq_clock_task", "24008": "rq_cpu", "24009": "rq_cpu_time", "24010": "rq_data_dir", "24011": "rq_disk", "24012": "rq_last_tick_reset", "24013": "rq_nohz_flag_bits", "24014": "rq_of", "24015": "rq_of_rt_rq", "24016": "rq_of_rt_se", "24017": "rq_offline", "24018": "rq_offline_fair", "24019": "rq_offline_rt", "24020": "rq_online", "24021": "rq_online_fair", "24022": "rq_online_rt", "24023": "rq_sched_info", "24024": "rq_sched_info_arrive", "24025": "rq_sched_info_depart", "24026": "rq_sched_info_dequeued", "24027": "rqtp", "24028": "rr_interval", "24029": "rrln", "24030": "rrsp", "24031": "rsa", "24032": "rsh", "24033": "rsize", "24034": "rsp", "24035": "rspdir", "24036": "rspin_until_writer_unlock", "24037": "rss", "24038": "rss_stat", "24039": "rt", "24040": "rt_avg", "24041": "rt_b", "24042": "rt_bandwidth", "24043": "rt_bandwidth_enabled", "24044": "rt_clear_overload", "24045": "rt_constraints_mutex", "24046": "rt_delta", "24047": "rt_entity_is_task", "24048": "rt_mutex", "24049": "rt_mutex_adjust_pi", "24050": "rt_mutex_check_prio", "24051": "rt_mutex_deadlock_account_lock", "24052": "rt_mutex_deadlock_account_unlock", "24053": "rt_mutex_debug_task_free", "24054": "rt_mutex_finish_proxy_lock", "24055": "rt_mutex_get_top_task", "24056": "rt_mutex_has_waiters", "24057": "rt_mutex_init_proxy_locked", "24058": "rt_mutex_init_task", "24059": "rt_mutex_lock", "24060": "rt_mutex_lock_interruptible", "24061": "rt_mutex_next_owner", "24062": "rt_mutex_owner", "24063": "rt_mutex_print_deadlock", "24064": "rt_mutex_proxy_unlock", "24065": "rt_mutex_setprio", "24066": "rt_mutex_start_proxy_lock", "24067": "rt_mutex_timed_futex_lock", "24068": "rt_mutex_top_waiter", "24069": "rt_mutex_unlock", "24070": "rt_mutex_waiter", "24071": "rt_nr_boosted", "24072": "rt_nr_migratory", "24073": "rt_nr_running", "24074": "rt_nr_total", "24075": "rt_overloaded", "24076": "rt_period", "24077": "rt_period_timer", "24078": "rt_period_us", "24079": "rt_policy", "24080": "rt_prio", "24081": "rt_prio_array", "24082": "rt_priority", "24083": "rt_queued", "24084": "rt_rq", "24085": "rt_rq_iter_t", "24086": "rt_rq_of_se", "24087": "rt_rq_throttled", "24088": "rt_runtime", "24089": "rt_runtime_lock", "24090": "rt_runtime_us", "24091": "rt_sched_class", "24092": "rt_schedulable_data", "24093": "rt_se", "24094": "rt_se_boosted", "24095": "rt_se_nr_running", "24096": "rt_se_prio", "24097": "rt_set_overload", "24098": "rt_sigaction", "24099": "rt_sigpending", "24100": "rt_sigprocmask", "24101": "rt_sigqueueinfo", "24102": "rt_sigsuspend", "24103": "rt_sigtimedwait", "24104": "rt_task", "24105": "rt_task_of", "24106": "rt_tgsigqueueinfo", "24107": "rt_throttled", "24108": "rt_time", "24109": "rtc", "24110": "rtc_class", "24111": "rtc_device", "24112": "rtc_read_time", "24113": "rtc_set_alarm", "24114": "rtc_time", "24115": "rtc_time_to_tm", "24116": "rtc_timer", "24117": "rtc_timer_init", "24118": "rtc_tm_to_time", "24119": "rtc_wkalrm", "24120": "rtcdev", "24121": "rtcdev_lock", "24122": "rtctimer", "24123": "rtcv_snap", "24124": "rtime", "24125": "rtmutex_chainwalk", "24126": "rtmutex_common", "24127": "rtn", "24128": "rtn_tp", "24129": "rto_count", "24130": "rto_mask", "24131": "rto_next_cpu", "24132": "rtort_free", "24133": "rtort_mbtest", "24134": "rtort_pipe_count", "24135": "rtort_rcu", "24136": "rtree", "24137": "rtree_next_node", "24138": "rtree_node", "24139": "rtst", "24140": "rttest_event", "24141": "rttest_lock", "24142": "rttest_subsys", "24143": "ru", "24144": "ru_idrss", "24145": "ru_inblock", "24146": "ru_isrss", "24147": "ru_ixrss", "24148": "ru_majflt", "24149": "ru_maxrss", "24150": "ru_minflt", "24151": "ru_msgrcv", "24152": "ru_msgsnd", "24153": "ru_nivcsw", "24154": "ru_nsignals", "24155": "ru_nswap", "24156": "ru_nvcsw", "24157": "ru_oublock", "24158": "ru_stime", "24159": "ru_utime", "24160": "ruid", "24161": "ruidp", "24162": "rule", "24163": "rules", "24164": "run", "24165": "run_delay", "24166": "run_ksoftirqd", "24167": "run_list", "24168": "run_local_timers", "24169": "run_node", "24170": "run_posix_cpu_timers", "24171": "run_rebalance_domains", "24172": "run_threads", "24173": "run_time", "24174": "run_timer_softirq", "24175": "run_tracer_selftest", "24176": "runnable", "24177": "runnable_avg", "24178": "runnable_avg_sum", "24179": "runnable_avg_yN_inv", "24180": "runnable_avg_yN_sum", "24181": "runnable_contrib", "24182": "runnable_load_avg", "24183": "running", "24184": "running_avg_sum", "24185": "running_clock", "24186": "running_helpers", "24187": "running_helpers_waitq", "24188": "running_list", "24189": "running_sample_length", "24190": "running_timer", "24191": "running_trace_list", "24192": "running_trace_lock", "24193": "runqueues", "24194": "runtime", "24195": "runtime_enabled", "24196": "runtime_expires", "24197": "runtime_refresh_within", "24198": "runtime_remaining", "24199": "runtime_was_enabled", "24200": "rusage", "24201": "rw", "24202": "rw_lock_irq_ops", "24203": "rw_lock_ops", "24204": "rw_sem", "24205": "rw_semaphore", "24206": "rwbs", "24207": "rwlock", "24208": "rwlock_bug", "24209": "rwlock_init", "24210": "rwlock_t", "24211": "rwsem", "24212": "rwsem_acquire", "24213": "rwsem_acquire_nest", "24214": "rwsem_acquire_read", "24215": "rwsem_atomic_add", "24216": "rwsem_atomic_update", "24217": "rwsem_can_spin_on_owner", "24218": "rwsem_clear_owner", "24219": "rwsem_down_read_failed", "24220": "rwsem_down_write_failed", "24221": "rwsem_downgrade_wake", "24222": "rwsem_is_locked", "24223": "rwsem_key", "24224": "rwsem_lock_ops", "24225": "rwsem_optimistic_spin", "24226": "rwsem_release", "24227": "rwsem_set_owner", "24228": "rwsem_spin_on_owner", "24229": "rwsem_try_write_lock", "24230": "rwsem_try_write_lock_unqueued", "24231": "rwsem_waiter", "24232": "rwsem_waiter_type", "24233": "rwsem_wake", "24234": "rwsem_wake_type", "24235": "s", "24236": "s16", "24237": "s2", "24238": "s32", "24239": "s64", "24240": "s8", "24241": "sCPU", "24242": "sHardware", "24243": "s_alloc", "24244": "s_data", "24245": "s_dev", "24246": "s_dst", "24247": "s_next", "24248": "s_show", "24249": "s_src", "24250": "s_start", "24251": "s_stop", "24252": "s_time_gran", "24253": "s_type", "24254": "sa", "24255": "sa_flags", "24256": "sa_handler", "24257": "sa_mask", "24258": "sa_none", "24259": "sa_restorer", "24260": "sa_rootdomain", "24261": "sa_sd", "24262": "sa_sd_storage", "24263": "sabbr", "24264": "safe", "24265": "safe_highmem_bm", "24266": "safe_highmem_pages", "24267": "safe_needed", "24268": "safe_pages_list", "24269": "same", "24270": "same_magic", "24271": "same_root", "24272": "same_thread_group", "24273": "sample", "24274": "sample_data", "24275": "sample_freq", "24276": "sample_id_all", "24277": "sample_len_ns", "24278": "sample_period", "24279": "sample_regs_intr", "24280": "sample_regs_user", "24281": "sample_stack_user", "24282": "sample_step", "24283": "sample_type", "24284": "sanity_check_segment_list", "24285": "sas_ss_flags", "24286": "sas_ss_size", "24287": "sas_ss_sp", "24288": "sattr", "24289": "sav_total", "24290": "save", "24291": "save_adjust", "24292": "save_current_task", "24293": "save_defcmd_set", "24294": "save_flags", "24295": "save_ftrace_enabled", "24296": "save_global_flags", "24297": "save_global_trampoline", "24298": "save_highmem", "24299": "save_image", "24300": "save_image_lzo", "24301": "save_info", "24302": "save_len", "24303": "save_max", "24304": "save_processor_state", "24305": "save_stack_trace", "24306": "save_stack_trace_regs", "24307": "save_stack_trace_tsk", "24308": "save_timestamp", "24309": "save_trace", "24310": "saveable", "24311": "saveable_highmem_page", "24312": "saved", "24313": "saved_auxv", "24314": "saved_cmdlines", "24315": "saved_cmdlines_buffer", "24316": "saved_cmdlines_size", "24317": "saved_ftrace_func", "24318": "saved_instr", "24319": "saved_latency", "24320": "saved_max_active", "24321": "saved_max_pfn", "24322": "saved_sigmask", "24323": "saved_tracer", "24324": "savedcmd", "24325": "sb", "24326": "sbe_balanced", "24327": "sbe_count", "24328": "sbe_pushed", "24329": "sbf_balanced", "24330": "sbf_count", "24331": "sbf_pushed", "24332": "sbuf", "24333": "sc", "24334": "scale", "24335": "scale_freq", "24336": "scale_load", "24337": "scale_load_down", "24338": "scale_rt_capacity", "24339": "scale_stime", "24340": "scaled", "24341": "scaled_busy_load_per_task", "24342": "scan", "24343": "scan_size", "24344": "scancode", "24345": "scd", "24346": "scenario", "24347": "sched", "24348": "sched_annotate_sleep", "24349": "sched_attr", "24350": "sched_autogroup_create_attach", "24351": "sched_autogroup_detach", "24352": "sched_autogroup_exit", "24353": "sched_autogroup_fork", "24354": "sched_avg", "24355": "sched_avg_period", "24356": "sched_avg_update", "24357": "sched_can_stop_tick", "24358": "sched_cfs_bandwidth_slice", "24359": "sched_cfs_period_timer", "24360": "sched_cfs_slack_timer", "24361": "sched_class", "24362": "sched_class_highest", "24363": "sched_clk", "24364": "sched_clock", "24365": "sched_clock_cpu", "24366": "sched_clock_data", "24367": "sched_clock_idle_sleep_event", "24368": "sched_clock_idle_wakeup_event", "24369": "sched_clock_init", "24370": "sched_clock_irqtime", "24371": "sched_clock_local", "24372": "sched_clock_remote", "24373": "sched_clock_running", "24374": "sched_clock_stable", "24375": "sched_clock_tick", "24376": "sched_clock_work", "24377": "sched_contributes_to_load", "24378": "sched_count", "24379": "sched_cpu_active", "24380": "sched_cpu_inactive", "24381": "sched_create_group", "24382": "sched_deadline", "24383": "sched_debug", "24384": "sched_debug_enabled", "24385": "sched_debug_header", "24386": "sched_debug_lock", "24387": "sched_debug_setup", "24388": "sched_debug_show", "24389": "sched_debug_start", "24390": "sched_destroy_group", "24391": "sched_dl_do_global", "24392": "sched_dl_entity", "24393": "sched_dl_global_validate", "24394": "sched_domain", "24395": "sched_domain_attr", "24396": "sched_domain_debug", "24397": "sched_domain_debug_one", "24398": "sched_domain_level_max", "24399": "sched_domain_span", "24400": "sched_domain_topology", "24401": "sched_domain_topology_level", "24402": "sched_domains_curr_level", "24403": "sched_domains_mutex", "24404": "sched_domains_numa_distance", "24405": "sched_domains_numa_levels", "24406": "sched_domains_numa_masks", "24407": "sched_domains_numa_masks_update", "24408": "sched_domains_tmpmask", "24409": "sched_entity", "24410": "sched_exec", "24411": "sched_exp", "24412": "sched_feat", "24413": "sched_feat_fops", "24414": "sched_feat_keys", "24415": "sched_feat_open", "24416": "sched_feat_set", "24417": "sched_feat_show", "24418": "sched_feat_write", "24419": "sched_find_first_bit", "24420": "sched_flags", "24421": "sched_fork", "24422": "sched_get_priority_max", "24423": "sched_get_priority_min", "24424": "sched_getaffinity", "24425": "sched_getattr", "24426": "sched_getparam", "24427": "sched_goidle", "24428": "sched_group", "24429": "sched_group_capacity", "24430": "sched_group_cpus", "24431": "sched_group_mask", "24432": "sched_group_rt_period", "24433": "sched_group_rt_runtime", "24434": "sched_group_set_rt_period", "24435": "sched_group_set_rt_runtime", "24436": "sched_group_set_shares", "24437": "sched_ilb_notifier", "24438": "sched_in", "24439": "sched_info", "24440": "sched_info_arrive", "24441": "sched_info_depart", "24442": "sched_info_dequeued", "24443": "sched_info_on", "24444": "sched_info_queued", "24445": "sched_info_reset_dequeued", "24446": "sched_info_switch", "24447": "sched_init_debug", "24448": "sched_init_granularity", "24449": "sched_init_numa", "24450": "sched_init_smp", "24451": "sched_latency", "24452": "sched_max_numa_distance", "24453": "sched_min_granularity", "24454": "sched_move_task", "24455": "sched_nice", "24456": "sched_nr_latency", "24457": "sched_nr_migrate_break", "24458": "sched_numa_topology_type", "24459": "sched_numa_warn", "24460": "sched_offline_group", "24461": "sched_online_group", "24462": "sched_ops", "24463": "sched_out", "24464": "sched_param", "24465": "sched_period", "24466": "sched_policy", "24467": "sched_preempt_enable_no_resched", "24468": "sched_priority", "24469": "sched_proc_update_handler", "24470": "sched_read_attr", "24471": "sched_ref", "24472": "sched_register_mutex", "24473": "sched_reset_on_fork", "24474": "sched_rr_get_interval", "24475": "sched_rr_handler", "24476": "sched_rr_timeslice", "24477": "sched_rt_avg_update", "24478": "sched_rt_bandwidth", "24479": "sched_rt_bandwidth_account", "24480": "sched_rt_can_attach", "24481": "sched_rt_do_global", "24482": "sched_rt_entity", "24483": "sched_rt_global_constraints", "24484": "sched_rt_global_validate", "24485": "sched_rt_handler", "24486": "sched_rt_period", "24487": "sched_rt_period_mask", "24488": "sched_rt_period_rt_rq", "24489": "sched_rt_period_timer", "24490": "sched_rt_rq_dequeue", "24491": "sched_rt_rq_enqueue", "24492": "sched_rt_runtime", "24493": "sched_rt_runtime_exceeded", "24494": "sched_runtime", "24495": "sched_set_stop_task", "24496": "sched_setaffinity", "24497": "sched_setattr", "24498": "sched_setnuma", "24499": "sched_setscheduler", "24500": "sched_setscheduler_nocheck", "24501": "sched_show_numa", "24502": "sched_show_task", "24503": "sched_skew_tick", "24504": "sched_slice", "24505": "sched_submit_work", "24506": "sched_task", "24507": "sched_task_group", "24508": "sched_timer", "24509": "sched_torture_read_lock", "24510": "sched_torture_read_unlock", "24511": "sched_ttwu_pending", "24512": "sched_tunable_scaling", "24513": "sched_tunable_scaling_names", "24514": "sched_vslice", "24515": "sched_wakeup_granularity", "24516": "schedpar", "24517": "schedstat_add", "24518": "schedstat_inc", "24519": "schedstat_set", "24520": "schedstat_start", "24521": "schedule", "24522": "schedule_debug", "24523": "schedule_delayed_work", "24524": "schedule_hrtimeout", "24525": "schedule_hrtimeout_range", "24526": "schedule_next_timer", "24527": "schedule_on_each_cpu", "24528": "schedule_orphans_remove", "24529": "schedule_preempt_disabled", "24530": "schedule_rt_mutex", "24531": "schedule_rt_mutex_test", "24532": "schedule_tail", "24533": "schedule_timeout", "24534": "schedule_timeout_interruptible", "24535": "schedule_timeout_uninterruptible", "24536": "schedule_user", "24537": "schedule_work", "24538": "schedule_work_on", "24539": "scheduled", "24540": "scheduler_ipi", "24541": "scheduler_running", "24542": "scheduler_tick", "24543": "scheduler_tick_max_deferment", "24544": "sci_ptr", "24545": "scnprintf", "24546": "scons_pwroff", "24547": "sconsole", "24548": "score", "24549": "score_nearby_nodes", "24550": "sd", "24551": "sd_alloc_ctl_cpu_table", "24552": "sd_alloc_ctl_domain_table", "24553": "sd_alloc_ctl_entry", "24554": "sd_asym", "24555": "sd_busy", "24556": "sd_ctl_dir", "24557": "sd_ctl_root", "24558": "sd_data", "24559": "sd_degenerate", "24560": "sd_flag", "24561": "sd_flags", "24562": "sd_free_ctl_entry", "24563": "sd_init", "24564": "sd_lb_stats", "24565": "sd_llc", "24566": "sd_llc_id", "24567": "sd_llc_size", "24568": "sd_local", "24569": "sd_numa", "24570": "sd_numa_mask", "24571": "sd_parent", "24572": "sd_parent_degenerate", "24573": "sd_sysctl_header", "24574": "sd_weight", "24575": "sdd", "24576": "sdelta", "24577": "sdg", "24578": "sds", "24579": "se", "24580": "se_depth", "24581": "search", "24582": "search_exception_tables", "24583": "search_extable", "24584": "search_module_extables", "24585": "sec", "24586": "sec_fls", "24587": "secbase", "24588": "seccomp", "24589": "seccomp_assign_mode", "24590": "seccomp_attach_filter", "24591": "seccomp_can_sync_threads", "24592": "seccomp_check_filter", "24593": "seccomp_data", "24594": "seccomp_filter", "24595": "seccomp_filter_free", "24596": "seccomp_may_assign_mode", "24597": "seccomp_mode", "24598": "seccomp_phase1", "24599": "seccomp_phase2", "24600": "seccomp_prepare_filter", "24601": "seccomp_prepare_user_filter", "24602": "seccomp_run_filters", "24603": "seccomp_send_sigsys", "24604": "seccomp_set_mode_filter", "24605": "seccomp_set_mode_strict", "24606": "seccomp_sync_threads", "24607": "secctx", "24608": "sechdr", "24609": "sechdrs", "24610": "sechdrs_c", "24611": "secid", "24612": "second", "24613": "second_length", "24614": "second_overflow", "24615": "second_pass", "24616": "seconds", "24617": "secs", "24618": "secs_to_cputime", "24619": "secsize", "24620": "secstrings", "24621": "sect", "24622": "sect_attrs", "24623": "sect_empty", "24624": "section", "24625": "section_addr", "24626": "section_objs", "24627": "sector", "24628": "sector_from", "24629": "sector_t", "24630": "secure_computing_strict", "24631": "securebits", "24632": "security", "24633": "security_audit_rule_free", "24634": "security_audit_rule_init", "24635": "security_audit_rule_known", "24636": "security_audit_rule_match", "24637": "security_capable", "24638": "security_capable_noaudit", "24639": "security_capget", "24640": "security_cred_alloc_blank", "24641": "security_cred_free", "24642": "security_inode_getsecid", "24643": "security_ipc_getsecid", "24644": "security_kernel_create_files_as", "24645": "security_kernel_module_from_file", "24646": "security_kernel_module_request", "24647": "security_prepare_creds", "24648": "security_ptrace_access_check", "24649": "security_ptrace_traceme", "24650": "security_release_secctx", "24651": "security_secid_to_secctx", "24652": "security_settime", "24653": "security_task_create", "24654": "security_task_fix_setuid", "24655": "security_task_free", "24656": "security_task_getpgid", "24657": "security_task_getscheduler", "24658": "security_task_getsecid", "24659": "security_task_getsid", "24660": "security_task_kill", "24661": "security_task_prctl", "24662": "security_task_setnice", "24663": "security_task_setpgid", "24664": "security_task_setrlimit", "24665": "security_task_setscheduler", "24666": "security_vm_enough_memory_mm", "24667": "see", "24668": "seed", "24669": "seg", "24670": "segment", "24671": "segment_bytes", "24672": "segments", "24673": "seize", "24674": "seized", "24675": "select", "24676": "select_bucket", "24677": "select_comparison_fn", "24678": "select_fallback_rq", "24679": "select_idle_sibling", "24680": "select_insn", "24681": "select_task_rq", "24682": "select_task_rq_fair", "24683": "select_task_rq_idle", "24684": "select_task_rq_rt", "24685": "selected_console", "24686": "self", "24687": "self_exec_id", "24688": "selfparking", "24689": "selftest", "24690": "selinux_audit_rule_update", "24691": "selinux_is_enabled", "24692": "sem", "24693": "semaphore", "24694": "semaphore_waiter", "24695": "send", "24696": "send_cpu_listeners", "24697": "send_mayday", "24698": "send_ready", "24699": "send_reply", "24700": "send_sig", "24701": "send_sig_info", "24702": "send_signal", "24703": "send_sigqueue", "24704": "sep", "24705": "separate_irq_context", "24706": "seq", "24707": "seq_buf_bprintf", "24708": "seq_buf_buffer_left", "24709": "seq_buf_has_overflowed", "24710": "seq_buf_path", "24711": "seq_buf_print_seq", "24712": "seq_buf_printf", "24713": "seq_buf_putc", "24714": "seq_buf_putmem", "24715": "seq_buf_putmem_hex", "24716": "seq_buf_to_user", "24717": "seq_buf_used", "24718": "seq_buf_vprintf", "24719": "seq_cft", "24720": "seq_css", "24721": "seq_file", "24722": "seq_header", "24723": "seq_line", "24724": "seq_list_next", "24725": "seq_list_start", "24726": "seq_list_start_head", "24727": "seq_lock_time", "24728": "seq_lseek", "24729": "seq_next", "24730": "seq_nr", "24731": "seq_ns", "24732": "seq_open", "24733": "seq_operations", "24734": "seq_ops", "24735": "seq_print_ip_sym", "24736": "seq_print_sym_offset", "24737": "seq_print_sym_short", "24738": "seq_print_user_ip", "24739": "seq_print_userip_objs", "24740": "seq_printf", "24741": "seq_putc", "24742": "seq_puts", "24743": "seq_read", "24744": "seq_release", "24745": "seq_release_private", "24746": "seq_show", "24747": "seq_start", "24748": "seq_stats", "24749": "seq_stop", "24750": "seq_time", "24751": "seq_user_ns", "24752": "seq_write", "24753": "seq_write_gcov_u32", "24754": "seq_write_gcov_u64", "24755": "seqcount_init", "24756": "seqcount_t", "24757": "seqlock_init", "24758": "seqlock_t", "24759": "sequence", "24760": "sequential_io", "24761": "sequential_io_avg", "24762": "serial", "24763": "serial_cpumask", "24764": "serial_cpumask_attr", "24765": "serial_mask", "24766": "serial_nr", "24767": "serial_work", "24768": "server", "24769": "session", "24770": "session_id", "24771": "session_keyring", "24772": "session_list", "24773": "sessionid", "24774": "set", "24775": "set32", "24776": "set_alarm", "24777": "set_all_modules_text_ro", "24778": "set_all_modules_text_rw", "24779": "set_bit", "24780": "set_blocksize", "24781": "set_buf_size", "24782": "set_buffer", "24783": "set_buffer_entries", "24784": "set_child_tid", "24785": "set_cmdline", "24786": "set_cmdline_ftrace", "24787": "set_cond", "24788": "set_cpu_active", "24789": "set_cpu_itimer", "24790": "set_cpu_online", "24791": "set_cpu_possible", "24792": "set_cpu_present", "24793": "set_cpu_rq_start_time", "24794": "set_cpu_sd_state_busy", "24795": "set_cpu_sd_state_idle", "24796": "set_cpus_allowed", "24797": "set_cpus_allowed_ptr", "24798": "set_cpus_allowed_rt", "24799": "set_create_files_as", "24800": "set_cred_subscribers", "24801": "set_cred_user_ns", "24802": "set_curr_task", "24803": "set_curr_task_fair", "24804": "set_curr_task_idle", "24805": "set_curr_task_rt", "24806": "set_current_blocked", "24807": "set_current_groups", "24808": "set_current_state", "24809": "set_desc", "24810": "set_domain_attribute", "24811": "set_dumpable", "24812": "set_filter", "24813": "set_flag", "24814": "set_freezable", "24815": "set_fs", "24816": "set_ftrace_dump_on_oops", "24817": "set_ftrace_early_filters", "24818": "set_ftrace_filter", "24819": "set_ftrace_notrace", "24820": "set_ftrace_pid", "24821": "set_ftrace_pid_function", "24822": "set_ftrace_pid_task", "24823": "set_ftrace_swapper", "24824": "set_function_trace_op", "24825": "set_graph_array", "24826": "set_graph_function", "24827": "set_graph_notrace", "24828": "set_hw_breakpoint", "24829": "set_irq_regs", "24830": "set_irq_wake_real", "24831": "set_kprobe_instance", "24832": "set_last_buddy", "24833": "set_last_pid", "24834": "set_license", "24835": "set_load_weight", "24836": "set_max_threads", "24837": "set_mb", "24838": "set_memory_nx", "24839": "set_memory_ro", "24840": "set_memory_rw", "24841": "set_memory_x", "24842": "set_mems_allowed", "24843": "set_mm_exe_file", "24844": "set_mode", "24845": "set_next_buddy", "24846": "set_next_entity", "24847": "set_next_event", "24848": "set_next_ktime", "24849": "set_normalized_timespec", "24850": "set_normalized_timespec64", "24851": "set_notify_resume", "24852": "set_nr_and_not_polling", "24853": "set_nr_if_polling", "24854": "set_ns", "24855": "set_numabalancing_state", "24856": "set_one_prio", "24857": "set_one_prio_perm", "24858": "set_orig_insn", "24859": "set_page_attributes", "24860": "set_page_private", "24861": "set_personality", "24862": "set_post_schedule", "24863": "set_preempt_need_resched", "24864": "set_print_fmt", "24865": "set_process_cpu_timer", "24866": "set_pte_at_notify", "24867": "set_restore_sigmask", "24868": "set_robust_list", "24869": "set_rq_offline", "24870": "set_rq_online", "24871": "set_sample_period", "24872": "set_sched_clock_stable", "24873": "set_sched_topology", "24874": "set_section_ro_nx", "24875": "set_skip_buddy", "24876": "set_softirq_pending", "24877": "set_special_pids", "24878": "set_state", "24879": "set_state_oneshot", "24880": "set_state_periodic", "24881": "set_state_shutdown", "24882": "set_str", "24883": "set_swbp", "24884": "set_syscall_print_fmt", "24885": "set_table_entry", "24886": "set_task_comm", "24887": "set_task_cpu", "24888": "set_task_rq", "24889": "set_task_stack_end_magic", "24890": "set_task_state", "24891": "set_thread_flag", "24892": "set_tid_address", "24893": "set_timer_slack", "24894": "set_to_char", "24895": "set_trace_boot_clock", "24896": "set_trace_boot_options", "24897": "set_tracepoint_printk", "24898": "set_tracer_flag", "24899": "set_tracing_thresh", "24900": "set_trigger_filter", "24901": "set_tsk_need_resched", "24902": "set_tsk_thread_flag", "24903": "set_tsk_trace_trace", "24904": "set_user", "24905": "set_user_nice", "24906": "set_work_data", "24907": "set_work_pool_and_clear_pending", "24908": "set_work_pool_and_keep_pending", "24909": "set_work_pwq", "24910": "set_worker_desc", "24911": "setdomainname", "24912": "setfsgid", "24913": "setfsgid16", "24914": "setfsuid", "24915": "setfsuid16", "24916": "setgid", "24917": "setgid16", "24918": "setgroups16", "24919": "setgroups_allowed", "24920": "sethostname", "24921": "setitimer", "24922": "setjmp_pre_handler", "24923": "setmax_mm_hiwater_rss", "24924": "setns", "24925": "setpgid", "24926": "setregid", "24927": "setregid16", "24928": "setresgid", "24929": "setresgid16", "24930": "setresuid16", "24931": "setreuid", "24932": "setreuid16", "24933": "setrlimit", "24934": "setsid", "24935": "settimeofday", "24936": "setting", "24937": "setuid16", "24938": "setup", "24939": "setup_affinity", "24940": "setup_autogroup", "24941": "setup_aux", "24942": "setup_crash_kexec_post_notifiers", "24943": "setup_elfcorehdr", "24944": "setup_forced_irqthreads", "24945": "setup_irq", "24946": "setup_load_info", "24947": "setup_max_cpus", "24948": "setup_modinfo", "24949": "setup_modinfo_", "24950": "setup_percpu_irq", "24951": "setup_print_fatal_signals", "24952": "setup_profiling_timer", "24953": "setup_relax_domain_level", "24954": "setup_test_suspend", "24955": "setup_thread_stack", "24956": "setup_timer", "24957": "setup_timer_on_stack", "24958": "setup_trace_event", "24959": "sf", "24960": "sg", "24961": "sg_big_buff", "24962": "sg_cpus", "24963": "sg_imbalanced", "24964": "sg_lb_stats", "24965": "sg_mask", "24966": "sg_span", "24967": "sgc", "24968": "sgetmask", "24969": "sgid", "24970": "sgidp", "24971": "sgs", "24972": "sh_addr", "24973": "sh_addralign", "24974": "sh_entsize", "24975": "sh_flags", "24976": "sh_info", "24977": "sh_link", "24978": "sh_name", "24979": "sh_offset", "24980": "sh_size", "24981": "sh_type", "24982": "sha_region_sz", "24983": "sha_regions", "24984": "shadow_ctx_time", "24985": "shadow_pid", "24986": "shadow_timekeeper", "24987": "shallowest_idle_cpu", "24988": "shared", "24989": "shared_pending", "24990": "shared_vm", "24991": "sharedram", "24992": "shares", "24993": "shares_mutex", "24994": "shareval", "24995": "shash_desc", "24996": "shdr", "24997": "shift", "24998": "shift_change", "24999": "shift_right", "25000": "shm_init_task", "25001": "shmem_mapping", "25002": "shmem_read_mapping_page", "25003": "shnum", "25004": "short", "25005": "shortdelay_us", "25006": "should_free", "25007": "should_numa_migrate_memory", "25008": "should_resched", "25009": "should_stop", "25010": "should_we_balance", "25011": "show", "25012": "show_active", "25013": "show_coresize", "25014": "show_cpumask", "25015": "show_event_seq_ops", "25016": "show_header", "25017": "show_initsize", "25018": "show_initstate", "25019": "show_interrupts", "25020": "show_irq_affinity", "25021": "show_kprobe_addr", "25022": "show_modinfo_", "25023": "show_mutex", "25024": "show_one_rcugp", "25025": "show_options", "25026": "show_pwq", "25027": "show_rcu_gp_kthreads", "25028": "show_rcu_node_boost", "25029": "show_rcu_pending", "25030": "show_rcubarrier", "25031": "show_rcudata", "25032": "show_rcuexp", "25033": "show_rcugp", "25034": "show_rcuhier", "25035": "show_rcutorture", "25036": "show_refcnt", "25037": "show_regs", "25038": "show_schedstat", "25039": "show_set_event_seq_ops", "25040": "show_special", "25041": "show_stack", "25042": "show_state_filter", "25043": "show_taint", "25044": "show_unhandled_signals", "25045": "show_workqueue_state", "25046": "shows", "25047": "shuffint", "25048": "shuffle_idle_cpu", "25049": "shuffle_interval", "25050": "shuffle_task", "25051": "shuffle_task_list", "25052": "shuffle_task_mutex", "25053": "shuffle_tmp_mask", "25054": "shuffler_task", "25055": "shutdown", "25056": "shutdown_secs", "25057": "shutdown_task", "25058": "shutdown_time", "25059": "si", "25060": "si1", "25061": "si2", "25062": "si_addr", "25063": "si_addr_lsb", "25064": "si_arch", "25065": "si_band", "25066": "si_call_addr", "25067": "si_code", "25068": "si_errno", "25069": "si_fd", "25070": "si_fromuser", "25071": "si_lower", "25072": "si_meminfo", "25073": "si_overrun", "25074": "si_pid", "25075": "si_private", "25076": "si_ptr", "25077": "si_signo", "25078": "si_status", "25079": "si_stime", "25080": "si_swapinfo", "25081": "si_sys_private", "25082": "si_syscall", "25083": "si_tid", "25084": "si_trapno", "25085": "si_uid", "25086": "si_upper", "25087": "si_utime", "25088": "si_value", "25089": "sibling", "25090": "sibling_list", "25091": "sibling_only", "25092": "siblings", "25093": "sid", "25094": "sig", "25095": "sig_data", "25096": "sig_enforce", "25097": "sig_fatal", "25098": "sig_handler", "25099": "sig_handler_ignored", "25100": "sig_ignored", "25101": "sig_kernel_coredump", "25102": "sig_kernel_ignore", "25103": "sig_kernel_only", "25104": "sig_kernel_stop", "25105": "sig_len", "25106": "sig_ok", "25107": "sig_task_ignored", "25108": "sigaction", "25109": "sigaddset", "25110": "sigaddsetmask", "25111": "sigaltstack", "25112": "sigandnsets", "25113": "sigandsets", "25114": "sigcnt", "25115": "sigdelset", "25116": "sigdelsetmask", "25117": "sigemptyset", "25118": "sigev_notify", "25119": "sigev_notify_thread_id", "25120": "sigev_signo", "25121": "sigev_value", "25122": "sigevent", "25123": "sigevent_t", "25124": "sigh", "25125": "sighand", "25126": "sighand_cachep", "25127": "sighand_ctor", "25128": "sighand_struct", "25129": "siginfo", "25130": "siginfo_t", "25131": "siginitset", "25132": "sigisemptyset", "25133": "sigismember", "25134": "sigkill_pending", "25135": "siglock", "25136": "sigmask", "25137": "sign", "25138": "signal", "25139": "signal_cachep", "25140": "signal_delivered", "25141": "signal_group_exit", "25142": "signal_pending", "25143": "signal_pending_state", "25144": "signal_pt_regs", "25145": "signal_setup_done", "25146": "signal_struct", "25147": "signal_wake_up", "25148": "signal_wake_up_state", "25149": "signalfd_cleanup", "25150": "signalfd_notify", "25151": "signalfd_wqh", "25152": "signals", "25153": "signals_init", "25154": "signed", "25155": "signer", "25156": "signer_len", "25157": "signo", "25158": "signotset", "25159": "signr", "25160": "sigorsets", "25161": "sigpending", "25162": "sigprocmask", "25163": "sigq", "25164": "sigqueue", "25165": "sigqueue_alloc", "25166": "sigqueue_cachep", "25167": "sigqueue_free", "25168": "sigset_from_compat", "25169": "sigset_t", "25170": "sigset_to_compat", "25171": "sigsetsize", "25172": "sigsuspend", "25173": "simple", "25174": "simple_align_resource", "25175": "simple_open", "25176": "simple_read_from_buffer", "25177": "simple_strtol", "25178": "simple_strtoul", "25179": "simplify_symbols", "25180": "simulate", "25181": "single_open", "25182": "single_release", "25183": "single_task_running", "25184": "sival_int", "25185": "sixty", "25186": "size", "25187": "size_bits", "25188": "size_buf", "25189": "size_t", "25190": "sizeof", "25191": "sk", "25192": "sk_buff", "25193": "sk_buff_head", "25194": "sk_sndtimeo", "25195": "skb", "25196": "skb_clone", "25197": "skb_copy", "25198": "skb_copy_bits", "25199": "skb_cur", "25200": "skb_dequeue", "25201": "skb_get", "25202": "skb_mac_header", "25203": "skb_network_header", "25204": "skb_next", "25205": "skb_put", "25206": "skb_queue_head_init", "25207": "skb_queue_len", "25208": "skb_queue_purge", "25209": "skb_queue_tail", "25210": "skb_tail_pointer", "25211": "skb_tailroom", "25212": "skbp", "25213": "skew", "25214": "skew_tick", "25215": "skip", "25216": "skip_full_check", "25217": "skip_it", "25218": "skip_lines", "25219": "skip_more", "25220": "skip_spaces", "25221": "skip_time_extend", "25222": "skip_wait", "25223": "skipped_entries", "25224": "sl", "25225": "slab_is_available", "25226": "slack", "25227": "slack_hz", "25228": "slack_runtime", "25229": "slack_timer", "25230": "slaves_in_kgdb", "25231": "sleep", "25232": "sleep_jf", "25233": "sleep_length", "25234": "sleep_max", "25235": "sleep_start", "25236": "sleep_time", "25237": "sleep_time_bin", "25238": "sleep_usecs", "25239": "sleeping_thread_to_gdb_regs", "25240": "sleeptime_injected", "25241": "slen", "25242": "slice", "25243": "slice_max", "25244": "sln", "25245": "slot", "25246": "slot_addr", "25247": "slot_count", "25248": "slot_nr", "25249": "slot_type", "25250": "slot_used", "25251": "slots_per_page", "25252": "slow_acct_process", "25253": "slow_read_ctr", "25254": "slowpath_args", "25255": "slows", "25256": "sm_ref", "25257": "small_event_size", "25258": "smp_announce", "25259": "smp_call_func_t", "25260": "smp_call_function", "25261": "smp_call_function_any", "25262": "smp_call_function_many", "25263": "smp_call_function_single", "25264": "smp_call_function_single_async", "25265": "smp_cpus_done", "25266": "smp_hotplug_thread", "25267": "smp_load_acquire", "25268": "smp_mb", "25269": "smp_mb__after_atomic", "25270": "smp_mb__after_unlock_lock", "25271": "smp_mb__before_atomic", "25272": "smp_mb__before_spinlock", "25273": "smp_processor_id", "25274": "smp_read_barrier_depends", "25275": "smp_rmb", "25276": "smp_send_reschedule", "25277": "smp_store_release", "25278": "smp_wmb", "25279": "smpboot_create_threads", "25280": "smpboot_destroy_threads", "25281": "smpboot_park_thread", "25282": "smpboot_park_threads", "25283": "smpboot_register_percpu_thread", "25284": "smpboot_thread_call", "25285": "smpboot_thread_data", "25286": "smpboot_thread_fn", "25287": "smpboot_thread_init", "25288": "smpboot_thread_notifier", "25289": "smpboot_threads_lock", "25290": "smpboot_unpark_thread", "25291": "smpboot_unpark_threads", "25292": "smpboot_unregister_percpu_thread", "25293": "smt", "25294": "smt_gain", "25295": "sname", "25296": "snap", "25297": "snap_done", "25298": "snapshot", "25299": "snapshot_additional_pages", "25300": "snapshot_compat_ioctl", "25301": "snapshot_count_trigger", "25302": "snapshot_count_trigger_ops", "25303": "snapshot_data", "25304": "snapshot_device", "25305": "snapshot_device_available", "25306": "snapshot_device_init", "25307": "snapshot_fops", "25308": "snapshot_get_image_size", "25309": "snapshot_get_trigger_ops", "25310": "snapshot_handle", "25311": "snapshot_image_loaded", "25312": "snapshot_ioctl", "25313": "snapshot_open", "25314": "snapshot_raw", "25315": "snapshot_read", "25316": "snapshot_read_next", "25317": "snapshot_release", "25318": "snapshot_state", "25319": "snapshot_trigger", "25320": "snapshot_trigger_ops", "25321": "snapshot_trigger_print", "25322": "snapshot_write", "25323": "snapshot_write_finalize", "25324": "snapshot_write_next", "25325": "snd_portid", "25326": "snode", "25327": "snprint_stack_trace", "25328": "snprintf", "25329": "sock", "25330": "sock_filter", "25331": "sock_fprog", "25332": "sock_net", "25333": "sockaddr", "25334": "sockaddr_len", "25335": "sockaddr_storage", "25336": "socketcall", "25337": "soft", "25338": "soft_disable", "25339": "soft_lockup_hrtimer_cnt", "25340": "soft_lockup_nmi_warn", "25341": "soft_watchdog_enabled", "25342": "soft_watchdog_warn", "25343": "softirq", "25344": "softirq_action", "25345": "softirq_bit", "25346": "softirq_context", "25347": "softirq_count", "25348": "softirq_disable_event", "25349": "softirq_disable_ip", "25350": "softirq_enable_event", "25351": "softirq_enable_ip", "25352": "softirq_init", "25353": "softirq_snap", "25354": "softirq_threads", "25355": "softirq_to_name", "25356": "softirq_vec", "25357": "softirqs_enabled", "25358": "softirqs_off_events", "25359": "softirqs_on_events", "25360": "softlockup_all_cpu_backtrace", "25361": "softlockup_panic", "25362": "softlockup_task_ptr_saved", "25363": "softlockup_touch_sync", "25364": "softlockup_watchdog", "25365": "software", "25366": "software_resume", "25367": "sort", "25368": "sort_extable", "25369": "sort_main_extable", "25370": "source", "25371": "source_entry", "25372": "source_list", "25373": "source_load", "25374": "sp", "25375": "sp_list", "25376": "space", "25377": "spaces", "25378": "span", "25379": "span_weight", "25380": "spanned_pages", "25381": "sparse_irq_lock", "25382": "spawn_ksoftirqd", "25383": "special", "25384": "specific_send_sig_info", "25385": "spilled_regs", "25386": "spin", "25387": "spin_acquire", "25388": "spin_acquire_nest", "25389": "spin_bug", "25390": "spin_dump", "25391": "spin_is_locked", "25392": "spin_lock", "25393": "spin_lock_bh", "25394": "spin_lock_init", "25395": "spin_lock_irq", "25396": "spin_lock_irq_ops", "25397": "spin_lock_irqsave", "25398": "spin_lock_mutex", "25399": "spin_lock_nested", "25400": "spin_lock_ops", "25401": "spin_msec", "25402": "spin_needbreak", "25403": "spin_release", "25404": "spin_retry", "25405": "spin_trylock", "25406": "spin_trylock_bh", "25407": "spin_unlock", "25408": "spin_unlock_bh", "25409": "spin_unlock_irq", "25410": "spin_unlock_irqrestore", "25411": "spin_unlock_mutex", "25412": "spincnt", "25413": "spinlock_t", "25414": "splice_pipe", "25415": "splice_read", "25416": "split_page", "25417": "spread", "25418": "spread0", "25419": "spread_flag_changed", "25420": "sprint_backtrace", "25421": "sprint_symbol", "25422": "sprint_symbol_no_offset", "25423": "sprintf", "25424": "squeue", "25425": "sr1", "25426": "sr2", "25427": "src", "25428": "src_capacity", "25429": "src_cfs_rq", "25430": "src_cgrp", "25431": "src_cpu", "25432": "src_cset", "25433": "src_csets", "25434": "src_load", "25435": "src_nid", "25436": "src_reg", "25437": "src_reg_type", "25438": "src_root", "25439": "src_rq", "25440": "src_stats", "25441": "src_task", "25442": "srctree", "25443": "srcu", "25444": "srcu_advance_batches", "25445": "srcu_barrier", "25446": "srcu_batches_completed", "25447": "srcu_collect_new", "25448": "srcu_ctl", "25449": "srcu_flip", "25450": "srcu_init_notifier_head", "25451": "srcu_invoke_callbacks", "25452": "srcu_notifier_call_chain", "25453": "srcu_notifier_chain_register", "25454": "srcu_notifier_chain_unregister", "25455": "srcu_notifier_head", "25456": "srcu_ops", "25457": "srcu_read_delay", "25458": "srcu_read_lock", "25459": "srcu_read_lock_held", "25460": "srcu_read_unlock", "25461": "srcu_readers_active", "25462": "srcu_readers_active_idx", "25463": "srcu_readers_active_idx_check", "25464": "srcu_readers_seq_idx", "25465": "srcu_reschedule", "25466": "srcu_struct", "25467": "srcu_struct_array", "25468": "srcu_torture_barrier", "25469": "srcu_torture_call", "25470": "srcu_torture_completed", "25471": "srcu_torture_deferred_free", "25472": "srcu_torture_read_lock", "25473": "srcu_torture_read_unlock", "25474": "srcu_torture_stats", "25475": "srcu_torture_synchronize", "25476": "srcu_torture_synchronize_expedited", "25477": "srcversion", "25478": "ss", "25479": "ss_flags", "25480": "ss_mask", "25481": "ss_size", "25482": "ss_sp", "25483": "sscanf", "25484": "ssecs", "25485": "ssetmask", "25486": "ssid", "25487": "ssize_t", "25488": "ssleep", "25489": "sstep_cpu", "25490": "sstep_tries", "25491": "st", "25492": "st_info", "25493": "st_l", "25494": "st_name", "25495": "st_shndx", "25496": "st_size", "25497": "st_t", "25498": "st_value", "25499": "stabil", "25500": "stack", "25501": "stack_canary", "25502": "stack_dump_index", "25503": "stack_dump_trace", "25504": "stack_entry", "25505": "stack_max_size", "25506": "stack_max_size_fops", "25507": "stack_max_size_read", "25508": "stack_max_size_write", "25509": "stack_node", "25510": "stack_relative", "25511": "stack_size", "25512": "stack_slot_type", "25513": "stack_start", "25514": "stack_sysctl_mutex", "25515": "stack_t", "25516": "stack_trace", "25517": "stack_trace_filter", "25518": "stack_trace_filter_buf", "25519": "stack_trace_filter_fops", "25520": "stack_trace_filter_open", "25521": "stack_trace_fops", "25522": "stack_trace_init", "25523": "stack_trace_open", "25524": "stack_trace_seq_ops", "25525": "stack_trace_sysctl", "25526": "stack_tracer_enabled", "25527": "stack_user_size", "25528": "stack_vm", "25529": "stackend", "25530": "stacktrace", "25531": "stacktrace_count_probe_ops", "25532": "stacktrace_count_trigger", "25533": "stacktrace_count_trigger_ops", "25534": "stacktrace_get_trigger_ops", "25535": "stacktrace_probe_ops", "25536": "stacktrace_trigger", "25537": "stacktrace_trigger_ops", "25538": "stacktrace_trigger_print", "25539": "stall", "25540": "stall_cpu", "25541": "stall_cpu_holdoff", "25542": "stall_task", "25543": "stamp", "25544": "standby", "25545": "start", "25546": "start_addr", "25547": "start_bandwidth_timer", "25548": "start_branch_trace", "25549": "start_brk", "25550": "start_cfs_slack_bandwidth", "25551": "start_code", "25552": "start_comm", "25553": "start_critical_timing", "25554": "start_critical_timings", "25555": "start_data", "25556": "start_flush_work", "25557": "start_func", "25558": "start_func_tracer", "25559": "start_graph_tracing", "25560": "start_index", "25561": "start_irqsoff_tracer", "25562": "start_lba", "25563": "start_lock", "25564": "start_pfn", "25565": "start_pg", "25566": "start_pid", "25567": "start_rt_bandwidth", "25568": "start_sect", "25569": "start_site", "25570": "start_stack", "25571": "start_time", "25572": "start_tstamp", "25573": "start_txn", "25574": "start_wakeup_tracer", "25575": "started", "25576": "startf", "25577": "starting_runtime", "25578": "starttime", "25579": "stask", "25580": "stat", "25581": "stat_addr", "25582": "stat_cmp", "25583": "stat_dir", "25584": "stat_headers", "25585": "stat_interval", "25586": "stat_mutex", "25587": "stat_nam", "25588": "stat_next", "25589": "stat_node", "25590": "stat_release", "25591": "stat_root", "25592": "stat_seq_init", "25593": "stat_seq_next", "25594": "stat_seq_show", "25595": "stat_seq_start", "25596": "stat_seq_stop", "25597": "stat_session", "25598": "stat_show", "25599": "stat_start", "25600": "state", "25601": "state_filter", "25602": "state_name", "25603": "state_names", "25604": "state_show", "25605": "state_to_char", "25606": "state_use_accessors", "25607": "state_verbose", "25608": "state_verbose_f", "25609": "states", "25610": "states_equal", "25611": "static", "25612": "static_branch_", "25613": "static_key", "25614": "static_key_", "25615": "static_key_deferred", "25616": "static_key_enabled", "25617": "static_key_false", "25618": "static_key_initialized", "25619": "static_key_mod", "25620": "static_key_slow_dec", "25621": "static_key_slow_dec_deferred", "25622": "static_key_slow_inc", "25623": "static_obj", "25624": "static_prio", "25625": "statistics", "25626": "statp", "25627": "stats", "25628": "stats_lock", "25629": "stats_task", "25630": "status", "25631": "status_use_accessors", "25632": "statusp", "25633": "stbcnt", "25634": "std", "25635": "std_nice", "25636": "stddev", "25637": "steal", "25638": "steal_account_process_tick", "25639": "steal_ct", "25640": "stepping", "25641": "still_pending", "25642": "stime", "25643": "stimescaled", "25644": "stmt", "25645": "stop", "25646": "stop_a_enabled", "25647": "stop_at", "25648": "stop_branch_trace", "25649": "stop_count", "25650": "stop_cpus", "25651": "stop_cpus_lock", "25652": "stop_cpus_mutex", "25653": "stop_cpus_work", "25654": "stop_critical_timing", "25655": "stop_critical_timings", "25656": "stop_func_tracer", "25657": "stop_irqsoff_tracer", "25658": "stop_machine", "25659": "stop_machine_from_inactive_cpu", "25660": "stop_machine_initialized", "25661": "stop_one_cpu", "25662": "stop_one_cpu_nowait", "25663": "stop_sched_class", "25664": "stop_trace_on_warning", "25665": "stop_two_cpus", "25666": "stop_wakeup_tracer", "25667": "stopper", "25668": "store", "25669": "store_cpumask", "25670": "store_gcov_u32", "25671": "store_gcov_u64", "25672": "store_stacktrace", "25673": "store_trace_args", "25674": "store_uevent", "25675": "stp", "25676": "str", "25677": "str_item", "25678": "str_len", "25679": "str_loc", "25680": "strcat", "25681": "strchr", "25682": "strcmp", "25683": "strcpy", "25684": "strcspn", "25685": "stream_id", "25686": "strict_iomem", "25687": "strict_iomem_checks", "25688": "strim", "25689": "string", "25690": "string_size", "25691": "strlcpy", "25692": "strlen", "25693": "strncasecmp", "25694": "strncat", "25695": "strncmp", "25696": "strncpy", "25697": "strncpy_from_user", "25698": "strndup_user", "25699": "strnlen_user", "25700": "strnstr", "25701": "stroffs", "25702": "strong_try_module_get", "25703": "strpbrk", "25704": "strrchr", "25705": "strsect", "25706": "strsep", "25707": "strstarts", "25708": "strstr", "25709": "strstrip", "25710": "strtab", "25711": "strtab_size", "25712": "strtobool", "25713": "strtolfn", "25714": "struct", "25715": "struct_name", "25716": "stub_timer", "25717": "stutter", "25718": "stutter_pause_test", "25719": "stutter_task", "25720": "stutter_wait", "25721": "sub", "25722": "sub_info", "25723": "sub_nr_running", "25724": "subbuf", "25725": "subbuf_start", "25726": "subclass", "25727": "subkeys", "25728": "submit", "25729": "submit_bio", "25730": "subprocess_info", "25731": "subscribers", "25732": "subset", "25733": "subset_ns", "25734": "subsys", "25735": "subsys_initcall", "25736": "subsys_mask", "25737": "subsys_system_register", "25738": "subsys_virtual_register", "25739": "subsystem", "25740": "subsystem_filter_read", "25741": "subsystem_filter_write", "25742": "subsystem_open", "25743": "subsystem_release", "25744": "subsystems", "25745": "subtime", "25746": "subtract_blocked_load_contrib", "25747": "subtract_range", "25748": "subtree_control", "25749": "success", "25750": "suffix", "25751": "suffix_tbl", "25752": "suid", "25753": "suid_dumpable", "25754": "suidp", "25755": "sum", "25756": "sum_exec_runtime", "25757": "sum_forward_deps", "25758": "sum_nr_running", "25759": "sum_offline", "25760": "sum_online", "25761": "sum_sched_runtime", "25762": "sum_sleep_runtime", "25763": "sum_weighted_load", "25764": "super_block", "25765": "supported", "25766": "suspend", "25767": "suspend_console", "25768": "suspend_device_irq", "25769": "suspend_device_irqs", "25770": "suspend_devices_and_enter", "25771": "suspend_enter", "25772": "suspend_freeze_processes", "25773": "suspend_resume", "25774": "suspend_state_t", "25775": "suspend_test_finish", "25776": "suspend_test_start", "25777": "suspend_test_start_time", "25778": "suspend_thaw_processes", "25779": "suspend_type", "25780": "suspend_work", "25781": "swahw32", "25782": "swap", "25783": "swap_area", "25784": "swap_free", "25785": "swap_map_handle", "25786": "swap_map_page", "25787": "swap_map_page_list", "25788": "swap_offset", "25789": "swap_page", "25790": "swap_read_page", "25791": "swap_reader_finish", "25792": "swap_type_of", "25793": "swap_write_page", "25794": "swap_writer_finish", "25795": "swapdev_block", "25796": "swapin_count", "25797": "swapin_delay", "25798": "swapin_delay_total", "25799": "swdev", "25800": "switch", "25801": "switch_count", "25802": "switch_mm", "25803": "switch_task_namespaces", "25804": "switch_to", "25805": "switched_from", "25806": "switched_from_fair", "25807": "switched_from_rt", "25808": "switched_to", "25809": "switched_to_fair", "25810": "switched_to_idle", "25811": "switched_to_rt", "25812": "switching", "25813": "swp_entry", "25814": "swp_offset", "25815": "swsusp_alloc", "25816": "swsusp_arch_resume", "25817": "swsusp_arch_suspend", "25818": "swsusp_check", "25819": "swsusp_close", "25820": "swsusp_extent", "25821": "swsusp_extents", "25822": "swsusp_extents_insert", "25823": "swsusp_free", "25824": "swsusp_header", "25825": "swsusp_header_init", "25826": "swsusp_info", "25827": "swsusp_page_is_forbidden", "25828": "swsusp_page_is_free", "25829": "swsusp_read", "25830": "swsusp_resume_block", "25831": "swsusp_resume_device", "25832": "swsusp_save", "25833": "swsusp_set_page_forbidden", "25834": "swsusp_set_page_free", "25835": "swsusp_show_speed", "25836": "swsusp_swap_check", "25837": "swsusp_swap_in_use", "25838": "swsusp_unmark", "25839": "swsusp_unset_page_forbidden", "25840": "swsusp_unset_page_free", "25841": "swsusp_write", "25842": "sym", "25843": "sym_buf", "25844": "sym_end", "25845": "sym_flags", "25846": "sym_name", "25847": "sym_start", "25848": "symaddr", "25849": "symbol", "25850": "symbol_array", "25851": "symbol_cache", "25852": "symbol_end", "25853": "symbol_name", "25854": "symbol_offset", "25855": "symbol_put_addr", "25856": "symbol_start", "25857": "symbolic", "25858": "symbols", "25859": "symbolsize", "25860": "symname", "25861": "symnum", "25862": "symoffs", "25863": "syms", "25864": "symsearch", "25865": "symsec", "25866": "symsect", "25867": "symtab", "25868": "symtab_p", "25869": "symtab_p2", "25870": "symversion", "25871": "sync", "25872": "sync_cmos_work", "25873": "sync_filesystems", "25874": "sync_rcu_preempt_exp_count", "25875": "sync_rcu_preempt_exp_done", "25876": "sync_rcu_preempt_exp_init1", "25877": "sync_rcu_preempt_exp_init2", "25878": "sync_rcu_preempt_exp_mutex", "25879": "sync_rcu_preempt_exp_wq", "25880": "sync_read", "25881": "synced", "25882": "synchronize_hardirq", "25883": "synchronize_irq", "25884": "synchronize_net", "25885": "synchronize_rcu", "25886": "synchronize_rcu_bh", "25887": "synchronize_rcu_bh_expedited", "25888": "synchronize_rcu_busted", "25889": "synchronize_rcu_expedited", "25890": "synchronize_rcu_tasks", "25891": "synchronize_sched", "25892": "synchronize_sched_expedited", "25893": "synchronize_sched_expedited_cpu_stop", "25894": "synchronize_srcu", "25895": "synchronize_srcu_expedited", "25896": "synctype", "25897": "sys32_quotactl", "25898": "sys_accept", "25899": "sys_accept4", "25900": "sys_acct", "25901": "sys_add_key", "25902": "sys_bdflush", "25903": "sys_bind", "25904": "sys_bpf", "25905": "sys_capget", "25906": "sys_capset", "25907": "sys_chown", "25908": "sys_chown16", "25909": "sys_clock_adjtime", "25910": "sys_clock_getres", "25911": "sys_clock_gettime", "25912": "sys_clock_nanosleep", "25913": "sys_clock_settime", "25914": "sys_connect", "25915": "sys_data", "25916": "sys_delete_module", "25917": "sys_epoll_create", "25918": "sys_epoll_create1", "25919": "sys_epoll_ctl", "25920": "sys_epoll_pwait", "25921": "sys_epoll_wait", "25922": "sys_eventfd", "25923": "sys_eventfd2", "25924": "sys_execveat", "25925": "sys_fadvise64", "25926": "sys_fadvise64_64", "25927": "sys_fanotify_init", "25928": "sys_fanotify_mark", "25929": "sys_fchown", "25930": "sys_fchown16", "25931": "sys_finit_module", "25932": "sys_flock", "25933": "sys_futex", "25934": "sys_get_mempolicy", "25935": "sys_get_robust_list", "25936": "sys_getegid16", "25937": "sys_geteuid16", "25938": "sys_getgid16", "25939": "sys_getgroups", "25940": "sys_getgroups16", "25941": "sys_getpeername", "25942": "sys_getpgid", "25943": "sys_getresgid", "25944": "sys_getresgid16", "25945": "sys_getresuid", "25946": "sys_getresuid16", "25947": "sys_getsockname", "25948": "sys_getsockopt", "25949": "sys_getuid16", "25950": "sys_init_module", "25951": "sys_inotify_add_watch", "25952": "sys_inotify_init", "25953": "sys_inotify_init1", "25954": "sys_inotify_rm_watch", "25955": "sys_io_cancel", "25956": "sys_io_destroy", "25957": "sys_io_getevents", "25958": "sys_io_setup", "25959": "sys_io_submit", "25960": "sys_ioprio_get", "25961": "sys_ioprio_set", "25962": "sys_ipc", "25963": "sys_kcmp", "25964": "sys_kexec_file_load", "25965": "sys_kexec_load", "25966": "sys_keyctl", "25967": "sys_lchown", "25968": "sys_lchown16", "25969": "sys_listen", "25970": "sys_lookup_dcookie", "25971": "sys_madvise", "25972": "sys_mbind", "25973": "sys_memfd_create", "25974": "sys_migrate_pages", "25975": "sys_mincore", "25976": "sys_mlock", "25977": "sys_mlockall", "25978": "sys_move_pages", "25979": "sys_mprotect", "25980": "sys_mq_getsetattr", "25981": "sys_mq_notify", "25982": "sys_mq_open", "25983": "sys_mq_timedreceive", "25984": "sys_mq_timedsend", "25985": "sys_mq_unlink", "25986": "sys_mremap", "25987": "sys_msgctl", "25988": "sys_msgget", "25989": "sys_msgrcv", "25990": "sys_msgsnd", "25991": "sys_msync", "25992": "sys_munlock", "25993": "sys_munlockall", "25994": "sys_name_to_handle_at", "25995": "sys_ni_syscall", "25996": "sys_old_getrlimit", "25997": "sys_open_by_handle_at", "25998": "sys_pciconfig_iobase", "25999": "sys_pciconfig_read", "26000": "sys_pciconfig_write", "26001": "sys_perf_event_open", "26002": "sys_perf_refcount_enter", "26003": "sys_perf_refcount_exit", "26004": "sys_process_vm_readv", "26005": "sys_process_vm_writev", "26006": "sys_quotactl", "26007": "sys_recv", "26008": "sys_recvfrom", "26009": "sys_recvmmsg", "26010": "sys_recvmsg", "26011": "sys_refcount_enter", "26012": "sys_refcount_exit", "26013": "sys_remap_file_pages", "26014": "sys_request_key", "26015": "sys_rt_sigpending", "26016": "sys_rt_sigprocmask", "26017": "sys_rt_sigsuspend", "26018": "sys_s390_pci_mmio_read", "26019": "sys_s390_pci_mmio_write", "26020": "sys_sched_yield", "26021": "sys_seccomp", "26022": "sys_semctl", "26023": "sys_semget", "26024": "sys_semop", "26025": "sys_semtimedop", "26026": "sys_send", "26027": "sys_sendmmsg", "26028": "sys_sendmsg", "26029": "sys_sendto", "26030": "sys_set_mempolicy", "26031": "sys_set_robust_list", "26032": "sys_setfsgid", "26033": "sys_setfsgid16", "26034": "sys_setfsuid", "26035": "sys_setfsuid16", "26036": "sys_setgid", "26037": "sys_setgid16", "26038": "sys_setgroups", "26039": "sys_setgroups16", "26040": "sys_setregid", "26041": "sys_setregid16", "26042": "sys_setresgid", "26043": "sys_setresgid16", "26044": "sys_setresuid", "26045": "sys_setresuid16", "26046": "sys_setreuid", "26047": "sys_setreuid16", "26048": "sys_setsockopt", "26049": "sys_setuid", "26050": "sys_setuid16", "26051": "sys_sgetmask", "26052": "sys_shmat", "26053": "sys_shmctl", "26054": "sys_shmdt", "26055": "sys_shmget", "26056": "sys_shutdown", "26057": "sys_signalfd", "26058": "sys_signalfd4", "26059": "sys_sigpending", "26060": "sys_socket", "26061": "sys_socketcall", "26062": "sys_socketpair", "26063": "sys_spu_create", "26064": "sys_spu_run", "26065": "sys_ssetmask", "26066": "sys_subpage_prot", "26067": "sys_swapoff", "26068": "sys_swapon", "26069": "sys_sync", "26070": "sys_sysfs", "26071": "sys_syslog", "26072": "sys_timer_create", "26073": "sys_timer_gettime", "26074": "sys_timer_settime", "26075": "sys_timerfd_create", "26076": "sys_timerfd_gettime", "26077": "sys_timerfd_settime", "26078": "sys_tz", "26079": "sys_uselib", "26080": "sys_vm86", "26081": "sys_vm86old", "26082": "sys_wait4", "26083": "sys_waitid", "26084": "syscall", "26085": "syscall_enter_define_fields", "26086": "syscall_enter_register", "26087": "syscall_exit_define_fields", "26088": "syscall_exit_register", "26089": "syscall_get_arch", "26090": "syscall_get_arguments", "26091": "syscall_get_enter_fields", "26092": "syscall_get_nr", "26093": "syscall_get_return_value", "26094": "syscall_metadata", "26095": "syscall_nr", "26096": "syscall_nr_to_meta", "26097": "syscall_rollback", "26098": "syscall_set_return_value", "26099": "syscall_trace_enter", "26100": "syscall_trace_exit", "26101": "syscall_trace_lock", "26102": "syscall_tracepoint_update", "26103": "syscall_whitelist", "26104": "syscalls_metadata", "26105": "syscore_ops", "26106": "syscore_resume", "26107": "syscore_shutdown", "26108": "syscore_suspend", "26109": "syscr", "26110": "sysctl", "26111": "sysctl_", "26112": "sysctl_admin_reserve_kbytes", "26113": "sysctl_base_table", "26114": "sysctl_compact_memory", "26115": "sysctl_compact_unevictable_allowed", "26116": "sysctl_compaction_handler", "26117": "sysctl_drop_caches", "26118": "sysctl_extfrag_handler", "26119": "sysctl_extfrag_threshold", "26120": "sysctl_getname", "26121": "sysctl_hugetlb_shm_group", "26122": "sysctl_hung_task_check_count", "26123": "sysctl_hung_task_panic", "26124": "sysctl_hung_task_timeout_secs", "26125": "sysctl_hung_task_warnings", "26126": "sysctl_ieee_emulation_warnings", "26127": "sysctl_init", "26128": "sysctl_kprobes_optimization", "26129": "sysctl_legacy_va_layout", "26130": "sysctl_lowmem_reserve_ratio", "26131": "sysctl_max_map_count", "26132": "sysctl_max_threads", "26133": "sysctl_memory_failure_early_kill", "26134": "sysctl_memory_failure_recovery", "26135": "sysctl_min_slab_ratio", "26136": "sysctl_min_slab_ratio_sysctl_handler", "26137": "sysctl_min_unmapped_ratio", "26138": "sysctl_min_unmapped_ratio_sysctl_handler", "26139": "sysctl_nr_open", "26140": "sysctl_nr_open_max", "26141": "sysctl_nr_open_min", "26142": "sysctl_nr_trim_pages", "26143": "sysctl_numa_balancing", "26144": "sysctl_numa_balancing_scan_delay", "26145": "sysctl_numa_balancing_scan_period_max", "26146": "sysctl_numa_balancing_scan_period_min", "26147": "sysctl_numa_balancing_scan_size", "26148": "sysctl_oom_dump_tasks", "26149": "sysctl_oom_kill_allocating_task", "26150": "sysctl_overcommit_kbytes", "26151": "sysctl_overcommit_memory", "26152": "sysctl_overcommit_ratio", "26153": "sysctl_panic_on_oom", "26154": "sysctl_panic_on_stackoverflow", "26155": "sysctl_perf_cpu_time_max_percent", "26156": "sysctl_perf_event_mlock", "26157": "sysctl_perf_event_paranoid", "26158": "sysctl_perf_event_sample_rate", "26159": "sysctl_protected_hardlinks", "26160": "sysctl_protected_symlinks", "26161": "sysctl_sched_autogroup_enabled", "26162": "sysctl_sched_cfs_bandwidth_slice", "26163": "sysctl_sched_child_runs_first", "26164": "sysctl_sched_features", "26165": "sysctl_sched_latency", "26166": "sysctl_sched_migration_cost", "26167": "sysctl_sched_min_granularity", "26168": "sysctl_sched_nr_migrate", "26169": "sysctl_sched_rt_period", "26170": "sysctl_sched_rt_runtime", "26171": "sysctl_sched_shares_window", "26172": "sysctl_sched_time_avg", "26173": "sysctl_sched_tunable_scaling", "26174": "sysctl_sched_wakeup_granularity", "26175": "sysctl_softlockup_all_cpu_backtrace", "26176": "sysctl_stat_interval", "26177": "sysctl_timer_migration", "26178": "sysctl_tsb_ratio", "26179": "sysctl_user_reserve_kbytes", "26180": "sysctl_vfs_cache_pressure", "26181": "sysctl_writes_strict", "26182": "syscw", "26183": "sysfs_attr_init", "26184": "sysfs_bin_attr_init", "26185": "sysfs_blk_trace_attr_show", "26186": "sysfs_blk_trace_attr_store", "26187": "sysfs_create_bin_file", "26188": "sysfs_create_file", "26189": "sysfs_create_group", "26190": "sysfs_create_link", "26191": "sysfs_get_uname", "26192": "sysfs_ops", "26193": "sysfs_remove_bin_file", "26194": "sysfs_remove_file", "26195": "sysfs_remove_group", "26196": "sysfs_remove_link", "26197": "sysfs_show_current_tick_dev", "26198": "sysfs_test_command", "26199": "sysfs_test_status", "26200": "sysfs_unbind_tick_dev", "26201": "sysinfo", "26202": "syslog", "26203": "syslog_idx", "26204": "syslog_partial", "26205": "syslog_prev", "26206": "syslog_seq", "26207": "sysname", "26208": "sysrq_dbg_op", "26209": "sysrq_handle_dbg", "26210": "sysrq_key_op", "26211": "sysrq_poweroff_op", "26212": "sysrq_sched_debug_show", "26213": "sysrq_sysctl_handler", "26214": "sysrq_toggle_support", "26215": "system", "26216": "system_certificate_list", "26217": "system_certificate_list_size", "26218": "system_enable_read", "26219": "system_enable_write", "26220": "system_entering_hibernation", "26221": "system_freezable_power_efficient_wq", "26222": "system_freezable_wq", "26223": "system_freezing_cnt", "26224": "system_highpri_wq", "26225": "system_long_wq", "26226": "system_power_efficient_wq", "26227": "system_ram", "26228": "system_refcount", "26229": "system_refcount_dec", "26230": "system_refcount_inc", "26231": "system_state", "26232": "system_states", "26233": "system_tr_open", "26234": "system_trusted_keyring", "26235": "system_trusted_keyring_init", "26236": "system_unbound_wq", "26237": "system_wq", "26238": "systems", "26239": "sysvsem", "26240": "sz", "26241": "t", "26242": "t0", "26243": "t1", "26244": "t2", "26245": "t3", "26246": "t_action", "26247": "t_bytes", "26248": "t_error", "26249": "t_hash", "26250": "t_hash_next", "26251": "t_hash_show", "26252": "t_hash_start", "26253": "t_next", "26254": "t_sec", "26255": "t_sector", "26256": "t_show", "26257": "t_start", "26258": "t_stop", "26259": "t_uid", "26260": "table", "26261": "table_lock", "26262": "tablep", "26263": "tag", "26264": "tag_chunk", "26265": "tag_mount", "26266": "tagged", "26267": "taglen", "26268": "tai", "26269": "tai_offset", "26270": "tail", "26271": "tail_page", "26272": "taint", "26273": "tainted_mask", "26274": "taints", "26275": "take_cpu_down", "26276": "take_cpu_down_param", "26277": "taken", "26278": "takeover_tasklets", "26279": "targ", "26280": "target", "26281": "target2", "26282": "target_attrs", "26283": "target_auid", "26284": "target_comm", "26285": "target_cpu", "26286": "target_entry", "26287": "target_entry1", "26288": "target_list", "26289": "target_load", "26290": "target_pid", "26291": "target_rq", "26292": "target_sessionid", "26293": "target_sid", "26294": "target_uid", "26295": "target_value", "26296": "tarray", "26297": "task", "26298": "task1", "26299": "task2", "26300": "task_active_pid_ns", "26301": "task_ca", "26302": "task_can_attach", "26303": "task_capacity", "26304": "task_cfs_rq", "26305": "task_cgroup_from_root", "26306": "task_cgroup_path", "26307": "task_clear_jobctl_pending", "26308": "task_clear_jobctl_trapping", "26309": "task_clear_spread_page", "26310": "task_clear_spread_slab", "26311": "task_contributes_to_load", "26312": "task_cpu", "26313": "task_cputime", "26314": "task_cputime_adjusted", "26315": "task_cputime_scaled", "26316": "task_creation", "26317": "task_cred_xxx", "26318": "task_cs", "26319": "task_css", "26320": "task_css_check", "26321": "task_css_is_root", "26322": "task_css_set", "26323": "task_ctx", "26324": "task_ctx_data", "26325": "task_ctx_nr", "26326": "task_ctx_sched_out", "26327": "task_ctx_size", "26328": "task_curr", "26329": "task_current", "26330": "task_dead", "26331": "task_delay_info", "26332": "task_delta", "26333": "task_event", "26334": "task_exit_notifier", "26335": "task_faults", "26336": "task_faults_idx", "26337": "task_fork", "26338": "task_fork_fair", "26339": "task_frag", "26340": "task_free_notifier", "26341": "task_freezer", "26342": "task_function_call", "26343": "task_group", "26344": "task_group_account_field", "26345": "task_group_is_autogroup", "26346": "task_group_lock", "26347": "task_group_path", "26348": "task_groups", "26349": "task_gtime", "26350": "task_h_load", "26351": "task_handoff_register", "26352": "task_handoff_unregister", "26353": "task_has_dl_policy", "26354": "task_has_mempolicy", "26355": "task_has_pi_waiters", "26356": "task_has_rt_policy", "26357": "task_hot", "26358": "task_io_accounting_init", "26359": "task_io_get_inblock", "26360": "task_io_get_oublock", "26361": "task_is_stopped", "26362": "task_is_stopped_or_traced", "26363": "task_is_traced", "26364": "task_list", "26365": "task_lock", "26366": "task_move_group", "26367": "task_move_group_fair", "26368": "task_nice", "26369": "task_no_new_privs", "26370": "task_node", "26371": "task_nr_scan_windows", "26372": "task_numa_assign", "26373": "task_numa_compare", "26374": "task_numa_env", "26375": "task_numa_fault", "26376": "task_numa_find_cpu", "26377": "task_numa_free", "26378": "task_numa_group", "26379": "task_numa_group_id", "26380": "task_numa_migrate", "26381": "task_numa_placement", "26382": "task_numa_work", "26383": "task_of", "26384": "task_on_rq_migrating", "26385": "task_on_rq_queued", "26386": "task_participate_group_stop", "26387": "task_pgrp", "26388": "task_pid", "26389": "task_pid_nr", "26390": "task_pid_nr_ns", "26391": "task_pid_vnr", "26392": "task_pos", "26393": "task_ppid_nr", "26394": "task_pt_regs", "26395": "task_rlimit", "26396": "task_rlimit_max", "26397": "task_rq", "26398": "task_rq_lock", "26399": "task_rq_unlock", "26400": "task_running", "26401": "task_scan_max", "26402": "task_scan_min", "26403": "task_sched_runtime", "26404": "task_session", "26405": "task_set_jobctl_pending", "26406": "task_set_no_new_privs", "26407": "task_set_spread_page", "26408": "task_set_spread_slab", "26409": "task_size", "26410": "task_sleep", "26411": "task_stack_end_corrupted", "26412": "task_state_change", "26413": "task_state_char", "26414": "task_struct", "26415": "task_struct_cachep", "26416": "task_tgid", "26417": "task_tgid_nr", "26418": "task_tgid_nr_ns", "26419": "task_tgid_vnr", "26420": "task_thread_info", "26421": "task_tick", "26422": "task_tick_fair", "26423": "task_tick_idle", "26424": "task_tick_numa", "26425": "task_tick_rt", "26426": "task_top_pi_waiter", "26427": "task_uid", "26428": "task_unlock", "26429": "task_user_regset_view", "26430": "task_waking", "26431": "task_waking_fair", "26432": "task_wants_autogroup", "26433": "task_weight", "26434": "task_woken", "26435": "task_woken_rt", "26436": "task_work_add", "26437": "task_work_cancel", "26438": "task_work_func_t", "26439": "task_work_run", "26440": "task_works", "26441": "taskimp", "26442": "tasklet", "26443": "tasklet_action", "26444": "tasklet_hi_action", "26445": "tasklet_hi_schedule", "26446": "tasklet_hi_vec", "26447": "tasklet_hrtimer", "26448": "tasklet_hrtimer_init", "26449": "tasklet_init", "26450": "tasklet_kill", "26451": "tasklet_kill_immediate", "26452": "tasklet_schedule", "26453": "tasklet_struct", "26454": "tasklet_trylock", "26455": "tasklet_unlock", "26456": "tasklet_unlock_wait", "26457": "tasklet_vec", "26458": "tasklist_lock", "26459": "tasks", "26460": "tasks_frozen", "26461": "tasks_head", "26462": "tasks_ops", "26463": "tasks_rcu_exit_srcu", "26464": "tasks_timeline", "26465": "tasks_torture_read_lock", "26466": "tasks_torture_read_unlock", "26467": "taskstats", "26468": "taskstats_cache", "26469": "taskstats_cmd_get_policy", "26470": "taskstats_exit", "26471": "taskstats_init", "26472": "taskstats_init_early", "26473": "taskstats_ops", "26474": "taskstats_packet_size", "26475": "taskstats_seqnum", "26476": "taskstats_tgid_alloc", "26477": "taskstats_tgid_free", "26478": "taskstats_user_cmd", "26479": "taskweight", "26480": "tb", "26481": "tb_fmt", "26482": "tbase_get_base", "26483": "tbase_get_deferrable", "26484": "tbase_get_irqsafe", "26485": "tbl", "26486": "tbl_data", "26487": "tbl_size", "26488": "tbuf", "26489": "tc", "26490": "tcd_param", "26491": "tconv", "26492": "tcred", "26493": "td", "26494": "tdata", "26495": "te_blk_io_trace", "26496": "tell_cpu_to_push", "26497": "temp_attr", "26498": "temp_end", "26499": "temp_num", "26500": "temp_start", "26501": "template", "26502": "ten_thousand", "26503": "test", "26504": "test_and_clear_bit", "26505": "test_and_set_bit", "26506": "test_bit", "26507": "test_boost", "26508": "test_boost_duration", "26509": "test_boost_interval", "26510": "test_callback", "26511": "test_enable_data", "26512": "test_filter_data", "26513": "test_filter_data_t", "26514": "test_func", "26515": "test_kprobe", "26516": "test_malloc", "26517": "test_mutex", "26518": "test_no_idle_hz", "26519": "test_opcodes", "26520": "test_pred_visited", "26521": "test_pred_visited_fn", "26522": "test_probe1", "26523": "test_probe2", "26524": "test_probe3", "26525": "test_rec_ops_needs_regs", "26526": "test_rec_probe", "26527": "test_recsafe_probe", "26528": "test_regs_probe", "26529": "test_repeat_count_current", "26530": "test_repeat_count_max", "26531": "test_ringbuffer", "26532": "test_spinlock", "26533": "test_spinlock_irq", "26534": "test_state", "26535": "test_state_label", "26536": "test_suspend", "26537": "test_taint", "26538": "test_thread", "26539": "test_thread_data", "26540": "test_thread_flag", "26541": "test_time_stamp", "26542": "test_tsk_need_resched", "26543": "test_tsk_trace_trace", "26544": "test_type", "26545": "test_wakealarm", "26546": "test_walk_pred_cb", "26547": "test_work", "26548": "text_len", "26549": "text_mutex", "26550": "text_size", "26551": "tfc", "26552": "tfm", "26553": "tg", "26554": "tg_cfs_bandwidth", "26555": "tg_cfs_schedulable_down", "26556": "tg_contrib", "26557": "tg_get_cfs_period", "26558": "tg_get_cfs_quota", "26559": "tg_has_rt_tasks", "26560": "tg_load_contrib", "26561": "tg_nop", "26562": "tg_rt_schedulable", "26563": "tg_runnable_contrib", "26564": "tg_set_cfs_bandwidth", "26565": "tg_set_cfs_period", "26566": "tg_set_cfs_quota", "26567": "tg_set_rt_bandwidth", "26568": "tg_throttle_down", "26569": "tg_unthrottle_up", "26570": "tg_visitor", "26571": "tg_weight", "26572": "tgid", "26573": "tgstime", "26574": "tgutime", "26575": "than", "26576": "that", "26577": "that_cpu", "26578": "thaw_kernel_threads", "26579": "thaw_processes", "26580": "thaw_workqueues", "26581": "the", "26582": "these", "26583": "third", "26584": "this", "26585": "this_clock", "26586": "this_cpu", "26587": "this_cpu_cpumask_var_ptr", "26588": "this_cpu_dec", "26589": "this_cpu_inc", "26590": "this_cpu_inc_return", "26591": "this_cpu_ksoftirqd", "26592": "this_cpu_ptr", "26593": "this_cpu_read", "26594": "this_cpu_write", "26595": "this_cpupid", "26596": "this_css", "26597": "this_eff_load", "26598": "this_flusher", "26599": "this_group", "26600": "this_len", "26601": "this_load", "26602": "this_rq", "26603": "this_rq_lock", "26604": "this_scd", "26605": "this_syscall", "26606": "this_tr", "26607": "those", "26608": "thr", "26609": "thr_query", "26610": "thread", "26611": "thread_ack", "26612": "thread_comm", "26613": "thread_data", "26614": "thread_flags", "26615": "thread_fn", "26616": "thread_group", "26617": "thread_group_cputime", "26618": "thread_group_cputime_adjusted", "26619": "thread_group_cputime_init", "26620": "thread_group_cputimer", "26621": "thread_group_empty", "26622": "thread_group_leader", "26623": "thread_head", "26624": "thread_info", "26625": "thread_info_cache", "26626": "thread_info_cache_init", "26627": "thread_keyring", "26628": "thread_mask", "26629": "thread_node", "26630": "thread_should_run", "26631": "threadfn", "26632": "threadgroup", "26633": "threadgroup_change_begin", "26634": "threadgroup_change_end", "26635": "threadgroup_lock", "26636": "threadgroup_unlock", "26637": "threadid", "26638": "threads", "26639": "threads_active", "26640": "threads_handled", "26641": "threads_handled_last", "26642": "threads_oneshot", "26643": "thref", "26644": "thresh", "26645": "threshold", "26646": "throttle_cfs_rq", "26647": "throttle_count", "26648": "throttled", "26649": "throttled_cfs_rq", "26650": "throttled_clock", "26651": "throttled_clock_task", "26652": "throttled_clock_task_time", "26653": "throttled_hierarchy", "26654": "throttled_lb_pair", "26655": "throttled_list", "26656": "throttled_time", "26657": "ti", "26658": "tick", "26659": "tick_bc_dev", "26660": "tick_broadcast", "26661": "tick_broadcast_clear_oneshot", "26662": "tick_broadcast_control", "26663": "tick_broadcast_device", "26664": "tick_broadcast_force_mask", "26665": "tick_broadcast_forced", "26666": "tick_broadcast_init", "26667": "tick_broadcast_init_next_event", "26668": "tick_broadcast_init_sysfs", "26669": "tick_broadcast_lock", "26670": "tick_broadcast_mask", "26671": "tick_broadcast_mode", "26672": "tick_broadcast_on", "26673": "tick_broadcast_oneshot_active", "26674": "tick_broadcast_oneshot_available", "26675": "tick_broadcast_oneshot_control", "26676": "tick_broadcast_oneshot_mask", "26677": "tick_broadcast_pending_mask", "26678": "tick_broadcast_set_affinity", "26679": "tick_broadcast_set_event", "26680": "tick_broadcast_setup_oneshot", "26681": "tick_broadcast_start_periodic", "26682": "tick_broadcast_state", "26683": "tick_broadcast_switch_to_oneshot", "26684": "tick_broadcast_update_freq", "26685": "tick_cancel_sched_timer", "26686": "tick_check_broadcast_device", "26687": "tick_check_broadcast_expired", "26688": "tick_check_new_device", "26689": "tick_check_oneshot_broadcast_this_cpu", "26690": "tick_check_oneshot_change", "26691": "tick_check_replacement", "26692": "tick_cleanup_dead_cpu", "26693": "tick_clock_notify", "26694": "tick_cpu_device", "26695": "tick_cpu_sched", "26696": "tick_device", "26697": "tick_device_is_functional", "26698": "tick_device_mode", "26699": "tick_device_setup_broadcast_func", "26700": "tick_device_uses_broadcast", "26701": "tick_do_broadcast", "26702": "tick_do_periodic_broadcast", "26703": "tick_do_timer_cpu", "26704": "tick_do_update_jiffies64", "26705": "tick_error", "26706": "tick_get_broadcast_device", "26707": "tick_get_broadcast_mask", "26708": "tick_get_broadcast_oneshot_mask", "26709": "tick_get_device", "26710": "tick_get_tick_dev", "26711": "tick_get_tick_sched", "26712": "tick_gtod", "26713": "tick_handle_oneshot_broadcast", "26714": "tick_handle_periodic", "26715": "tick_handle_periodic_broadcast", "26716": "tick_handover_do_timer", "26717": "tick_init_highres", "26718": "tick_init_jiffy_update", "26719": "tick_init_sysfs", "26720": "tick_install_broadcast_device", "26721": "tick_install_replacement", "26722": "tick_irq_enter", "26723": "tick_irq_exit", "26724": "tick_is_broadcast_device", "26725": "tick_is_oneshot_available", "26726": "tick_length", "26727": "tick_length_base", "26728": "tick_next_period", "26729": "tick_nohz_account_idle_ticks", "26730": "tick_nohz_active", "26731": "tick_nohz_enabled", "26732": "tick_nohz_enabled_snap", "26733": "tick_nohz_full_cpu", "26734": "tick_nohz_full_enabled", "26735": "tick_nohz_full_kick", "26736": "tick_nohz_full_kick_all", "26737": "tick_nohz_full_kick_cpu", "26738": "tick_nohz_full_mask", "26739": "tick_nohz_full_running", "26740": "tick_nohz_full_setup", "26741": "tick_nohz_full_stop_tick", "26742": "tick_nohz_get_sleep_length", "26743": "tick_nohz_handler", "26744": "tick_nohz_idle_enter", "26745": "tick_nohz_idle_exit", "26746": "tick_nohz_init", "26747": "tick_nohz_irq_enter", "26748": "tick_nohz_irq_exit", "26749": "tick_nohz_kick_tick", "26750": "tick_nohz_mode", "26751": "tick_nohz_reprogram", "26752": "tick_nohz_restart", "26753": "tick_nohz_restart_sched_tick", "26754": "tick_nohz_start_idle", "26755": "tick_nohz_stop_idle", "26756": "tick_nohz_stop_sched_tick", "26757": "tick_nohz_switch_to_nohz", "26758": "tick_nohz_task_switch", "26759": "tick_nohz_tick_stopped", "26760": "tick_nohz_update_jiffies", "26761": "tick_nsec", "26762": "tick_oneshot_mode_active", "26763": "tick_oneshot_notify", "26764": "tick_oneshot_possible", "26765": "tick_percpu_dev", "26766": "tick_period", "26767": "tick_program_event", "26768": "tick_raw", "26769": "tick_receive_broadcast", "26770": "tick_resume", "26771": "tick_resume_broadcast", "26772": "tick_resume_broadcast_oneshot", "26773": "tick_resume_check_broadcast", "26774": "tick_resume_oneshot", "26775": "tick_sched", "26776": "tick_sched_do_timer", "26777": "tick_sched_handle", "26778": "tick_sched_timer", "26779": "tick_set_periodic_handler", "26780": "tick_setup_hrtimer_broadcast", "26781": "tick_setup_oneshot", "26782": "tick_setup_periodic", "26783": "tick_setup_sched_timer", "26784": "tick_shutdown", "26785": "tick_shutdown_broadcast", "26786": "tick_shutdown_broadcast_oneshot", "26787": "tick_stopped", "26788": "tick_suspend", "26789": "tick_suspend_broadcast", "26790": "tick_switch_to_oneshot", "26791": "tick_usec", "26792": "ticks", "26793": "ticks_this_gp", "26794": "ticks_title", "26795": "ticks_value", "26796": "tid", "26797": "tid_addr", "26798": "tid_entry", "26799": "tidptr", "26800": "till_stall_check", "26801": "time", "26802": "time64_t", "26803": "time_adjust", "26804": "time_after", "26805": "time_after_eq", "26806": "time_before", "26807": "time_before_eq", "26808": "time_constant", "26809": "time_delta", "26810": "time_enabled", "26811": "time_esterror", "26812": "time_freq", "26813": "time_hardirqs_off", "26814": "time_hardirqs_on", "26815": "time_is_before_jiffies", "26816": "time_left", "26817": "time_maxerror", "26818": "time_offset", "26819": "time_passed", "26820": "time_reftime", "26821": "time_running", "26822": "time_slice", "26823": "time_squared", "26824": "time_stamp", "26825": "time_start", "26826": "time_state", "26827": "time_status", "26828": "time_stop", "26829": "time_t", "26830": "time_tai", "26831": "timecounter", "26832": "timecounter_cyc2time", "26833": "timecounter_init", "26834": "timecounter_read", "26835": "timecounter_read_delta", "26836": "timed_out", "26837": "timekeeper", "26838": "timekeeper_lock", "26839": "timekeeping", "26840": "timekeeping_adjust", "26841": "timekeeping_apply_adjustment", "26842": "timekeeping_check_update", "26843": "timekeeping_clocktai", "26844": "timekeeping_forward_now", "26845": "timekeeping_freqadjust", "26846": "timekeeping_get_delta", "26847": "timekeeping_get_ns", "26848": "timekeeping_get_tai_offset", "26849": "timekeeping_init", "26850": "timekeeping_init_ops", "26851": "timekeeping_inject_offset", "26852": "timekeeping_inject_sleeptime64", "26853": "timekeeping_internal", "26854": "timekeeping_last_warning", "26855": "timekeeping_max_deferment", "26856": "timekeeping_notify", "26857": "timekeeping_overflow_seen", "26858": "timekeeping_resume", "26859": "timekeeping_rtc_skipresume", "26860": "timekeeping_rtc_skipsuspend", "26861": "timekeeping_set_tai_offset", "26862": "timekeeping_suspend", "26863": "timekeeping_suspend_time", "26864": "timekeeping_suspended", "26865": "timekeeping_syscore_ops", "26866": "timekeeping_underflow_seen", "26867": "timekeeping_update", "26868": "timekeeping_valid_for_hres", "26869": "timeout", "26870": "timeout_jiffies", "26871": "timeout_ms", "26872": "timeout_ns", "26873": "timeout_start", "26874": "timeout_us", "26875": "timer", "26876": "timer_active", "26877": "timer_cpu_notify", "26878": "timer_create", "26879": "timer_debug_descr", "26880": "timer_debug_hint", "26881": "timer_del", "26882": "timer_delete", "26883": "timer_delete_hook", "26884": "timer_event_spec", "26885": "timer_fixup_activate", "26886": "timer_fixup_assert_init", "26887": "timer_fixup_free", "26888": "timer_fixup_init", "26889": "timer_flag", "26890": "timer_get", "26891": "timer_getoverrun", "26892": "timer_gettime", "26893": "timer_id", "26894": "timer_jiffies", "26895": "timer_list", "26896": "timer_list_iter", "26897": "timer_pending", "26898": "timer_register_cpu_notifier", "26899": "timer_set", "26900": "timer_set_base", "26901": "timer_settime", "26902": "timer_slack_ns", "26903": "timer_stats", "26904": "timer_stats_account_timer", "26905": "timer_stats_active", "26906": "timer_stats_timer_clear_start_info", "26907": "timer_stats_timer_set_start_info", "26908": "timer_stats_update_stats", "26909": "timer_t", "26910": "timerf", "26911": "timerqueue", "26912": "timerqueue_add", "26913": "timerqueue_del", "26914": "timerqueue_getnext", "26915": "timerqueue_head", "26916": "timers", "26917": "times", "26918": "timespec", "26919": "timespec64", "26920": "timespec64_add", "26921": "timespec64_add_ns", "26922": "timespec64_compare", "26923": "timespec64_sub", "26924": "timespec64_to_ktime", "26925": "timespec64_to_timespec", "26926": "timespec64_valid_strict", "26927": "timespec_add_ns", "26928": "timespec_add_safe", "26929": "timespec_sub", "26930": "timespec_to_jiffies", "26931": "timespec_to_ktime", "26932": "timespec_to_ns", "26933": "timespec_to_timespec64", "26934": "timespec_trunc", "26935": "timespec_valid", "26936": "timestamp", "26937": "timeval", "26938": "timeval_to_cputime", "26939": "timeval_to_jiffies", "26940": "timeval_to_ktime", "26941": "timeval_to_ns", "26942": "timeval_valid", "26943": "timex", "26944": "timezone", "26945": "timr", "26946": "tiny", "26947": "title", "26948": "tk", "26949": "tk_core", "26950": "tk_debug_account_sleep_time", "26951": "tk_debug_show_sleep_time", "26952": "tk_fast", "26953": "tk_fast_mono", "26954": "tk_fast_raw", "26955": "tk_normalize_xtime", "26956": "tk_offsets", "26957": "tk_read_base", "26958": "tk_set_wall_to_mono", "26959": "tk_set_xtime", "26960": "tk_setup_internals", "26961": "tk_update_ktime_data", "26962": "tk_update_sleep_time", "26963": "tk_xtime", "26964": "tk_xtime_add", "26965": "tkf", "26966": "tkr", "26967": "tkr_dummy", "26968": "tkr_mono", "26969": "tkr_raw", "26970": "tl", "26971": "tlb_migrate_finish", "26972": "tloc", "26973": "tls_val", "26974": "tm", "26975": "tm_hour", "26976": "tm_mday", "26977": "tm_min", "26978": "tm_mon", "26979": "tm_ref", "26980": "tm_sec", "26981": "tm_year", "26982": "tmono", "26983": "tmp", "26984": "tmp_attrs", "26985": "tmp_bitmap", "26986": "tmp_cs", "26987": "tmp_cset", "26988": "tmp_hex", "26989": "tmp_iter_page", "26990": "tmp_l", "26991": "tmp_link", "26992": "tmp_links", "26993": "tmp_list", "26994": "tmp_p", "26995": "tmp_raw", "26996": "tmp_seq", "26997": "tmp_sgs", "26998": "tmp_ss_mask", "26999": "tmp_task", "27000": "tmpmask", "27001": "tmpstr", "27002": "tmptaint", "27003": "tmr", "27004": "tms", "27005": "tms_cstime", "27006": "tms_cutime", "27007": "tms_stime", "27008": "tms_utime", "27009": "tn", "27010": "tne", "27011": "tnt", "27012": "tnts", "27013": "to", "27014": "to_acct", "27015": "to_alloc", "27016": "to_change", "27017": "to_cpumask", "27018": "to_delayed_work", "27019": "to_free_highmem", "27020": "to_free_normal", "27021": "to_kthread", "27022": "to_live_kthread", "27023": "to_module_attr", "27024": "to_module_kobject", "27025": "to_param_attr", "27026": "to_pid_ns", "27027": "to_ratio", "27028": "to_remove", "27029": "to_remove_page", "27030": "to_rtc_device", "27031": "to_send", "27032": "to_tell", "27033": "to_user_ns", "27034": "to_uts_ns", "27035": "to_wakeup", "27036": "tocopy", "27037": "todo", "27038": "tofree", "27039": "tok", "27040": "token", "27041": "tolerance", "27042": "tolower", "27043": "tomono", "27044": "too", "27045": "too_long", "27046": "too_many_workers", "27047": "took", "27048": "top_cpuset", "27049": "top_down", "27050": "top_op", "27051": "top_trace_array", "27052": "torture_cleanup_begin", "27053": "torture_cleanup_end", "27054": "torture_create_kthread", "27055": "torture_init_begin", "27056": "torture_init_end", "27057": "torture_kthread_stopping", "27058": "torture_lock_busted_write_delay", "27059": "torture_lock_busted_write_lock", "27060": "torture_lock_busted_write_unlock", "27061": "torture_lock_spin_write_unlock_irq", "27062": "torture_must_stop", "27063": "torture_must_stop_irq", "27064": "torture_mutex", "27065": "torture_mutex_delay", "27066": "torture_mutex_lock", "27067": "torture_mutex_unlock", "27068": "torture_onoff", "27069": "torture_onoff_cleanup", "27070": "torture_onoff_failures", "27071": "torture_onoff_init", "27072": "torture_onoff_stats", "27073": "torture_ops", "27074": "torture_param", "27075": "torture_random", "27076": "torture_random_state", "27077": "torture_runnable", "27078": "torture_rwlock", "27079": "torture_rwlock_read_delay", "27080": "torture_rwlock_read_lock", "27081": "torture_rwlock_read_lock_irq", "27082": "torture_rwlock_read_unlock", "27083": "torture_rwlock_read_unlock_irq", "27084": "torture_rwlock_write_delay", "27085": "torture_rwlock_write_lock", "27086": "torture_rwlock_write_lock_irq", "27087": "torture_rwlock_write_unlock", "27088": "torture_rwlock_write_unlock_irq", "27089": "torture_rwsem", "27090": "torture_rwsem_down_read", "27091": "torture_rwsem_down_write", "27092": "torture_rwsem_read_delay", "27093": "torture_rwsem_up_read", "27094": "torture_rwsem_up_write", "27095": "torture_rwsem_write_delay", "27096": "torture_shuffle", "27097": "torture_shuffle_cleanup", "27098": "torture_shuffle_init", "27099": "torture_shuffle_task_register", "27100": "torture_shuffle_task_unregister_all", "27101": "torture_shuffle_tasks", "27102": "torture_shutdown", "27103": "torture_shutdown_absorb", "27104": "torture_shutdown_cleanup", "27105": "torture_shutdown_hook", "27106": "torture_shutdown_init", "27107": "torture_shutdown_nb", "27108": "torture_shutdown_notify", "27109": "torture_spin_lock_write_delay", "27110": "torture_spin_lock_write_lock", "27111": "torture_spin_lock_write_lock_irq", "27112": "torture_spin_lock_write_unlock", "27113": "torture_spinlock", "27114": "torture_stop_kthread", "27115": "torture_stutter", "27116": "torture_stutter_cleanup", "27117": "torture_stutter_init", "27118": "torture_type", "27119": "tot_reqs", "27120": "total", "27121": "total_alloc", "27122": "total_bw", "27123": "total_capacity", "27124": "total_dropped", "27125": "total_events", "27126": "total_faults", "27127": "total_forks", "27128": "total_insns", "27129": "total_len", "27130": "total_load", "27131": "total_lost", "27132": "total_numa_faults", "27133": "total_read", "27134": "total_ref_count", "27135": "total_size", "27136": "total_time_enabled", "27137": "total_time_running", "27138": "total_value", "27139": "total_vm", "27140": "total_written", "27141": "totalcpuusage", "27142": "totalhigh", "27143": "totalram", "27144": "totalram_pages", "27145": "totalswap", "27146": "totqlen", "27147": "touch_all_softlockup_watchdogs", "27148": "touch_nmi_watchdog", "27149": "touch_softlockup_watchdog", "27150": "touch_softlockup_watchdog_sync", "27151": "touch_ts", "27152": "toupper", "27153": "tp", "27154": "tp_", "27155": "tp_event", "27156": "tp_list", "27157": "tpadding", "27158": "tptr", "27159": "tr", "27160": "tr_a", "27161": "tr_b", "27162": "trace", "27163": "trace_access_lock", "27164": "trace_access_lock_init", "27165": "trace_access_unlock", "27166": "trace_active", "27167": "trace_add_event_call", "27168": "trace_array", "27169": "trace_array_cpu", "27170": "trace_array_get", "27171": "trace_array_printk", "27172": "trace_array_printk_buf", "27173": "trace_array_put", "27174": "trace_array_vprintk", "27175": "trace_assign_type", "27176": "trace_benchmark", "27177": "trace_benchmark_event", "27178": "trace_benchmark_event_enabled", "27179": "trace_benchmark_reg", "27180": "trace_benchmark_unreg", "27181": "trace_blk_event", "27182": "trace_blk_event_funcs", "27183": "trace_boot_clock", "27184": "trace_boot_clock_buf", "27185": "trace_boot_options", "27186": "trace_boot_options_buf", "27187": "trace_bprintk_fmt", "27188": "trace_bprintk_fmt_list", "27189": "trace_bprintk_fmt_start", "27190": "trace_branch", "27191": "trace_branch_disable", "27192": "trace_branch_enable", "27193": "trace_branch_event", "27194": "trace_branch_funcs", "27195": "trace_branch_print", "27196": "trace_buf", "27197": "trace_buf_size", "27198": "trace_buffer", "27199": "trace_buffer_iter", "27200": "trace_buffer_lock_reserve", "27201": "trace_buffer_unlock_commit", "27202": "trace_call_bpf", "27203": "trace_clear_recursion", "27204": "trace_clock", "27205": "trace_clock_global", "27206": "trace_clock_jiffies", "27207": "trace_clock_local", "27208": "trace_clock_struct", "27209": "trace_cmdline_lock", "27210": "trace_cmdline_save", "27211": "trace_create_file", "27212": "trace_create_new_event", "27213": "trace_create_savedcmd", "27214": "trace_ctx_event", "27215": "trace_ctx_funcs", "27216": "trace_ctx_hex", "27217": "trace_ctx_print", "27218": "trace_ctx_raw", "27219": "trace_ctxwake_bin", "27220": "trace_ctxwake_hex", "27221": "trace_ctxwake_print", "27222": "trace_ctxwake_raw", "27223": "trace_current_buffer_lock_reserve", "27224": "trace_default_header", "27225": "trace_define_common_fields", "27226": "trace_define_field", "27227": "trace_destroy_fields", "27228": "trace_do_benchmark", "27229": "trace_dump_stack", "27230": "trace_empty", "27231": "trace_entry", "27232": "trace_enum_map", "27233": "trace_enum_map_head", "27234": "trace_enum_map_item", "27235": "trace_enum_map_tail", "27236": "trace_enum_maps", "27237": "trace_enum_mutex", "27238": "trace_enums", "27239": "trace_event", "27240": "trace_event_buffer_lock_reserve", "27241": "trace_event_enable_cmd_record", "27242": "trace_event_enable_disable", "27243": "trace_event_enum_update", "27244": "trace_event_functions", "27245": "trace_event_init", "27246": "trace_event_raw_init", "27247": "trace_event_read_lock", "27248": "trace_event_read_unlock", "27249": "trace_event_sem", "27250": "trace_event_trigger_enable_disable", "27251": "trace_events", "27252": "trace_events_filter_test", "27253": "trace_find_cmdline", "27254": "trace_find_event_field", "27255": "trace_find_mark", "27256": "trace_find_next_entry", "27257": "trace_find_next_entry_inc", "27258": "trace_flag_type", "27259": "trace_flags", "27260": "trace_fn_bin", "27261": "trace_fn_event", "27262": "trace_fn_funcs", "27263": "trace_fn_hex", "27264": "trace_fn_raw", "27265": "trace_fn_trace", "27266": "trace_format_open", "27267": "trace_func_graph_ent_t", "27268": "trace_func_graph_ret_t", "27269": "trace_function", "27270": "trace_get_context_bit", "27271": "trace_get_fields", "27272": "trace_get_syscall_nr", "27273": "trace_get_user", "27274": "trace_graph_entry", "27275": "trace_graph_entry_watchdog", "27276": "trace_graph_function", "27277": "trace_graph_return", "27278": "trace_graph_thresh_entry", "27279": "trace_graph_thresh_return", "27280": "trace_handle_return", "27281": "trace_hardirq_context", "27282": "trace_hardirq_enter", "27283": "trace_hardirq_exit", "27284": "trace_hardirqs_enabled", "27285": "trace_hardirqs_off", "27286": "trace_hardirqs_off_caller", "27287": "trace_hardirqs_on", "27288": "trace_hardirqs_on_caller", "27289": "trace_init_global_iter", "27290": "trace_irq_handler_entry", "27291": "trace_irq_handler_exit", "27292": "trace_iterator", "27293": "trace_iterator_flags", "27294": "trace_itimer_expire", "27295": "trace_itimer_state", "27296": "trace_keep_overwrite", "27297": "trace_kprobe", "27298": "trace_kprobe_has_gone", "27299": "trace_kprobe_is_on_module", "27300": "trace_kprobe_is_return", "27301": "trace_kprobe_module_callback", "27302": "trace_kprobe_module_nb", "27303": "trace_kprobe_offset", "27304": "trace_kprobe_symbol", "27305": "trace_kprobe_within_module", "27306": "trace_latency_header", "27307": "trace_likely_condition", "27308": "trace_lock_acquire", "27309": "trace_lock_acquired", "27310": "trace_lock_contended", "27311": "trace_lock_release", "27312": "trace_lookup_stack", "27313": "trace_mark", "27314": "trace_marker", "27315": "trace_mmiotrace_map", "27316": "trace_mmiotrace_rw", "27317": "trace_module_add_events", "27318": "trace_module_free", "27319": "trace_module_get", "27320": "trace_module_has_bad_taint", "27321": "trace_module_nb", "27322": "trace_module_notify", "27323": "trace_module_remove_events", "27324": "trace_nop_print", "27325": "trace_note", "27326": "trace_note_time", "27327": "trace_note_tsk", "27328": "trace_on", "27329": "trace_ops", "27330": "trace_options", "27331": "trace_opts", "27332": "trace_overrun", "27333": "trace_parser", "27334": "trace_parser_clear", "27335": "trace_parser_cont", "27336": "trace_parser_get_init", "27337": "trace_parser_loaded", "27338": "trace_parser_put", "27339": "trace_pipe", "27340": "trace_pipe_raw", "27341": "trace_pm_qos_add_request", "27342": "trace_pm_qos_remove_request", "27343": "trace_pm_qos_update_flags", "27344": "trace_pm_qos_update_request", "27345": "trace_pm_qos_update_request_timeout", "27346": "trace_pm_qos_update_target", "27347": "trace_preempt_off", "27348": "trace_preempt_on", "27349": "trace_print_bprintk_msg_only", "27350": "trace_print_bputs_msg_only", "27351": "trace_print_context", "27352": "trace_print_flags", "27353": "trace_print_flags_u64", "27354": "trace_print_graph_duration", "27355": "trace_print_lat_context", "27356": "trace_print_lat_fmt", "27357": "trace_print_printk_msg_only", "27358": "trace_print_seq", "27359": "trace_printk", "27360": "trace_printk_init_buffers", "27361": "trace_printk_seq", "27362": "trace_printk_start_comm", "27363": "trace_probe", "27364": "trace_probe_is_enabled", "27365": "trace_probe_is_registered", "27366": "trace_rcu_barrier", "27367": "trace_rcu_batch_end", "27368": "trace_rcu_batch_start", "27369": "trace_rcu_callback", "27370": "trace_rcu_dyntick", "27371": "trace_rcu_fqs", "27372": "trace_rcu_future_gp", "27373": "trace_rcu_future_grace_period", "27374": "trace_rcu_grace_period", "27375": "trace_rcu_grace_period_init", "27376": "trace_rcu_invoke_callback", "27377": "trace_rcu_invoke_kfree_callback", "27378": "trace_rcu_kfree_callback", "27379": "trace_rcu_nocb_wake", "27380": "trace_rcu_preempt_task", "27381": "trace_rcu_quiescent_state_report", "27382": "trace_rcu_torture_read", "27383": "trace_rcu_unlock_preempted_task", "27384": "trace_rcu_utilization", "27385": "trace_record_cmdline_disabled", "27386": "trace_recursion", "27387": "trace_recursion_clear", "27388": "trace_recursion_set", "27389": "trace_recursion_test", "27390": "trace_recursive_lock", "27391": "trace_recursive_unlock", "27392": "trace_reg", "27393": "trace_remove_event_call", "27394": "trace_save_cmdline", "27395": "trace_sched_kthread_stop", "27396": "trace_sched_kthread_stop_ret", "27397": "trace_sched_migrate_task", "27398": "trace_sched_move_numa", "27399": "trace_sched_pi_setprio", "27400": "trace_sched_process_fork", "27401": "trace_sched_process_hang", "27402": "trace_sched_stat_blocked", "27403": "trace_sched_stat_iowait", "27404": "trace_sched_stat_runtime", "27405": "trace_sched_stat_sleep", "27406": "trace_sched_stat_wait", "27407": "trace_sched_stick_numa", "27408": "trace_sched_swap_numa", "27409": "trace_sched_switch", "27410": "trace_sched_wait_task", "27411": "trace_sched_wake_idle_without_ipi", "27412": "trace_sched_wakeup", "27413": "trace_sched_wakeup_new", "27414": "trace_search_list", "27415": "trace_selftest", "27416": "trace_selftest_dynamic_test_func", "27417": "trace_selftest_dynamic_test_func2", "27418": "trace_selftest_function_recursion", "27419": "trace_selftest_function_regs", "27420": "trace_selftest_ops", "27421": "trace_selftest_recursion_cnt", "27422": "trace_selftest_regs_stat", "27423": "trace_selftest_startup_branch", "27424": "trace_selftest_startup_dynamic_tracing", "27425": "trace_selftest_startup_function", "27426": "trace_selftest_startup_function_graph", "27427": "trace_selftest_startup_irqsoff", "27428": "trace_selftest_startup_nop", "27429": "trace_selftest_startup_preemptirqsoff", "27430": "trace_selftest_startup_preemptoff", "27431": "trace_selftest_startup_sched_switch", "27432": "trace_selftest_startup_wakeup", "27433": "trace_selftest_test_dyn_cnt", "27434": "trace_selftest_test_dyn_func", "27435": "trace_selftest_test_global_cnt", "27436": "trace_selftest_test_global_func", "27437": "trace_selftest_test_probe1_cnt", "27438": "trace_selftest_test_probe1_func", "27439": "trace_selftest_test_probe2_cnt", "27440": "trace_selftest_test_probe2_func", "27441": "trace_selftest_test_probe3_cnt", "27442": "trace_selftest_test_probe3_func", "27443": "trace_selftest_test_recursion_func", "27444": "trace_selftest_test_recursion_safe_func", "27445": "trace_selftest_test_regs_func", "27446": "trace_seq", "27447": "trace_seq_bitmask", "27448": "trace_seq_bprintf", "27449": "trace_seq_buffer_ptr", "27450": "trace_seq_has_overflowed", "27451": "trace_seq_init", "27452": "trace_seq_path", "27453": "trace_seq_printf", "27454": "trace_seq_putc", "27455": "trace_seq_putmem", "27456": "trace_seq_putmem_hex", "27457": "trace_seq_puts", "27458": "trace_seq_to_buffer", "27459": "trace_seq_to_user", "27460": "trace_seq_used", "27461": "trace_seq_vprintf", "27462": "trace_set_clr_event", "27463": "trace_signal_deliver", "27464": "trace_signal_generate", "27465": "trace_softirq_context", "27466": "trace_softirq_entry", "27467": "trace_softirq_exit", "27468": "trace_softirq_raise", "27469": "trace_softirqs_enabled", "27470": "trace_softirqs_off", "27471": "trace_softirqs_on", "27472": "trace_stack_print", "27473": "trace_stat_seq_ops", "27474": "trace_state", "27475": "trace_stop_cmdline_recording", "27476": "trace_suspend_resume", "27477": "trace_task_newtask", "27478": "trace_test_and_set_recursion", "27479": "trace_test_buffer", "27480": "trace_test_buffer_cpu", "27481": "trace_tick_stop", "27482": "trace_timer_cancel", "27483": "trace_timer_expire_entry", "27484": "trace_timer_expire_exit", "27485": "trace_timer_init", "27486": "trace_timer_start", "27487": "trace_type", "27488": "trace_types", "27489": "trace_types_lock", "27490": "trace_uprobe", "27491": "trace_uprobe_filter", "27492": "trace_uprobe_register", "27493": "trace_user_enter", "27494": "trace_user_exit", "27495": "trace_valid_entry", "27496": "trace_vbprintk", "27497": "trace_vprintk", "27498": "trace_wake_event", "27499": "trace_wake_funcs", "27500": "trace_wake_hex", "27501": "trace_wake_print", "27502": "trace_wake_raw", "27503": "trace_wakeup_test_thread", "27504": "trace_workqueue_activate_work", "27505": "trace_workqueue_execute_end", "27506": "trace_workqueue_execute_start", "27507": "trace_workqueue_queue_work", "27508": "traceable", "27509": "traced", "27510": "tracefs", "27511": "tracefs_create_dir", "27512": "tracefs_create_file", "27513": "tracefs_remove", "27514": "tracefs_remove_recursive", "27515": "tracehook_signal_handler", "27516": "traceoff", "27517": "traceoff_count_probe_ops", "27518": "traceoff_count_trigger", "27519": "traceoff_count_trigger_ops", "27520": "traceoff_probe_ops", "27521": "traceoff_trigger", "27522": "traceoff_trigger_ops", "27523": "traceoff_trigger_print", "27524": "traceon", "27525": "traceon_count_probe_ops", "27526": "traceon_count_trigger", "27527": "traceon_count_trigger_ops", "27528": "traceon_probe_ops", "27529": "traceon_trigger", "27530": "traceon_trigger_ops", "27531": "traceon_trigger_print", "27532": "tracepoint", "27533": "tracepoint_iter_lock", "27534": "tracepoint_print_iter", "27535": "tracepoint_printk", "27536": "tracepoint_probe_register", "27537": "tracepoint_probe_unregister", "27538": "tracepoint_string", "27539": "tracepoint_synchronize_unregister", "27540": "tracepoints_ptrs", "27541": "traceprobe_command", "27542": "traceprobe_conflict_field_name", "27543": "traceprobe_free_probe_arg", "27544": "traceprobe_parse_probe_arg", "27545": "traceprobe_probes_write", "27546": "traceprobe_split_symbol_offset", "27547": "traceprobe_update_arg", "27548": "tracer", "27549": "tracer_enabled", "27550": "tracer_flags", "27551": "tracer_init", "27552": "tracer_opt", "27553": "tracer_stat", "27554": "tracer_tracing_is_on", "27555": "tracer_tracing_off", "27556": "tracer_tracing_on", "27557": "tracers", "27558": "traces", "27559": "tracing", "27560": "tracing_alloc_snapshot", "27561": "tracing_buffer_mask", "27562": "tracing_cpu", "27563": "tracing_cpumask", "27564": "tracing_disabled", "27565": "tracing_dl", "27566": "tracing_get_trace_entry", "27567": "tracing_graph_pause", "27568": "tracing_init_dentry", "27569": "tracing_is_disabled", "27570": "tracing_is_enabled", "27571": "tracing_is_on", "27572": "tracing_iter_reset", "27573": "tracing_lseek", "27574": "tracing_max_latency", "27575": "tracing_off", "27576": "tracing_off_permanent", "27577": "tracing_on", "27578": "tracing_open_generic", "27579": "tracing_record_cmdline", "27580": "tracing_reset", "27581": "tracing_reset_all_online_cpus", "27582": "tracing_reset_current", "27583": "tracing_reset_online_cpus", "27584": "tracing_sched_register", "27585": "tracing_sched_switch_trace", "27586": "tracing_sched_unregister", "27587": "tracing_sched_wakeup_trace", "27588": "tracing_selftest_disabled", "27589": "tracing_selftest_running", "27590": "tracing_set_tracer", "27591": "tracing_snapshot", "27592": "tracing_start", "27593": "tracing_start_cmdline_record", "27594": "tracing_start_function_trace", "27595": "tracing_start_sched_switch", "27596": "tracing_stat_fops", "27597": "tracing_stat_init", "27598": "tracing_stat_open", "27599": "tracing_stat_release", "27600": "tracing_stop", "27601": "tracing_stop_cmdline_record", "27602": "tracing_stop_function_trace", "27603": "tracing_stop_sched_switch", "27604": "tracing_stop_tr", "27605": "tracing_thresh", "27606": "tracing_update_buffers", "27607": "tramp_name", "27608": "trampoline", "27609": "trampoline_size", "27610": "trampoline_vaddr", "27611": "transfer_pid", "27612": "translate_user_vaddr", "27613": "trap", "27614": "trapnr", "27615": "tree", "27616": "tree_count", "27617": "tree_entry", "27618": "tree_list", "27619": "trees", "27620": "trial", "27621": "trial_cpus", "27622": "trialcs", "27623": "trigger", "27624": "trigger_all_cpu_backtrace", "27625": "trigger_allbutself_cpu_backtrace", "27626": "trigger_cmd_mutex", "27627": "trigger_commands", "27628": "trigger_data", "27629": "trigger_data_free", "27630": "trigger_disable_cmd", "27631": "trigger_enable", "27632": "trigger_enable_cmd", "27633": "trigger_load_balance", "27634": "trigger_next", "27635": "trigger_ops", "27636": "trigger_process_regex", "27637": "trigger_show", "27638": "trigger_snapshot_cmd", "27639": "trigger_stacktrace_cmd", "27640": "trigger_start", "27641": "trigger_stop", "27642": "trigger_traceoff_cmd", "27643": "trigger_traceon_cmd", "27644": "trigger_type", "27645": "triggers", "27646": "trim_init_extable", "27647": "trim_marked", "27648": "trs_count", "27649": "trs_state", "27650": "trsp", "27651": "true", "27652": "true_branch", "27653": "truesize", "27654": "truncated", "27655": "try_check_zero", "27656": "try_force_unload", "27657": "try_get_online_cpus", "27658": "try_misrouted_irq", "27659": "try_module_get", "27660": "try_one_irq", "27661": "try_online_node", "27662": "try_reader_grant", "27663": "try_release_module_ref", "27664": "try_stop_cpus", "27665": "try_stop_module", "27666": "try_to_del_timer_sync", "27667": "try_to_force_load", "27668": "try_to_free_swap", "27669": "try_to_freeze", "27670": "try_to_freeze_tasks", "27671": "try_to_grab_pending", "27672": "try_to_optimize_kprobe", "27673": "try_to_push_tasks", "27674": "try_to_suspend", "27675": "try_to_wake_up", "27676": "try_to_wake_up_local", "27677": "trycount", "27678": "trying", "27679": "trylock", "27680": "trylock_loop", "27681": "ts", "27682": "ts64", "27683": "ts_delta", "27684": "ts_new", "27685": "ts_nsec", "27686": "ts_raw", "27687": "ts_real", "27688": "ts_rem", "27689": "tsave", "27690": "tsc", "27691": "tsdelta", "27692": "tset", "27693": "tsk", "27694": "tsk1", "27695": "tsk2", "27696": "tsk_bw", "27697": "tsk_cache_hot", "27698": "tsk_cpus_allowed", "27699": "tsk_fork_get_node", "27700": "tsk_is_pi_blocked", "27701": "tsk_restore_flags", "27702": "tstamp", "27703": "tstamp_enabled", "27704": "tstamp_running", "27705": "tstamp_stopped", "27706": "tstat_hash_table", "27707": "tstat_hashentry", "27708": "tstat_lookup", "27709": "tstats_lookup_lock", "27710": "tstruct", "27711": "tt", "27712": "ttime_delta", "27713": "ttime_extend", "27714": "ttimer", "27715": "ttramp", "27716": "ttwu_activate", "27717": "ttwu_count", "27718": "ttwu_do_activate", "27719": "ttwu_do_wakeup", "27720": "ttwu_local", "27721": "ttwu_move_affine", "27722": "ttwu_move_balance", "27723": "ttwu_queue", "27724": "ttwu_queue_remote", "27725": "ttwu_remote", "27726": "ttwu_stat", "27727": "ttwu_wake_remote", "27728": "tty", "27729": "ttyS", "27730": "ttyS0", "27731": "ttyS1", "27732": "tty_audit_fork", "27733": "tty_devnum", "27734": "tty_kref_get", "27735": "tty_struct", "27736": "ttya", "27737": "ttyb", "27738": "ttype", "27739": "ttype_len", "27740": "tu", "27741": "turning_on", "27742": "tv", "27743": "tv1", "27744": "tv2", "27745": "tv3", "27746": "tv4", "27747": "tv5", "27748": "tv64", "27749": "tv_list", "27750": "tv_nsec", "27751": "tv_sec", "27752": "tv_usec", "27753": "tvec", "27754": "tvec_base", "27755": "tvec_bases", "27756": "two", "27757": "tx", "27758": "txc", "27759": "txc_p", "27760": "txn", "27761": "type", "27762": "type_info", "27763": "type_len", "27764": "type_str", "27765": "typedef", "27766": "typeof", "27767": "types", "27768": "tz", "27769": "tz_minuteswest", "27770": "u", "27771": "u16", "27772": "u32", "27773": "u64", "27774": "u64_to_ptr", "27775": "u8", "27776": "u_dst", "27777": "u_event", "27778": "u_src", "27779": "u_swap_area", "27780": "uaddr", "27781": "uaddr2", "27782": "uaf", "27783": "uargs", "27784": "uattr", "27785": "ubuf", "27786": "ubytes", "27787": "uc", "27788": "ucb", "27789": "uchunk", "27790": "udd", "27791": "udelay", "27792": "udelay_test_debugfs_file", "27793": "udelay_test_iterations", "27794": "udelay_test_lock", "27795": "udelay_test_open", "27796": "udelay_test_show", "27797": "udelay_test_single", "27798": "udelay_test_usecs", "27799": "udelay_test_write", "27800": "udelta", "27801": "uentry", "27802": "uevent", "27803": "uevent_filter", "27804": "uevent_helper", "27805": "uevent_helper_show", "27806": "uevent_helper_store", "27807": "uevent_seqnum", "27808": "uevent_seqnum_show", "27809": "ufd", "27810": "uid", "27811": "uid_cache_init", "27812": "uid_cachep", "27813": "uid_eq", "27814": "uid_gid_extent", "27815": "uid_gid_map", "27816": "uid_gt", "27817": "uid_gte", "27818": "uid_hash_find", "27819": "uid_hash_insert", "27820": "uid_hash_remove", "27821": "uid_keyring", "27822": "uid_lt", "27823": "uid_lte", "27824": "uid_m_show", "27825": "uid_m_start", "27826": "uid_map", "27827": "uid_t", "27828": "uid_valid", "27829": "uidhash_lock", "27830": "uidhash_node", "27831": "uidhash_table", "27832": "uidhashentry", "27833": "uinfo", "27834": "uint", "27835": "uint32_t", "27836": "uint64_t", "27837": "uiov", "27838": "ukey", "27839": "ullong", "27840": "ulong", "27841": "ulong2long", "27842": "um", "27843": "umask", "27844": "umh_complete", "27845": "umh_disable_depth", "27846": "umh_sysctl_lock", "27847": "umhelper_sem", "27848": "umod", "27849": "umode_t", "27850": "unaccount_event", "27851": "unaccount_event_cpu", "27852": "unaligned_dump_stack", "27853": "unaligned_enabled", "27854": "uname", "27855": "unapply_uprobe", "27856": "unbind_device", "27857": "unbind_work", "27858": "unblock_all_signals", "27859": "unblocked", "27860": "unbound_attrs", "27861": "unbound_pool_hash", "27862": "unbound_pwq_by_node", "27863": "unbound_release_work", "27864": "unbound_std_wq_attrs", "27865": "unc", "27866": "unc_len", "27867": "unclone_ctx", "27868": "undef", "27869": "undo", "27870": "undo_list", "27871": "unewset", "27872": "unext_key", "27873": "unfreeze_cgroup", "27874": "unhandled_signal", "27875": "uninitialized_var", "27876": "union", "27877": "unique_pmu", "27878": "unknown", "27879": "unknown_module_param_cb", "27880": "unknown_nmi_panic", "27881": "unlikely", "27882": "unlimited", "27883": "unlink_mod", "27884": "unloaded_info", "27885": "unlock", "27886": "unlock_and_return", "27887": "unlock_creds", "27888": "unlock_device_hotplug", "27889": "unlock_out", "27890": "unlock_page", "27891": "unlock_system_sleep", "27892": "unlock_task_sighand", "27893": "unlock_tasklist", "27894": "unlock_timer", "27895": "unlocked_ioctl", "27896": "unmap", "27897": "unmask", "27898": "unmask_irq", "27899": "unmask_threaded_irq", "27900": "unoptimize_kprobe", "27901": "unoptimizing_list", "27902": "unpack_orig_pfns", "27903": "unpark", "27904": "unpause_graph_tracing", "27905": "unreachable", "27906": "unreg", "27907": "unreg_event_syscall_enter", "27908": "unreg_event_syscall_exit", "27909": "unregister", "27910": "unregister_console", "27911": "unregister_cpu_notifier", "27912": "unregister_die_notifier", "27913": "unregister_event_command", "27914": "unregister_fair_sched_group", "27915": "unregister_ftrace_event", "27916": "unregister_ftrace_function", "27917": "unregister_ftrace_function_probe_func", "27918": "unregister_ftrace_graph", "27919": "unregister_ftrace_profiler", "27920": "unregister_handler_proc", "27921": "unregister_hotcpu_notifier", "27922": "unregister_irq_proc", "27923": "unregister_irqsoff_function", "27924": "unregister_jprobe", "27925": "unregister_jprobes", "27926": "unregister_kprobe", "27927": "unregister_kprobe_event", "27928": "unregister_kprobes", "27929": "unregister_kretprobe", "27930": "unregister_kretprobes", "27931": "unregister_module_notifier", "27932": "unregister_pm_notifier", "27933": "unregister_reboot_notifier", "27934": "unregister_restart_handler", "27935": "unregister_sched_domain_sysctl", "27936": "unregister_stat_tracer", "27937": "unregister_sysctl_table", "27938": "unregister_sysrq_key", "27939": "unregister_trace_block_bio_backmerge", "27940": "unregister_trace_block_bio_bounce", "27941": "unregister_trace_block_bio_complete", "27942": "unregister_trace_block_bio_frontmerge", "27943": "unregister_trace_block_bio_queue", "27944": "unregister_trace_block_bio_remap", "27945": "unregister_trace_block_getrq", "27946": "unregister_trace_block_plug", "27947": "unregister_trace_block_rq_abort", "27948": "unregister_trace_block_rq_complete", "27949": "unregister_trace_block_rq_insert", "27950": "unregister_trace_block_rq_issue", "27951": "unregister_trace_block_rq_remap", "27952": "unregister_trace_block_rq_requeue", "27953": "unregister_trace_block_sleeprq", "27954": "unregister_trace_block_split", "27955": "unregister_trace_block_unplug", "27956": "unregister_trace_kprobe", "27957": "unregister_trace_sched_migrate_task", "27958": "unregister_trace_sched_switch", "27959": "unregister_trace_sched_wakeup", "27960": "unregister_trace_sched_wakeup_new", "27961": "unregister_trace_sys_enter", "27962": "unregister_trace_sys_exit", "27963": "unregister_trace_uprobe", "27964": "unregister_trigger", "27965": "unregister_trigger_enable_disable_cmds", "27966": "unregister_uprobe_event", "27967": "unregister_wakeup_function", "27968": "unregistered", "27969": "unroll_tree_refs", "27970": "unsafe", "27971": "unsafe_ptr", "27972": "unset_module_core_ro_nx", "27973": "unset_module_init_ro_nx", "27974": "unshare", "27975": "unshare_fd", "27976": "unshare_files", "27977": "unshare_flags", "27978": "unshare_fs", "27979": "unshare_nsproxy_namespaces", "27980": "unshare_userns", "27981": "unsigned", "27982": "unstable", "27983": "untag_chunk", "27984": "unthrottle_cfs_rq", "27985": "unthrottle_offline_cfs_rqs", "27986": "unusable_pages", "27987": "unused", "27988": "unused1", "27989": "unused2", "27990": "unused3", "27991": "unused_crcs", "27992": "unused_dev_name", "27993": "unused_gpl_crcs", "27994": "unused_gpl_syms", "27995": "unused_syms", "27996": "unwind", "27997": "uoffset", "27998": "uoss", "27999": "uoss_ptr", "28000": "up", "28001": "up_console_sem", "28002": "up_read", "28003": "up_read_non_owner", "28004": "up_write", "28005": "update", "28006": "update_all_ops", "28007": "update_avg", "28008": "update_bitfield_fetch_param", "28009": "update_blocked_averages", "28010": "update_cfs_rq", "28011": "update_cfs_rq_blocked_load", "28012": "update_cfs_rq_h_load", "28013": "update_cfs_shares", "28014": "update_cgrp_time_from_cpuctx", "28015": "update_cgrp_time_from_event", "28016": "update_cnt", "28017": "update_cond_flag", "28018": "update_context_time", "28019": "update_count", "28020": "update_cpu_capacity", "28021": "update_cpu_load_active", "28022": "update_cpu_load_nohz", "28023": "update_cpumask", "28024": "update_cpumasks_hier", "28025": "update_curr", "28026": "update_curr_fair", "28027": "update_curr_idle", "28028": "update_curr_rt", "28029": "update_deref_fetch_param", "28030": "update_domain_attr", "28031": "update_domain_attr_tree", "28032": "update_done", "28033": "update_entity_load_avg", "28034": "update_event_printk", "28035": "update_event_times", "28036": "update_fast_ctr", "28037": "update_fast_timekeeper", "28038": "update_flag", "28039": "update_ftrace_function", "28040": "update_function_graph_func", "28041": "update_group_capacity", "28042": "update_group_times", "28043": "update_idle_cpu_load", "28044": "update_if_frozen", "28045": "update_iter", "28046": "update_load_add", "28047": "update_load_set", "28048": "update_load_sub", "28049": "update_lsm_rule", "28050": "update_max_interval", "28051": "update_max_tr", "28052": "update_max_tr_single", "28053": "update_min_vruntime", "28054": "update_next_balance", "28055": "update_nodemask", "28056": "update_nodemasks_hier", "28057": "update_numa_active_node_mask", "28058": "update_numa_stats", "28059": "update_pages_handler", "28060": "update_pages_work", "28061": "update_perf_cpu_limits", "28062": "update_process_times", "28063": "update_protections", "28064": "update_pvclock_gtod", "28065": "update_relax_domain_level", "28066": "update_rlimit_cpu", "28067": "update_rmtp", "28068": "update_rq_clock", "28069": "update_rq_clock_task", "28070": "update_rq_runnable_avg", "28071": "update_rt_migration", "28072": "update_runtime_enabled", "28073": "update_sd_lb_stats", "28074": "update_sd_pick_busiest", "28075": "update_sg_lb_stats", "28076": "update_state", "28077": "update_stats_curr_start", "28078": "update_stats_dequeue", "28079": "update_stats_enqueue", "28080": "update_stats_wait_end", "28081": "update_stats_wait_start", "28082": "update_symbol_cache", "28083": "update_sysctl", "28084": "update_task_scan_period", "28085": "update_tasks_cpumask", "28086": "update_tasks_flags", "28087": "update_tasks_nodemask", "28088": "update_thresh", "28089": "update_top_cache_domain", "28090": "update_traceon_count", "28091": "update_ts_time_stats", "28092": "update_vsyscall", "28093": "update_vsyscall_old", "28094": "update_vsyscall_tz", "28095": "update_wall_time", "28096": "update_watchdog", "28097": "update_watchdog_all_cpus", "28098": "upending", "28099": "upid", "28100": "upper_first", "28101": "upper_last", "28102": "uprobe", "28103": "uprobe_apply", "28104": "uprobe_buffer_disable", "28105": "uprobe_buffer_enable", "28106": "uprobe_buffer_get", "28107": "uprobe_buffer_init", "28108": "uprobe_buffer_put", "28109": "uprobe_buffer_refcnt", "28110": "uprobe_clear_state", "28111": "uprobe_consumer", "28112": "uprobe_copy_process", "28113": "uprobe_cpu_buffer", "28114": "uprobe_deny_signal", "28115": "uprobe_dispatch_data", "28116": "uprobe_dispatcher", "28117": "uprobe_dup_mmap", "28118": "uprobe_end_dup_mmap", "28119": "uprobe_event_define_fields", "28120": "uprobe_events_ops", "28121": "uprobe_exception_nb", "28122": "uprobe_filter_ctx", "28123": "uprobe_filter_event", "28124": "uprobe_filter_is_empty", "28125": "uprobe_free_utask", "28126": "uprobe_funcs", "28127": "uprobe_get_swbp_addr", "28128": "uprobe_get_trap_addr", "28129": "uprobe_is_active", "28130": "uprobe_list", "28131": "uprobe_lock", "28132": "uprobe_mmap", "28133": "uprobe_munmap", "28134": "uprobe_notify_resume", "28135": "uprobe_opcode_t", "28136": "uprobe_perf_close", "28137": "uprobe_perf_filter", "28138": "uprobe_perf_func", "28139": "uprobe_perf_open", "28140": "uprobe_post_sstep_notifier", "28141": "uprobe_pre_sstep_notifier", "28142": "uprobe_profile_ops", "28143": "uprobe_register", "28144": "uprobe_start_dup_mmap", "28145": "uprobe_task", "28146": "uprobe_trace_entry_head", "28147": "uprobe_trace_func", "28148": "uprobe_unregister", "28149": "uprobe_warn", "28150": "uprobe_write_opcode", "28151": "uprobes_fetch_type_table", "28152": "uprobes_mmap_hash", "28153": "uprobes_mmap_mutex", "28154": "uprobes_state", "28155": "uprobes_tree", "28156": "uprobes_treelock", "28157": "uptime", "28158": "uptr", "28159": "uretprobe_dispatcher", "28160": "uretprobe_perf_func", "28161": "uretprobe_trace_func", "28162": "uru", "28163": "us", "28164": "usable", "28165": "usage", "28166": "usage_bit", "28167": "usage_mask", "28168": "usage_str", "28169": "usage_traces", "28170": "use", "28171": "use_default", "28172": "use_dfl", "28173": "use_dfl_pwq", "28174": "use_kmalloc", "28175": "use_max_tr", "28176": "use_task_css_set_links", "28177": "use_ww_ctx", "28178": "usec_rem", "28179": "usecs", "28180": "usecs_rem", "28181": "usecs_str", "28182": "usecs_to_jiffies", "28183": "used", "28184": "used_map_cnt", "28185": "used_maps", "28186": "used_space", "28187": "user", "28188": "user_auxv", "28189": "user_disable_single_step", "28190": "user_enable_block_step", "28191": "user_enable_single_step", "28192": "user_extra", "28193": "user_filter", "28194": "user_lock_limit", "28195": "user_locked", "28196": "user_mask_ptr", "28197": "user_mode", "28198": "user_namespace", "28199": "user_namespaces_init", "28200": "user_ns", "28201": "user_ns_cachep", "28202": "user_only", "28203": "user_page", "28204": "user_regset", "28205": "user_regset_view", "28206": "user_stack", "28207": "user_stack_pointer", "28208": "user_struct", "28209": "user_tick", "28210": "user_tv", "28211": "usermodehelper_bset", "28212": "usermodehelper_disable", "28213": "usermodehelper_disabled", "28214": "usermodehelper_disabled_waitq", "28215": "usermodehelper_enable", "28216": "usermodehelper_inheritable", "28217": "usermodehelper_init", "28218": "usermodehelper_read_lock_wait", "28219": "usermodehelper_read_trylock", "28220": "usermodehelper_table", "28221": "userns_fixup_signal_uid", "28222": "userns_flags", "28223": "userns_get", "28224": "userns_install", "28225": "userns_may_setgroups", "28226": "userns_operations", "28227": "userns_put", "28228": "userns_state_mutex", "28229": "userpg", "28230": "users", "28231": "userstack_entry", "28232": "uset", "28233": "ushort", "28234": "using_ftrace_ops_list_func", "28235": "usize", "28236": "usleep_range", "28237": "uspertick", "28238": "usrc", "28239": "uss", "28240": "uss32", "28241": "uss_ptr", "28242": "ut", "28243": "utask", "28244": "uthese", "28245": "utilization_avg_contrib", "28246": "utilization_delta", "28247": "utilization_load_avg", "28248": "utime", "28249": "utimescaled", "28250": "utp", "28251": "uts", "28252": "uts_namespace", "28253": "uts_ns", "28254": "uts_proc_notify", "28255": "uts_sem", "28256": "utsname", "28257": "utsns_get", "28258": "utsns_install", "28259": "utsns_operations", "28260": "utsns_put", "28261": "utv", "28262": "utx", "28263": "uuid", "28264": "uvalue", "28265": "v", "28266": "v0", "28267": "v1", "28268": "v2", "28269": "va", "28270": "va_copy", "28271": "va_end", "28272": "va_list", "28273": "va_start", "28274": "vaddr", "28275": "vaddr_to_offset", "28276": "val", "28277": "val2", "28278": "val3", "28279": "val_a", "28280": "val_b", "28281": "val_idx", "28282": "valid", "28283": "valid_signal", "28284": "valid_state", "28285": "valid_vma", "28286": "validate_chain", "28287": "validate_change", "28288": "validate_coredump_safety", "28289": "validate_creds", "28290": "validate_creds_for_do_exit", "28291": "validate_prctl_map", "28292": "valp", "28293": "value", "28294": "value_regno", "28295": "value_size", "28296": "values", "28297": "var", "28298": "variable", "28299": "varray", "28300": "vattr", "28301": "vb", "28302": "vc", "28303": "vcaps", "28304": "vd", "28305": "vdiff", "28306": "vdso32_enabled", "28307": "vdso_enabled", "28308": "ve", "28309": "vec", "28310": "vec_nr", "28311": "vendor", "28312": "ver", "28313": "verbose", "28314": "verif_pid", "28315": "verifier_env", "28316": "verifier_stack_elem", "28317": "verifier_state", "28318": "verifier_state_list", "28319": "verify_export_symbols", "28320": "verify_opcode", "28321": "vermagic", "28322": "vernum", "28323": "vers", "28324": "versindex", "28325": "version", "28326": "version_code", "28327": "version_sysfs_builtin", "28328": "versions", "28329": "very_verbose", "28330": "vf", "28331": "vfork", "28332": "vfork_done", "28333": "vfree", "28334": "vfs_getattr", "28335": "vfs_read", "28336": "vfs_statfs", "28337": "vfsmount", "28338": "vfsmount_mark", "28339": "vg", "28340": "vh", "28341": "via", "28342": "victim", "28343": "view", "28344": "virq", "28345": "virt", "28346": "virt_addr_valid", "28347": "virt_exp", "28348": "virt_to_head_page", "28349": "virt_to_page", "28350": "virt_to_phys", "28351": "virtmem", "28352": "virtual", "28353": "visible", "28354": "vleft", "28355": "vm_area_cachep", "28356": "vm_area_struct", "28357": "vm_dirty_bytes", "28358": "vm_dirty_ratio", "28359": "vm_end", "28360": "vm_fault", "28361": "vm_file", "28362": "vm_flags", "28363": "vm_flags_t", "28364": "vm_highmem_is_dirtyable", "28365": "vm_mm", "28366": "vm_next", "28367": "vm_operations_struct", "28368": "vm_ops", "28369": "vm_page_prot", "28370": "vm_pgoff", "28371": "vm_prev", "28372": "vm_rb", "28373": "vm_start", "28374": "vm_stat_account", "28375": "vm_swappiness", "28376": "vm_table", "28377": "vm_unacct_memory", "28378": "vma", "28379": "vma_dup_policy", "28380": "vma_end", "28381": "vma_has_uprobes", "28382": "vma_interval_tree_foreach", "28383": "vma_interval_tree_insert_after", "28384": "vma_migratable", "28385": "vma_pages", "28386": "vma_policy", "28387": "vma_policy_mof", "28388": "vma_size", "28389": "vmacache", "28390": "vmacache_flush", "28391": "vmacache_seqnum", "28392": "vmalloc", "28393": "vmalloc_exec", "28394": "vmalloc_sync_all", "28395": "vmalloc_to_page", "28396": "vmalloc_user", "28397": "vmcoreinfo_data", "28398": "vmcoreinfo_max_size", "28399": "vmcoreinfo_note", "28400": "vmcoreinfo_size", "28401": "vmf", "28402": "vmstart", "28403": "vnr", "28404": "void", "28405": "vpid", "28406": "vprintk", "28407": "vruntime", "28408": "vscnprintf", "28409": "vsize", "28410": "vsnprintf", "28411": "vtime_account_idle", "28412": "vtime_account_system", "28413": "vtime_account_user", "28414": "vtime_accounting_enabled", "28415": "vtime_common_account_irq_enter", "28416": "vtime_common_task_switch", "28417": "vtime_delta", "28418": "vtime_gen_account_irq_exit", "28419": "vtime_guest_enter", "28420": "vtime_guest_exit", "28421": "vtime_init_idle", "28422": "vtime_seqlock", "28423": "vtime_snap", "28424": "vtime_snap_whence", "28425": "vtime_task_switch", "28426": "vtime_user_enter", "28427": "vtime_user_exit", "28428": "vzalloc", "28429": "w", "28430": "w1", "28431": "w2", "28432": "w4", "28433": "w8", "28434": "wait", "28435": "wait4", "28436": "wait_again", "28437": "wait_bit", "28438": "wait_bit_action_f", "28439": "wait_bit_key", "28440": "wait_bit_queue", "28441": "wait_blkd_tasks", "28442": "wait_chldexit", "28443": "wait_count", "28444": "wait_done", "28445": "wait_event", "28446": "wait_event_interruptible", "28447": "wait_event_interruptible_timeout", "28448": "wait_for_auditd", "28449": "wait_for_completion", "28450": "wait_for_completion_killable", "28451": "wait_for_device_probe", "28452": "wait_for_helper", "28453": "wait_for_kprobe_optimizer", "28454": "wait_for_threads", "28455": "wait_for_vfork_done", "28456": "wait_list", "28457": "wait_lock", "28458": "wait_max", "28459": "wait_on_bit", "28460": "wait_on_page_locked", "28461": "wait_on_pipe", "28462": "wait_queue_head_t", "28463": "wait_queue_t", "28464": "wait_rcu_gp", "28465": "wait_start", "28466": "wait_sum", "28467": "wait_table", "28468": "wait_table_bits", "28469": "wait_task_inactive", "28470": "wait_woken", "28471": "waiter", "28472": "waiters", "28473": "waiters_leftmost", "28474": "waiters_pending", "28475": "waitid", "28476": "waiting", "28477": "waitq", "28478": "waitqueue_active", "28479": "waittime", "28480": "waittime_stamp", "28481": "wake", "28482": "wake_active", "28483": "wake_affine", "28484": "wake_atomic_t_function", "28485": "wake_bit_function", "28486": "wake_cpu", "28487": "wake_depth", "28488": "wake_enabled", "28489": "wake_entry", "28490": "wake_flags", "28491": "wake_idx", "28492": "wake_list", "28493": "wake_nocb_leader", "28494": "wake_threads_waitq", "28495": "wake_type", "28496": "wake_up", "28497": "wake_up_all", "28498": "wake_up_all_idle_cpus", "28499": "wake_up_atomic_t", "28500": "wake_up_bit", "28501": "wake_up_full_nohz_cpu", "28502": "wake_up_idle_cpu", "28503": "wake_up_if_idle", "28504": "wake_up_interruptible", "28505": "wake_up_new_task", "28506": "wake_up_nohz_cpu", "28507": "wake_up_process", "28508": "wake_up_state", "28509": "wake_up_worker", "28510": "wake_wide", "28511": "wakee", "28512": "wakee_flip_decay_ts", "28513": "wakee_flips", "28514": "wakelock", "28515": "wakelock_lookup_add", "28516": "wakelocks_gc", "28517": "wakelocks_gc_count", "28518": "wakelocks_limit_exceeded", "28519": "wakelocks_lock", "28520": "wakelocks_lru_add", "28521": "wakelocks_lru_list", "28522": "wakelocks_lru_most_recent", "28523": "wakelocks_tree", "28524": "wakeme_after_rcu", "28525": "wakeup", "28526": "wakeup_busy", "28527": "wakeup_count", "28528": "wakeup_cpu", "28529": "wakeup_current_cpu", "28530": "wakeup_dl", "28531": "wakeup_dl_tracer", "28532": "wakeup_dl_tracer_init", "28533": "wakeup_events", "28534": "wakeup_flag_changed", "28535": "wakeup_full", "28536": "wakeup_function_set", "28537": "wakeup_gran", "28538": "wakeup_graph_entry", "28539": "wakeup_graph_return", "28540": "wakeup_interval", "28541": "wakeup_lock", "28542": "wakeup_preempt_entity", "28543": "wakeup_print_header", "28544": "wakeup_print_line", "28545": "wakeup_prio", "28546": "wakeup_reset", "28547": "wakeup_rt", "28548": "wakeup_rt_tracer", "28549": "wakeup_rt_tracer_init", "28550": "wakeup_set_flag", "28551": "wakeup_softirqd", "28552": "wakeup_source", "28553": "wakeup_source_add", "28554": "wakeup_source_register", "28555": "wakeup_source_unregister", "28556": "wakeup_task", "28557": "wakeup_test_data", "28558": "wakeup_trace", "28559": "wakeup_trace_close", "28560": "wakeup_trace_open", "28561": "wakeup_tracer", "28562": "wakeup_tracer_call", "28563": "wakeup_tracer_init", "28564": "wakeup_tracer_reset", "28565": "wakeup_tracer_start", "28566": "wakeup_tracer_stop", "28567": "wakeup_watermark", "28568": "wakewrite", "28569": "walk", "28570": "walk_iomem_res", "28571": "walk_pred_tree", "28572": "walk_return", "28573": "walk_system_ram_range", "28574": "walk_system_ram_res", "28575": "walk_tg_tree", "28576": "walk_tg_tree_from", "28577": "walker", "28578": "wall_to_monotonic", "28579": "want", "28580": "want_affine", "28581": "want_early", "28582": "wants_signal", "28583": "warn", "28584": "warn_bad_state", "28585": "warn_cpu_offline", "28586": "warn_deprecated_v2", "28587": "warn_failed_init_tracer", "28588": "warn_legacy_capability_use", "28589": "warn_no_rtc", "28590": "warn_no_thread", "28591": "warn_slowpath_common", "28592": "warn_slowpath_fmt", "28593": "warn_slowpath_fmt_taint", "28594": "warn_slowpath_null", "28595": "warn_sysctl_write", "28596": "warned", "28597": "warned_broken_hierarchy", "28598": "warp_clock", "28599": "was", "28600": "was_freezing", "28601": "was_frozen", "28602": "was_periodic", "28603": "was_set", "28604": "was_stopped", "28605": "watch", "28606": "watch_found", "28607": "watchdog", "28608": "watchdog_cleanup", "28609": "watchdog_disable", "28610": "watchdog_disable_all_cpus", "28611": "watchdog_enable", "28612": "watchdog_enable_all_cpus", "28613": "watchdog_enabled", "28614": "watchdog_ev", "28615": "watchdog_hrtimer", "28616": "watchdog_interrupt_count", "28617": "watchdog_nmi_disable", "28618": "watchdog_nmi_disable_all", "28619": "watchdog_nmi_enable", "28620": "watchdog_nmi_enable_all", "28621": "watchdog_nmi_touch", "28622": "watchdog_overflow_callback", "28623": "watchdog_param", "28624": "watchdog_proc_mutex", "28625": "watchdog_running", "28626": "watchdog_set_prio", "28627": "watchdog_should_run", "28628": "watchdog_stamp", "28629": "watchdog_task", "28630": "watchdog_threads", "28631": "watchdog_thresh", "28632": "watchdog_timer_fn", "28633": "watchdog_touch_ts", "28634": "watchdog_user_enabled", "28635": "watches", "28636": "watermark", "28637": "way", "28638": "wchar", "28639": "wcount", "28640": "wd_attr", "28641": "wd_hw_attr", "28642": "wd_last", "28643": "wd_now", "28644": "we", "28645": "weak", "28646": "weight", "28647": "weighted_cpuload", "28648": "wfc", "28649": "wg", "28650": "what", "28651": "what2act", "28652": "when", "28653": "whence", "28654": "which", "28655": "which_clock", "28656": "whichcpu", "28657": "while", "28658": "while_each_pid_task", "28659": "while_each_pid_thread", "28660": "while_each_thread", "28661": "while_for_each_event_file", "28662": "while_for_each_ftrace_op", "28663": "while_for_each_ftrace_rec", "28664": "who", "28665": "why", "28666": "width", "28667": "will", "28668": "windows", "28669": "with", "28670": "within", "28671": "within_kprobe_blacklist", "28672": "within_module", "28673": "within_module_core", "28674": "within_module_init", "28675": "without", "28676": "wl", "28677": "wlist", "28678": "wm", "28679": "wmb", "28680": "woke_up", "28681": "woken", "28682": "woken_wake_function", "28683": "word", "28684": "words", "28685": "work", "28686": "work1", "28687": "work2", "28688": "work_buf", "28689": "work_busy", "28690": "work_color", "28691": "work_color_to_flags", "28692": "work_data_bits", "28693": "work_debug_descr", "28694": "work_debug_hint", "28695": "work_exited", "28696": "work_fixup_activate", "28697": "work_fixup_free", "28698": "work_fixup_init", "28699": "work_flags", "28700": "work_for_cpu", "28701": "work_for_cpu_fn", "28702": "work_func_t", "28703": "work_is_canceling", "28704": "work_list", "28705": "work_next_color", "28706": "work_on_cpu", "28707": "work_pending", "28708": "work_static", "28709": "work_struct", "28710": "worker", "28711": "worker_attach_to_pool", "28712": "worker_clr_flags", "28713": "worker_detach_from_pool", "28714": "worker_enter_idle", "28715": "worker_flags", "28716": "worker_ida", "28717": "worker_leave_idle", "28718": "worker_pool", "28719": "worker_pool_assign_id", "28720": "worker_pool_idr", "28721": "worker_ptr", "28722": "worker_set_flags", "28723": "worker_thread", "28724": "workers", "28725": "worklist", "28726": "workp", "28727": "workqueue", "28728": "workqueue_attrs", "28729": "workqueue_congested", "28730": "workqueue_cpu_down_callback", "28731": "workqueue_freezing", "28732": "workqueue_set_max_active", "28733": "workqueue_struct", "28734": "workqueue_sysfs_register", "28735": "workqueue_sysfs_unregister", "28736": "workqueues", "28737": "works", "28738": "would", "28739": "wq", "28740": "wq_barrier", "28741": "wq_barrier_func", "28742": "wq_busy", "28743": "wq_calc_node_cpumask", "28744": "wq_clamp_max_active", "28745": "wq_cpumask_show", "28746": "wq_cpumask_store", "28747": "wq_dev", "28748": "wq_device", "28749": "wq_device_release", "28750": "wq_flusher", "28751": "wq_mayday_lock", "28752": "wq_nice_show", "28753": "wq_nice_store", "28754": "wq_numa_enabled", "28755": "wq_numa_init", "28756": "wq_numa_possible_cpumask", "28757": "wq_numa_show", "28758": "wq_numa_store", "28759": "wq_pool_ids_show", "28760": "wq_pool_mutex", "28761": "wq_power_efficient", "28762": "wq_subsys", "28763": "wq_sysfs_groups", "28764": "wq_sysfs_init", "28765": "wq_sysfs_prep_attrs", "28766": "wq_sysfs_unbound_attrs", "28767": "wq_unbind_fn", "28768": "wq_update_unbound_numa", "28769": "wq_update_unbound_numa_attrs_buf", "28770": "wq_worker_sleeping", "28771": "wq_worker_waking_up", "28772": "wqattrs_equal", "28773": "wqattrs_hash", "28774": "wrap_max", "28775": "wrap_min", "28776": "wraps", "28777": "write", "28778": "write_bytes", "28779": "write_can_lock", "28780": "write_char", "28781": "write_ctr", "28782": "write_delay", "28783": "write_holdtime", "28784": "write_irq_affinity", "28785": "write_iteration", "28786": "write_lock", "28787": "write_lock_irq", "28788": "write_lock_irqsave", "28789": "write_mask", "28790": "write_mem_msg", "28791": "write_page", "28792": "write_profile", "28793": "write_s64", "28794": "write_seqcount_begin", "28795": "write_seqcount_end", "28796": "write_seqlock", "28797": "write_seqlock_irqsave", "28798": "write_sequnlock", "28799": "write_sequnlock_irqrestore", "28800": "write_stamp", "28801": "write_syscalls", "28802": "write_u64", "28803": "write_unlock", "28804": "write_unlock_irq", "28805": "write_unlock_irqrestore", "28806": "write_waitq", "28807": "write_waittime", "28808": "writelock", "28809": "writer_task", "28810": "writer_tasks", "28811": "writes", "28812": "writeunlock", "28813": "written", "28814": "wrk", "28815": "ws", "28816": "wtm", "28817": "ww", "28818": "ww_acquire_ctx", "28819": "ww_class", "28820": "ww_ctx", "28821": "ww_mutex", "28822": "ww_mutex_deadlock_injection", "28823": "ww_mutex_lock_acquired", "28824": "ww_mutex_set_context_fastpath", "28825": "ww_mutex_set_context_slowpath", "28826": "ww_mutex_unlock", "28827": "x", "28828": "x86", "28829": "xacct_add_tsk", "28830": "xchg", "28831": "xinterval", "28832": "xlate", "28833": "xmitcsum", "28834": "xol_add_vma", "28835": "xol_area", "28836": "xol_free_insn_slot", "28837": "xol_get_insn_slot", "28838": "xol_take_insn_slot", "28839": "xol_vaddr", "28840": "xt", "28841": "xtime_interval", "28842": "xtime_nsec", "28843": "xtime_remainder", "28844": "xtime_sec", "28845": "xtime_update", "28846": "xyz", "28847": "y", "28848": "year", "28849": "yield", "28850": "yield_task", "28851": "yield_task_fair", "28852": "yield_task_rt", "28853": "yield_to", "28854": "yield_to_task", "28855": "yield_to_task_fair", "28856": "yielded", "28857": "yld_count", "28858": "you", "28859": "your", "28860": "z", "28861": "zalloc_cpumask_var", "28862": "zalloc_cpumask_var_node", "28863": "zap_class", "28864": "zap_other_threads", "28865": "zap_pid_ns_processes", "28866": "zero", "28867": "zero_buf", "28868": "zero_buf_sz", "28869": "zero_cpu_stall_ticks", "28870": "zombie", "28871": "zone", "28872": "zone_end", "28873": "zone_end_pfn", "28874": "zone_found", "28875": "zone_page_state", "28876": "zone_reclaim_mode", "28877": "zone_start", "28878": "zone_start_pfn", "28879": "zones", "28880": "{", "28881": "|", "28882": "||", "28883": "}", "28884": "~"}